"use strict";

var Module = typeof Module !== "undefined" ? Module : {};

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = function(status, toThrow) {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = typeof window === "object";

var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module["ENVIRONMENT"]) {
 throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
}

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

var nodeFS;

var nodePath;

if (ENVIRONMENT_IS_NODE) {
 if (!(typeof process === "object" && typeof require === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = require("path").dirname(scriptDirectory) + "/";
 } else {
  scriptDirectory = __dirname + "/";
 }
 read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  return nodeFS["readFileSync"](filename, binary ? null : "utf8");
 };
 readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 readAsync = function readAsync(filename, onload, onerror) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  nodeFS["readFile"](filename, function(err, data) {
   if (err) onerror(err); else onload(data.buffer);
  });
 };
 if (process["argv"].length > 1) {
  thisProgram = process["argv"][1].replace(/\\/g, "/");
 }
 arguments_ = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 });
 process["on"]("unhandledRejection", abort);
 quit_ = function(status, toThrow) {
  if (keepRuntimeAlive()) {
   process["exitCode"] = status;
   throw toThrow;
  }
  process["exit"](status);
 };
 Module["inspect"] = function() {
  return "[Emscripten Module object]";
 };
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof process === "object" && typeof require === "function" || typeof window === "object" || typeof importScripts === "function") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 if (typeof read != "undefined") {
  read_ = function shell_read(f) {
   return read(f);
  };
 }
 readBinary = function readBinary(f) {
  var data;
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 readAsync = function readAsync(f, onload, onerror) {
  setTimeout(function() {
   onload(readBinary(f));
  }, 0);
 };
 if (typeof scriptArgs != "undefined") {
  arguments_ = scriptArgs;
 } else if (typeof arguments != "undefined") {
  arguments_ = arguments;
 }
 if (typeof quit === "function") {
  quit_ = function(status) {
   quit(status);
  };
 }
 if (typeof print !== "undefined") {
  if (typeof console === "undefined") console = {};
  console.log = print;
  console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (typeof document !== "undefined" && document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 if (!(typeof window === "object" || typeof importScripts === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 {
  read_ = function(url) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  };
  if (ENVIRONMENT_IS_WORKER) {
   readBinary = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   };
  }
  readAsync = function(url, onload, onerror) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, true);
   xhr.responseType = "arraybuffer";
   xhr.onload = function() {
    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
     onload(xhr.response);
     return;
    }
    onerror();
   };
   xhr.onerror = onerror;
   xhr.send(null);
  };
 }
 setWindowTitle = function(title) {
  document.title = title;
 };
} else {
 throw new Error("environment detection error");
}

var out = Module["print"] || console.log.bind(console);

var err = Module["printErr"] || console.warn.bind(console);

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (!Object.getOwnPropertyDescriptor(Module, "arguments")) {
 Object.defineProperty(Module, "arguments", {
  configurable: true,
  get: function() {
   abort("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (!Object.getOwnPropertyDescriptor(Module, "thisProgram")) {
 Object.defineProperty(Module, "thisProgram", {
  configurable: true,
  get: function() {
   abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (Module["quit"]) quit_ = Module["quit"];

if (!Object.getOwnPropertyDescriptor(Module, "quit")) {
 Object.defineProperty(Module, "quit", {
  configurable: true,
  get: function() {
   abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

assert(typeof Module["memoryInitializerPrefixURL"] === "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["pthreadMainPrefixURL"] === "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["cdInitializerPrefixURL"] === "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["filePackagePrefixURL"] === "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["read"] === "undefined", "Module.read option was removed (modify read_ in JS)");

assert(typeof Module["readAsync"] === "undefined", "Module.readAsync option was removed (modify readAsync in JS)");

assert(typeof Module["readBinary"] === "undefined", "Module.readBinary option was removed (modify readBinary in JS)");

assert(typeof Module["setWindowTitle"] === "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");

assert(typeof Module["TOTAL_MEMORY"] === "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");

if (!Object.getOwnPropertyDescriptor(Module, "read")) {
 Object.defineProperty(Module, "read", {
  configurable: true,
  get: function() {
   abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "readAsync")) {
 Object.defineProperty(Module, "readAsync", {
  configurable: true,
  get: function() {
   abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "readBinary")) {
 Object.defineProperty(Module, "readBinary", {
  configurable: true,
  get: function() {
   abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "setWindowTitle")) {
 Object.defineProperty(Module, "setWindowTitle", {
  configurable: true,
  get: function() {
   abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";

var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";

var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";

var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");

var STACK_ALIGN = 16;

function alignMemory(size, factor) {
 if (!factor) factor = STACK_ALIGN;
 return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;

 case "i16":
  return 2;

 case "i32":
  return 4;

 case "i64":
  return 8;

 case "float":
  return 4;

 case "double":
  return 8;

 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = Number(type.substr(1));
    assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}

function warnOnce(text) {
 if (!warnOnce.shown) warnOnce.shown = {};
 if (!warnOnce.shown[text]) {
  warnOnce.shown[text] = 1;
  err(text);
 }
}

function convertJsFunctionToWasm(func, sig) {
 return func;
}

var freeTableIndexes = [];

var functionsInTableMap;

function getEmptyTableSlot() {
 if (freeTableIndexes.length) {
  return freeTableIndexes.pop();
 }
 try {
  wasmTable.grow(1);
 } catch (err) {
  if (!(err instanceof RangeError)) {
   throw err;
  }
  throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
 }
 return wasmTable.length - 1;
}

function addFunctionWasm(func, sig) {
 if (!functionsInTableMap) {
  functionsInTableMap = new WeakMap();
  for (var i = 0; i < wasmTable.length; i++) {
   var item = wasmTable.get(i);
   if (item) {
    functionsInTableMap.set(item, i);
   }
  }
 }
 if (functionsInTableMap.has(func)) {
  return functionsInTableMap.get(func);
 }
 var ret = getEmptyTableSlot();
 try {
  wasmTable.set(ret, func);
 } catch (err) {
  if (!(err instanceof TypeError)) {
   throw err;
  }
  assert(typeof sig !== "undefined", "Missing signature argument to addFunction: " + func);
  var wrapped = convertJsFunctionToWasm(func, sig);
  wasmTable.set(ret, wrapped);
 }
 functionsInTableMap.set(func, ret);
 return ret;
}

function removeFunction(index) {
 functionsInTableMap.delete(wasmTable.get(index));
 freeTableIndexes.push(index);
}

function addFunction(func, sig) {
 assert(typeof func !== "undefined");
 return addFunctionWasm(func, sig);
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
 tempRet0 = value;
};

var getTempRet0 = function() {
 return tempRet0;
};

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

if (!Object.getOwnPropertyDescriptor(Module, "wasmBinary")) {
 Object.defineProperty(Module, "wasmBinary", {
  configurable: true,
  get: function() {
   abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

var noExitRuntime = Module["noExitRuntime"] || true;

if (!Object.getOwnPropertyDescriptor(Module, "noExitRuntime")) {
 Object.defineProperty(Module, "noExitRuntime", {
  configurable: true,
  get: function() {
   abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

var WebAssembly = {
 Memory: function(opts) {
  this.buffer = new ArrayBuffer(opts["initial"] * 65536);
 },
 Module: function(binary) {},
 Instance: function(module, info) {
  this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var _emval_decref = env._emval_decref;
 var _embind_register_class = env._embind_register_class;
 var _embind_register_class_constructor = env._embind_register_class_constructor;
 var _embind_register_class_class_function = env._embind_register_class_class_function;
 var _emval_incref = env._emval_incref;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var _emval_new_cstring = env._emval_new_cstring;
 var _emval_get_property = env._emval_get_property;
 var _emval_as = env._emval_as;
 var _emval_run_destructors = env._emval_run_destructors;
 var _emval_take_value = env._emval_take_value;
 var emscripten_log = env.emscripten_log;
 var _emval_new_object = env._emval_new_object;
 var _emval_set_property = env._emval_set_property;
 var _emval_new_array = env._emval_new_array;
 var _emval_get_global = env._emval_get_global;
 var _emval_get_method_caller = env._emval_get_method_caller;
 var _emval_call_method = env._emval_call_method;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var __syscall5 = env.__sys_open;
 var __wasi_fd_close = env.fd_close;
 var __syscall221 = env.__sys_fcntl64;
 var __syscall54 = env.__sys_ioctl;
 var __wasi_fd_write = env.fd_write;
 var __wasi_fd_read = env.fd_read;
 var abort = env.abort;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var strftime_l = env.strftime_l;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var setTempRet0 = env.setTempRet0;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var segfault = env.segfault;
 var alignfault = env.alignfault;
 var __stack_pointer = 5274704;
 var __stack_end = 0;
 var __stack_base = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function $28anonymous_20namespace_29__HarvestGeneralBody_28double_20const__2c_20int_2c_20int_2c_20int_2c_20double_2c_20double_2c_20double_2c_20int_2c_20double__2c_20double__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $21 = __stack_pointer - 416 | 0;
 __stack_pointer = $21;
 $18 = $3 * .9;
 $14 = log($4 * 1.1 / $18) / .6931471805599453 * 40;
 label$1: {
  if (Math_abs($14) < 2147483648) {
   $24 = ~~$14;
   break label$1;
  }
  $24 = -2147483648;
 }
 $12 = $24 + 1 | 0;
 $50 = operator_20new_5b_5d_28unsigned_20long_29(($12 & 536870911) != ($12 | 0) ? -1 : $12 << 3);
 if (($24 | 0) >= 0) {
  $15 = $12 & 1;
  if ($24) {
   $9 = $12 & -2;
   while (1) {
    $10 = $8 | 1;
    SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $50 | 0, 0, $18 * exp2(+($10 | 0) / 40));
    $8 = $8 + 2 | 0;
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $50 | 0, 0, $18 * exp2(+($8 | 0) / 40));
    $9 = $9 - 2 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  if ($15) {
   SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $50 | 0, 0, $18 * exp2(+($8 + 1 | 0) / 40));
  }
  $45 = SAFE_HEAP_LOAD_f64_8_8($50, 0);
 }
 $19 = +($2 | 0);
 $8 = ($5 | 0) < 12 ? $5 : 12;
 $26 = ($8 | 0) > 1 ? $8 : 1;
 $14 = +($26 | 0);
 $18 = $19 / $14;
 $25 = ($18 + $18) / $45;
 label$7: {
  if (Math_abs($25) < 2147483648) {
   $9 = ~~$25;
   break label$7;
  }
  $9 = -2147483648;
 }
 $9 = $9 << 1;
 $25 = +($1 | 0);
 $29 = Math_ceil($25 / $14);
 label$9: {
  if (Math_abs($29) < 2147483648) {
   $15 = ~~$29;
   break label$9;
  }
  $15 = -2147483648;
 }
 $16 = GetSuitableFFTSize(($9 + $15 | 0) + 5 | 0);
 $9 = $16 << 3;
 $51 = ($16 & 536870911) != ($16 | 0) ? -1 : $9;
 $2 = operator_20new_5b_5d_28unsigned_20long_29($51);
 $52 = ($16 & 268435455) != ($16 | 0) ? -1 : $16 << 4;
 $56 = operator_20new_5b_5d_28unsigned_20long_29($52);
 if (($16 | 0) >= 1) {
  memset($2, 0, $9);
 }
 label$12: {
  if (($8 | 0) <= 1) {
   if (($1 | 0) < 1) {
    break label$12;
   }
   memcpy($2, $0, $1 << 3);
   break label$12;
  }
  $14 = Math_ceil(140 / $14) * $14;
  label$14: {
   if (Math_abs($14) < 2147483648) {
    $17 = ~~$14;
    break label$14;
   }
   $17 = -2147483648;
  }
  $22 = $17 << 1;
  $11 = $22 + $1 | 0;
  $8 = ($11 & 536870911) != ($11 | 0) ? -1 : $11 << 3;
  $23 = operator_20new_5b_5d_28unsigned_20long_29($8);
  if (($11 | 0) >= 1) {
   memset($23, 0, ($17 << 4) + ($1 << 3) | 0);
  }
  $8 = operator_20new_5b_5d_28unsigned_20long_29($8);
  label$17: {
   if (($17 | 0) < 1) {
    break label$17;
   }
   $5 = $17 & 7;
   $14 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $10 = 0;
   if ($17 - 1 >>> 0 >= 7) {
    $13 = $17 & -8;
    while (1) {
     $9 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($9 + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 8) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 16) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 24) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 32) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 40) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 48) + $8 | 0, 0, $14);
     SAFE_HEAP_STORE_f64_8_8(($9 | 56) + $8 | 0, 0, $14);
     $10 = $10 + 8 | 0;
     $13 = $13 - 8 | 0;
     if ($13) {
      continue;
     }
     break;
    }
   }
   if (!$5) {
    break label$17;
   }
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $8 | 0, 0, $14);
    $10 = $10 + 1 | 0;
    $5 = $5 - 1 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  $9 = $1 + $17 | 0;
  if (($1 | 0) >= 1) {
   $10 = $17 + 1 | 0;
   memcpy(($17 << 3) + $8 | 0, $0, (($9 | 0) > ($10 | 0) ? $9 : $10) - $17 << 3);
  }
  if (($17 | 0) < ($22 | 0)) {
   $14 = SAFE_HEAP_LOAD_f64_8_8((($1 << 3) + $0 | 0) - 8 | 0, 0);
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $8 | 0, 0, $14);
    $9 = $9 + 1 | 0;
    if (($11 | 0) > ($9 | 0)) {
     continue;
    }
    break;
   }
  }
  decimate($8, $11, $26, $23);
  if (($15 | 0) >= 1) {
   memcpy($2, (($17 | 0) / ($26 | 0) << 3) + $23 | 0, $15 << 3);
  }
  operator_20delete_5b_5d_28void__29($8);
  operator_20delete_5b_5d_28void__29($23);
 }
 label$25: {
  if (($15 | 0) < 1) {
   break label$25;
  }
  $10 = $15 & 3;
  $11 = $15 - 1 | 0;
  label$26: {
   if ($11 >>> 0 < 3) {
    $14 = 0;
    $8 = 0;
    break label$26;
   }
   $5 = $15 & -4;
   $14 = 0;
   $8 = 0;
   while (1) {
    $9 = $8 << 3;
    $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($9 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 8) + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 16) + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 24) + $2 | 0, 0);
    $8 = $8 + 4 | 0;
    $5 = $5 - 4 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  if ($10) {
   while (1) {
    $14 = $14 + SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $2 | 0, 0);
    $8 = $8 + 1 | 0;
    $10 = $10 - 1 | 0;
    if ($10) {
     continue;
    }
    break;
   }
  }
  $10 = $15 & 3;
  $14 = $14 / +($15 | 0);
  $8 = 0;
  if ($11 >>> 0 >= 3) {
   $5 = $15 & -4;
   while (1) {
    $9 = $8 << 3;
    $11 = $9 + $2 | 0;
    SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0) - $14);
    $11 = ($9 | 8) + $2 | 0;
    SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0) - $14);
    $11 = ($9 | 16) + $2 | 0;
    SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0) - $14);
    $9 = ($9 | 24) + $2 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $14);
    $8 = $8 + 4 | 0;
    $5 = $5 - 4 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  if (!$10) {
   break label$25;
  }
  while (1) {
   $9 = ($8 << 3) + $2 | 0;
   SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $14);
   $8 = $8 + 1 | 0;
   $10 = $10 - 1 | 0;
   if ($10) {
    continue;
   }
   break;
  }
 }
 if (($15 | 0) < ($16 | 0)) {
  memset(($15 << 3) + $2 | 0, 0, $16 - $15 << 3);
 }
 fft_plan_dft_r2c_1d($21 + 360 | 0, $16, $2, $56, 3);
 $8 = $21 + 392 | 0;
 SAFE_HEAP_STORE_i64_8_8($21 + 312 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
 $9 = $21 + 384 | 0;
 SAFE_HEAP_STORE_i64_8_8($21 + 304 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
 $10 = $21 + 376 | 0;
 SAFE_HEAP_STORE_i64_8_8($21 + 296 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
 $5 = $21 + 368 | 0;
 SAFE_HEAP_STORE_i64_8_8($21 + 288 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($21, 280, SAFE_HEAP_LOAD_i64_8_8($21, 360), i64toi32_i32$HIGH_BITS);
 fft_execute($21 + 280 | 0);
 SAFE_HEAP_STORE_i64_8_8($21 + 272 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($21 + 264 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($21 + 256 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($21 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($21, 240, SAFE_HEAP_LOAD_i64_8_8($21, 360), i64toi32_i32$HIGH_BITS);
 $14 = $25 * 1e3 / $19;
 label$35: {
  if (Math_abs($14) < 2147483648) {
   $20 = ~~$14;
   break label$35;
  }
  $20 = -2147483648;
 }
 $39 = $20 + 1 | 0;
 $8 = 0;
 fft_destroy_plan($21 + 240 | 0);
 label$37: {
  if (($20 | 0) < 0) {
   break label$37;
  }
  $11 = $39 & 1;
  if ($20) {
   $9 = $39 & -2;
   while (1) {
    $10 = $8 << 3;
    SAFE_HEAP_STORE_f64_8_8($10 + $6 | 0, 0, +($8 | 0) / 1e3);
    SAFE_HEAP_STORE_i64_8_8($7 + $10 | 0, 0, 0, 0);
    $10 = $8 | 1;
    $5 = $10 << 3;
    SAFE_HEAP_STORE_f64_8_8($6 + $5 | 0, 0, +($10 | 0) / 1e3);
    SAFE_HEAP_STORE_i64_8_8($5 + $7 | 0, 0, 0, 0);
    $8 = $8 + 2 | 0;
    $9 = $9 - 2 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  if (!$11) {
   break label$37;
  }
  $9 = $8 << 3;
  SAFE_HEAP_STORE_f64_8_8($9 + $6 | 0, 0, +($8 | 0) / 1e3);
  SAFE_HEAP_STORE_i64_8_8($7 + $9 | 0, 0, 0, 0);
 }
 $53 = matlab_round(+($12 | 0) / 10);
 $46 = Math_imul($53, 7);
 $8 = 0;
 $43 = ($39 & 1073741823) != ($39 | 0) ? -1 : $39 << 2;
 $27 = operator_20new_5b_5d_28unsigned_20long_29($43);
 $48 = operator_20new_5b_5d_28unsigned_20long_29($43);
 if (($20 | 0) >= 0) {
  $9 = ($46 & 536870911) != ($46 | 0) ? -1 : $46 << 3;
  while (1) {
   $10 = $8 << 2;
   SAFE_HEAP_STORE_i32_4_4($27 + $10 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($9));
   SAFE_HEAP_STORE_i32_4_4($10 + $48 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($9));
   $10 = ($8 | 0) == ($20 | 0);
   $8 = $8 + 1 | 0;
   if (!$10) {
    continue;
   }
   break;
  }
 }
 $44 = ($39 & 536870911) != ($39 | 0) ? -1 : $39 << 3;
 $54 = ($12 & 1073741823) != ($12 | 0) ? -1 : $12 << 2;
 $5 = operator_20new_5b_5d_28unsigned_20long_29($54);
 if (($24 | 0) > -1) {
  $8 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $5 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($44));
   $9 = ($8 | 0) == ($24 | 0);
   $8 = $8 + 1 | 0;
   if (!$9) {
    continue;
   }
   break;
  }
 }
 $49 = $39 << 3;
 label$44: {
  if (($24 | 0) < 0) {
   break label$44;
  }
  $23 = ($15 & 536870911) != ($15 | 0) ? -1 : $15 << 3;
  $17 = $16 >>> 1 | 0;
  $42 = $15 - 1 | 0;
  $59 = $42 & -4;
  $57 = $42 & 3;
  $58 = $15 & -4;
  $40 = $15 & 3;
  $61 = $15 - 2 | 0;
  $26 = 0;
  while (1) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(($26 << 2) + $5 | 0, 0);
   $8 = operator_20new_5b_5d_28unsigned_20long_29($51);
   $14 = $18 / $45;
   $10 = matlab_round($14 + $14);
   $22 = $10 << 1;
   $12 = $22 | 1;
   $1 = operator_20new_5b_5d_28unsigned_20long_29($51);
   NuttallWindow($12, $1);
   label$46: {
    if (($10 | 0) < 0) {
     break label$46;
    }
    $19 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $14 = $45 * 6.283185307179586;
    SAFE_HEAP_STORE_f64_8_8($1, 0, $19 * cos($14 * +(0 - $10 | 0) / $18));
    if (!($10 & 2147483647)) {
     break label$46;
    }
    $9 = 1 - $10 | 0;
    while (1) {
     $11 = ($9 + $10 << 3) + $1 | 0;
     SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0) * cos($14 * +($9 | 0) / $18));
     $11 = $9 + 1 | 0;
     $13 = ($11 + $10 << 3) + $1 | 0;
     SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($13, 0) * cos($14 * +($11 | 0) / $18));
     $9 = $9 + 2 | 0;
     if (($10 | 0) != ($11 | 0)) {
      continue;
     }
     break;
    }
   }
   if (($12 | 0) < ($16 | 0)) {
    memset(($10 << 4 | 8) + $1 | 0, 0, ($22 ^ -1) + $16 << 3);
   }
   $9 = $21 + 360 | 0;
   $13 = operator_20new_5b_5d_28unsigned_20long_29($52);
   fft_plan_dft_r2c_1d($9, $16, $1, $13, 3);
   $22 = $21 + 392 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 232 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($22, 0), i64toi32_i32$HIGH_BITS);
   $28 = $21 + 384 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 224 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($28, 0), i64toi32_i32$HIGH_BITS);
   $35 = $21 + 376 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 216 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($35, 0), i64toi32_i32$HIGH_BITS);
   $32 = $21 + 368 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 208 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($32, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21, 200, SAFE_HEAP_LOAD_i64_8_8($21, 360), i64toi32_i32$HIGH_BITS);
   fft_execute($21 + 200 | 0);
   $14 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
   $19 = SAFE_HEAP_LOAD_f64_8_8($56, 8);
   $30 = $14 * $19;
   $25 = SAFE_HEAP_LOAD_f64_8_8($56, 0);
   $29 = SAFE_HEAP_LOAD_f64_8_8($13, 8);
   SAFE_HEAP_STORE_f64_8_8($13, 8, $30 + $25 * $29);
   SAFE_HEAP_STORE_f64_8_8($13, 0, $25 * $14 - $19 * $29);
   $9 = 1;
   if (($16 | 0) > 1) {
    while (1) {
     $12 = $9 << 4;
     $11 = $13 + $12 | 0;
     $14 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $12 = $12 + $56 | 0;
     $19 = SAFE_HEAP_LOAD_f64_8_8($12, 8);
     $30 = $14 * $19;
     $25 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
     $29 = SAFE_HEAP_LOAD_f64_8_8($11, 8);
     $30 = $30 + $25 * $29;
     SAFE_HEAP_STORE_f64_8_8($11, 8, $30);
     $14 = $25 * $14 - $19 * $29;
     SAFE_HEAP_STORE_f64_8_8($11, 0, $14);
     $11 = (($9 ^ -1) + $16 << 4) + $13 | 0;
     SAFE_HEAP_STORE_f64_8_8($11, 8, $30);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $14);
     $11 = ($9 | 0) == ($17 | 0);
     $9 = $9 + 1 | 0;
     if (!$11) {
      continue;
     }
     break;
    }
   }
   fft_plan_dft_c2r_1d($21 + 320 | 0, $16, $13, $8, 3);
   $34 = $21 + 352 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 192 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($34, 0), i64toi32_i32$HIGH_BITS);
   $31 = $21 + 344 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 184 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($31, 0), i64toi32_i32$HIGH_BITS);
   $33 = $21 + 336 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 176 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($33, 0), i64toi32_i32$HIGH_BITS);
   $37 = $21 + 328 | 0;
   SAFE_HEAP_STORE_i64_8_8($21 + 168 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($37, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21, 160, SAFE_HEAP_LOAD_i64_8_8($21, 320), i64toi32_i32$HIGH_BITS);
   fft_execute($21 + 160 | 0);
   $47 = ($15 | 0) < 1;
   label$51: {
    if ($47) {
     break label$51;
    }
    $9 = 0;
    $11 = $58;
    if ($42 >>> 0 >= 3) {
     while (1) {
      $12 = $9 | 1;
      SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($12 + $10 << 3) + $8 | 0, 0));
      $38 = ($12 << 3) + $8 | 0;
      $12 = $9 | 2;
      SAFE_HEAP_STORE_f64_8_8($38, 0, SAFE_HEAP_LOAD_f64_8_8(($12 + $10 << 3) + $8 | 0, 0));
      $38 = ($12 << 3) + $8 | 0;
      $12 = $9 | 3;
      SAFE_HEAP_STORE_f64_8_8($38, 0, SAFE_HEAP_LOAD_f64_8_8(($12 + $10 << 3) + $8 | 0, 0));
      $9 = $9 + 4 | 0;
      SAFE_HEAP_STORE_f64_8_8(($12 << 3) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 + $9 << 3) + $8 | 0, 0));
      $11 = $11 - 4 | 0;
      if ($11) {
       continue;
      }
      break;
     }
    }
    $11 = $40;
    if (!$11) {
     break label$51;
    }
    while (1) {
     $12 = ($9 << 3) + $8 | 0;
     $9 = $9 + 1 | 0;
     SAFE_HEAP_STORE_f64_8_8($12, 0, SAFE_HEAP_LOAD_f64_8_8(($10 + $9 << 3) + $8 | 0, 0));
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i64_8_8($21 + 152 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($34, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 144 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($31, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 136 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($33, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 128 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($37, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21, 120, SAFE_HEAP_LOAD_i64_8_8($21, 320), i64toi32_i32$HIGH_BITS);
   fft_destroy_plan($21 + 120 | 0);
   SAFE_HEAP_STORE_i64_8_8($21 + 112 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($22, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($28, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 96 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($35, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21 + 88 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($32, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($21, 80, SAFE_HEAP_LOAD_i64_8_8($21, 360), i64toi32_i32$HIGH_BITS);
   fft_destroy_plan($21 + 80 | 0);
   operator_20delete_5b_5d_28void__29($13);
   operator_20delete_5b_5d_28void__29($1);
   $22 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $34 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $31 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $28 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $35 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $33 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $37 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $32 = operator_20new_5b_5d_28unsigned_20long_29($23);
   $38 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $15, $18, $22, $35);
   label$55: {
    label$56: {
     label$57: {
      label$58: {
       label$59: {
        if (!$47) {
         $9 = 0;
         $11 = $58;
         if ($42 >>> 0 >= 3) {
          break label$59;
         }
         break label$58;
        }
        $47 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $15, $18, $34, $33);
        break label$57;
       }
       while (1) {
        $10 = $9 << 3;
        $13 = $10 + $8 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
        $13 = ($10 | 8) + $8 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
        $13 = ($10 | 16) + $8 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
        $10 = ($10 | 24) + $8 | 0;
        SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
        $9 = $9 + 4 | 0;
        $11 = $11 - 4 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $10 = $40;
      if ($10) {
       while (1) {
        $11 = ($9 << 3) + $8 | 0;
        SAFE_HEAP_STORE_f64_8_8($11, 0, -SAFE_HEAP_LOAD_f64_8_8($11, 0));
        $9 = $9 + 1 | 0;
        $10 = $10 - 1 | 0;
        if ($10) {
         continue;
        }
        break;
       }
      }
      $47 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $15, $18, $34, $33);
      if (($15 | 0) < 2) {
       break label$57;
      }
      $14 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
      $9 = 0;
      $11 = $59;
      $1 = $61 >>> 0 < 3;
      if ($1) {
       break label$56;
      }
      while (1) {
       $10 = $9 << 3;
       $12 = $10 + $8 | 0;
       $13 = ($10 | 8) + $8 | 0;
       $19 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
       SAFE_HEAP_STORE_f64_8_8($12, 0, $14 - $19);
       $12 = ($10 | 16) + $8 | 0;
       $14 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
       SAFE_HEAP_STORE_f64_8_8($13, 0, $19 - $14);
       $10 = ($10 | 24) + $8 | 0;
       $19 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
       SAFE_HEAP_STORE_f64_8_8($12, 0, $14 - $19);
       $9 = $9 + 4 | 0;
       $14 = SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $8 | 0, 0);
       SAFE_HEAP_STORE_f64_8_8($10, 0, $19 - $14);
       $11 = $11 - 4 | 0;
       if ($11) {
        continue;
       }
       break;
      }
      break label$56;
     }
     $55 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $42, $18, $31, $37);
     break label$55;
    }
    $10 = $57;
    if ($10) {
     while (1) {
      $11 = ($9 << 3) + $8 | 0;
      $9 = $9 + 1 | 0;
      $19 = SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $8 | 0, 0);
      SAFE_HEAP_STORE_f64_8_8($11, 0, $14 - $19);
      $14 = $19;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    $9 = 0;
    $55 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $42, $18, $31, $37);
    $11 = $59;
    if (!$1) {
     while (1) {
      $10 = $9 << 3;
      $13 = $10 + $8 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
      $13 = ($10 | 8) + $8 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
      $13 = ($10 | 16) + $8 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, -SAFE_HEAP_LOAD_f64_8_8($13, 0));
      $10 = ($10 | 24) + $8 | 0;
      SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $9 = $9 + 4 | 0;
      $11 = $11 - 4 | 0;
      if ($11) {
       continue;
      }
      break;
     }
    }
    $10 = $57;
    if (!$10) {
     break label$55;
    }
    while (1) {
     $11 = ($9 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($11, 0, -SAFE_HEAP_LOAD_f64_8_8($11, 0));
     $9 = $9 + 1 | 0;
     $10 = $10 - 1 | 0;
     if ($10) {
      continue;
     }
     break;
    }
   }
   $1 = ($38 | 0) < 3 | ($47 | 0) < 3 | ($55 | 0) < 3;
   $9 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($8, $42, $18, $28, $32);
   label$70: {
    if (($9 | 0) > 2 ? $1 : 1) {
     if (($20 | 0) < 0) {
      break label$70;
     }
     memset($0, 0, $49);
     break label$70;
    }
    $11 = operator_20new_5b_5d_28unsigned_20long_29($44);
    $13 = operator_20new_5b_5d_28unsigned_20long_29($44);
    $12 = operator_20new_5b_5d_28unsigned_20long_29($44);
    $1 = operator_20new_5b_5d_28unsigned_20long_29($44);
    interp1($22, $35, $38, $6, $39, $11);
    interp1($34, $33, $47, $6, $39, $13);
    interp1($31, $37, $55, $6, $39, $12);
    interp1($28, $32, $9, $6, $39, $1);
    $10 = 0;
    if (($20 | 0) >= 0) {
     $19 = $45 * .9;
     $25 = $45 * 1.1;
     while (1) {
      $9 = $10 << 3;
      $38 = $9 + $0 | 0;
      $14 = (SAFE_HEAP_LOAD_f64_8_8($9 + $11 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $12 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($1 + $9 | 0, 0)) * .25;
      SAFE_HEAP_STORE_f64_8_8($38, 0, $14 > $25 ? 0 : $14 < $19 ? 0 : $4 < $14 ? 0 : $3 > $14 ? 0 : $14);
      $9 = ($10 | 0) != ($20 | 0);
      $10 = $10 + 1 | 0;
      if ($9) {
       continue;
      }
      break;
     }
    }
    operator_20delete_5b_5d_28void__29($11);
    operator_20delete_5b_5d_28void__29($13);
    operator_20delete_5b_5d_28void__29($12);
    operator_20delete_5b_5d_28void__29($1);
   }
   operator_20delete_5b_5d_28void__29($22);
   operator_20delete_5b_5d_28void__29($34);
   operator_20delete_5b_5d_28void__29($31);
   operator_20delete_5b_5d_28void__29($28);
   operator_20delete_5b_5d_28void__29($35);
   operator_20delete_5b_5d_28void__29($33);
   operator_20delete_5b_5d_28void__29($37);
   operator_20delete_5b_5d_28void__29($32);
   operator_20delete_5b_5d_28void__29($8);
   if (($24 | 0) == ($26 | 0)) {
    break label$44;
   }
   $26 = $26 + 1 | 0;
   $45 = SAFE_HEAP_LOAD_f64_8_8(($26 << 3) + $50 | 0, 0);
   continue;
  }
 }
 $1 = operator_20new_5b_5d_28unsigned_20long_29($54);
 $17 = operator_20new_5b_5d_28unsigned_20long_29($54);
 $26 = operator_20new_5b_5d_28unsigned_20long_29($54);
 label$74: {
  if (($20 | 0) < 0) {
   break label$74;
  }
  if (($24 | 0) >= 1) {
   $28 = ($24 << 2) + $1 | 0;
   $35 = $24 & -2;
   $32 = $24 & 1;
   $8 = $24 + 1 | 0;
   $34 = $8 & -2;
   $33 = $8 & 1;
   $31 = ($24 | 0) > -1;
   $11 = 0;
   while (1) {
    $8 = 0;
    $10 = $34;
    label$77: {
     if (!$31) {
      break label$77;
     }
     while (1) {
      $9 = $8 << 2;
      $0 = $9 + $1 | 0;
      $16 = SAFE_HEAP_LOAD_i32_4_4($5 + $9 | 0, 0);
      $13 = $11 << 3;
      SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_f64_8_8($16 + $13 | 0, 0) > 0);
      $9 = $9 | 4;
      SAFE_HEAP_STORE_i32_4_4($9 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($5 + $9 | 0, 0) + $13 | 0, 0) > 0);
      $8 = $8 + 2 | 0;
      $10 = $10 - 2 | 0;
      if ($10) {
       continue;
      }
      break;
     }
     if (!$33) {
      break label$77;
     }
     $8 = $8 << 2;
     SAFE_HEAP_STORE_i32_4_4($8 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($5 + $8 | 0, 0) + $13 | 0, 0) > 0);
    }
    $12 = 0;
    SAFE_HEAP_STORE_i32_4_4($28, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
    $8 = 1;
    $13 = 0;
    $16 = $35;
    if (($24 | 0) != 1) {
     while (1) {
      $9 = $17;
      $10 = $13;
      label$81: {
       label$82: {
        label$83: {
         $0 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $1 | 0, 0);
         switch (($0 - $12 | 0) + 1 | 0) {
         case 2:
          break label$82;

         case 0:
          break label$83;

         default:
          break label$81;
         }
        }
        $10 = $13 + 1 | 0;
        $9 = $26;
       }
       SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $9 | 0, 0, $8);
       $13 = $10;
      }
      $9 = $17;
      $10 = $13;
      label$84: {
       label$85: {
        label$86: {
         $23 = $8 + 1 | 0;
         $12 = SAFE_HEAP_LOAD_i32_4_4(($23 << 2) + $1 | 0, 0);
         switch (($12 - $0 | 0) + 1 | 0) {
         case 2:
          break label$85;

         case 0:
          break label$86;

         default:
          break label$84;
         }
        }
        $10 = $13 + 1 | 0;
        $9 = $26;
       }
       SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $9 | 0, 0, $23);
       $13 = $10;
      }
      $8 = $8 + 2 | 0;
      $16 = $16 - 2 | 0;
      if ($16) {
       continue;
      }
      break;
     }
    }
    label$87: {
     if (!$32) {
      break label$87;
     }
     $9 = $17;
     $10 = $13;
     label$88: {
      switch ((SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $1 | 0, 0) - $12 | 0) + 1 | 0) {
      case 0:
       $10 = $13 + 1 | 0;
       $9 = $26;
       break;

      case 2:
       break label$88;

      default:
       break label$87;
      }
     }
     SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $9 | 0, 0, $8);
     $13 = $10;
    }
    $22 = SAFE_HEAP_LOAD_i32_4_4(($11 << 2) + $27 | 0, 0);
    $16 = 0;
    $23 = 0;
    if (($13 | 0) >= 1) {
     while (1) {
      $8 = $16 << 2;
      $12 = SAFE_HEAP_LOAD_i32_4_4($26 + $8 | 0, 0);
      $8 = SAFE_HEAP_LOAD_i32_4_4($8 + $17 | 0, 0);
      $0 = $12 - $8 | 0;
      if (($0 | 0) >= 10) {
       $14 = 0;
       label$93: {
        if (($8 | 0) >= ($12 | 0)) {
         break label$93;
        }
        $10 = ($8 ^ -1) + $12 | 0;
        $9 = $0 & 3;
        if ($9) {
         while (1) {
          $14 = $14 + SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $5 | 0, 0) + ($11 << 3) | 0, 0);
          $8 = $8 + 1 | 0;
          $9 = $9 - 1 | 0;
          if ($9) {
           continue;
          }
          break;
         }
        }
        if ($10 >>> 0 < 3) {
         break label$93;
        }
        while (1) {
         $9 = ($8 << 2) + $5 | 0;
         $40 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
         $10 = $11 << 3;
         $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($40 + $10 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($9 + 4 | 0, 0) + $10 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($9 + 8 | 0, 0) + $10 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($9 + 12 | 0, 0) + $10 | 0, 0);
         $8 = $8 + 4 | 0;
         if (($12 | 0) != ($8 | 0)) {
          continue;
         }
         break;
        }
       }
       SAFE_HEAP_STORE_f64_8_8(($23 << 3) + $22 | 0, 0, $14 / +($0 | 0));
       $23 = $23 + 1 | 0;
      }
      $16 = $16 + 1 | 0;
      if (($16 | 0) != ($13 | 0)) {
       continue;
      }
      break;
     }
    }
    if (($23 | 0) < ($46 | 0)) {
     memset(($23 << 3) + $22 | 0, 0, $46 - $23 << 3);
    }
    $36 = ($23 | 0) < ($36 | 0) ? $36 : $23;
    $8 = ($11 | 0) == ($20 | 0);
    $11 = $11 + 1 | 0;
    if (!$8) {
     continue;
    }
    break;
   }
   break label$74;
  }
  $9 = Math_imul($53, 56);
  if (($24 | 0) >= 0) {
   $8 = 0;
   if (($53 | 0) <= 0) {
    $9 = $20 + 1 | 0;
    $11 = $9 & 1;
    if ($20) {
     $9 = $9 & -2;
     $13 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     while (1) {
      $10 = $8;
      $8 = $8 + 2 | 0;
      $9 = $9 - 2 | 0;
      if ($9) {
       continue;
      }
      break;
     }
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3 | 8) + $13 | 0, 0) > 0);
    }
    if (!$11) {
     break label$74;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($8 << 3) | 0, 0) > 0);
    break label$74;
   }
   $10 = $20 + 1 | 0;
   $13 = $10 & 1;
   if ($20) {
    $10 = $10 & -2;
    while (1) {
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($8 << 3) | 0, 0) > 0);
     memset(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0), 0, $9);
     $0 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     $11 = $8 | 1;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_f64_8_8($0 + ($11 << 3) | 0, 0) > 0);
     memset(SAFE_HEAP_LOAD_i32_4_4(($11 << 2) + $27 | 0, 0), 0, $9);
     $8 = $8 + 2 | 0;
     $10 = $10 - 2 | 0;
     if ($10) {
      continue;
     }
     break;
    }
   }
   if (!$13) {
    break label$74;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($8 << 3) | 0, 0) > 0);
   memset(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0), 0, $9);
   break label$74;
  }
  if (($53 | 0) < 1) {
   break label$74;
  }
  $10 = $20 + 1 | 0;
  $11 = $10 & 3;
  $8 = 0;
  if ($20 >>> 0 >= 3) {
   $13 = $10 & -4;
   while (1) {
    $10 = $8 << 2;
    memset(SAFE_HEAP_LOAD_i32_4_4($27 + $10 | 0, 0), 0, $9);
    memset(SAFE_HEAP_LOAD_i32_4_4(($10 | 4) + $27 | 0, 0), 0, $9);
    memset(SAFE_HEAP_LOAD_i32_4_4(($10 | 8) + $27 | 0, 0), 0, $9);
    memset(SAFE_HEAP_LOAD_i32_4_4(($10 | 12) + $27 | 0, 0), 0, $9);
    $8 = $8 + 4 | 0;
    $13 = $13 - 4 | 0;
    if ($13) {
     continue;
    }
    break;
   }
  }
  if (!$11) {
   break label$74;
  }
  while (1) {
   memset(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0), 0, $9);
   $8 = $8 + 1 | 0;
   $11 = $11 - 1 | 0;
   if ($11) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($1);
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($26);
 label$107: {
  if (($36 | 0) < 1 | ($20 | 0) < 1) {
   break label$107;
  }
  $28 = $36 << 2;
  $23 = $20 & -4;
  $0 = $20 & 3;
  $35 = $20 - 1 | 0;
  $26 = SAFE_HEAP_LOAD_i32_4_4($27, 0);
  $9 = 0;
  while (1) {
   $1 = $9 + $36 | 0;
   $10 = $26;
   $8 = 1;
   $16 = $23;
   $22 = $35 >>> 0 < 3;
   if (!$22) {
    while (1) {
     $11 = ($8 << 2) + $27 | 0;
     $17 = SAFE_HEAP_LOAD_i32_4_4($11, 0);
     $13 = $1 << 3;
     $12 = $9 << 3;
     SAFE_HEAP_STORE_f64_8_8($17 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($12 + $10 | 0, 0));
     $10 = SAFE_HEAP_LOAD_i32_4_4($11 + 4 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($12 + $17 | 0, 0));
     $17 = SAFE_HEAP_LOAD_i32_4_4($11 + 8 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($17 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $12 | 0, 0));
     $10 = SAFE_HEAP_LOAD_i32_4_4($11 + 12 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($12 + $17 | 0, 0));
     $8 = $8 + 4 | 0;
     $16 = $16 - 4 | 0;
     if ($16) {
      continue;
     }
     break;
    }
   }
   $11 = $0;
   if ($11) {
    while (1) {
     $13 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($13 + ($1 << 3) | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $10 | 0, 0));
     $8 = $8 + 1 | 0;
     $10 = $13;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   $12 = $9 + $28 | 0;
   $8 = 0;
   $10 = $26;
   $1 = $23;
   if (!$22) {
    while (1) {
     $11 = $12 << 3;
     $17 = $11 + $10 | 0;
     $10 = $8 << 2;
     $16 = SAFE_HEAP_LOAD_i32_4_4(($10 | 4) + $27 | 0, 0);
     $13 = $9 << 3;
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($16 + $13 | 0, 0));
     $17 = $11 + $16 | 0;
     $16 = SAFE_HEAP_LOAD_i32_4_4(($10 | 8) + $27 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($16 + $13 | 0, 0));
     $17 = $11 + $16 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4(($10 | 12) + $27 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($13 + $10 | 0, 0));
     $17 = $10 + $11 | 0;
     $8 = $8 + 4 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($13 + $10 | 0, 0));
     $1 = $1 - 4 | 0;
     if ($1) {
      continue;
     }
     break;
    }
   }
   $11 = $0;
   if ($11) {
    while (1) {
     $1 = ($12 << 3) + $10 | 0;
     $8 = $8 + 1 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($1, 0, SAFE_HEAP_LOAD_f64_8_8($10 + ($9 << 3) | 0, 0));
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   $9 = $9 + 1 | 0;
   if (($36 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
  if (($20 | 0) < 2) {
   break label$107;
  }
  $26 = Math_imul($36, 5);
  $22 = $36 << 1;
  $8 = $20 - 1 | 0;
  $17 = $8 & -2;
  $0 = $8 & 1;
  $23 = $20 - 2 | 0;
  $10 = 0;
  while (1) {
   $16 = $10 + $22 | 0;
   $8 = 2;
   $11 = $17;
   if ($23) {
    while (1) {
     $13 = $8 << 2;
     $9 = $27 + $13 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
     $12 = $16 << 3;
     $28 = $1 + $12 | 0;
     $40 = SAFE_HEAP_LOAD_i32_4_4($9 - 8 | 0, 0);
     $1 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($28, 0, SAFE_HEAP_LOAD_f64_8_8($40 + $1 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($13 | 4) + $27 | 0, 0) + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($9 - 4 | 0, 0) + $1 | 0, 0));
     $8 = $8 + 2 | 0;
     $11 = $11 - 2 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   if ($0) {
    $8 = ($8 << 2) + $27 | 0;
    SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8, 0) + ($16 << 3) | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 - 8 | 0, 0) + ($10 << 3) | 0, 0));
   }
   $16 = $10 + $26 | 0;
   $8 = 0;
   $9 = $17;
   if ($23) {
    while (1) {
     $11 = $8 << 2;
     $13 = $27 + $11 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4($13, 0);
     $12 = $16 << 3;
     $28 = $1 + $12 | 0;
     $8 = $8 + 2 | 0;
     $40 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $27 | 0, 0);
     $1 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($28, 0, SAFE_HEAP_LOAD_f64_8_8($40 + $1 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($11 | 4) + $27 | 0, 0) + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($13 + 12 | 0, 0) + $1 | 0, 0));
     $9 = $9 - 2 | 0;
     if ($9) {
      continue;
     }
     break;
    }
   }
   if ($0) {
    $8 = ($8 << 2) + $27 | 0;
    SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8, 0) + ($16 << 3) | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 + 8 | 0, 0) + ($10 << 3) | 0, 0));
   }
   $10 = $10 + 1 | 0;
   if (($36 | 0) != ($10 | 0)) {
    continue;
   }
   break;
  }
  if (($20 | 0) < 3) {
   break label$107;
  }
  $26 = Math_imul($36, 6);
  $22 = Math_imul($36, 3);
  $17 = $20 - 2 & -2;
  $0 = $20 & 1;
  $23 = $20 - 3 | 0;
  $10 = 0;
  while (1) {
   $1 = $10 + $22 | 0;
   $9 = 3;
   $11 = $17;
   if ($23) {
    while (1) {
     $8 = ($9 << 2) + $27 | 0;
     $16 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
     $13 = $1 << 3;
     $16 = $16 + $13 | 0;
     $28 = SAFE_HEAP_LOAD_i32_4_4($8 - 12 | 0, 0);
     $12 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($28 + $12 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 + 4 | 0, 0) + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 - 8 | 0, 0) + $12 | 0, 0));
     $9 = $9 + 2 | 0;
     $11 = $11 - 2 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   if ($0) {
    $8 = ($9 << 2) + $27 | 0;
    SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8, 0) + ($1 << 3) | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 - 12 | 0, 0) + ($10 << 3) | 0, 0));
   }
   $16 = $10 + $26 | 0;
   $8 = 0;
   $11 = $17;
   if ($23) {
    while (1) {
     $13 = $8 << 2;
     $9 = $27 + $13 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
     $12 = $16 << 3;
     $28 = $1 + $12 | 0;
     $40 = SAFE_HEAP_LOAD_i32_4_4($9 + 12 | 0, 0);
     $1 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($28, 0, SAFE_HEAP_LOAD_f64_8_8($40 + $1 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($13 | 4) + $27 | 0, 0) + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($9 + 16 | 0, 0) + $1 | 0, 0));
     $8 = $8 + 2 | 0;
     $11 = $11 - 2 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   if ($0) {
    $8 = ($8 << 2) + $27 | 0;
    SAFE_HEAP_STORE_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8, 0) + ($16 << 3) | 0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($8 + 12 | 0, 0) + ($10 << 3) | 0, 0));
   }
   $10 = $10 + 1 | 0;
   if (($36 | 0) != ($10 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($24 | 0) > -1) {
  $8 = 0;
  while (1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $5 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $9 = ($8 | 0) != ($24 | 0);
   $8 = $8 + 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($5);
 $38 = Math_imul($36, 7);
 if (!(($20 | 0) < 0 | ($36 | 0) < 1)) {
  $45 = $18 * .5;
  $62 = $18 * 1.5;
  $33 = $21 + 372 | 0;
  $61 = $21 + 408 | 0;
  $54 = $21 + 400 | 0;
  $53 = $21 + 392 | 0;
  $63 = $21 + 384 | 0;
  $64 = $21 + 376 | 0;
  $65 = $21 + 368 | 0;
  while (1) {
   $8 = $60 << 2;
   $39 = $48 + $8 | 0;
   $47 = $8 + $27 | 0;
   $59 = ($60 << 3) + $6 | 0;
   $31 = 0;
   while (1) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($39, 0);
    $8 = $31 << 3;
    $34 = $0 + $8 | 0;
    $37 = SAFE_HEAP_LOAD_i32_4_4($47, 0) + $8 | 0;
    $30 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
    label$137: {
     if ($30 <= 0) {
      SAFE_HEAP_STORE_i64_8_8($37, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_8($34, 0, 0, 0);
      break label$137;
     }
     $25 = SAFE_HEAP_LOAD_f64_8_8($59, 0);
     $14 = $62 / $30 + 1;
     label$139: {
      if (Math_abs($14) < 2147483648) {
       $17 = ~~$14;
       break label$139;
      }
      $17 = -2147483648;
     }
     $14 = +($17 | 0);
     $14 = $14 + $14 + 1;
     $23 = $17 << 1;
     $0 = $23 | 1;
     $52 = $0 << 3;
     $5 = ($0 & 536870911) != ($0 | 0) ? -1 : $52;
     $26 = operator_20new_5b_5d_28unsigned_20long_29($5);
     $42 = ($0 | 0) < 1;
     if (!$42) {
      $8 = 0;
      $9 = $23;
      if ($17) {
       while (1) {
        SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $26 | 0, 0, +($8 - $17 | 0) / $18);
        $10 = $8 | 1;
        SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $26 | 0, 0, +($10 - $17 | 0) / $18);
        $8 = $8 + 2 | 0;
        $9 = $9 - 2 | 0;
        if ($9) {
         continue;
        }
        break;
       }
      }
      SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $26 | 0, 0, +($8 - $17 | 0) / $18);
     }
     SAFE_HEAP_STORE_i32_4_4($61, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($54, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($53, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($63, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($64, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($65, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($21, 360, 0, 0);
     $19 = log($14) / .6931471805599453;
     label$145: {
      if (Math_abs($19) < 2147483648) {
       $8 = ~~$19;
       break label$145;
      }
      $8 = -2147483648;
     }
     $19 = exp2(+($8 | 0) + 2);
     label$144: {
      if (Math_abs($19) < 2147483648) {
       $32 = ~~$19;
       break label$144;
      }
      $32 = -2147483648;
     }
     InitializeForwardRealFFT($32, $21 + 360 | 0);
     $8 = ($32 & 268435455) != ($32 | 0) ? -1 : $32 << 4;
     $1 = operator_20new_5b_5d_28unsigned_20long_29($8);
     $16 = operator_20new_5b_5d_28unsigned_20long_29($8);
     $22 = ($0 & 1073741823) != ($0 | 0) ? -1 : $0 << 2;
     $9 = operator_20new_5b_5d_28unsigned_20long_29($22);
     $10 = operator_20new_5b_5d_28unsigned_20long_29($5);
     $13 = operator_20new_5b_5d_28unsigned_20long_29($5);
     $5 = matlab_round($18 * ($25 + SAFE_HEAP_LOAD_f64_8_8($26, 0)) + .001);
     label$148: {
      if (!$42) {
       $8 = 0;
       if ($23 >>> 0 >= 3) {
        $11 = $23 & -4;
        while (1) {
         SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, $5 + $8 | 0);
         $12 = $8 | 1;
         SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, $5 + $12 | 0);
         $12 = $8 | 2;
         SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, $5 + $12 | 0);
         $12 = $8 | 3;
         SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, $5 + $12 | 0);
         $8 = $8 + 4 | 0;
         $11 = $11 - 4 | 0;
         if ($11) {
          continue;
         }
         break;
        }
       }
       $14 = $14 / $18;
       $11 = $0 & 3;
       while (1) {
        SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, $5 + $8 | 0);
        $8 = $8 + 1 | 0;
        $11 = $11 - 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
       $8 = 0;
       while (1) {
        $5 = ($8 << 3) + $10 | 0;
        $19 = (+(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0) | 0) + -1) / $18 - $25;
        SAFE_HEAP_STORE_f64_8_8($5, 0, cos($19 * 12.566370614359172 / $14) * .08 + (cos($19 * 6.283185307179586 / $14) * .5 + .42));
        $8 = $8 + 1 | 0;
        if (($8 | 0) != ($0 | 0)) {
         continue;
        }
        break;
       }
       SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($10, 8) * -.5);
       if (($0 | 0) < 3) {
        break label$148;
       }
       $8 = 1;
       if (($17 | 0) != 1) {
        $11 = $23 - 2 | 0;
        while (1) {
         $5 = $8 << 3;
         $24 = $13 + $5 | 0;
         $12 = $5 + 8 | 0;
         $19 = SAFE_HEAP_LOAD_f64_8_8($12 + $10 | 0, 0);
         $5 = $5 + $10 | 0;
         SAFE_HEAP_STORE_f64_8_8($24, 0, ($19 - SAFE_HEAP_LOAD_f64_8_8($5 - 8 | 0, 0)) * -.5);
         $8 = $8 + 2 | 0;
         SAFE_HEAP_STORE_f64_8_8($12 + $13 | 0, 0, (SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $10 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($5, 0)) * -.5);
         $11 = $11 - 2 | 0;
         if ($11) {
          continue;
         }
         break;
        }
       }
       $8 = $8 << 3;
       $5 = $13 + $8 | 0;
       $8 = $8 + $10 | 0;
       SAFE_HEAP_STORE_f64_8_8($5, 0, (SAFE_HEAP_LOAD_f64_8_8($8 + 8 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($8 - 8 | 0, 0)) * -.5);
       break label$148;
      }
      SAFE_HEAP_STORE_i64_8_8($13, 0, 0, 2146959360);
     }
     $8 = $23 << 3;
     SAFE_HEAP_STORE_f64_8_8($13 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 + $10 | 0) - 8 | 0, 0) * .5);
     $8 = operator_20new_5b_5d_28unsigned_20long_29($22);
     if (!$42) {
      $5 = 0;
      $11 = 0;
      $22 = $23;
      if ($17) {
       while (1) {
        $12 = $11 << 2;
        $28 = $12 + $8 | 0;
        $24 = SAFE_HEAP_LOAD_i32_4_4($9 + $12 | 0, 0);
        $24 = ($15 | 0) < ($24 | 0) ? $15 : $24;
        SAFE_HEAP_STORE_i32_4_4($28, 0, ($24 | 0) > 0 ? $24 - 1 | 0 : 0);
        $12 = $12 | 4;
        $24 = $12 + $8 | 0;
        $12 = SAFE_HEAP_LOAD_i32_4_4($9 + $12 | 0, 0);
        $12 = ($12 | 0) > ($15 | 0) ? $15 : $12;
        SAFE_HEAP_STORE_i32_4_4($24, 0, ($12 | 0) > 0 ? $12 - 1 | 0 : 0);
        $11 = $11 + 2 | 0;
        $22 = $22 - 2 | 0;
        if ($22) {
         continue;
        }
        break;
       }
      }
      $11 = $11 << 2;
      $12 = $11 + $8 | 0;
      $11 = SAFE_HEAP_LOAD_i32_4_4($9 + $11 | 0, 0);
      $11 = ($11 | 0) > ($15 | 0) ? $15 : $11;
      SAFE_HEAP_STORE_i32_4_4($12, 0, ($11 | 0) > 0 ? $11 - 1 | 0 : 0);
      $11 = SAFE_HEAP_LOAD_i32_4_4($21, 364);
      $12 = $23;
      if ($17) {
       while (1) {
        $22 = $5 << 3;
        SAFE_HEAP_STORE_f64_8_8($22 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($10 + $22 | 0, 0));
        $22 = $5 | 1;
        $24 = $22 << 3;
        SAFE_HEAP_STORE_f64_8_8($24 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($10 + $24 | 0, 0));
        $5 = $5 + 2 | 0;
        $12 = $12 - 2 | 0;
        if ($12) {
         continue;
        }
        break;
       }
      }
      $12 = $5 << 3;
      SAFE_HEAP_STORE_f64_8_8($12 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($10 + $12 | 0, 0));
     }
     $55 = ($0 | 0) >= ($32 | 0);
     if (!$55) {
      memset(SAFE_HEAP_LOAD_i32_4_4($21, 364) + $52 | 0, 0, $32 - $0 << 3);
     }
     $51 = $33 + 32 | 0;
     SAFE_HEAP_STORE_i64_8_8($21 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($51, 0), i64toi32_i32$HIGH_BITS);
     $57 = $33 + 24 | 0;
     SAFE_HEAP_STORE_i64_8_8($21 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($57, 0), i64toi32_i32$HIGH_BITS);
     $58 = $33 + 16 | 0;
     SAFE_HEAP_STORE_i64_8_8($21 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($58, 0), i64toi32_i32$HIGH_BITS);
     $46 = $33 + 8 | 0;
     SAFE_HEAP_STORE_i64_8_8($21 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($46, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($21, 40, SAFE_HEAP_LOAD_i64_8_4($33, 0), i64toi32_i32$HIGH_BITS);
     $22 = ($32 | 0) / 2 | 0;
     fft_execute($21 + 40 | 0);
     $40 = ($32 | 0) < -1;
     label$162: {
      if ($40) {
       break label$162;
      }
      $11 = $22 + 1 | 0;
      $66 = $11 & 1;
      $5 = 0;
      $12 = SAFE_HEAP_LOAD_i32_4_4($21, 368);
      if ($32 + 1 >>> 0 >= 3) {
       $24 = $11 & -2;
       while (1) {
        $11 = $5 << 4;
        $28 = $11 + $1 | 0;
        $35 = $11 + $12 | 0;
        SAFE_HEAP_STORE_f64_8_8($28, 0, SAFE_HEAP_LOAD_f64_8_8($35, 0));
        SAFE_HEAP_STORE_f64_8_8($28, 8, SAFE_HEAP_LOAD_f64_8_8($35, 8));
        $11 = $11 | 16;
        $28 = $11 + $1 | 0;
        $11 = $11 + $12 | 0;
        SAFE_HEAP_STORE_f64_8_8($28, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0));
        SAFE_HEAP_STORE_f64_8_8($28, 8, SAFE_HEAP_LOAD_f64_8_8($11, 8));
        $5 = $5 + 2 | 0;
        $24 = $24 - 2 | 0;
        if ($24) {
         continue;
        }
        break;
       }
      }
      if (!$66) {
       break label$162;
      }
      $5 = $5 << 4;
      $11 = $5 + $1 | 0;
      $5 = $5 + $12 | 0;
      SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8($11, 8, SAFE_HEAP_LOAD_f64_8_8($5, 8));
     }
     if (!$42) {
      $5 = 0;
      $11 = SAFE_HEAP_LOAD_i32_4_4($21, 364);
      if ($17) {
       while (1) {
        $12 = $5 << 3;
        SAFE_HEAP_STORE_f64_8_8($12 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($12 + $13 | 0, 0));
        $12 = $5 | 1;
        $17 = $12 << 3;
        SAFE_HEAP_STORE_f64_8_8($17 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($12 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($13 + $17 | 0, 0));
        $5 = $5 + 2 | 0;
        $23 = $23 - 2 | 0;
        if ($23) {
         continue;
        }
        break;
       }
      }
      $12 = $5 << 3;
      SAFE_HEAP_STORE_f64_8_8($12 + $11 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $8 | 0, 0) << 3) + $2 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($12 + $13 | 0, 0));
     }
     if (!$55) {
      memset(SAFE_HEAP_LOAD_i32_4_4($21, 364) + $52 | 0, 0, $32 - $0 << 3);
     }
     SAFE_HEAP_STORE_i64_8_8($21 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($51, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($21 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($57, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($21 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($58, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($21 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($46, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($21, 0, SAFE_HEAP_LOAD_i64_8_4($33, 0), i64toi32_i32$HIGH_BITS);
     fft_execute($21);
     label$169: {
      if ($40) {
       break label$169;
      }
      $11 = $22 + 1 | 0;
      $24 = $11 & 1;
      $5 = 0;
      $12 = SAFE_HEAP_LOAD_i32_4_4($21, 368);
      if ($32 + 1 >>> 0 >= 3) {
       $17 = $11 & -2;
       while (1) {
        $11 = $5 << 4;
        $0 = $16 + $11 | 0;
        $23 = $11 + $12 | 0;
        SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($23, 0));
        SAFE_HEAP_STORE_f64_8_8($0, 8, SAFE_HEAP_LOAD_f64_8_8($23, 8));
        $11 = $11 | 16;
        $0 = $16 + $11 | 0;
        $11 = $11 + $12 | 0;
        SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0));
        SAFE_HEAP_STORE_f64_8_8($0, 8, SAFE_HEAP_LOAD_f64_8_8($11, 8));
        $5 = $5 + 2 | 0;
        $17 = $17 - 2 | 0;
        if ($17) {
         continue;
        }
        break;
       }
      }
      if (!$24) {
       break label$169;
      }
      $5 = $5 << 4;
      $11 = $16 + $5 | 0;
      $5 = $5 + $12 | 0;
      SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8($11, 8, SAFE_HEAP_LOAD_f64_8_8($5, 8));
     }
     operator_20delete_5b_5d_28void__29($8);
     $8 = 0;
     $5 = $22 + 1 | 0;
     $5 = ($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3;
     $11 = operator_20new_5b_5d_28unsigned_20long_29($5);
     $0 = operator_20new_5b_5d_28unsigned_20long_29($5);
     if (!$40) {
      while (1) {
       $5 = $8 << 3;
       $23 = $5 + $0 | 0;
       $12 = $8 << 4;
       $17 = $12 + $1 | 0;
       $14 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
       $12 = $12 + $16 | 0;
       $25 = $14 * SAFE_HEAP_LOAD_f64_8_8($12, 8);
       $19 = SAFE_HEAP_LOAD_f64_8_8($17, 8);
       SAFE_HEAP_STORE_f64_8_8($23, 0, $25 - $19 * SAFE_HEAP_LOAD_f64_8_8($12, 0));
       SAFE_HEAP_STORE_f64_8_8($5 + $11 | 0, 0, $14 * $14 + $19 * $19);
       $5 = ($8 | 0) != ($22 | 0);
       $8 = $8 + 1 | 0;
       if ($5) {
        continue;
       }
       break;
      }
     }
     $8 = 0;
     $14 = $45 / $30;
     label$174: {
      if (Math_abs($14) < 2147483648) {
       $5 = ~~$14;
       break label$174;
      }
      $5 = -2147483648;
     }
     $23 = ($5 | 0) < 6 ? $5 : 6;
     $12 = ($23 & 536870911) != ($23 | 0) ? -1 : $23 << 3;
     $22 = operator_20new_5b_5d_28unsigned_20long_29($12);
     $24 = operator_20new_5b_5d_28unsigned_20long_29($12);
     label$176: {
      label$177: {
       if (($5 | 0) > 0) {
        $29 = +($32 | 0);
        $25 = $30 * $29 / $18;
        while (1) {
         $14 = 0;
         $5 = $8 + 1 | 0;
         $12 = matlab_round($25 * +($5 | 0));
         $17 = $12 << 3;
         $19 = SAFE_HEAP_LOAD_f64_8_8($17 + $11 | 0, 0);
         if ($19 != 0) {
          $14 = $18 * +($12 | 0) / $29 + $18 * (SAFE_HEAP_LOAD_f64_8_8($0 + $17 | 0, 0) / $19) * .5 / 3.141592653589793;
         }
         $8 = $8 << 3;
         SAFE_HEAP_STORE_f64_8_8($24 + $8 | 0, 0, $14);
         SAFE_HEAP_STORE_f64_8_8($8 + $22 | 0, 0, Math_sqrt($19));
         $8 = $5;
         if (($23 | 0) != ($8 | 0)) {
          continue;
         }
         break;
        }
        $14 = SAFE_HEAP_LOAD_f64_8_8($22, 0);
        $19 = $14 + 0;
        $25 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
        $14 = $14 * $25 + 0;
        $25 = Math_abs(($25 - $30) / $30);
        if (($23 | 0) == 1) {
         break label$177;
        }
        $29 = SAFE_HEAP_LOAD_f64_8_8($22, 8);
        $19 = $19 + ($29 + $29);
        $41 = SAFE_HEAP_LOAD_f64_8_8($24, 8);
        $14 = $14 + $29 * $41;
        $25 = $25 + Math_abs(($41 * .5 - $30) / $30);
        if (($23 | 0) == 2) {
         break label$177;
        }
        $29 = SAFE_HEAP_LOAD_f64_8_8($22, 16);
        $19 = $19 + $29 * 3;
        $41 = SAFE_HEAP_LOAD_f64_8_8($24, 16);
        $14 = $14 + $29 * $41;
        $25 = $25 + Math_abs(($41 / 3 - $30) / $30);
        if (($23 | 0) == 3) {
         break label$177;
        }
        $29 = SAFE_HEAP_LOAD_f64_8_8($22, 24);
        $19 = $19 + $29 * 4;
        $41 = SAFE_HEAP_LOAD_f64_8_8($24, 24);
        $14 = $14 + $29 * $41;
        $25 = $25 + Math_abs(($41 * .25 - $30) / $30);
        if (($23 | 0) == 4) {
         break label$177;
        }
        $29 = SAFE_HEAP_LOAD_f64_8_8($22, 32);
        $19 = $19 + $29 * 5;
        $41 = SAFE_HEAP_LOAD_f64_8_8($24, 32);
        $14 = $14 + $29 * $41;
        $25 = $25 + Math_abs(($41 / 5 - $30) / $30);
        if (($23 | 0) == 5) {
         break label$177;
        }
        $29 = SAFE_HEAP_LOAD_f64_8_8($22, 40);
        $19 = $19 + $29 * 6;
        $41 = SAFE_HEAP_LOAD_f64_8_8($24, 40);
        $14 = $14 + $29 * $41;
        $25 = $25 + Math_abs(($41 / 6 - $30) / $30);
        break label$177;
       }
       SAFE_HEAP_STORE_i64_8_8($34, 0, 0, 0);
       $14 = 0;
       $19 = 1e-12;
       break label$176;
      }
      SAFE_HEAP_STORE_f64_8_8($34, 0, $25);
      $19 = $19 + 1e-12;
     }
     SAFE_HEAP_STORE_f64_8_8($37, 0, $14 / $19);
     SAFE_HEAP_STORE_f64_8_8($34, 0, 1 / (SAFE_HEAP_LOAD_f64_8_8($34, 0) / +($23 | 0) + 1e-12));
     operator_20delete_5b_5d_28void__29($22);
     operator_20delete_5b_5d_28void__29($24);
     operator_20delete_5b_5d_28void__29($16);
     operator_20delete_5b_5d_28void__29($13);
     operator_20delete_5b_5d_28void__29($10);
     operator_20delete_5b_5d_28void__29($9);
     operator_20delete_5b_5d_28void__29($0);
     operator_20delete_5b_5d_28void__29($11);
     operator_20delete_5b_5d_28void__29($1);
     DestroyForwardRealFFT($21 + 360 | 0);
     $14 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
     label$181: {
      if (!($14 < $3 | $4 < $14)) {
       if (!(SAFE_HEAP_LOAD_f64_8_8($34, 0) < 2.5)) {
        break label$181;
       }
      }
      SAFE_HEAP_STORE_i64_8_8($37, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_8($34, 0, 0, 0);
     }
     operator_20delete_5b_5d_28void__29($26);
    }
    $31 = $31 + 1 | 0;
    if (($38 | 0) != ($31 | 0)) {
     continue;
    }
    break;
   }
   $8 = ($20 | 0) != ($60 | 0);
   $60 = $60 + 1 | 0;
   if ($8) {
    continue;
   }
   break;
  }
 }
 $22 = operator_20new_5b_5d_28unsigned_20long_29($43);
 if (($20 | 0) > -1) {
  $10 = ($38 & 536870911) != ($38 | 0) ? -1 : $38 << 3;
  $8 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $22 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($10));
   $9 = ($8 | 0) == ($20 | 0);
   $8 = $8 + 1 | 0;
   if (!$9) {
    continue;
   }
   break;
  }
  label$185: {
   if (($36 | 0) < 1) {
    break label$185;
   }
   $0 = Math_imul($36, 7);
   $1 = $0 & -4;
   $12 = $0 & 3;
   $16 = $0 - 1 | 0;
   $13 = 0;
   while (1) {
    $8 = $13 << 2;
    $9 = SAFE_HEAP_LOAD_i32_4_4($22 + $8 | 0, 0);
    $10 = SAFE_HEAP_LOAD_i32_4_4($8 + $27 | 0, 0);
    $8 = 0;
    $15 = $1;
    if ($16 >>> 0 >= 3) {
     while (1) {
      $5 = $8 << 3;
      SAFE_HEAP_STORE_f64_8_8($9 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $10 | 0, 0));
      $11 = $5 | 8;
      SAFE_HEAP_STORE_f64_8_8($11 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
      $11 = $5 | 16;
      SAFE_HEAP_STORE_f64_8_8($11 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
      $5 = $5 | 24;
      SAFE_HEAP_STORE_f64_8_8($9 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $10 | 0, 0));
      $8 = $8 + 4 | 0;
      $15 = $15 - 4 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    $5 = $12;
    if ($5) {
     while (1) {
      $15 = $8 << 3;
      SAFE_HEAP_STORE_f64_8_8($15 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0));
      $8 = $8 + 1 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue;
      }
      break;
     }
    }
    $8 = ($13 | 0) == ($20 | 0);
    $13 = $13 + 1 | 0;
    if (!$8) {
     continue;
    }
    break;
   }
   if (($20 | 0) < 2) {
    break label$185;
   }
   $17 = $0 & -2;
   $0 = $0 & 1;
   $28 = 1;
   while (1) {
    $8 = $28 << 2;
    $24 = $48 + $8 | 0;
    $23 = ($8 + $22 | 0) - 4 | 0;
    $28 = $28 + 1 | 0;
    $26 = ($28 << 2) + $22 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($8 + $27 | 0, 0);
    $11 = 0;
    while (1) {
     $13 = $11 << 3;
     $12 = $13 + $1 | 0;
     $18 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
     label$193: {
      if ($18 == 0) {
       break label$193;
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($26, 0);
      $8 = 0;
      $29 = 1;
      $14 = 1;
      $10 = $17;
      if ($16) {
       while (1) {
        $5 = $8 << 3;
        $19 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8($9 + $5 | 0, 0)) / $18;
        $15 = $19 > $14;
        $14 = $15 ? $14 : $19;
        $25 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8(($5 | 8) + $9 | 0, 0)) / $18;
        $5 = $14 < $25;
        $14 = $5 ? $14 : $25;
        $29 = $5 ? $15 ? $29 : $19 : $25;
        $8 = $8 + 2 | 0;
        $10 = $10 - 2 | 0;
        if ($10) {
         continue;
        }
        break;
       }
      }
      if ($0) {
       $19 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $9 | 0, 0)) / $18;
       $29 = $14 < $19 ? $29 : $19;
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($23, 0);
      $8 = 0;
      $30 = 1;
      $14 = 1;
      $10 = $17;
      if ($16) {
       while (1) {
        $5 = $8 << 3;
        $19 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8($9 + $5 | 0, 0)) / $18;
        $15 = $19 > $14;
        $14 = $15 ? $14 : $19;
        $25 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8(($5 | 8) + $9 | 0, 0)) / $18;
        $5 = $14 < $25;
        $14 = $5 ? $14 : $25;
        $30 = $5 ? $15 ? $30 : $19 : $25;
        $8 = $8 + 2 | 0;
        $10 = $10 - 2 | 0;
        if ($10) {
         continue;
        }
        break;
       }
      }
      $3 = $29;
      if ($0) {
       $18 = Math_abs($18 - SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $9 | 0, 0)) / $18;
       $30 = $14 < $18 ? $30 : $18;
      }
      if (($29 < $30 ? $3 : $30) <= .05) {
       break label$193;
      }
      SAFE_HEAP_STORE_i64_8_8($12, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_8(SAFE_HEAP_LOAD_i32_4_4($24, 0) + $13 | 0, 0, 0, 0);
     }
     $11 = $11 + 1 | 0;
     if (($38 | 0) != ($11 | 0)) {
      continue;
     }
     break;
    }
    if (($20 | 0) != ($28 | 0)) {
     continue;
    }
    break;
   }
  }
  $8 = 0;
  while (1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $22 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $9 = ($8 | 0) != ($20 | 0);
   $8 = $8 + 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($22);
 $23 = operator_20new_5b_5d_28unsigned_20long_29($44);
 $11 = operator_20new_5b_5d_28unsigned_20long_29($44);
 $13 = operator_20new_5b_5d_28unsigned_20long_29($44);
 $22 = ($20 | 0) < 0;
 if (!$22) {
  label$204: {
   if (($36 | 0) >= 1) {
    $17 = Math_imul($36, 7);
    $0 = $17 & -2;
    $26 = $17 & 1;
    $8 = 0;
    while (1) {
     $16 = $8;
     $12 = ($8 << 3) + $11 | 0;
     SAFE_HEAP_STORE_i64_8_8($12, 0, 0, 0);
     $8 = $8 << 2;
     $1 = $27 + $8 | 0;
     $9 = SAFE_HEAP_LOAD_i32_4_4($8 + $48 | 0, 0);
     $18 = 0;
     $8 = 0;
     $10 = $0;
     if (($17 | 0) != 1) {
      while (1) {
       $5 = $8 << 3;
       $15 = $9 + $5 | 0;
       if (SAFE_HEAP_LOAD_f64_8_8($15, 0) > $18) {
        SAFE_HEAP_STORE_f64_8_8($12, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $5 | 0, 0));
        $18 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
       }
       $5 = ($8 | 1) << 3;
       $15 = $9 + $5 | 0;
       if (SAFE_HEAP_LOAD_f64_8_8($15, 0) > $18) {
        SAFE_HEAP_STORE_f64_8_8($12, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $5 | 0, 0));
        $18 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
       }
       $8 = $8 + 2 | 0;
       $10 = $10 - 2 | 0;
       if ($10) {
        continue;
       }
       break;
      }
     }
     label$211: {
      if (!$26) {
       break label$211;
      }
      $8 = $8 << 3;
      if (!(SAFE_HEAP_LOAD_f64_8_8($9 + $8 | 0, 0) > $18)) {
       break label$211;
      }
      SAFE_HEAP_STORE_f64_8_8($12, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $8 | 0, 0));
     }
     $8 = $16 + 1 | 0;
     if (($16 | 0) != ($20 | 0)) {
      continue;
     }
     break;
    }
    break label$204;
   }
   memset($11, 0, $49);
  }
  $5 = memset($13, 0, $49);
  $8 = 2;
  if (($20 | 0) >= 2) {
   while (1) {
    $10 = $8 << 3;
    $9 = $11 + $10 | 0;
    $18 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
    if ($18 != 0) {
     $0 = $5 + $10 | 0;
     $14 = SAFE_HEAP_LOAD_f64_8_8($9 - 8 | 0, 0);
     $19 = $14 + $14 - SAFE_HEAP_LOAD_f64_8_8($9 - 16 | 0, 0);
     label$215: {
      if (Math_abs(($18 - $19) / $19) > .008) {
       $19 = 0;
       if (Math_abs($18 - $14) / $14 > .008) {
        break label$215;
       }
      }
      $19 = $18;
     }
     SAFE_HEAP_STORE_f64_8_8($0, 0, $19);
    }
    $9 = ($8 | 0) != ($20 | 0);
    $8 = $8 + 1 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  memcpy($11, $5, $49);
 }
 $5 = operator_20new_5b_5d_28unsigned_20long_29($43);
 $9 = operator_20new_5b_5d_28unsigned_20long_29($43);
 label$217: {
  label$218: {
   if (!$22) {
    $15 = $20 + 1 | 0;
    $10 = $15 & 3;
    $8 = 0;
    if ($20 >>> 0 >= 3) {
     $15 = $15 & -4;
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $13 | 0, 0) > 0);
      $12 = $8 | 1;
      SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($12 << 3) + $13 | 0, 0) > 0);
      $12 = $8 | 2;
      SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($12 << 3) + $13 | 0, 0) > 0);
      $12 = $8 | 3;
      SAFE_HEAP_STORE_i32_4_4(($12 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($12 << 3) + $13 | 0, 0) > 0);
      $8 = $8 + 4 | 0;
      $15 = $15 - 4 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    if ($10) {
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $13 | 0, 0) > 0);
      $8 = $8 + 1 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    $15 = 0;
    SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
    $8 = 1;
    if (($20 | 0) < 1) {
     break label$218;
    }
    $17 = $20 & 1;
    $10 = 0;
    if (($20 | 0) != 1) {
     $12 = $20 & -2;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0);
      if (($15 | 0) != ($1 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $5 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
       $10 = $10 + 1 | 0;
      }
      $16 = $8 + 1 | 0;
      $15 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $9 | 0, 0);
      if (($15 | 0) != ($1 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $5 | 0, 0, $16 - (($10 | 0) % 2 | 0) | 0);
       $10 = $10 + 1 | 0;
      }
      $8 = $8 + 2 | 0;
      $12 = $12 - 2 | 0;
      if ($12) {
       continue;
      }
      break;
     }
    }
    label$228: {
     if (!$17) {
      break label$228;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0) | 0) == ($15 | 0)) {
      break label$228;
     }
     SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $5 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
     $10 = $10 + 1 | 0;
    }
    operator_20delete_5b_5d_28void__29($9);
    $15 = ($10 | 0) / 2 | 0;
    if (($10 | 0) < 2) {
     break label$217;
    }
    $8 = 0;
    while (1) {
     $9 = $8 << 3;
     $10 = SAFE_HEAP_LOAD_i32_4_4(($9 | 4) + $5 | 0, 0);
     $9 = SAFE_HEAP_LOAD_i32_4_4($5 + $9 | 0, 0);
     label$230: {
      if (($10 | 0) < ($9 | 0)) {
       break label$230;
      }
      $10 = $10 - $9 | 0;
      if (($10 | 0) > 5) {
       break label$230;
      }
      memset(($9 << 3) + $11 | 0, 0, ($10 << 3) + 8 | 0);
     }
     $8 = $8 + 1 | 0;
     if (($15 | 0) != ($8 | 0)) {
      continue;
     }
     break;
    }
    break label$217;
   }
   SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
  }
  operator_20delete_5b_5d_28void__29($9);
 }
 operator_20delete_5b_5d_28void__29($5);
 $8 = ($20 | 0) < 0;
 if (!$8) {
  memcpy($13, $11, $49);
 }
 $12 = operator_20new_5b_5d_28unsigned_20long_29($43);
 $9 = operator_20new_5b_5d_28unsigned_20long_29($43);
 label$232: {
  label$233: {
   label$234: {
    if (!$8) {
     $5 = $20 + 1 | 0;
     $10 = $5 & 3;
     $8 = 0;
     if ($20 >>> 0 >= 3) {
      $5 = $5 & -4;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $11 | 0, 0) > 0);
       $15 = $8 | 1;
       SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $11 | 0, 0) > 0);
       $15 = $8 | 2;
       SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $11 | 0, 0) > 0);
       $15 = $8 | 3;
       SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $11 | 0, 0) > 0);
       $8 = $8 + 4 | 0;
       $5 = $5 - 4 | 0;
       if ($5) {
        continue;
       }
       break;
      }
     }
     if ($10) {
      while (1) {
       SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $11 | 0, 0) > 0);
       $8 = $8 + 1 | 0;
       $10 = $10 - 1 | 0;
       if ($10) {
        continue;
       }
       break;
      }
     }
     $10 = 0;
     SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
     $8 = 1;
     if (($20 | 0) < 1) {
      break label$232;
     }
     $17 = $20 & 1;
     if (($20 | 0) != 1) {
      break label$234;
     }
     $5 = 0;
     break label$233;
    }
    $10 = 0;
    SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
    break label$232;
   }
   $15 = $20 & -2;
   $5 = 0;
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0);
    if (($5 | 0) != ($1 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $12 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
     $10 = $10 + 1 | 0;
    }
    $16 = $8 + 1 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $9 | 0, 0);
    if (($5 | 0) != ($1 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $12 | 0, 0, $16 - (($10 | 0) % 2 | 0) | 0);
     $10 = $10 + 1 | 0;
    }
    $8 = $8 + 2 | 0;
    $15 = $15 - 2 | 0;
    if ($15) {
     continue;
    }
    break;
   }
  }
  if (!$17) {
   break label$232;
  }
  if ((SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0) | 0) == ($5 | 0)) {
   break label$232;
  }
  SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $12 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
  $10 = $10 + 1 | 0;
 }
 operator_20delete_5b_5d_28void__29($9);
 $26 = ($10 | 0) / 2 | 0;
 $1 = operator_20new_5b_5d_28unsigned_20long_29(($26 & 1073741823) != ($26 | 0) ? -1 : $26 << 2);
 if (($10 | 0) > 1) {
  $8 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $1 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($44));
   $8 = $8 + 1 | 0;
   if (($26 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
  $16 = 0;
  while (1) {
   $9 = $16 << 1;
   $8 = SAFE_HEAP_LOAD_i32_4_4(($16 << 3) + $12 | 0, 0);
   if (($8 | 0) >= 1) {
    memset(SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $1 | 0, 0), 0, $8 << 3);
   }
   $15 = SAFE_HEAP_LOAD_i32_4_4(($9 << 2 | 4) + $12 | 0, 0);
   label$247: {
    if (($15 | 0) < ($8 | 0)) {
     break label$247;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $1 | 0, 0);
    $17 = $15 - $8 | 0;
    $10 = $17 + 1 & 3;
    if ($10) {
     while (1) {
      $5 = $8 << 3;
      SAFE_HEAP_STORE_f64_8_8($9 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $11 | 0, 0));
      $8 = $8 + 1 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    if ($17 >>> 0 <= 2) {
     break label$247;
    }
    while (1) {
     $10 = $8 << 3;
     SAFE_HEAP_STORE_f64_8_8($10 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
     $5 = $10 + 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($9 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $11 | 0, 0));
     $10 = $10 + 16 | 0;
     SAFE_HEAP_STORE_f64_8_8($10 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
     $10 = $8 + 3 | 0;
     $5 = $10 << 3;
     SAFE_HEAP_STORE_f64_8_8($9 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $11 | 0, 0));
     $8 = $8 + 4 | 0;
     if (($10 | 0) != ($15 | 0)) {
      continue;
     }
     break;
    }
   }
   if (($15 + 1 | 0) <= ($20 | 0)) {
    memset((SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $1 | 0, 0) + ($15 << 3) | 0) + 8 | 0, 0, $20 - $15 << 3);
   }
   $16 = $16 + 1 | 0;
   if (($26 | 0) != ($16 | 0)) {
    continue;
   }
   break;
  }
  $16 = $20 - 1 | 0;
  $15 = 0;
  $8 = 0;
  while (1) {
   $10 = $8 << 3;
   $9 = ($10 | 4) + $12 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
   $0 = $5;
   $5 = $5 + 100 | 0;
   $6 = ($5 | 0) < ($20 | 0) ? $5 : $16;
   $5 = ($8 << 2) + $1 | 0;
   SAFE_HEAP_STORE_i32_4_4($9, 0, $28anonymous_20namespace_29__ExtendF0_28double_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20double_20const__20const__2c_20int_2c_20double_2c_20double__29($0, $6, 1, $27, $38, SAFE_HEAP_LOAD_i32_4_4($5, 0)));
   $9 = $10 + $12 | 0;
   $10 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
   SAFE_HEAP_STORE_i32_4_4($9, 0, $28anonymous_20namespace_29__ExtendF0_28double_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20double_20const__20const__2c_20int_2c_20double_2c_20double__29($10, (($10 | 0) > 101 ? $10 : 101) - 100 | 0, -1, $27, $38, SAFE_HEAP_LOAD_i32_4_4($5, 0)));
   $8 = $8 + 1 | 0;
   if (($26 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
  $18 = 0;
  $31 = 0;
  while (1) {
   $8 = $15 << 3;
   $17 = ($8 | 4) + $12 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4($17, 0);
   $0 = $8 + $12 | 0;
   $16 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$254: {
    if (($5 | 0) <= ($16 | 0)) {
     break label$254;
    }
    $22 = ($16 ^ -1) + $5 | 0;
    $10 = SAFE_HEAP_LOAD_i32_4_4(($15 << 2) + $1 | 0, 0);
    $8 = $16;
    $9 = $5 - $8 & 3;
    if ($9) {
     while (1) {
      $18 = $18 + SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $10 | 0, 0);
      $8 = $8 + 1 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue;
      }
      break;
     }
    }
    if ($22 >>> 0 <= 2) {
     break label$254;
    }
    while (1) {
     $9 = ($8 << 3) + $10 | 0;
     $18 = $18 + SAFE_HEAP_LOAD_f64_8_8($9, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + 8 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + 16 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + 24 | 0, 0);
     $8 = $8 + 4 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   $14 = +($5 - $16 | 0);
   $18 = $18 / $14;
   if (2200 / $18 < $14) {
    $8 = ($31 << 2) + $1 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    $10 = ($15 << 2) + $1 | 0;
    SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    SAFE_HEAP_STORE_i32_4_4($10, 0, $9);
    $8 = $31 << 3;
    $9 = $12 + $8 | 0;
    $10 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $16);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $10);
    $8 = ($8 | 4) + $12 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 0, $5);
    SAFE_HEAP_STORE_i32_4_4($17, 0, $9);
    $31 = $31 + 1 | 0;
   }
   $15 = $15 + 1 | 0;
   if (($26 | 0) != ($15 | 0)) {
    continue;
   }
   break;
  }
  if ($31) {
   $17 = operator_20new_5b_5d_28unsigned_20long_29(($31 & 1073741823) != ($31 | 0) ? -1 : $31 << 2);
   label$260: {
    if (($31 | 0) < 1) {
     break label$260;
    }
    $9 = $31 & 7;
    $8 = 0;
    if ($31 - 1 >>> 0 >= 7) {
     $10 = $31 & -8;
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $17 | 0, 0, $8);
      $5 = $8 | 1;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 2;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 3;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 4;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 5;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 6;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $5 = $8 | 7;
      SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $17 | 0, 0, $5);
      $8 = $8 + 8 | 0;
      $10 = $10 - 8 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    if ($9) {
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $17 | 0, 0, $8);
      $8 = $8 + 1 | 0;
      $9 = $9 - 1 | 0;
      if ($9) {
       continue;
      }
      break;
     }
    }
    $0 = 1;
    if (($31 | 0) <= 1) {
     break label$260;
    }
    while (1) {
     $9 = ($0 << 2) + $17 | 0;
     $8 = $0;
     while (1) {
      $10 = $8 - 1 | 0;
      $5 = ($10 << 2) + $17 | 0;
      $15 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      $6 = SAFE_HEAP_LOAD_i32_4_4(($15 << 3) + $12 | 0, 0);
      $16 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
      if (($6 | 0) > (SAFE_HEAP_LOAD_i32_4_4(($16 << 3) + $12 | 0, 0) | 0)) {
       SAFE_HEAP_STORE_i32_4_4($9, 0, $15);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $16);
       $5 = ($8 | 0) > 1;
       $8 = $10;
       if ($5) {
        continue;
       }
      }
      break;
     }
     $0 = $0 + 1 | 0;
     if (($31 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $8 = 0;
   label$268: {
    if (($20 | 0) < 0) {
     break label$268;
    }
    $10 = $20 + 1 | 0;
    $5 = $10 & 3;
    $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    if ($20 >>> 0 >= 3) {
     $15 = $10 & -4;
     while (1) {
      $10 = $8 << 3;
      SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0));
      $16 = $10 | 8;
      SAFE_HEAP_STORE_f64_8_8($16 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $16 | 0, 0));
      $16 = $10 | 16;
      SAFE_HEAP_STORE_f64_8_8($16 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $16 | 0, 0));
      $10 = $10 | 24;
      SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0));
      $8 = $8 + 4 | 0;
      $15 = $15 - 4 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    if (!$5) {
     break label$268;
    }
    while (1) {
     $10 = $8 << 3;
     SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0));
     $8 = $8 + 1 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   if (($31 | 0) >= 2) {
    $8 = Math_imul($36, 7);
    $28 = $8 & -2;
    $35 = $8 & 1;
    $32 = $8 - 1 | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
    $37 = 1;
    while (1) {
     $8 = SAFE_HEAP_LOAD_i32_4_4(($37 << 2) + $17 | 0, 0);
     $9 = $8 << 1;
     label$274: {
      label$275: {
       $24 = SAFE_HEAP_LOAD_i32_4_4(($8 << 3) + $12 | 0, 0);
       if (($24 | 0) > ($0 | 0)) {
        $0 = SAFE_HEAP_LOAD_i32_4_4(($9 << 2 | 4) + $12 | 0, 0);
        if (($24 | 0) > ($0 | 0)) {
         break label$275;
        }
        $9 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $1 | 0, 0);
        $8 = $24;
        $15 = $0 - $8 | 0;
        $10 = $15 + 1 & 3;
        if ($10) {
         while (1) {
          $5 = $8 << 3;
          SAFE_HEAP_STORE_f64_8_8($13 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $9 | 0, 0));
          $8 = $8 + 1 | 0;
          $10 = $10 - 1 | 0;
          if ($10) {
           continue;
          }
          break;
         }
        }
        if ($15 >>> 0 <= 2) {
         break label$275;
        }
        while (1) {
         $10 = $8 << 3;
         SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0));
         $5 = $10 + 8 | 0;
         SAFE_HEAP_STORE_f64_8_8($13 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $9 | 0, 0));
         $10 = $10 + 16 | 0;
         SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0));
         $10 = $8 + 3 | 0;
         $5 = $10 << 3;
         SAFE_HEAP_STORE_f64_8_8($13 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $9 | 0, 0));
         $8 = $8 + 4 | 0;
         if (($0 | 0) != ($10 | 0)) {
          continue;
         }
         break;
        }
        break label$275;
       }
       $22 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $1 | 0, 0);
       $33 = SAFE_HEAP_LOAD_i32_4_4(($9 << 2 | 4) + $12 | 0, 0);
       if (wasm2js_i32$0 = (SAFE_HEAP_LOAD_i32_4_4($12, 0) | 0) <= ($24 | 0), wasm2js_i32$1 = 0, 
       wasm2js_i32$2 = ($0 | 0) >= ($33 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
        break label$274;
       }
       $29 = 0;
       $8 = $24;
       $30 = 0;
       label$280: {
        label$281: {
         if (($36 | 0) >= 1) {
          while (1) {
           $16 = $8;
           $8 = $8 << 2;
           $10 = SAFE_HEAP_LOAD_i32_4_4($48 + $8 | 0, 0);
           $8 = SAFE_HEAP_LOAD_i32_4_4($8 + $27 | 0, 0);
           $34 = $16 << 3;
           $18 = SAFE_HEAP_LOAD_f64_8_8($34 + $13 | 0, 0);
           $9 = 0;
           $14 = 0;
           $5 = $28;
           if ($32) {
            while (1) {
             $15 = $9 << 3;
             label$286: {
              if (SAFE_HEAP_LOAD_f64_8_8($15 + $8 | 0, 0) != $18) {
               break label$286;
              }
              $19 = SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0);
              if (!($19 > $14)) {
               break label$286;
              }
              $14 = $19;
             }
             $15 = ($9 | 1) << 3;
             label$287: {
              if (SAFE_HEAP_LOAD_f64_8_8($15 + $8 | 0, 0) != $18) {
               break label$287;
              }
              $19 = SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0);
              if (!($19 > $14)) {
               break label$287;
              }
              $14 = $19;
             }
             $9 = $9 + 2 | 0;
             $5 = $5 - 2 | 0;
             if ($5) {
              continue;
             }
             break;
            }
           }
           label$288: {
            if (!$35) {
             break label$288;
            }
            $9 = $9 << 3;
            if (SAFE_HEAP_LOAD_f64_8_8($9 + $8 | 0, 0) != $18) {
             break label$288;
            }
            $18 = SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0);
            if (!($18 > $14)) {
             break label$288;
            }
            $14 = $18;
           }
           $18 = SAFE_HEAP_LOAD_f64_8_8($22 + $34 | 0, 0);
           $19 = 0;
           $9 = 0;
           $5 = $28;
           if ($32) {
            while (1) {
             $15 = $9 << 3;
             label$291: {
              if (SAFE_HEAP_LOAD_f64_8_8($15 + $8 | 0, 0) != $18) {
               break label$291;
              }
              $25 = SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0);
              if (!($25 > $19)) {
               break label$291;
              }
              $19 = $25;
             }
             $15 = ($9 | 1) << 3;
             label$292: {
              if (SAFE_HEAP_LOAD_f64_8_8($15 + $8 | 0, 0) != $18) {
               break label$292;
              }
              $25 = SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0);
              if (!($25 > $19)) {
               break label$292;
              }
              $19 = $25;
             }
             $9 = $9 + 2 | 0;
             $5 = $5 - 2 | 0;
             if ($5) {
              continue;
             }
             break;
            }
           }
           label$293: {
            if (!$35) {
             break label$293;
            }
            $9 = $9 << 3;
            if (SAFE_HEAP_LOAD_f64_8_8($9 + $8 | 0, 0) != $18) {
             break label$293;
            }
            $18 = SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0);
            if (!($19 < $18)) {
             break label$293;
            }
            $19 = $18;
           }
           $8 = $16 + 1 | 0;
           $29 = $29 + $19;
           $30 = $30 + $14;
           if (($0 | 0) != ($16 | 0)) {
            continue;
           }
           break;
          }
          if ($29 < $30) {
           break label$281;
          }
         }
         if (($24 | 0) > ($33 | 0)) {
          break label$280;
         }
         $10 = $33 - $24 | 0;
         $8 = $10 + 1 & 3;
         if ($8) {
          while (1) {
           $9 = $24 << 3;
           SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
           $24 = $24 + 1 | 0;
           $8 = $8 - 1 | 0;
           if ($8) {
            continue;
           }
           break;
          }
         }
         if ($10 >>> 0 < 3) {
          break label$280;
         }
         while (1) {
          $8 = $24 << 3;
          SAFE_HEAP_STORE_f64_8_8($13 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $22 | 0, 0));
          $9 = $8 + 8 | 0;
          SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
          $8 = $8 + 16 | 0;
          SAFE_HEAP_STORE_f64_8_8($13 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $22 | 0, 0));
          $8 = $24 + 3 | 0;
          $9 = $8 << 3;
          SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
          $24 = $24 + 4 | 0;
          if (($8 | 0) != ($33 | 0)) {
           continue;
          }
          break;
         }
         break label$280;
        }
        if (($0 | 0) > ($33 | 0)) {
         break label$280;
        }
        $10 = $33 - $0 | 0;
        $8 = $10 + 1 & 3;
        if ($8) {
         while (1) {
          $9 = $0 << 3;
          SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
          $0 = $0 + 1 | 0;
          $8 = $8 - 1 | 0;
          if ($8) {
           continue;
          }
          break;
         }
        }
        if ($10 >>> 0 < 3) {
         break label$280;
        }
        while (1) {
         $8 = $0 << 3;
         SAFE_HEAP_STORE_f64_8_8($13 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $22 | 0, 0));
         $9 = $8 + 8 | 0;
         SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
         $8 = $8 + 16 | 0;
         SAFE_HEAP_STORE_f64_8_8($13 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $22 | 0, 0));
         $8 = $0 + 3 | 0;
         $9 = $8 << 3;
         SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0));
         $0 = $0 + 4 | 0;
         if (($8 | 0) != ($33 | 0)) {
          continue;
         }
         break;
        }
       }
       $0 = $33;
       break label$274;
      }
      SAFE_HEAP_STORE_i32_4_4($12, 0, $24);
     }
     SAFE_HEAP_STORE_i32_4_4($12, 4, $0);
     $37 = $37 + 1 | 0;
     if (($37 | 0) != ($31 | 0)) {
      continue;
     }
     break;
    }
   }
   operator_20delete_5b_5d_28void__29($17);
  }
  $8 = 0;
  while (1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $1 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $8 = $8 + 1 | 0;
   if (($26 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($1);
 operator_20delete_5b_5d_28void__29($12);
 $8 = ($20 | 0) < 0;
 if (!$8) {
  memcpy($23, $13, $49);
 }
 $1 = operator_20new_5b_5d_28unsigned_20long_29($43);
 $9 = operator_20new_5b_5d_28unsigned_20long_29($43);
 label$303: {
  label$304: {
   if (!$8) {
    $5 = $20 + 1 | 0;
    $10 = $5 & 3;
    $8 = 0;
    if ($20 >>> 0 >= 3) {
     $5 = $5 & -4;
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $13 | 0, 0) > 0);
      $15 = $8 | 1;
      SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $13 | 0, 0) > 0);
      $15 = $8 | 2;
      SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $13 | 0, 0) > 0);
      $15 = $8 | 3;
      SAFE_HEAP_STORE_i32_4_4(($15 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($15 << 3) + $13 | 0, 0) > 0);
      $8 = $8 + 4 | 0;
      $5 = $5 - 4 | 0;
      if ($5) {
       continue;
      }
      break;
     }
    }
    if ($10) {
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $13 | 0, 0) > 0);
      $8 = $8 + 1 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    $5 = 0;
    SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
    $8 = 1;
    if (($20 | 0) < 1) {
     break label$304;
    }
    $17 = $20 & 1;
    $10 = 0;
    if (($20 | 0) != 1) {
     $15 = $20 & -2;
     while (1) {
      $12 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0);
      if (($12 | 0) != ($5 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $1 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
       $10 = $10 + 1 | 0;
      }
      $16 = $8 + 1 | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $9 | 0, 0);
      if (($12 | 0) != ($5 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $1 | 0, 0, $16 - (($10 | 0) % 2 | 0) | 0);
       $10 = $10 + 1 | 0;
      }
      $8 = $8 + 2 | 0;
      $15 = $15 - 2 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    label$314: {
     if (!$17) {
      break label$314;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $9 | 0, 0) | 0) == ($5 | 0)) {
      break label$314;
     }
     SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $1 | 0, 0, $8 - (($10 | 0) % 2 | 0) | 0);
     $10 = $10 + 1 | 0;
    }
    operator_20delete_5b_5d_28void__29($9);
    if (($10 | 0) < 4) {
     break label$303;
    }
    $16 = ($10 >>> 1 | 0) - 1 | 0;
    $12 = 0;
    while (1) {
     $8 = $12 << 3;
     $12 = $12 + 1 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4(($12 << 3) + $1 | 0, 0);
     $9 = SAFE_HEAP_LOAD_i32_4_4(($8 | 4) + $1 | 0, 0);
     $15 = $10 + ($9 ^ -1) | 0;
     label$316: {
      if (($15 | 0) > 8 | ($10 - 1 | 0) <= ($9 | 0)) {
       break label$316;
      }
      $3 = SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $13 | 0, 0) + -1;
      $18 = SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $13 | 0, 0) + 1;
      $14 = ($3 - $18) / (+($15 | 0) + 1);
      $5 = $15 & 3;
      $8 = 1;
      if (($10 - $9 | 0) - 2 >>> 0 >= 3) {
       $15 = $15 & -4;
       while (1) {
        $10 = ($9 << 3) + $23 | 0;
        SAFE_HEAP_STORE_f64_8_8($10 + 8 | 0, 0, $18 + $14 * +($8 | 0));
        SAFE_HEAP_STORE_f64_8_8($10 + 24 | 0, 0, $18 + $14 * +($8 + 2 | 0));
        SAFE_HEAP_STORE_f64_8_8($10 + 16 | 0, 0, $18 + $14 * +($8 + 1 | 0));
        $9 = $9 + 4 | 0;
        SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $23 | 0, 0, $18 + $14 * +($8 + 3 | 0));
        $8 = $8 + 4 | 0;
        $15 = $15 - 4 | 0;
        if ($15) {
         continue;
        }
        break;
       }
      }
      if (!$5) {
       break label$316;
      }
      while (1) {
       $9 = $9 + 1 | 0;
       SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $23 | 0, 0, $18 + $14 * +($8 | 0));
       $8 = $8 + 1 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue;
       }
       break;
      }
     }
     if (($12 | 0) != ($16 | 0)) {
      continue;
     }
     break;
    }
    break label$303;
   }
   SAFE_HEAP_STORE_i32_4_4(($20 << 2) + $9 | 0, 0, 0);
  }
  operator_20delete_5b_5d_28void__29($9);
 }
 operator_20delete_5b_5d_28void__29($1);
 operator_20delete_5b_5d_28void__29($11);
 operator_20delete_5b_5d_28void__29($13);
 $9 = $20 + 601 | 0;
 $35 = ($9 & 536870911) != ($9 | 0) ? -1 : $9 << 3;
 $15 = memset(operator_20new_5b_5d_28unsigned_20long_29($35), 0, 2400);
 if (($20 | 0) >= 0) {
  $8 = $20 + 301 | 0;
  memcpy($15 + 2400 | 0, $23, ((($8 | 0) > 301 ? $8 : 301) << 3) - 2400 | 0);
 }
 $8 = $20 + 302 | 0;
 memset(($15 + $49 | 0) + 2400 | 0, 0, ((($8 | 0) < ($9 | 0) ? $9 : $8) - $20 << 3) - 2408 | 0);
 $8 = ($9 & 1073741823) != ($9 | 0) ? -1 : $9 << 2;
 $26 = operator_20new_5b_5d_28unsigned_20long_29($8);
 $10 = operator_20new_5b_5d_28unsigned_20long_29($8);
 label$321: {
  label$322: {
   label$323: {
    if (($20 | 0) >= -600) {
     $5 = $9 & 3;
     $8 = 0;
     $12 = $20 + 600 | 0;
     if ($12 >>> 0 >= 3) {
      $11 = $9 & -4;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $15 | 0, 0) > 0);
       $13 = $8 | 1;
       SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $15 | 0, 0) > 0);
       $13 = $8 | 2;
       SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $15 | 0, 0) > 0);
       $13 = $8 | 3;
       SAFE_HEAP_STORE_i32_4_4(($13 << 2) + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $15 | 0, 0) > 0);
       $8 = $8 + 4 | 0;
       $11 = $11 - 4 | 0;
       if ($11) {
        continue;
       }
       break;
      }
     }
     if ($5) {
      while (1) {
       SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $15 | 0, 0) > 0);
       $8 = $8 + 1 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue;
       }
       break;
      }
     }
     $8 = 0;
     SAFE_HEAP_STORE_i32_4_4((($20 << 2) + $10 | 0) + 2400 | 0, 0, 0);
     if (($20 | 0) < -599) {
      break label$321;
     }
     $5 = 1;
     $16 = $20 & 1;
     if (($20 | 0) != -599) {
      break label$323;
     }
     $11 = 0;
     break label$322;
    }
    $8 = 0;
    SAFE_HEAP_STORE_i32_4_4((($20 << 2) + $10 | 0) + 2400 | 0, 0, 0);
    break label$321;
   }
   $13 = $12 & -2;
   $11 = 0;
   while (1) {
    $12 = SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $10 | 0, 0);
    if (($12 | 0) != ($11 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $26 | 0, 0, $5 - (($8 | 0) % 2 | 0) | 0);
     $8 = $8 + 1 | 0;
    }
    $1 = $5 + 1 | 0;
    $11 = SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + $10 | 0, 0);
    if (($12 | 0) != ($11 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $26 | 0, 0, $1 - (($8 | 0) % 2 | 0) | 0);
     $8 = $8 + 1 | 0;
    }
    $5 = $5 + 2 | 0;
    $13 = $13 - 2 | 0;
    if ($13) {
     continue;
    }
    break;
   }
  }
  if (!$16) {
   break label$321;
  }
  if ((SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + $10 | 0, 0) | 0) == ($11 | 0)) {
   break label$321;
  }
  SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $26 | 0, 0, $5 - (($8 | 0) % 2 | 0) | 0);
  $8 = $8 + 1 | 0;
 }
 operator_20delete_5b_5d_28void__29($10);
 $22 = ($8 | 0) / 2 | 0;
 $17 = operator_20new_5b_5d_28unsigned_20long_29(($22 & 1073741823) != ($22 | 0) ? -1 : $22 << 2);
 if (($8 | 0) > 1) {
  $8 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $17 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($35));
   $8 = $8 + 1 | 0;
   if (($22 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
  $12 = 0;
  while (1) {
   $10 = $12 << 1;
   $8 = SAFE_HEAP_LOAD_i32_4_4(($12 << 3) + $26 | 0, 0);
   if (($8 | 0) >= 1) {
    memset(SAFE_HEAP_LOAD_i32_4_4(($12 << 2) + $17 | 0, 0), 0, $8 << 3);
   }
   $13 = SAFE_HEAP_LOAD_i32_4_4(($10 << 2 | 4) + $26 | 0, 0);
   label$336: {
    if (($13 | 0) < ($8 | 0)) {
     break label$336;
    }
    $10 = SAFE_HEAP_LOAD_i32_4_4(($12 << 2) + $17 | 0, 0);
    $1 = $13 - $8 | 0;
    $5 = $1 + 1 & 3;
    if ($5) {
     while (1) {
      $11 = $8 << 3;
      SAFE_HEAP_STORE_f64_8_8($11 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($11 + $15 | 0, 0));
      $8 = $8 + 1 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue;
      }
      break;
     }
    }
    if ($1 >>> 0 <= 2) {
     break label$336;
    }
    while (1) {
     $5 = $8 << 3;
     SAFE_HEAP_STORE_f64_8_8($10 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $15 | 0, 0));
     $11 = $5 + 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($11 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($11 + $15 | 0, 0));
     $5 = $5 + 16 | 0;
     SAFE_HEAP_STORE_f64_8_8($10 + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5 + $15 | 0, 0));
     $5 = $8 + 3 | 0;
     $11 = $5 << 3;
     SAFE_HEAP_STORE_f64_8_8($11 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($11 + $15 | 0, 0));
     $8 = $8 + 4 | 0;
     if (($5 | 0) != ($13 | 0)) {
      continue;
     }
     break;
    }
   }
   if (($13 + 1 | 0) < ($9 | 0)) {
    memset((SAFE_HEAP_LOAD_i32_4_4(($12 << 2) + $17 | 0, 0) + ($13 << 3) | 0) + 8 | 0, 0, ($13 ^ -1) + $9 << 3);
   }
   $12 = $12 + 1 | 0;
   if (($22 | 0) != ($12 | 0)) {
    continue;
   }
   break;
  }
  $34 = $20 + 599 | 0;
  $31 = $7 - 2400 | 0;
  $24 = 0;
  $32 = ($20 | 0) > -601;
  while (1) {
   $10 = $24 << 3;
   $16 = SAFE_HEAP_LOAD_i32_4_4($26 + $10 | 0, 0);
   $28 = $16 << 3;
   $8 = SAFE_HEAP_LOAD_i32_4_4(($24 << 2) + $17 | 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4(($10 | 4) + $26 | 0, 0);
   $13 = operator_20new_5b_5d_28unsigned_20long_29($35);
   label$342: {
    if (($16 | 0) < 1) {
     break label$342;
    }
    $5 = $8 + $28 | 0;
    $12 = $16 & 3;
    $10 = 0;
    if ($16 - 1 >>> 0 >= 3) {
     $1 = $16 & -4;
     while (1) {
      $11 = $10 << 3;
      SAFE_HEAP_STORE_f64_8_8($11 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8(($11 | 8) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8(($11 | 16) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8(($11 | 24) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      $10 = $10 + 4 | 0;
      $1 = $1 - 4 | 0;
      if ($1) {
       continue;
      }
      break;
     }
    }
    if (!$12) {
     break label$342;
    }
    while (1) {
     SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
     $10 = $10 + 1 | 0;
     $12 = $12 - 1 | 0;
     if ($12) {
      continue;
     }
     break;
    }
   }
   $12 = $0 + 1 | 0;
   label$346: {
    if (($12 | 0) >= ($9 | 0)) {
     break label$346;
    }
    $5 = ($0 << 3) + $8 | 0;
    $1 = $34 - $0 | 0;
    $10 = $12;
    $11 = $20 - $0 & 3;
    if ($11) {
     while (1) {
      SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      $10 = $10 + 1 | 0;
      $11 = $11 - 1 | 0;
      if ($11) {
       continue;
      }
      break;
     }
    }
    if ($1 >>> 0 < 3) {
     break label$346;
    }
    while (1) {
     $11 = ($10 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
     SAFE_HEAP_STORE_f64_8_8($11 + 8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
     SAFE_HEAP_STORE_f64_8_8($11 + 16 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
     SAFE_HEAP_STORE_f64_8_8($11 + 24 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
     $10 = $10 + 4 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $19 = 0;
   $10 = 0;
   $5 = 0;
   $25 = 0;
   $18 = 0;
   if ($32) {
    while (1) {
     $1 = (($5 ^ -1) + $9 << 3) + $13 | 0;
     $3 = $18 * .007820208033497172;
     $14 = $25;
     $4 = $14 * .015640416066994345;
     $25 = $14 * 1.7347257688092754 + SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $8 | 0, 0) + $18 * -.7660066009432641;
     SAFE_HEAP_STORE_f64_8_8($1, 0, $3 + ($4 + $25 * .007820208033497172));
     $18 = $14;
     $5 = $5 + 1 | 0;
     if (($9 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
    $18 = 0;
    while (1) {
     $1 = (($10 ^ -1) + $9 << 3) + $15 | 0;
     $3 = $18 * .007820208033497172;
     $14 = $19;
     $4 = $14 * .015640416066994345;
     $19 = $14 * 1.7347257688092754 + SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $13 | 0, 0) + $18 * -.7660066009432641;
     SAFE_HEAP_STORE_f64_8_8($1, 0, $3 + ($4 + $19 * .007820208033497172));
     $18 = $14;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   operator_20delete_5b_5d_28void__29($13);
   if (($0 | 0) >= ($16 | 0)) {
    memcpy($31 + $28 | 0, $15 + $28 | 0, $12 - $16 << 3);
   }
   $24 = $24 + 1 | 0;
   if (($24 | 0) != ($22 | 0)) {
    continue;
   }
   break;
  }
  $8 = 0;
  while (1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $17 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $8 = $8 + 1 | 0;
   if (($22 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($15);
 operator_20delete_5b_5d_28void__29($26);
 operator_20delete_5b_5d_28void__29($2);
 operator_20delete_5b_5d_28void__29($23);
 operator_20delete_5b_5d_28void__29($56);
 $8 = 0;
 if (($20 | 0) >= 0) {
  while (1) {
   $9 = $8 << 2;
   $10 = SAFE_HEAP_LOAD_i32_4_4($27 + $9 | 0, 0);
   if ($10) {
    operator_20delete_5b_5d_28void__29($10);
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($9 + $48 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $9 = ($8 | 0) != ($20 | 0);
   $8 = $8 + 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($27);
 operator_20delete_5b_5d_28void__29($48);
 operator_20delete_5b_5d_28void__29($50);
 __stack_pointer = $21 + 416 | 0;
}

function Dio($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 $11 = __stack_pointer - 368 | 0;
 __stack_pointer = $11;
 $50 = SAFE_HEAP_LOAD_f64_8_8($3, 8);
 $31 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
 $12 = log($50 / $31);
 $8 = SAFE_HEAP_LOAD_f64_8_8($3, 16);
 $12 = $8 * ($12 / .6931471805599453);
 label$1: {
  if (Math_abs($12) < 2147483648) {
   $21 = ~~$12;
   break label$1;
  }
  $21 = -2147483648;
 }
 $41 = SAFE_HEAP_LOAD_f64_8_8($3, 40);
 $9 = SAFE_HEAP_LOAD_i32_4_4($3, 32);
 $42 = SAFE_HEAP_LOAD_f64_8_8($3, 24);
 $17 = $21 + 1 | 0;
 $38 = operator_20new_5b_5d_28unsigned_20long_29(($17 & 536870911) != ($17 | 0) ? -1 : $17 << 3);
 label$3: {
  if (($21 | 0) < 0) {
   break label$3;
  }
  $10 = $17 & 1;
  if ($21) {
   $3 = $17 & -2;
   while (1) {
    $7 = $6 | 1;
    SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $38 | 0, 0, $31 * exp2(+($7 | 0) / $8));
    $6 = $6 + 2 | 0;
    SAFE_HEAP_STORE_f64_8_8(($7 << 3) + $38 | 0, 0, $31 * exp2(+($6 | 0) / $8));
    $3 = $3 - 2 | 0;
    if ($3) {
     continue;
    }
    break;
   }
  }
  if (!$10) {
   break label$3;
  }
  SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $38 | 0, 0, $31 * exp2(+($6 + 1 | 0) / $8));
 }
 $3 = ($9 | 0) < 12 ? $9 : 12;
 $7 = ($3 | 0) > 1 ? $3 : 1;
 $19 = ($1 | 0) / ($7 | 0) | 0;
 $18 = +($2 | 0);
 $28 = $18 / +($7 | 0);
 $12 = $28 / 50;
 $6 = $19 + (matlab_round($12) << 1) | 0;
 $43 = SAFE_HEAP_LOAD_f64_8_8($38, 0);
 $8 = $28 / $43 * .5 + 1;
 label$6: {
  if (Math_abs($8) < 2147483648) {
   $9 = ~~$8;
   break label$6;
  }
  $9 = -2147483648;
 }
 $16 = GetSuitableFFTSize(($6 + ($9 << 2) | 0) + 2 | 0);
 $46 = ($16 & 268435455) != ($16 | 0) ? -1 : $16 << 4;
 $39 = operator_20new_5b_5d_28unsigned_20long_29($46);
 $9 = $16 << 3;
 $47 = ($16 & 536870911) != ($16 | 0) ? -1 : $9;
 $6 = operator_20new_5b_5d_28unsigned_20long_29($47);
 if (($16 | 0) >= 1) {
  memset($6, 0, $9);
 }
 label$9: {
  if (($3 | 0) <= 1) {
   if (($1 | 0) < 1) {
    break label$9;
   }
   memcpy($6, $0, $1 << 3);
   break label$9;
  }
  decimate($0, $1, $7, $6);
 }
 $32 = $19 + 1 | 0;
 $3 = 0;
 label$11: {
  if (($19 | 0) < 0) {
   break label$11;
  }
  $0 = $19 + 1 | 0;
  $9 = $0 & 3;
  label$12: {
   if ($19 >>> 0 < 3) {
    $8 = 0;
    break label$12;
   }
   $2 = $0 & -4;
   $8 = 0;
   while (1) {
    $7 = $3 << 3;
    $8 = $8 + SAFE_HEAP_LOAD_f64_8_8($7 + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($7 | 8) + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($7 | 16) + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($7 | 24) + $6 | 0, 0);
    $3 = $3 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  if ($9) {
   while (1) {
    $8 = $8 + SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $6 | 0, 0);
    $3 = $3 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  $9 = $0 & 3;
  $8 = $8 / +($32 | 0);
  $3 = 0;
  if ($19 >>> 0 >= 3) {
   $2 = $0 & -4;
   while (1) {
    $7 = $3 << 3;
    $0 = $7 + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $8);
    $0 = ($7 | 8) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $8);
    $0 = ($7 | 16) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $8);
    $7 = ($7 | 24) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0) - $8);
    $3 = $3 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  if (!$9) {
   break label$11;
  }
  while (1) {
   $7 = ($3 << 3) + $6 | 0;
   SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0) - $8);
   $3 = $3 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 if (($16 | 0) > ($32 | 0)) {
  memset(($32 << 3) + $6 | 0, 0, $16 - $32 << 3);
 }
 fft_plan_dft_r2c_1d($11 + 328 | 0, $16, $6, $39, 3);
 SAFE_HEAP_STORE_i64_8_8($11 + 280 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11 + 360 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 272 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11 + 352 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 264 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11 + 344 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 256 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11 + 336 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11, 248, SAFE_HEAP_LOAD_i64_8_8($11, 328), i64toi32_i32$HIGH_BITS);
 fft_execute($11 + 248 | 0);
 $3 = 1;
 $7 = matlab_round($12);
 $13 = $7 << 1;
 $14 = $13 | 1;
 if (($14 | 0) >= 1) {
  $8 = +($13 + 2 | 0);
  if ($7) {
   $9 = $13;
   while (1) {
    $2 = ($3 << 3) + $6 | 0;
    $12 = +($3 | 0);
    SAFE_HEAP_STORE_f64_8_8($2 - 8 | 0, 0, .5 - cos(($12 + $12) * 3.141592653589793 / $8) * .5);
    $12 = +($3 + 1 | 0);
    SAFE_HEAP_STORE_f64_8_8($2, 0, .5 - cos(($12 + $12) * 3.141592653589793 / $8) * .5);
    $3 = $3 + 2 | 0;
    $9 = $9 - 2 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  $12 = +($3 | 0);
  SAFE_HEAP_STORE_f64_8_8((($3 << 3) + $6 | 0) - 8 | 0, 0, .5 - cos(($12 + $12) * 3.141592653589793 / $8) * .5);
 }
 if (($14 | 0) < ($16 | 0)) {
  memset(($14 << 3) + $6 | 0, 0, $16 - $14 << 3);
 }
 if (($14 | 0) >= 1) {
  label$26: {
   if ($13 >>> 0 < 3) {
    $8 = 0;
    $3 = 0;
    break label$26;
   }
   $2 = $13 & -4;
   $8 = 0;
   $3 = 0;
   while (1) {
    $9 = $3 << 3;
    $8 = $8 + SAFE_HEAP_LOAD_f64_8_8($9 + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 8) + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 16) + $6 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8(($9 | 24) + $6 | 0, 0);
    $3 = $3 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $9 = $14 & 3;
  while (1) {
   $8 = $8 + SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $6 | 0, 0);
   $3 = $3 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
  $3 = 0;
  if ($7) {
   $9 = $13;
   while (1) {
    $2 = $3 << 3;
    $0 = $6 + $2 | 0;
    SAFE_HEAP_STORE_f64_8_8($0, 0, -SAFE_HEAP_LOAD_f64_8_8($0, 0) / $8);
    $2 = ($2 | 8) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($2, 0, -SAFE_HEAP_LOAD_f64_8_8($2, 0) / $8);
    $3 = $3 + 2 | 0;
    $9 = $9 - 2 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  $3 = ($3 << 3) + $6 | 0;
  SAFE_HEAP_STORE_f64_8_8($3, 0, -SAFE_HEAP_LOAD_f64_8_8($3, 0) / $8);
  label$32: {
   if (($14 | 0) < 3) {
    break label$32;
   }
   $9 = $16 - $7 | 0;
   $0 = ($7 | 0) > 1 ? $7 : 1;
   $2 = $0 & 3;
   $3 = 0;
   if ($0 - 1 >>> 0 >= 3) {
    $0 = $0 & 2147483644;
    while (1) {
     SAFE_HEAP_STORE_f64_8_8(($3 + $9 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $6 | 0, 0));
     $10 = $3 | 1;
     SAFE_HEAP_STORE_f64_8_8(($10 + $9 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $6 | 0, 0));
     $10 = $3 | 2;
     SAFE_HEAP_STORE_f64_8_8(($10 + $9 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $6 | 0, 0));
     $10 = $3 | 3;
     SAFE_HEAP_STORE_f64_8_8(($10 + $9 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $6 | 0, 0));
     $3 = $3 + 4 | 0;
     $0 = $0 - 4 | 0;
     if ($0) {
      continue;
     }
     break;
    }
   }
   if (!$2) {
    break label$32;
   }
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($3 + $9 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $6 | 0, 0));
    $3 = $3 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $3 = 0;
  if ($13 >>> 0 >= 3) {
   $9 = $13 & -4;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($3 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($3 + $7 << 3) + $6 | 0, 0));
    $2 = $3 | 1;
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $6 | 0, 0));
    $2 = $3 | 2;
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $6 | 0, 0));
    $2 = $3 | 3;
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $6 | 0, 0));
    $3 = $3 + 4 | 0;
    $9 = $9 - 4 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  $9 = $14 & 3;
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($3 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($3 + $7 << 3) + $6 | 0, 0));
   $3 = $3 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_f64_8_8($6, 0, SAFE_HEAP_LOAD_f64_8_8($6, 0) + 1);
 $2 = operator_20new_5b_5d_28unsigned_20long_29($46);
 $10 = $11 + 336 | 0;
 SAFE_HEAP_STORE_i64_8_8($11 + 216 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
 $14 = $11 + 352 | 0;
 SAFE_HEAP_STORE_i64_8_8($11 + 232 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($14, 0), i64toi32_i32$HIGH_BITS);
 $13 = $11 + 360 | 0;
 SAFE_HEAP_STORE_i64_8_8($11 + 240 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($13, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i32_4_4($11, 348, $2);
 $29 = $11 + 344 | 0;
 SAFE_HEAP_STORE_i64_8_8($11 + 224 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($29, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11, 208, SAFE_HEAP_LOAD_i64_8_8($11, 328), i64toi32_i32$HIGH_BITS);
 fft_execute($11 + 208 | 0);
 if (($16 | 0) >= -1) {
  $0 = ($16 | 0) / 2 | 0;
  $3 = 0;
  while (1) {
   $9 = $3 << 4;
   $7 = $39 + $9 | 0;
   $9 = $2 + $9 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
   $12 = SAFE_HEAP_LOAD_f64_8_8($7, 8);
   $48 = $8 * $12;
   $20 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   $15 = SAFE_HEAP_LOAD_f64_8_8($9, 8);
   SAFE_HEAP_STORE_f64_8_8($7, 8, $48 + $20 * $15);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $20 * $8 - $12 * $15);
   $7 = ($0 | 0) != ($3 | 0);
   $3 = $3 + 1 | 0;
   if ($7) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i64_8_8($11 + 200 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($13, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 192 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($14, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 184 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($29, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 176 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11, 168, SAFE_HEAP_LOAD_i64_8_8($11, 328), i64toi32_i32$HIGH_BITS);
 fft_destroy_plan($11 + 168 | 0);
 operator_20delete_5b_5d_28void__29($6);
 operator_20delete_5b_5d_28void__29($2);
 $8 = +($1 | 0) * 1e3 / $18 / $42;
 label$41: {
  if (Math_abs($8) < 2147483648) {
   $14 = ~~$8;
   break label$41;
  }
  $14 = -2147483648;
 }
 $23 = $14 + 1 | 0;
 $24 = ($23 & 536870911) != ($23 | 0) ? -1 : $23 << 3;
 $6 = 0;
 $7 = ($17 & 1073741823) != ($17 | 0) ? -1 : $17 << 2;
 $3 = operator_20new_5b_5d_28unsigned_20long_29($7);
 $1 = operator_20new_5b_5d_28unsigned_20long_29($7);
 if (($21 | 0) >= 0) {
  while (1) {
   $7 = $6 << 2;
   SAFE_HEAP_STORE_i32_4_4($7 + $3 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($24));
   SAFE_HEAP_STORE_i32_4_4($1 + $7 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($24));
   $7 = ($6 | 0) == ($21 | 0);
   $6 = $6 + 1 | 0;
   if (!$7) {
    continue;
   }
   break;
  }
 }
 $6 = 0;
 label$45: {
  if (($14 | 0) < 0) {
   break label$45;
  }
  $7 = $14 + 1 | 0;
  $2 = $7 & 1;
  if ($14) {
   $7 = $7 & -2;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $4 | 0, 0, $42 * +($6 | 0) / 1e3);
    $9 = $6 | 1;
    SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $4 | 0, 0, $42 * +($9 | 0) / 1e3);
    $6 = $6 + 2 | 0;
    $7 = $7 - 2 | 0;
    if ($7) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$45;
  }
  SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $4 | 0, 0, $42 * +($6 | 0) / 1e3);
 }
 $17 = operator_20new_5b_5d_28unsigned_20long_29($24);
 $9 = operator_20new_5b_5d_28unsigned_20long_29($24);
 label$48: {
  if (($21 | 0) < 0) {
   break label$48;
  }
  $25 = ($32 & 536870911) != ($32 | 0) ? -1 : $32 << 3;
  $29 = $16 >>> 1 | 0;
  $56 = $16 << 3;
  $51 = $19 & -4;
  $52 = $19 & 3;
  $57 = $19 - 1 | 0;
  $58 = $23 << 3;
  $6 = $14 + 1 | 0;
  $59 = $6 & -8;
  $60 = $6 & 7;
  $6 = $19 + 1 | 0;
  $53 = $6 & -4;
  $54 = $6 & 3;
  while (1) {
   $6 = operator_20new_5b_5d_28unsigned_20long_29($47);
   $13 = matlab_round($28 / $43 * .5);
   $7 = $13 << 2;
   $22 = operator_20new_5b_5d_28unsigned_20long_29($47);
   NuttallWindow($7, $22);
   if (($7 | 0) < ($16 | 0)) {
    $7 = $13 << 5;
    memset($22 + $7 | 0, 0, $56 - $7 | 0);
   }
   $2 = $11 + 328 | 0;
   $0 = operator_20new_5b_5d_28unsigned_20long_29($46);
   fft_plan_dft_r2c_1d($2, $16, $22, $0, 3);
   $27 = $11 + 360 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 160 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($27, 0), i64toi32_i32$HIGH_BITS);
   $26 = $11 + 352 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 152 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($26, 0), i64toi32_i32$HIGH_BITS);
   $30 = $11 + 344 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 144 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($30, 0), i64toi32_i32$HIGH_BITS);
   $35 = $11 + 336 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 136 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($35, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 128, SAFE_HEAP_LOAD_i64_8_8($11, 328), i64toi32_i32$HIGH_BITS);
   fft_execute($11 + 128 | 0);
   $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $12 = SAFE_HEAP_LOAD_f64_8_8($39, 8);
   $18 = $8 * $12;
   $20 = SAFE_HEAP_LOAD_f64_8_8($39, 0);
   $15 = SAFE_HEAP_LOAD_f64_8_8($0, 8);
   SAFE_HEAP_STORE_f64_8_8($0, 8, $18 + $20 * $15);
   SAFE_HEAP_STORE_f64_8_8($0, 0, $20 * $8 - $12 * $15);
   $7 = 1;
   if (($16 | 0) > 1) {
    while (1) {
     $10 = $7 << 4;
     $2 = $10 + $0 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
     $10 = $10 + $39 | 0;
     $12 = SAFE_HEAP_LOAD_f64_8_8($10, 8);
     $18 = $8 * $12;
     $20 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     $15 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
     $18 = $18 + $20 * $15;
     SAFE_HEAP_STORE_f64_8_8($2, 8, $18);
     $8 = $20 * $8 - $12 * $15;
     SAFE_HEAP_STORE_f64_8_8($2, 0, $8);
     $2 = (($7 ^ -1) + $16 << 4) + $0 | 0;
     SAFE_HEAP_STORE_f64_8_8($2, 8, $18);
     SAFE_HEAP_STORE_f64_8_8($2, 0, $8);
     $2 = ($7 | 0) == ($29 | 0);
     $7 = $7 + 1 | 0;
     if (!$2) {
      continue;
     }
     break;
    }
   }
   fft_plan_dft_c2r_1d($11 + 288 | 0, $16, $0, $6, 3);
   $36 = $11 + 320 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 120 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($36, 0), i64toi32_i32$HIGH_BITS);
   $33 = $11 + 312 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 112 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($33, 0), i64toi32_i32$HIGH_BITS);
   $37 = $11 + 304 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($37, 0), i64toi32_i32$HIGH_BITS);
   $34 = $11 + 296 | 0;
   SAFE_HEAP_STORE_i64_8_8($11 + 96 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($34, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 88, SAFE_HEAP_LOAD_i64_8_8($11, 288), i64toi32_i32$HIGH_BITS);
   fft_execute($11 + 88 | 0);
   $40 = ($19 | 0) < 0;
   label$53: {
    if ($40) {
     break label$53;
    }
    $2 = $13 << 1;
    $7 = 0;
    $10 = $53;
    if ($19 >>> 0 >= 3) {
     while (1) {
      SAFE_HEAP_STORE_f64_8_8(($7 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $6 | 0, 0));
      $13 = $7 | 1;
      SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $13 << 3) + $6 | 0, 0));
      $13 = $7 | 2;
      SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $13 << 3) + $6 | 0, 0));
      $13 = $7 | 3;
      SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $13 << 3) + $6 | 0, 0));
      $7 = $7 + 4 | 0;
      $10 = $10 - 4 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    $10 = $54;
    if (!$10) {
     break label$53;
    }
    while (1) {
     SAFE_HEAP_STORE_f64_8_8(($7 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $6 | 0, 0));
     $7 = $7 + 1 | 0;
     $10 = $10 - 1 | 0;
     if ($10) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i64_8_8($11 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($36, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($33, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($37, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($34, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 48, SAFE_HEAP_LOAD_i64_8_8($11, 288), i64toi32_i32$HIGH_BITS);
   fft_destroy_plan($11 + 48 | 0);
   SAFE_HEAP_STORE_i64_8_8($11 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($27, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($26, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($30, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($35, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 8, SAFE_HEAP_LOAD_i64_8_8($11, 328), i64toi32_i32$HIGH_BITS);
   fft_destroy_plan($11 + 8 | 0);
   operator_20delete_5b_5d_28void__29($0);
   operator_20delete_5b_5d_28void__29($22);
   $26 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $30 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $34 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $35 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $36 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $33 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $44 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $37 = operator_20new_5b_5d_28unsigned_20long_29($25);
   $55 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $32, $28, $26, $36);
   label$57: {
    label$58: {
     label$59: {
      label$60: {
       label$61: {
        if (!$40) {
         $7 = 0;
         $0 = $53;
         if ($19 >>> 0 >= 3) {
          break label$61;
         }
         break label$60;
        }
        $40 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $32, $28, $30, $33);
        break label$59;
       }
       while (1) {
        $2 = $7 << 3;
        $10 = $6 + $2 | 0;
        SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
        $10 = ($2 | 8) + $6 | 0;
        SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
        $10 = ($2 | 16) + $6 | 0;
        SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
        $2 = ($2 | 24) + $6 | 0;
        SAFE_HEAP_STORE_f64_8_8($2, 0, -SAFE_HEAP_LOAD_f64_8_8($2, 0));
        $7 = $7 + 4 | 0;
        $0 = $0 - 4 | 0;
        if ($0) {
         continue;
        }
        break;
       }
      }
      $2 = $54;
      if ($2) {
       while (1) {
        $0 = ($7 << 3) + $6 | 0;
        SAFE_HEAP_STORE_f64_8_8($0, 0, -SAFE_HEAP_LOAD_f64_8_8($0, 0));
        $7 = $7 + 1 | 0;
        $2 = $2 - 1 | 0;
        if ($2) {
         continue;
        }
        break;
       }
      }
      $40 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $32, $28, $30, $33);
      if (($19 | 0) < 1) {
       break label$59;
      }
      $8 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
      $7 = 0;
      $0 = $51;
      $22 = $57 >>> 0 < 3;
      if ($22) {
       break label$58;
      }
      while (1) {
       $2 = $7 << 3;
       $13 = $6 + $2 | 0;
       $10 = ($2 | 8) + $6 | 0;
       $12 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
       SAFE_HEAP_STORE_f64_8_8($13, 0, $8 - $12);
       $13 = ($2 | 16) + $6 | 0;
       $8 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
       SAFE_HEAP_STORE_f64_8_8($10, 0, $12 - $8);
       $2 = ($2 | 24) + $6 | 0;
       $12 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
       SAFE_HEAP_STORE_f64_8_8($13, 0, $8 - $12);
       $7 = $7 + 4 | 0;
       $8 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $6 | 0, 0);
       SAFE_HEAP_STORE_f64_8_8($2, 0, $12 - $8);
       $0 = $0 - 4 | 0;
       if ($0) {
        continue;
       }
       break;
      }
      break label$58;
     }
     $49 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $19, $28, $34, $44);
     break label$57;
    }
    $2 = $52;
    if ($2) {
     while (1) {
      $0 = ($7 << 3) + $6 | 0;
      $7 = $7 + 1 | 0;
      $12 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $6 | 0, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $8 - $12);
      $8 = $12;
      $2 = $2 - 1 | 0;
      if ($2) {
       continue;
      }
      break;
     }
    }
    $7 = 0;
    $49 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $19, $28, $34, $44);
    $0 = $51;
    if (!$22) {
     while (1) {
      $2 = $7 << 3;
      $10 = $6 + $2 | 0;
      SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $10 = ($2 | 8) + $6 | 0;
      SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $10 = ($2 | 16) + $6 | 0;
      SAFE_HEAP_STORE_f64_8_8($10, 0, -SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $2 = ($2 | 24) + $6 | 0;
      SAFE_HEAP_STORE_f64_8_8($2, 0, -SAFE_HEAP_LOAD_f64_8_8($2, 0));
      $7 = $7 + 4 | 0;
      $0 = $0 - 4 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $2 = $52;
    if (!$2) {
     break label$57;
    }
    while (1) {
     $0 = ($7 << 3) + $6 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, -SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $7 = $7 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue;
     }
     break;
    }
   }
   label$72: {
    label$73: {
     $0 = ($55 | 0) < 3 | ($40 | 0) < 3 | ($49 | 0) < 3;
     $7 = $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($6, $19, $28, $35, $37);
     label$74: {
      if (($7 | 0) > 2 ? $0 : 1) {
       if (($14 | 0) < 0) {
        break label$73;
       }
       $2 = 0;
       memset($17, 0, $58);
       $0 = $59;
       if ($14 >>> 0 >= 7) {
        while (1) {
         $7 = $2 << 3;
         SAFE_HEAP_STORE_i64_8_8($9 + $7 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 8) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 16) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 24) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 32) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 40) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 48) + $9 | 0, 0, 0, 1090021888);
         SAFE_HEAP_STORE_i64_8_8(($7 | 56) + $9 | 0, 0, 0, 1090021888);
         $2 = $2 + 8 | 0;
         $0 = $0 - 8 | 0;
         if ($0) {
          continue;
         }
         break;
        }
       }
       $7 = $60;
       if (!$7) {
        break label$74;
       }
       while (1) {
        SAFE_HEAP_STORE_i64_8_8(($2 << 3) + $9 | 0, 0, 0, 1090021888);
        $2 = $2 + 1 | 0;
        $7 = $7 - 1 | 0;
        if ($7) {
         continue;
        }
        break;
       }
       break label$74;
      }
      $10 = operator_20new_5b_5d_28unsigned_20long_29($24);
      $13 = operator_20new_5b_5d_28unsigned_20long_29($24);
      $22 = operator_20new_5b_5d_28unsigned_20long_29($24);
      $27 = operator_20new_5b_5d_28unsigned_20long_29($24);
      interp1($26, $36, $55, $4, $23, $10);
      interp1($30, $33, $40, $4, $23, $13);
      interp1($34, $44, $49, $4, $23, $22);
      interp1($35, $37, $7, $4, $23, $27);
      $2 = 0;
      if (($14 | 0) >= 0) {
       $48 = $43 * .5;
       while (1) {
        $7 = $2 << 3;
        $0 = $17 + $7 | 0;
        $12 = SAFE_HEAP_LOAD_f64_8_8($7 + $10 | 0, 0);
        $20 = SAFE_HEAP_LOAD_f64_8_8($7 + $13 | 0, 0);
        $8 = $12 + $20;
        $15 = SAFE_HEAP_LOAD_f64_8_8($7 + $22 | 0, 0);
        $8 = $8 + $15;
        $18 = SAFE_HEAP_LOAD_f64_8_8($7 + $27 | 0, 0);
        $8 = ($8 + $18) * .25;
        SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
        $7 = $7 + $9 | 0;
        $18 = $18 - $8;
        $15 = $15 - $8;
        $12 = $12 - $8;
        $61 = $12 * $12;
        $12 = $20 - $8;
        SAFE_HEAP_STORE_f64_8_8($7, 0, Math_sqrt(($18 * $18 + ($15 * $15 + ($61 + $12 * $12))) / 3));
        if ($8 < $31 ? 1 : $8 < $48 | $8 > $43 | $8 > $50) {
         SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 0);
         SAFE_HEAP_STORE_i64_8_8($7, 0, 0, 1090021888);
        }
        $7 = ($2 | 0) != ($14 | 0);
        $2 = $2 + 1 | 0;
        if ($7) {
         continue;
        }
        break;
       }
      }
      operator_20delete_5b_5d_28void__29($10);
      operator_20delete_5b_5d_28void__29($13);
      operator_20delete_5b_5d_28void__29($22);
      operator_20delete_5b_5d_28void__29($27);
     }
     operator_20delete_5b_5d_28void__29($26);
     operator_20delete_5b_5d_28void__29($30);
     operator_20delete_5b_5d_28void__29($34);
     operator_20delete_5b_5d_28void__29($35);
     operator_20delete_5b_5d_28void__29($36);
     operator_20delete_5b_5d_28void__29($33);
     operator_20delete_5b_5d_28void__29($44);
     operator_20delete_5b_5d_28void__29($37);
     operator_20delete_5b_5d_28void__29($6);
     if (($14 | 0) < 0) {
      break label$72;
     }
     $6 = $45 << 2;
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + $3 | 0, 0);
     $10 = SAFE_HEAP_LOAD_i32_4_4($1 + $6 | 0, 0);
     $6 = 0;
     while (1) {
      $7 = $6 << 3;
      $13 = $10 + $7 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($7 + $9 | 0, 0);
      $2 = $7 + $17 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, $8 / (SAFE_HEAP_LOAD_f64_8_8($2, 0) + 1e-12));
      SAFE_HEAP_STORE_f64_8_8($0 + $7 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2, 0));
      $7 = ($6 | 0) == ($14 | 0);
      $6 = $6 + 1 | 0;
      if (!$7) {
       continue;
      }
      break;
     }
     break label$72;
    }
    operator_20delete_5b_5d_28void__29($26);
    operator_20delete_5b_5d_28void__29($30);
    operator_20delete_5b_5d_28void__29($34);
    operator_20delete_5b_5d_28void__29($35);
    operator_20delete_5b_5d_28void__29($36);
    operator_20delete_5b_5d_28void__29($33);
    operator_20delete_5b_5d_28void__29($44);
    operator_20delete_5b_5d_28void__29($37);
    operator_20delete_5b_5d_28void__29($6);
   }
   if (($21 | 0) == ($45 | 0)) {
    break label$48;
   }
   $45 = $45 + 1 | 0;
   $43 = SAFE_HEAP_LOAD_f64_8_8(($45 << 3) + $38 | 0, 0);
   continue;
  }
 }
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($9);
 $29 = operator_20new_5b_5d_28unsigned_20long_29($24);
 label$83: {
  if (($14 | 0) < 0) {
   break label$83;
  }
  $6 = 0;
  $17 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  if (($21 | 0) <= 0) {
   $7 = $14 + 1 | 0;
   $9 = $7 & 3;
   if ($14 >>> 0 >= 3) {
    $2 = $7 & -4;
    while (1) {
     $7 = $6 << 3;
     SAFE_HEAP_STORE_f64_8_8($29 + $7 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($7 + $17 | 0, 0));
     $0 = $7 | 8;
     SAFE_HEAP_STORE_f64_8_8($29 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $17 | 0, 0));
     $0 = $7 | 16;
     SAFE_HEAP_STORE_f64_8_8($29 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $17 | 0, 0));
     $7 = $7 | 24;
     SAFE_HEAP_STORE_f64_8_8($29 + $7 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($7 + $17 | 0, 0));
     $6 = $6 + 4 | 0;
     $2 = $2 - 4 | 0;
     if ($2) {
      continue;
     }
     break;
    }
   }
   if (!$9) {
    break label$83;
   }
   while (1) {
    $7 = $6 << 3;
    SAFE_HEAP_STORE_f64_8_8($29 + $7 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($7 + $17 | 0, 0));
    $6 = $6 + 1 | 0;
    $9 = $9 - 1 | 0;
    if ($9) {
     continue;
    }
    break;
   }
   break label$83;
  }
  $16 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $13 = $21 & -2;
  $22 = $21 & 1;
  while (1) {
   $10 = $6;
   $7 = $6 << 3;
   $8 = SAFE_HEAP_LOAD_f64_8_8($16 + $7 | 0, 0);
   $0 = $7 + $29 | 0;
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($7 + $17 | 0, 0));
   $6 = 1;
   $9 = $13;
   if (($21 | 0) != 1) {
    while (1) {
     $2 = $6 << 2;
     $12 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + $1 | 0, 0) + $7 | 0, 0);
     if ($12 < $8) {
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + $3 | 0, 0) + $7 | 0, 0));
      $8 = $12;
     }
     $2 = $6 + 1 << 2;
     $12 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + $1 | 0, 0) + $7 | 0, 0);
     if ($12 < $8) {
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + $3 | 0, 0) + $7 | 0, 0));
      $8 = $12;
     }
     $6 = $6 + 2 | 0;
     $9 = $9 - 2 | 0;
     if ($9) {
      continue;
     }
     break;
    }
   }
   label$94: {
    if (!$22) {
     break label$94;
    }
    $6 = $6 << 2;
    if (!(SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($6 + $1 | 0, 0) + $7 | 0, 0) < $8)) {
     break label$94;
    }
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($3 + $6 | 0, 0) + $7 | 0, 0));
   }
   $6 = $10 + 1 | 0;
   if (($10 | 0) != ($14 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $14;
 $8 = 1e3 / $42 / $31 + .5;
 label$95: {
  if (Math_abs($8) < 2147483648) {
   $2 = ~~$8;
   break label$95;
  }
  $2 = -2147483648;
 }
 $13 = $2 << 1;
 $10 = $13 | 1;
 if (($0 | 0) >= ($10 | 0)) {
  $0 = operator_20new_5b_5d_28unsigned_20long_29($24);
  $26 = operator_20new_5b_5d_28unsigned_20long_29($24);
  $9 = operator_20new_5b_5d_28unsigned_20long_29($24);
  if (($10 | 0) >= 1) {
   memset($9, 0, $10 << 3);
  }
  $6 = $23 - $10 | 0;
  if (($10 | 0) < ($6 | 0)) {
   $7 = $10 << 3;
   memcpy($9 + $7 | 0, $7 + $29 | 0, ($23 << 3) - ($10 << 4) | 0);
  }
  if (($10 | 0) >= 1) {
   $4 = ($6 << 3) + $9 | 0;
   $6 = ($14 - $10 | 0) + 2 | 0;
   memset($4, 0, (($14 ^ -1) + $10 | 0) + (($6 | 0) < ($23 | 0) ? $23 : $6) << 3);
   memset($0, 0, $10 << 3);
  }
  $6 = $10;
  while (1) {
   $7 = $6 << 3;
   $4 = $7 + $0 | 0;
   $7 = $7 + $9 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   SAFE_HEAP_STORE_f64_8_8($4, 0, Math_abs(($8 - SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0)) / ($8 + 1e-12)) < $41 ? $8 : 0);
   $7 = ($6 | 0) != ($14 | 0);
   $6 = $6 + 1 | 0;
   if ($7) {
    continue;
   }
   break;
  }
  operator_20delete_5b_5d_28void__29($9);
  if (($14 | 0) >= 0) {
   memcpy($26, $0, $23 << 3);
  }
  $16 = $23 - $2 | 0;
  label$103: {
   if (($10 | 0) < 0 | ($16 | 0) <= ($2 | 0)) {
    break label$103;
   }
   $17 = 0 - $2 | 0;
   $6 = $2 >> 31;
   $7 = $6 ^ $2 + $6;
   if (!($14 & 1)) {
    $6 = $17;
    label$105: {
     while (1) {
      if (SAFE_HEAP_LOAD_f64_8_8(($2 + $6 << 3) + $0 | 0, 0) != 0) {
       $9 = ($6 | 0) == ($7 | 0);
       $6 = $6 + 1 | 0;
       if (!$9) {
        continue;
       }
       break label$105;
      }
      break;
     }
     SAFE_HEAP_STORE_i64_8_8(($2 << 3) + $26 | 0, 0, 0, 0);
    }
    $2 = $2 + 1 | 0;
   }
   if (($14 | 0) == ($13 | 0)) {
    break label$103;
   }
   while (1) {
    $6 = $17;
    label$109: {
     while (1) {
      if (SAFE_HEAP_LOAD_f64_8_8(($2 + $6 << 3) + $0 | 0, 0) != 0) {
       $9 = ($6 | 0) == ($7 | 0);
       $6 = $6 + 1 | 0;
       if (!$9) {
        continue;
       }
       break label$109;
      }
      break;
     }
     SAFE_HEAP_STORE_i64_8_8(($2 << 3) + $26 | 0, 0, 0, 0);
    }
    $10 = $2 + 1 | 0;
    $6 = $17;
    label$112: {
     while (1) {
      if (SAFE_HEAP_LOAD_f64_8_8(($6 + $10 << 3) + $0 | 0, 0) != 0) {
       $9 = ($6 | 0) == ($7 | 0);
       $6 = $6 + 1 | 0;
       if (!$9) {
        continue;
       }
       break label$112;
      }
      break;
     }
     SAFE_HEAP_STORE_i64_8_8(($10 << 3) + $26 | 0, 0, 0, 0);
    }
    $2 = $2 + 2 | 0;
    if (($16 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $6 = ($23 & 1073741823) != ($23 | 0) ? -1 : $23 << 2;
  $24 = operator_20new_5b_5d_28unsigned_20long_29($6);
  $19 = operator_20new_5b_5d_28unsigned_20long_29($6);
  $25 = 0;
  $27 = 0;
  if (($14 | 0) >= 1) {
   $8 = SAFE_HEAP_LOAD_f64_8_8($26, 0);
   $7 = 1;
   while (1) {
    $12 = $8;
    $2 = $8 == 0;
    $6 = $7;
    $8 = SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $26 | 0, 0);
    label$117: {
     if (!($2 | $8 != 0)) {
      SAFE_HEAP_STORE_i32_4_4(($27 << 2) + $19 | 0, 0, $6 - 1 | 0);
      $27 = $27 + 1 | 0;
      break label$117;
     }
     if ($8 == 0 | $12 != 0) {
      break label$117;
     }
     SAFE_HEAP_STORE_i32_4_4(($25 << 2) + $24 | 0, 0, $6);
     $25 = $25 + 1 | 0;
    }
    $7 = $6 + 1 | 0;
    if (($6 | 0) != ($14 | 0)) {
     continue;
    }
    break;
   }
  }
  if (($14 | 0) >= 0) {
   memcpy($0, $26, $23 << 3);
  }
  label$120: {
   if (($27 | 0) < 1) {
    break label$120;
   }
   $30 = $27 - 1 | 0;
   if (($21 | 0) < 1) {
    $10 = 0;
    while (1) {
     $7 = $14;
     if (($10 | 0) != ($30 | 0)) {
      $7 = SAFE_HEAP_LOAD_i32_4_4((($10 << 2) + $19 | 0) + 4 | 0, 0);
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(($10 << 2) + $19 | 0, 0);
     $2 = ($6 | 0) < ($7 | 0) ? $7 : $6;
     while (1) {
      if (($2 | 0) != ($6 | 0)) {
       $7 = $6 << 3;
       $6 = $6 + 1 | 0;
       $9 = $6 << 3;
       $4 = $9 + $0 | 0;
       $8 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($3, 0) + $9 | 0, 0);
       $7 = $0 + $7 | 0;
       $8 = Math_abs($8 / ((SAFE_HEAP_LOAD_f64_8_8($7, 0) * 3 - SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0)) * -.5) + 1) > $41 ? 0 : $8;
       SAFE_HEAP_STORE_f64_8_8($4, 0, $8);
       if ($8 != 0) {
        continue;
       }
      }
      break;
     }
     $10 = $10 + 1 | 0;
     if (($27 | 0) != ($10 | 0)) {
      continue;
     }
     break;
    }
    break label$120;
   }
   $16 = $21 & -2;
   $13 = $21 & 1;
   $22 = 0;
   while (1) {
    $6 = $14;
    if (($22 | 0) != ($30 | 0)) {
     $6 = SAFE_HEAP_LOAD_i32_4_4((($22 << 2) + $19 | 0) + 4 | 0, 0);
    }
    $10 = SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $19 | 0, 0);
    $17 = ($6 | 0) > ($10 | 0) ? $6 : $10;
    while (1) {
     if (($10 | 0) != ($17 | 0)) {
      $6 = 1;
      $7 = ($10 << 3) + $0 | 0;
      $20 = (SAFE_HEAP_LOAD_f64_8_8($7, 0) * 3 - SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0)) * .5;
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
      $10 = $10 + 1 | 0;
      $7 = $10 << 3;
      $12 = SAFE_HEAP_LOAD_f64_8_8($2 + $7 | 0, 0);
      $8 = Math_abs($20 - $12);
      $9 = $16;
      if (($21 | 0) != 1) {
       while (1) {
        $2 = ($6 << 2) + $3 | 0;
        $15 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + 4 | 0, 0) + $7 | 0, 0);
        $28 = $15;
        $18 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2, 0) + $7 | 0, 0);
        $31 = $18;
        $18 = Math_abs($20 - $18);
        $2 = $18 < $8;
        $12 = $2 ? $31 : $12;
        $8 = $2 ? $18 : $8;
        $15 = Math_abs($20 - $15);
        $2 = $8 > $15;
        $12 = $2 ? $28 : $12;
        $8 = $2 ? $15 : $8;
        $6 = $6 + 2 | 0;
        $9 = $9 - 2 | 0;
        if ($9) {
         continue;
        }
        break;
       }
      }
      $2 = $0 + $7 | 0;
      if ($13) {
       $15 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $3 | 0, 0) + $7 | 0, 0);
       $12 = Math_abs($20 - $15) < $8 ? $15 : $12;
      }
      $8 = Math_abs(1 - $12 / $20) > $41 ? 0 : $12;
      SAFE_HEAP_STORE_f64_8_8($2, 0, $8);
      if ($8 != 0) {
       continue;
      }
     }
     break;
    }
    $22 = $22 + 1 | 0;
    if (($27 | 0) != ($22 | 0)) {
     continue;
    }
    break;
   }
  }
  if (($14 | 0) >= 0) {
   memcpy($5, $0, $23 << 3);
  }
  label$137: {
   if (($25 | 0) < 1) {
    break label$137;
   }
   $6 = $25 - 1 | 0;
   if (($21 | 0) < 1) {
    while (1) {
     $10 = $6;
     if ($6) {
      $2 = SAFE_HEAP_LOAD_i32_4_4((($25 << 2) + $24 | 0) - 8 | 0, 0);
     } else {
      $2 = 1;
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(($10 << 2) + $24 | 0, 0);
     while (1) {
      if (($2 | 0) < ($6 | 0)) {
       $7 = $6 << 3;
       $6 = $6 - 1 | 0;
       $9 = $6 << 3;
       $4 = $9 + $5 | 0;
       $8 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($3, 0) + $9 | 0, 0);
       $7 = $5 + $7 | 0;
       $8 = Math_abs($8 / ((SAFE_HEAP_LOAD_f64_8_8($7, 0) * 3 - SAFE_HEAP_LOAD_f64_8_8($7 + 8 | 0, 0)) * -.5) + 1) > $41 ? 0 : $8;
       SAFE_HEAP_STORE_f64_8_8($4, 0, $8);
       if ($8 != 0) {
        continue;
       }
      }
      break;
     }
     $6 = $10 - 1 | 0;
     $25 = $10;
     if (($10 | 0) > 0) {
      continue;
     }
     break label$137;
    }
   }
   $17 = $21 & -2;
   $16 = $21 & 1;
   while (1) {
    $14 = 1;
    $13 = $6;
    if ($6) {
     $14 = SAFE_HEAP_LOAD_i32_4_4((($25 << 2) + $24 | 0) - 8 | 0, 0);
    }
    $10 = SAFE_HEAP_LOAD_i32_4_4(($13 << 2) + $24 | 0, 0);
    while (1) {
     if (($10 | 0) > ($14 | 0)) {
      $6 = ($10 << 3) + $5 | 0;
      $20 = (SAFE_HEAP_LOAD_f64_8_8($6, 0) * 3 - SAFE_HEAP_LOAD_f64_8_8($6 + 8 | 0, 0)) * .5;
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
      $10 = $10 - 1 | 0;
      $7 = $10 << 3;
      $12 = SAFE_HEAP_LOAD_f64_8_8($2 + $7 | 0, 0);
      $8 = Math_abs($20 - $12);
      $6 = 1;
      $9 = $17;
      if (($21 | 0) != 1) {
       while (1) {
        $2 = ($6 << 2) + $3 | 0;
        $15 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2 + 4 | 0, 0) + $7 | 0, 0);
        $28 = $15;
        $18 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($2, 0) + $7 | 0, 0);
        $31 = $18;
        $18 = Math_abs($20 - $18);
        $2 = $18 < $8;
        $12 = $2 ? $31 : $12;
        $8 = $2 ? $18 : $8;
        $15 = Math_abs($20 - $15);
        $2 = $8 > $15;
        $12 = $2 ? $28 : $12;
        $8 = $2 ? $15 : $8;
        $6 = $6 + 2 | 0;
        $9 = $9 - 2 | 0;
        if ($9) {
         continue;
        }
        break;
       }
      }
      $2 = $5 + $7 | 0;
      if ($16) {
       $15 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $3 | 0, 0) + $7 | 0, 0);
       $12 = Math_abs($20 - $15) < $8 ? $15 : $12;
      }
      $8 = Math_abs(1 - $12 / $20) > $41 ? 0 : $12;
      SAFE_HEAP_STORE_f64_8_8($2, 0, $8);
      if ($8 != 0) {
       continue;
      }
     }
     break;
    }
    $6 = $13 - 1 | 0;
    $25 = $13;
    if (($13 | 0) > 0) {
     continue;
    }
    break;
   }
  }
  operator_20delete_5b_5d_28void__29($0);
  operator_20delete_5b_5d_28void__29($26);
  operator_20delete_5b_5d_28void__29($24);
  operator_20delete_5b_5d_28void__29($19);
 }
 operator_20delete_5b_5d_28void__29($29);
 operator_20delete_5b_5d_28void__29($39);
 $6 = 0;
 if (($21 | 0) >= 0) {
  while (1) {
   $7 = $6 << 2;
   $9 = SAFE_HEAP_LOAD_i32_4_4($7 + $1 | 0, 0);
   if ($9) {
    operator_20delete_5b_5d_28void__29($9);
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($3 + $7 | 0, 0);
   if ($7) {
    operator_20delete_5b_5d_28void__29($7);
   }
   $7 = ($6 | 0) != ($21 | 0);
   $6 = $6 + 1 | 0;
   if ($7) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($1);
 operator_20delete_5b_5d_28void__29($3);
 operator_20delete_5b_5d_28void__29($38);
 __stack_pointer = $11 + 368 | 0;
}

function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $12 = __stack_pointer - 16 | 0;
 __stack_pointer = $12;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             if ($0 >>> 0 <= 244) {
              $6 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
              $4 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
              $2 = $4 >>> 3 | 0;
              $0 = $6 >>> $2 | 0;
              if ($0 & 3) {
               $1 = (($0 ^ -1) & 1) + $2 | 0;
               $3 = $1 << 3;
               $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 31364 | 0, 0);
               $0 = $2 + 8 | 0;
               $4 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
               $3 = $3 + 31356 | 0;
               label$15: {
                if (($4 | 0) == ($3 | 0)) {
                 SAFE_HEAP_STORE_i32_4_4(0, 31316, __wasm_rotl_i32(-2, $1) & $6);
                 break label$15;
                }
                SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
                SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
               }
               $1 = $1 << 3;
               SAFE_HEAP_STORE_i32_4_4($2, 4, $1 | 3);
               $2 = $2 + $1 | 0;
               SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
               break label$1;
              }
              $8 = SAFE_HEAP_LOAD_i32_4_4(0, 31324);
              if ($8 >>> 0 >= $4 >>> 0) {
               break label$12;
              }
              if ($0) {
               $1 = $0 << $2;
               $0 = 2 << $2;
               $0 = $1 & ($0 | 0 - $0);
               $0 = ($0 & 0 - $0) - 1 | 0;
               $1 = $0;
               $0 = $0 >>> 12 & 16;
               $2 = $1 >>> $0 | 0;
               $1 = $2 >>> 5 & 8;
               $3 = $0 | $1;
               $0 = $2 >>> $1 | 0;
               $2 = $0 >>> 2 & 4;
               $1 = $3 | $2;
               $0 = $0 >>> $2 | 0;
               $2 = $0 >>> 1 & 2;
               $1 = $1 | $2;
               $0 = $0 >>> $2 | 0;
               $2 = $0 >>> 1 & 1;
               $1 = ($1 | $2) + ($0 >>> $2 | 0) | 0;
               $3 = $1 << 3;
               $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 31364 | 0, 0);
               $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
               $3 = $3 + 31356 | 0;
               label$18: {
                if (($0 | 0) == ($3 | 0)) {
                 $6 = __wasm_rotl_i32(-2, $1) & $6;
                 SAFE_HEAP_STORE_i32_4_4(0, 31316, $6);
                 break label$18;
                }
                SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
                SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
               }
               $0 = $2 + 8 | 0;
               SAFE_HEAP_STORE_i32_4_4($2, 4, $4 | 3);
               $3 = $2 + $4 | 0;
               $5 = $1 << 3;
               $1 = $5 - $4 | 0;
               SAFE_HEAP_STORE_i32_4_4($3, 4, $1 | 1);
               SAFE_HEAP_STORE_i32_4_4($2 + $5 | 0, 0, $1);
               if ($8) {
                $5 = $8 >>> 3 | 0;
                $4 = ($5 << 3) + 31356 | 0;
                $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31336);
                $5 = 1 << $5;
                label$21: {
                 if (!($6 & $5)) {
                  SAFE_HEAP_STORE_i32_4_4(0, 31316, $5 | $6);
                  $5 = $4;
                  break label$21;
                 }
                 $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
                }
                SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
                SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
                SAFE_HEAP_STORE_i32_4_4($2, 12, $4);
                SAFE_HEAP_STORE_i32_4_4($2, 8, $5);
               }
               SAFE_HEAP_STORE_i32_4_4(0, 31336, $3);
               SAFE_HEAP_STORE_i32_4_4(0, 31324, $1);
               break label$1;
              }
              $9 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
              if (!$9) {
               break label$12;
              }
              $0 = (0 - $9 & $9) - 1 | 0;
              $1 = $0;
              $0 = $0 >>> 12 & 16;
              $2 = $1 >>> $0 | 0;
              $1 = $2 >>> 5 & 8;
              $3 = $0 | $1;
              $0 = $2 >>> $1 | 0;
              $2 = $0 >>> 2 & 4;
              $1 = $3 | $2;
              $0 = $0 >>> $2 | 0;
              $2 = $0 >>> 1 & 2;
              $1 = $1 | $2;
              $0 = $0 >>> $2 | 0;
              $2 = $0 >>> 1 & 1;
              $3 = SAFE_HEAP_LOAD_i32_4_4((($1 | $2) + ($0 >>> $2 | 0) << 2) + 31620 | 0, 0);
              $2 = (SAFE_HEAP_LOAD_i32_4_4($3, 4) & -8) - $4 | 0;
              $1 = $3;
              while (1) {
               label$24: {
                $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
                if (!$0) {
                 $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
                 if (!$0) {
                  break label$24;
                 }
                }
                $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 4) & -8) - $4 | 0;
                $5 = $1;
                $1 = $2 >>> 0 > $1 >>> 0;
                $2 = $1 ? $5 : $2;
                $3 = $1 ? $0 : $3;
                $1 = $0;
                continue;
               }
               break;
              }
              $10 = $3 + $4 | 0;
              if ($10 >>> 0 <= $3 >>> 0) {
               break label$11;
              }
              $11 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
              $5 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
              if (($5 | 0) != ($3 | 0)) {
               SAFE_HEAP_LOAD_i32_4_4(0, 31332);
               $0 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
               SAFE_HEAP_STORE_i32_4_4($0, 12, $5);
               SAFE_HEAP_STORE_i32_4_4($5, 8, $0);
               break label$2;
              }
              $1 = $3 + 20 | 0;
              $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
              if (!$0) {
               $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
               if (!$0) {
                break label$10;
               }
               $1 = $3 + 16 | 0;
              }
              while (1) {
               $7 = $1;
               $5 = $0;
               $1 = $0 + 20 | 0;
               $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
               if ($0) {
                continue;
               }
               $1 = $5 + 16 | 0;
               $0 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
               if ($0) {
                continue;
               }
               break;
              }
              SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
              break label$2;
             }
             $4 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$12;
             }
             $0 = $0 + 11 | 0;
             $4 = $0 & -8;
             $8 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
             if (!$8) {
              break label$12;
             }
             $7 = 0;
             label$29: {
              if ($4 >>> 0 < 256) {
               break label$29;
              }
              $7 = 31;
              if ($4 >>> 0 > 16777215) {
               break label$29;
              }
              $0 = $0 >>> 8 | 0;
              $1 = $0;
              $0 = $0 + 1048320 >>> 16 & 8;
              $2 = $1 << $0;
              $1 = $2;
              $2 = $2 + 520192 >>> 16 & 4;
              $1 = $1 << $2;
              $3 = $1;
              $1 = $1 + 245760 >>> 16 & 2;
              $0 = ($3 << $1 >>> 15 | 0) - ($0 | $2 | $1) | 0;
              $7 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
             }
             $2 = 0 - $4 | 0;
             $1 = SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + 31620 | 0, 0);
             label$30: {
              label$31: {
               label$32: {
                if (!$1) {
                 $0 = 0;
                 break label$32;
                }
                $0 = 0;
                $3 = $4 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
                while (1) {
                 label$35: {
                  $6 = (SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) - $4 | 0;
                  if ($6 >>> 0 >= $2 >>> 0) {
                   break label$35;
                  }
                  $5 = $1;
                  $2 = $6;
                  if ($2) {
                   break label$35;
                  }
                  $2 = 0;
                  $0 = $1;
                  break label$31;
                 }
                 $6 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
                 $1 = SAFE_HEAP_LOAD_i32_4_4((($3 >>> 29 & 4) + $1 | 0) + 16 | 0, 0);
                 $0 = $6 ? ($6 | 0) == ($1 | 0) ? $0 : $6 : $0;
                 $3 = $3 << 1;
                 if ($1) {
                  continue;
                 }
                 break;
                }
               }
               if (!($0 | $5)) {
                $5 = 0;
                $0 = 2 << $7;
                $0 = ($0 | 0 - $0) & $8;
                if (!$0) {
                 break label$12;
                }
                $0 = (0 - $0 & $0) - 1 | 0;
                $1 = $0;
                $0 = $0 >>> 12 & 16;
                $1 = $1 >>> $0 | 0;
                $3 = $1 >>> 5 & 8;
                $6 = $0 | $3;
                $0 = $1 >>> $3 | 0;
                $1 = $0 >>> 2 & 4;
                $3 = $6 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 2;
                $3 = $3 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 1;
                $0 = SAFE_HEAP_LOAD_i32_4_4((($3 | $1) + ($0 >>> $1 | 0) << 2) + 31620 | 0, 0);
               }
               if (!$0) {
                break label$30;
               }
              }
              while (1) {
               $6 = (SAFE_HEAP_LOAD_i32_4_4($0, 4) & -8) - $4 | 0;
               $3 = $6 >>> 0 < $2 >>> 0;
               $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
               if (!$1) {
                $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
               }
               $2 = $3 ? $6 : $2;
               $5 = $3 ? $0 : $5;
               $0 = $1;
               if ($0) {
                continue;
               }
               break;
              }
             }
             if (!$5) {
              break label$12;
             }
             if (SAFE_HEAP_LOAD_i32_4_4(0, 31324) - $4 >>> 0 <= $2 >>> 0) {
              break label$12;
             }
             $7 = $4 + $5 | 0;
             if ($7 >>> 0 <= $5 >>> 0) {
              break label$11;
             }
             $9 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
             $3 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
             if (($5 | 0) != ($3 | 0)) {
              SAFE_HEAP_LOAD_i32_4_4(0, 31332);
              $0 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
              SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
              SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
              break label$3;
             }
             $1 = $5 + 20 | 0;
             $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
             if (!$0) {
              $0 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
              if (!$0) {
               break label$9;
              }
              $1 = $5 + 16 | 0;
             }
             while (1) {
              $6 = $1;
              $3 = $0;
              $1 = $0 + 20 | 0;
              $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
              if ($0) {
               continue;
              }
              $1 = $3 + 16 | 0;
              $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
              if ($0) {
               continue;
              }
              break;
             }
             SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
             break label$3;
            }
            $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31324);
            if ($4 >>> 0 <= $0 >>> 0) {
             $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31336);
             $1 = $0 - $4 | 0;
             label$43: {
              if ($1 >>> 0 >= 16) {
               SAFE_HEAP_STORE_i32_4_4(0, 31324, $1);
               $3 = $2 + $4 | 0;
               SAFE_HEAP_STORE_i32_4_4(0, 31336, $3);
               SAFE_HEAP_STORE_i32_4_4($3, 4, $1 | 1);
               SAFE_HEAP_STORE_i32_4_4($0 + $2 | 0, 0, $1);
               SAFE_HEAP_STORE_i32_4_4($2, 4, $4 | 3);
               break label$43;
              }
              SAFE_HEAP_STORE_i32_4_4(0, 31336, 0);
              SAFE_HEAP_STORE_i32_4_4(0, 31324, 0);
              SAFE_HEAP_STORE_i32_4_4($2, 4, $0 | 3);
              $0 = $0 + $2 | 0;
              SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) | 1);
             }
             $0 = $2 + 8 | 0;
             break label$1;
            }
            $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31328);
            if ($4 >>> 0 < $3 >>> 0) {
             $2 = $3 - $4 | 0;
             SAFE_HEAP_STORE_i32_4_4(0, 31328, $2);
             $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31340);
             $1 = $4 + $0 | 0;
             SAFE_HEAP_STORE_i32_4_4(0, 31340, $1);
             SAFE_HEAP_STORE_i32_4_4($1, 4, $2 | 1);
             SAFE_HEAP_STORE_i32_4_4($0, 4, $4 | 3);
             $0 = $0 + 8 | 0;
             break label$1;
            }
            label$46: {
             if (SAFE_HEAP_LOAD_i32_4_4(0, 31788)) {
              $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31796);
              break label$46;
             }
             SAFE_HEAP_STORE_i64_8_4(0, 31800, -1, -1);
             SAFE_HEAP_STORE_i64_8_4(0, 31792, 4096, 4096);
             SAFE_HEAP_STORE_i32_4_4(0, 31788, $12 + 12 & -16 ^ 1431655768);
             SAFE_HEAP_STORE_i32_4_4(0, 31808, 0);
             SAFE_HEAP_STORE_i32_4_4(0, 31760, 0);
             $2 = 4096;
            }
            $0 = 0;
            $8 = $4 + 47 | 0;
            $6 = $2 + $8 | 0;
            $7 = 0 - $2 | 0;
            $5 = $6 & $7;
            if ($5 >>> 0 <= $4 >>> 0) {
             break label$1;
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31756);
            if ($2) {
             $1 = SAFE_HEAP_LOAD_i32_4_4(0, 31748);
             $9 = $5 + $1 | 0;
             if ($2 >>> 0 < $9 >>> 0 | $1 >>> 0 >= $9 >>> 0) {
              break label$1;
             }
            }
            if (SAFE_HEAP_LOAD_i32_1_U_1(0, 31760) & 4) {
             break label$6;
            }
            label$49: {
             label$50: {
              $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31340);
              if ($2) {
               $0 = 31764;
               while (1) {
                $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
                if ($1 >>> 0 <= $2 >>> 0) {
                 if (SAFE_HEAP_LOAD_i32_4_4($0, 4) + $1 >>> 0 > $2 >>> 0) {
                  break label$50;
                 }
                }
                $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
                if ($0) {
                 continue;
                }
                break;
               }
              }
              $3 = sbrk(0);
              if (($3 | 0) == -1) {
               break label$7;
              }
              $6 = $5;
              $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31792);
              $2 = $0 - 1 | 0;
              if ($3 & $2) {
               $6 = ($5 - $3 | 0) + ($2 + $3 & 0 - $0) | 0;
              }
              if ($6 >>> 0 > 2147483646 | $4 >>> 0 >= $6 >>> 0) {
               break label$7;
              }
              $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31756);
              if ($0) {
               $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31748);
               $1 = $6 + $2 | 0;
               if ($0 >>> 0 < $1 >>> 0 | $2 >>> 0 >= $1 >>> 0) {
                break label$7;
               }
              }
              $0 = sbrk($6);
              if (($3 | 0) != ($0 | 0)) {
               break label$49;
              }
              break label$5;
             }
             $6 = $6 - $3 & $7;
             if ($6 >>> 0 > 2147483646) {
              break label$7;
             }
             $3 = sbrk($6);
             if (($3 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 0) + SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0)) {
              break label$8;
             }
             $0 = $3;
            }
            if (!(($0 | 0) == -1 | $4 + 48 >>> 0 <= $6 >>> 0)) {
             $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31796);
             $2 = $2 + ($8 - $6 | 0) & 0 - $2;
             if ($2 >>> 0 > 2147483646) {
              $3 = $0;
              break label$5;
             }
             if ((sbrk($2) | 0) != -1) {
              $6 = $2 + $6 | 0;
              $3 = $0;
              break label$5;
             }
             sbrk(0 - $6 | 0);
             break label$7;
            }
            $3 = $0;
            if (($0 | 0) != -1) {
             break label$5;
            }
            break label$7;
           }
           abort();
          }
          $5 = 0;
          break label$2;
         }
         $3 = 0;
         break label$3;
        }
        if (($3 | 0) != -1) {
         break label$5;
        }
       }
       SAFE_HEAP_STORE_i32_4_4(0, 31760, SAFE_HEAP_LOAD_i32_4_4(0, 31760) | 4);
      }
      if ($5 >>> 0 > 2147483646) {
       break label$4;
      }
      $3 = sbrk($5);
      $1 = ($3 | 0) == -1;
      $0 = sbrk(0);
      if ($1 | ($0 | 0) == -1 | $0 >>> 0 <= $3 >>> 0) {
       break label$4;
      }
      $6 = $0 - $3 | 0;
      if ($6 >>> 0 <= $4 + 40 >>> 0) {
       break label$4;
      }
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31748) + $6 | 0;
     SAFE_HEAP_STORE_i32_4_4(0, 31748, $0);
     if (SAFE_HEAP_LOAD_i32_4_4(0, 31752) >>> 0 < $0 >>> 0) {
      SAFE_HEAP_STORE_i32_4_4(0, 31752, $0);
     }
     label$60: {
      label$61: {
       label$62: {
        $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31340);
        if ($2) {
         $0 = 31764;
         while (1) {
          $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
          $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          if (($1 + $5 | 0) == ($3 | 0)) {
           break label$62;
          }
          $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
          if ($0) {
           continue;
          }
          break;
         }
         break label$61;
        }
        $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31332);
        if (!($0 >>> 0 <= $3 >>> 0 ? $0 : 0)) {
         SAFE_HEAP_STORE_i32_4_4(0, 31332, $3);
        }
        $0 = 0;
        SAFE_HEAP_STORE_i32_4_4(0, 31768, $6);
        SAFE_HEAP_STORE_i32_4_4(0, 31764, $3);
        SAFE_HEAP_STORE_i32_4_4(0, 31348, -1);
        SAFE_HEAP_STORE_i32_4_4(0, 31352, SAFE_HEAP_LOAD_i32_4_4(0, 31788));
        SAFE_HEAP_STORE_i32_4_4(0, 31776, 0);
        while (1) {
         $2 = $0 << 3;
         $1 = $2 + 31356 | 0;
         SAFE_HEAP_STORE_i32_4_4($2 + 31364 | 0, 0, $1);
         SAFE_HEAP_STORE_i32_4_4($2 + 31368 | 0, 0, $1);
         $0 = $0 + 1 | 0;
         if (($0 | 0) != 32) {
          continue;
         }
         break;
        }
        $0 = $6 - 40 | 0;
        $2 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
        $1 = $0 - $2 | 0;
        SAFE_HEAP_STORE_i32_4_4(0, 31328, $1);
        $2 = $2 + $3 | 0;
        SAFE_HEAP_STORE_i32_4_4(0, 31340, $2);
        SAFE_HEAP_STORE_i32_4_4($2, 4, $1 | 1);
        SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 4, 40);
        SAFE_HEAP_STORE_i32_4_4(0, 31344, SAFE_HEAP_LOAD_i32_4_4(0, 31804));
        break label$60;
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 8 | $2 >>> 0 < $1 >>> 0 | $2 >>> 0 >= $3 >>> 0) {
        break label$61;
       }
       SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + $6 | 0);
       $0 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
       $1 = $2 + $0 | 0;
       SAFE_HEAP_STORE_i32_4_4(0, 31340, $1);
       $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31328) + $6 | 0;
       $0 = $3 - $0 | 0;
       SAFE_HEAP_STORE_i32_4_4(0, 31328, $0);
       SAFE_HEAP_STORE_i32_4_4($1, 4, $0 | 1);
       SAFE_HEAP_STORE_i32_4_4($2 + $3 | 0, 4, 40);
       SAFE_HEAP_STORE_i32_4_4(0, 31344, SAFE_HEAP_LOAD_i32_4_4(0, 31804));
       break label$60;
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 31332);
      if ($5 >>> 0 > $3 >>> 0) {
       SAFE_HEAP_STORE_i32_4_4(0, 31332, $3);
      }
      $1 = $3 + $6 | 0;
      $0 = 31764;
      label$68: {
       label$69: {
        label$70: {
         label$71: {
          label$72: {
           label$73: {
            while (1) {
             if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($1 | 0)) {
              $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
              if ($0) {
               continue;
              }
              break label$73;
             }
             break;
            }
            if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 8)) {
             break label$72;
            }
           }
           $0 = 31764;
           while (1) {
            $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
            if ($1 >>> 0 <= $2 >>> 0) {
             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4) + $1 | 0;
             if ($1 >>> 0 > $2 >>> 0) {
              break label$71;
             }
            }
            $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
            continue;
           }
          }
          SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
          SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) + $6 | 0);
          $7 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
          SAFE_HEAP_STORE_i32_4_4($7, 4, $4 | 3);
          $6 = ($1 + 8 & 7 ? -8 - $1 & 7 : 0) + $1 | 0;
          $4 = $4 + $7 | 0;
          $1 = $6 - $4 | 0;
          if (($2 | 0) == ($6 | 0)) {
           SAFE_HEAP_STORE_i32_4_4(0, 31340, $4);
           $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31328) + $1 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 31328, $0);
           SAFE_HEAP_STORE_i32_4_4($4, 4, $0 | 1);
           break label$69;
          }
          if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) == ($6 | 0)) {
           SAFE_HEAP_STORE_i32_4_4(0, 31336, $4);
           $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31324) + $1 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 31324, $0);
           SAFE_HEAP_STORE_i32_4_4($4, 4, $0 | 1);
           SAFE_HEAP_STORE_i32_4_4($0 + $4 | 0, 0, $0);
           break label$69;
          }
          $0 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
          if (($0 & 3) == 1) {
           $8 = $0 & -8;
           label$81: {
            if ($0 >>> 0 <= 255) {
             $2 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
             $5 = $0 >>> 3 | 0;
             $3 = ($5 << 3) + 31356 | 0;
             $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
             if (($2 | 0) == ($0 | 0)) {
              SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $5));
              break label$81;
             }
             SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
             SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
             break label$81;
            }
            $9 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
            $3 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
            label$84: {
             if (($6 | 0) != ($3 | 0)) {
              $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
              SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
              SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
              break label$84;
             }
             label$86: {
              $0 = $6 + 20 | 0;
              $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
              if ($2) {
               break label$86;
              }
              $0 = $6 + 16 | 0;
              $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
              if ($2) {
               break label$86;
              }
              $3 = 0;
              break label$84;
             }
             while (1) {
              $5 = $0;
              $3 = $2;
              $0 = $2 + 20 | 0;
              $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
              if ($2) {
               continue;
              }
              $0 = $3 + 16 | 0;
              $2 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
              if ($2) {
               continue;
              }
              break;
             }
             SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
            }
            if (!$9) {
             break label$81;
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
            $0 = ($2 << 2) + 31620 | 0;
            label$88: {
             if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($6 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
              if ($3) {
               break label$88;
              }
              SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $2));
              break label$81;
             }
             SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0) == ($6 | 0) ? 16 : 20) + $9 | 0, 0, $3);
             if (!$3) {
              break label$81;
             }
            }
            SAFE_HEAP_STORE_i32_4_4($3, 24, $9);
            $0 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
            if ($0) {
             SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
             SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
            }
            $0 = SAFE_HEAP_LOAD_i32_4_4($6, 20);
            if (!$0) {
             break label$81;
            }
            SAFE_HEAP_STORE_i32_4_4($3 + 20 | 0, 0, $0);
            SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
           }
           $6 = $6 + $8 | 0;
           $1 = $1 + $8 | 0;
          }
          SAFE_HEAP_STORE_i32_4_4($6, 4, SAFE_HEAP_LOAD_i32_4_4($6, 4) & -2);
          SAFE_HEAP_STORE_i32_4_4($4, 4, $1 | 1);
          SAFE_HEAP_STORE_i32_4_4($1 + $4 | 0, 0, $1);
          if ($1 >>> 0 <= 255) {
           $2 = $1 >>> 3 | 0;
           $0 = ($2 << 3) + 31356 | 0;
           $1 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
           $2 = 1 << $2;
           label$92: {
            if (!($1 & $2)) {
             SAFE_HEAP_STORE_i32_4_4(0, 31316, $2 | $1);
             $2 = $0;
             break label$92;
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
           }
           SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
           SAFE_HEAP_STORE_i32_4_4($2, 12, $4);
           SAFE_HEAP_STORE_i32_4_4($4, 12, $0);
           SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
           break label$69;
          }
          $0 = 31;
          $5 = $4;
          if ($1 >>> 0 <= 16777215) {
           $0 = $1 >>> 8 | 0;
           $3 = $0;
           $0 = $0 + 1048320 >>> 16 & 8;
           $2 = $3 << $0;
           $3 = $2;
           $2 = $2 + 520192 >>> 16 & 4;
           $3 = $3 << $2;
           $6 = $3;
           $3 = $3 + 245760 >>> 16 & 2;
           $0 = ($6 << $3 >>> 15 | 0) - ($0 | $2 | $3) | 0;
           $0 = ($0 << 1 | $1 >>> $0 + 21 & 1) + 28 | 0;
          }
          SAFE_HEAP_STORE_i32_4_4($5, 28, $0);
          SAFE_HEAP_STORE_i64_8_4($4, 16, 0, 0);
          $2 = ($0 << 2) + 31620 | 0;
          $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
          $5 = 1 << $0;
          label$96: {
           if (!($3 & $5)) {
            SAFE_HEAP_STORE_i32_4_4(0, 31320, $3 | $5);
            SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
            break label$96;
           }
           $0 = $1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
           $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
           while (1) {
            $2 = $3;
            if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) & -8) == ($1 | 0)) {
             break label$70;
            }
            $3 = $0 >>> 29 | 0;
            $0 = $0 << 1;
            $5 = (($3 & 4) + $2 | 0) + 16 | 0;
            $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
            if ($3) {
             continue;
            }
            break;
           }
           SAFE_HEAP_STORE_i32_4_4($5, 0, $4);
          }
          SAFE_HEAP_STORE_i32_4_4($4, 24, $2);
          SAFE_HEAP_STORE_i32_4_4($4, 12, $4);
          SAFE_HEAP_STORE_i32_4_4($4, 8, $4);
          break label$69;
         }
         $0 = $6 - 40 | 0;
         $5 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
         $7 = $0 - $5 | 0;
         SAFE_HEAP_STORE_i32_4_4(0, 31328, $7);
         $5 = $3 + $5 | 0;
         SAFE_HEAP_STORE_i32_4_4(0, 31340, $5);
         SAFE_HEAP_STORE_i32_4_4($5, 4, $7 | 1);
         SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 4, 40);
         SAFE_HEAP_STORE_i32_4_4(0, 31344, SAFE_HEAP_LOAD_i32_4_4(0, 31804));
         $0 = (($1 - 39 & 7 ? 39 - $1 & 7 : 0) + $1 | 0) - 47 | 0;
         $5 = $2 + 16 >>> 0 > $0 >>> 0 ? $2 : $0;
         SAFE_HEAP_STORE_i32_4_4($5, 4, 27);
         SAFE_HEAP_STORE_i64_8_4($5 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4(0, 31772), i64toi32_i32$HIGH_BITS);
         SAFE_HEAP_STORE_i64_8_4($5, 8, SAFE_HEAP_LOAD_i64_8_4(0, 31764), i64toi32_i32$HIGH_BITS);
         SAFE_HEAP_STORE_i32_4_4(0, 31772, $5 + 8 | 0);
         SAFE_HEAP_STORE_i32_4_4(0, 31768, $6);
         SAFE_HEAP_STORE_i32_4_4(0, 31764, $3);
         SAFE_HEAP_STORE_i32_4_4(0, 31776, 0);
         $0 = $5 + 24 | 0;
         while (1) {
          SAFE_HEAP_STORE_i32_4_4($0, 4, 7);
          $3 = $0 + 8 | 0;
          $0 = $0 + 4 | 0;
          if ($1 >>> 0 > $3 >>> 0) {
           continue;
          }
          break;
         }
         if (($2 | 0) == ($5 | 0)) {
          break label$60;
         }
         SAFE_HEAP_STORE_i32_4_4($5, 4, SAFE_HEAP_LOAD_i32_4_4($5, 4) & -2);
         $6 = $5 - $2 | 0;
         SAFE_HEAP_STORE_i32_4_4($2, 4, $6 | 1);
         SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
         if ($6 >>> 0 <= 255) {
          $1 = $6 >>> 3 | 0;
          $0 = ($1 << 3) + 31356 | 0;
          $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
          $1 = 1 << $1;
          label$101: {
           if (!($3 & $1)) {
            SAFE_HEAP_STORE_i32_4_4(0, 31316, $1 | $3);
            $1 = $0;
            break label$101;
           }
           $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
          }
          SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
          SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
          SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
          SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
          break label$60;
         }
         $0 = 31;
         if ($6 >>> 0 <= 16777215) {
          $0 = $6 >>> 8 | 0;
          $1 = $0;
          $0 = $0 + 1048320 >>> 16 & 8;
          $1 = $1 << $0;
          $3 = $1;
          $1 = $1 + 520192 >>> 16 & 4;
          $3 = $3 << $1;
          $5 = $3;
          $3 = $3 + 245760 >>> 16 & 2;
          $0 = ($5 << $3 >>> 15 | 0) - ($0 | $1 | $3) | 0;
          $0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
         }
         SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
         SAFE_HEAP_STORE_i32_4_4($2 + 28 | 0, 0, $0);
         $1 = ($0 << 2) + 31620 | 0;
         $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
         $5 = 1 << $0;
         label$104: {
          if (!($3 & $5)) {
           SAFE_HEAP_STORE_i32_4_4(0, 31320, $3 | $5);
           SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
           break label$104;
          }
          $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
          $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
          while (1) {
           $1 = $3;
           if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) == ($6 | 0)) {
            break label$68;
           }
           $3 = $0 >>> 29 | 0;
           $0 = $0 << 1;
           $5 = (($3 & 4) + $1 | 0) + 16 | 0;
           $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
           if ($3) {
            continue;
           }
           break;
          }
          SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
         }
         SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, $1);
         SAFE_HEAP_STORE_i32_4_4($2, 12, $2);
         SAFE_HEAP_STORE_i32_4_4($2, 8, $2);
         break label$60;
        }
        $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
        SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
        SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
        SAFE_HEAP_STORE_i32_4_4($4, 24, 0);
        SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
        SAFE_HEAP_STORE_i32_4_4($4, 8, $0);
       }
       $0 = $7 + 8 | 0;
       break label$1;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
      SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
      SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $0);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31328);
     if ($4 >>> 0 >= $0 >>> 0) {
      break label$4;
     }
     $2 = $0 - $4 | 0;
     SAFE_HEAP_STORE_i32_4_4(0, 31328, $2);
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31340);
     $1 = $4 + $0 | 0;
     SAFE_HEAP_STORE_i32_4_4(0, 31340, $1);
     SAFE_HEAP_STORE_i32_4_4($1, 4, $2 | 1);
     SAFE_HEAP_STORE_i32_4_4($0, 4, $4 | 3);
     $0 = $0 + 8 | 0;
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 48);
    $0 = 0;
    break label$1;
   }
   label$107: {
    if (!$9) {
     break label$107;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
    $0 = ($1 << 2) + 31620 | 0;
    label$108: {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
      if ($3) {
       break label$108;
      }
      $8 = __wasm_rotl_i32(-2, $1) & $8;
      SAFE_HEAP_STORE_i32_4_4(0, 31320, $8);
      break label$107;
     }
     SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0) == ($5 | 0) ? 16 : 20) + $9 | 0, 0, $3);
     if (!$3) {
      break label$107;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 24, $9);
    $0 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
    if ($0) {
     SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
     SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($5 + 20 | 0, 0);
    if (!$0) {
     break label$107;
    }
    SAFE_HEAP_STORE_i32_4_4($3 + 20 | 0, 0, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
   }
   label$111: {
    if ($2 >>> 0 <= 15) {
     $0 = $2 + $4 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 4, $0 | 3);
     $0 = $0 + $5 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) | 1);
     break label$111;
    }
    SAFE_HEAP_STORE_i32_4_4($5, 4, $4 | 3);
    SAFE_HEAP_STORE_i32_4_4($7, 4, $2 | 1);
    SAFE_HEAP_STORE_i32_4_4($2 + $7 | 0, 0, $2);
    if ($2 >>> 0 <= 255) {
     $2 = $2 >>> 3 | 0;
     $0 = ($2 << 3) + 31356 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
     $2 = 1 << $2;
     label$114: {
      if (!($1 & $2)) {
       SAFE_HEAP_STORE_i32_4_4(0, 31316, $2 | $1);
       $2 = $0;
       break label$114;
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 8, $7);
     SAFE_HEAP_STORE_i32_4_4($2, 12, $7);
     SAFE_HEAP_STORE_i32_4_4($7, 12, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 8, $2);
     break label$111;
    }
    $0 = 31;
    $3 = $7;
    if ($2 >>> 0 <= 16777215) {
     $0 = $2 >>> 8 | 0;
     $1 = $0;
     $0 = $0 + 1048320 >>> 16 & 8;
     $1 = $1 << $0;
     $4 = $1;
     $1 = $1 + 520192 >>> 16 & 4;
     $4 = $4 << $1;
     $6 = $4;
     $4 = $4 + 245760 >>> 16 & 2;
     $0 = ($6 << $4 >>> 15 | 0) - ($0 | $1 | $4) | 0;
     $0 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
    }
    SAFE_HEAP_STORE_i32_4_4($3, 28, $0);
    SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
    $1 = ($0 << 2) + 31620 | 0;
    label$118: {
     $4 = 1 << $0;
     label$119: {
      if (!($8 & $4)) {
       SAFE_HEAP_STORE_i32_4_4(0, 31320, $4 | $8);
       SAFE_HEAP_STORE_i32_4_4($1, 0, $7);
       break label$119;
      }
      $0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
      while (1) {
       $1 = $4;
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) == ($2 | 0)) {
        break label$118;
       }
       $4 = $0 >>> 29 | 0;
       $0 = $0 << 1;
       $3 = (($4 & 4) + $1 | 0) + 16 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
       if ($4) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_i32_4_4($3, 0, $7);
     }
     SAFE_HEAP_STORE_i32_4_4($7, 24, $1);
     SAFE_HEAP_STORE_i32_4_4($7, 12, $7);
     SAFE_HEAP_STORE_i32_4_4($7, 8, $7);
     break label$111;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $7);
    SAFE_HEAP_STORE_i32_4_4($1, 8, $7);
    SAFE_HEAP_STORE_i32_4_4($7, 24, 0);
    SAFE_HEAP_STORE_i32_4_4($7, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($7, 8, $0);
   }
   $0 = $5 + 8 | 0;
   break label$1;
  }
  label$122: {
   if (!$11) {
    break label$122;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
   $0 = ($1 << 2) + 31620 | 0;
   label$123: {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($3 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
     if ($5) {
      break label$123;
     }
     SAFE_HEAP_STORE_i32_4_4(0, 31320, __wasm_rotl_i32(-2, $1) & $9);
     break label$122;
    }
    SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($11, 16) | 0) == ($3 | 0) ? 16 : 20) + $11 | 0, 0, $5);
    if (!$5) {
     break label$122;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($5, 24, $11);
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($5, 16, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 24, $5);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 20 | 0, 0);
   if (!$0) {
    break label$122;
   }
   SAFE_HEAP_STORE_i32_4_4($5 + 20 | 0, 0, $0);
   SAFE_HEAP_STORE_i32_4_4($0, 24, $5);
  }
  label$126: {
   if ($2 >>> 0 <= 15) {
    $0 = $2 + $4 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 3);
    $0 = $0 + $3 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) | 1);
    break label$126;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 4, $4 | 3);
   SAFE_HEAP_STORE_i32_4_4($10, 4, $2 | 1);
   SAFE_HEAP_STORE_i32_4_4($2 + $10 | 0, 0, $2);
   if ($8) {
    $4 = $8 >>> 3 | 0;
    $1 = ($4 << 3) + 31356 | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31336);
    $4 = 1 << $4;
    label$129: {
     if (!($6 & $4)) {
      SAFE_HEAP_STORE_i32_4_4(0, 31316, $4 | $6);
      $4 = $1;
      break label$129;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
   }
   SAFE_HEAP_STORE_i32_4_4(0, 31336, $10);
   SAFE_HEAP_STORE_i32_4_4(0, 31324, $2);
  }
  $0 = $3 + 8 | 0;
 }
 __stack_pointer = $12 + 16 | 0;
 return $0 | 0;
}

function decfloat($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 $9 = __stack_pointer - 8976 | 0;
 __stack_pointer = $9;
 $32 = $3 + $4 | 0;
 $34 = 0 - $32 | 0;
 label$1: {
  label$2: {
   while (1) {
    label$4: {
     if (($2 | 0) != 48) {
      if (($2 | 0) != 46) {
       break label$1;
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      if ($2 >>> 0 >= SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
       break label$4;
      }
      SAFE_HEAP_STORE_i32_4_4($1, 4, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      break label$2;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
      $19 = 1;
      SAFE_HEAP_STORE_i32_4_4($1, 4, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      continue;
     }
     $19 = 1;
     $2 = __shgetc($1);
     continue;
    }
    break;
   }
   $2 = __shgetc($1);
  }
  $20 = 1;
  if (($2 | 0) != 48) {
   break label$1;
  }
  while (1) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   label$8: {
    if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($1, 4, $2 + 1 | 0);
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
     break label$8;
    }
    $2 = __shgetc($1);
   }
   $12 = $14;
   $10 = $12 - 1 | 0;
   $14 = $10;
   $7 = $12 >>> 0 < 1;
   $7 = $13 - $7 | 0;
   $13 = $7;
   if (($2 | 0) == 48) {
    continue;
   }
   break;
  }
  $19 = 1;
 }
 SAFE_HEAP_STORE_i32_4_4($9, 784, 0);
 $16 = $2 - 48 | 0;
 label$10: {
  label$11: {
   $15 = ($2 | 0) == 46;
   label$12: {
    label$13: {
     label$14: {
      label$15: {
       if ($16 >>> 0 > 9 ? $15 : 1) {
        while (1) {
         label$20: {
          if ($15 & 1) {
           if (!$20) {
            $14 = $17;
            $7 = $18;
            $13 = $7;
            $20 = 1;
            break label$20;
           }
           $15 = !$19;
           break label$15;
          }
          $7 = $18;
          $8 = $17 + 1 | 0;
          $10 = $8 >>> 0 < 1 ? $7 + 1 | 0 : $7;
          $17 = $8;
          $18 = $10;
          if (($21 | 0) <= 2044) {
           $19 = ($2 | 0) == 48;
           $8 = $17;
           $15 = ($9 + 784 | 0) + ($21 << 2) | 0;
           if ($23) {
            $16 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 0), 10) + $2 | 0) - 48 | 0;
           }
           $27 = $19 ? $27 : $8;
           SAFE_HEAP_STORE_i32_4_4($15, 0, $16);
           $19 = 1;
           $2 = $23 + 1 | 0;
           $7 = $2;
           $2 = ($2 | 0) == 9;
           $23 = $2 ? 0 : $7;
           $21 = $2 + $21 | 0;
           break label$20;
          }
          if (($2 | 0) == 48) {
           break label$20;
          }
          SAFE_HEAP_STORE_i32_4_4($9, 8960, SAFE_HEAP_LOAD_i32_4_4($9, 8960) | 1);
          $27 = 18396;
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
         label$25: {
          if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
           SAFE_HEAP_STORE_i32_4_4($1, 4, $2 + 1 | 0);
           $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
           break label$25;
          }
          $2 = __shgetc($1);
         }
         $15 = ($2 | 0) == 46;
         $16 = $2 - 48 | 0;
         if ($15 | $16 >>> 0 < 10) {
          continue;
         }
         break;
        }
       }
       $12 = $20;
       $11 = $12 ? $14 : $17;
       $14 = $11;
       $10 = $13;
       $7 = $12 ? $10 : $18;
       $13 = $7;
       if (!(!$19 | ($2 & -33) != 69)) {
        $7 = scanexp($1, $6);
        $24 = $7;
        $11 = i64toi32_i32$HIGH_BITS;
        $25 = $11;
        $12 = $24;
        label$28: {
         if ($12 | ($11 | 0) != -2147483648) {
          break label$28;
         }
         if (!$6) {
          break label$12;
         }
         $24 = 0;
         $25 = 0;
         if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
          break label$28;
         }
         SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) - 1 | 0);
        }
        if (!$19) {
         break label$13;
        }
        $12 = $13;
        $11 = $25;
        $8 = $12 + $11 | 0;
        $10 = $14;
        $7 = $24;
        $6 = $10 + $7 | 0;
        $8 = $7 >>> 0 > $6 >>> 0 ? $8 + 1 | 0 : $8;
        $14 = $6;
        $13 = $8;
        break label$11;
       }
       $15 = !$19;
       if (($2 | 0) < 0) {
        break label$14;
       }
      }
      if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
       break label$14;
      }
      SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) - 1 | 0);
     }
     if (!$15) {
      break label$11;
     }
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
   }
   $17 = 0;
   $18 = 0;
   __shlim($1, 0, 0);
   $14 = 0;
   $13 = 0;
   break label$10;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($9, 784);
  if (!$1) {
   __extenddftf2($9, +($5 | 0) * 0);
   $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0);
   $14 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $13 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 0);
   $17 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $18 = $8;
   break label$10;
  }
  $12 = $14;
  $7 = $17;
  $8 = $13;
  $10 = $18;
  $2 = ($12 | 0) != ($7 | 0) | ($8 | 0) != ($10 | 0);
  $12 = $18;
  if (!($2 | (($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $7 >>> 0 > 9 : 0) | ($1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0))) {
   __floatsitf($9 + 48 | 0, $5);
   __floatunsitf($9 + 32 | 0, $1);
   $11 = $9 + 16 | 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 48);
   $6 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $2 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 56 | 0, 0);
   $5 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $1 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 32);
   $4 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $10 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 40 | 0, 0);
   $3 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $8 = $7;
   $7 = $2;
   $12 = $1;
   __multf3($11, $6, $7, $5, $12, $4, $10, $3, $8);
   $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 24 | 0, 0);
   $14 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $13 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 16);
   $17 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $18 = $8;
   break label$10;
  }
  $12 = ($4 | 0) / -2 | 0;
  $7 = $14;
  $10 = $13;
  if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? $12 >>> 0 < $7 >>> 0 : 0) {
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
   __floatsitf($9 + 96 | 0, $5);
   $4 = $9 + 80 | 0;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9, 96);
   $3 = $12;
   $8 = i64toi32_i32$HIGH_BITS;
   $2 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 104 | 0, 0);
   $12 = i64toi32_i32$HIGH_BITS;
   $1 = $12;
   $12 = $2;
   $2 = $8;
   $8 = $1;
   __multf3($4, $3, $12, $2, $8, -1, -1, -1, 2147418111);
   $4 = $9 - -64 | 0;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 80);
   $3 = $10;
   $7 = i64toi32_i32$HIGH_BITS;
   $2 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 88 | 0, 0);
   $10 = i64toi32_i32$HIGH_BITS;
   $1 = $10;
   $10 = $2;
   $2 = $7;
   $7 = $1;
   __multf3($4, $3, $10, $2, $7, -1, -1, -1, 2147418111);
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 72 | 0, 0);
   $14 = $12;
   $8 = i64toi32_i32$HIGH_BITS;
   $13 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 64);
   $17 = $8;
   $12 = i64toi32_i32$HIGH_BITS;
   $18 = $12;
   break label$10;
  }
  $8 = $4 - 226 | 0;
  $12 = $8 >> 31;
  $10 = $14;
  $7 = $8;
  $8 = $13;
  if (($12 | 0) > ($8 | 0) ? 1 : ($12 | 0) >= ($8 | 0) ? $10 >>> 0 < $7 >>> 0 : 0) {
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
   __floatsitf($9 + 144 | 0, $5);
   $4 = $9 + 128 | 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 144);
   $3 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $2 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 152 | 0, 0);
   $7 = i64toi32_i32$HIGH_BITS;
   $1 = $7;
   $7 = $2;
   $2 = $12;
   $12 = $1;
   __multf3($4, $3, $7, $2, $12, 0, 0, 0, 65536);
   $4 = $9 + 112 | 0;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 128);
   $3 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $2 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 136 | 0, 0);
   $8 = i64toi32_i32$HIGH_BITS;
   $1 = $8;
   $8 = $2;
   $2 = $10;
   $10 = $1;
   __multf3($4, $3, $8, $2, $10, 0, 0, 0, 65536);
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 120 | 0, 0);
   $14 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $13 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9, 112);
   $17 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $18 = $7;
   break label$10;
  }
  if ($23) {
   if (($23 | 0) <= 8) {
    $2 = ($9 + 784 | 0) + ($21 << 2) | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    while (1) {
     $1 = Math_imul($1, 10);
     $23 = $23 + 1 | 0;
     if (($23 | 0) != 9) {
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
   }
   $21 = $21 + 1 | 0;
  }
  label$36: {
   $20 = $14;
   if (($27 | 0) > ($20 | 0) | ($27 | 0) >= 9 | ($20 | 0) > 17) {
    break label$36;
   }
   if (($20 | 0) == 9) {
    __floatsitf($9 + 192 | 0, $5);
    __floatunsitf($9 + 176 | 0, SAFE_HEAP_LOAD_i32_4_4($9, 784));
    $11 = $9 + 160 | 0;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9, 192);
    $6 = $7;
    $12 = i64toi32_i32$HIGH_BITS;
    $2 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 200 | 0, 0);
    $5 = $12;
    $7 = i64toi32_i32$HIGH_BITS;
    $1 = $7;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9, 176);
    $4 = $7;
    $12 = i64toi32_i32$HIGH_BITS;
    $10 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 184 | 0, 0);
    $3 = $12;
    $7 = i64toi32_i32$HIGH_BITS;
    $8 = $7;
    $7 = $2;
    $12 = $1;
    __multf3($11, $6, $7, $5, $12, $4, $10, $3, $8);
    $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 168 | 0, 0);
    $14 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $13 = $10;
    $10 = SAFE_HEAP_LOAD_i64_8_8($9, 160);
    $17 = $10;
    $8 = i64toi32_i32$HIGH_BITS;
    $18 = $8;
    break label$10;
   }
   if (($20 | 0) <= 8) {
    __floatsitf($9 + 272 | 0, $5);
    __floatunsitf($9 + 256 | 0, SAFE_HEAP_LOAD_i32_4_4($9, 784));
    $11 = $9 + 240 | 0;
    $8 = SAFE_HEAP_LOAD_i64_8_8($9, 272);
    $6 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $2 = $10;
    $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 280 | 0, 0);
    $5 = $10;
    $8 = i64toi32_i32$HIGH_BITS;
    $1 = $8;
    $8 = SAFE_HEAP_LOAD_i64_8_8($9, 256);
    $4 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $12 = $10;
    $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 264 | 0, 0);
    $3 = $10;
    $8 = i64toi32_i32$HIGH_BITS;
    $7 = $8;
    $8 = $2;
    $10 = $1;
    __multf3($11, $6, $8, $5, $10, $4, $12, $3, $7);
    __floatsitf($9 + 224 | 0, SAFE_HEAP_LOAD_i32_4_4((0 - $20 << 2) + 8384 | 0, 0));
    $11 = $9 + 208 | 0;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9, 240);
    $6 = $7;
    $12 = i64toi32_i32$HIGH_BITS;
    $2 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 248 | 0, 0);
    $5 = $12;
    $7 = i64toi32_i32$HIGH_BITS;
    $1 = $7;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9, 224);
    $4 = $7;
    $12 = i64toi32_i32$HIGH_BITS;
    $10 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 232 | 0, 0);
    $3 = $12;
    $7 = i64toi32_i32$HIGH_BITS;
    $8 = $7;
    $7 = $2;
    $12 = $1;
    __divtf3($11, $6, $7, $5, $12, $4, $10, $3, $8);
    $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 216 | 0, 0);
    $14 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $13 = $10;
    $10 = SAFE_HEAP_LOAD_i64_8_8($9, 208);
    $17 = $10;
    $8 = i64toi32_i32$HIGH_BITS;
    $18 = $8;
    break label$10;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 784);
   $2 = (Math_imul($20, -3) + $3 | 0) + 27 | 0;
   if ($1 >>> $2 | 0 ? ($2 | 0) <= 30 : 0) {
    break label$36;
   }
   __floatsitf($9 + 352 | 0, $5);
   __floatunsitf($9 + 336 | 0, $1);
   $11 = $9 + 320 | 0;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 352);
   $6 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $2 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 360 | 0, 0);
   $5 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $1 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 336);
   $4 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $12 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 344 | 0, 0);
   $3 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $7 = $8;
   $8 = $2;
   $10 = $1;
   __multf3($11, $6, $8, $5, $10, $4, $12, $3, $7);
   __floatsitf($9 + 304 | 0, SAFE_HEAP_LOAD_i32_4_4(($20 << 2) + 8312 | 0, 0));
   $11 = $9 + 288 | 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 320);
   $6 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $2 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 328 | 0, 0);
   $5 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $1 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 304);
   $4 = $7;
   $12 = i64toi32_i32$HIGH_BITS;
   $10 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($9 + 312 | 0, 0);
   $3 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $8 = $7;
   $7 = $2;
   $12 = $1;
   __multf3($11, $6, $7, $5, $12, $4, $10, $3, $8);
   $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 296 | 0, 0);
   $14 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $13 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 288);
   $17 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $18 = $8;
   break label$10;
  }
  while (1) {
   $2 = $21;
   $21 = $2 - 1 | 0;
   if (!SAFE_HEAP_LOAD_i32_4_4(($9 + 784 | 0) + ($21 << 2) | 0, 0)) {
    continue;
   }
   break;
  }
  $23 = 0;
  $1 = ($20 | 0) % 9 | 0;
  label$40: {
   if (!$1) {
    $15 = 0;
    break label$40;
   }
   $6 = ($20 | 0) > -1 ? $1 : $1 + 9 | 0;
   label$42: {
    if (!$2) {
     $15 = 0;
     $2 = 0;
     break label$42;
    }
    $19 = SAFE_HEAP_LOAD_i32_4_4((0 - $6 << 2) + 8384 | 0, 0);
    $8 = 1e9 / ($19 | 0) | 0;
    $16 = 0;
    $1 = 0;
    $15 = 0;
    while (1) {
     $21 = ($9 + 784 | 0) + ($1 << 2) | 0;
     $7 = $21;
     $21 = SAFE_HEAP_LOAD_i32_4_4($21, 0);
     $27 = ($21 >>> 0) / ($19 >>> 0) | 0;
     $16 = $27 + $16 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, $16);
     $16 = !$16 & ($1 | 0) == ($15 | 0);
     $15 = $16 ? $15 + 1 & 2047 : $15;
     $20 = $16 ? $20 - 9 | 0 : $20;
     $16 = Math_imul($21 - Math_imul($19, $27) | 0, $8);
     $1 = $1 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    if (!$16) {
     break label$42;
    }
    SAFE_HEAP_STORE_i32_4_4(($9 + 784 | 0) + ($2 << 2) | 0, 0, $16);
    $2 = $2 + 1 | 0;
   }
   $20 = ($20 - $6 | 0) + 9 | 0;
  }
  while (1) {
   $27 = ($9 + 784 | 0) + ($15 << 2) | 0;
   label$46: {
    while (1) {
     if (($20 | 0) >= 36) {
      if (($20 | 0) != 36) {
       break label$46;
      }
      if (SAFE_HEAP_LOAD_i32_4_4($27, 0) >>> 0 >= 10384593) {
       break label$46;
      }
     }
     $19 = $2 + 2047 | 0;
     $16 = 0;
     while (1) {
      $1 = $19 & 2047;
      $19 = ($9 + 784 | 0) + ($1 << 2) | 0;
      $8 = SAFE_HEAP_LOAD_i64_4_U_4($19, 0);
      $7 = $8 << 29;
      $10 = i64toi32_i32$HIGH_BITS;
      $8 = $10 << 29 | $8 >>> 3;
      $12 = $8;
      $10 = $16;
      $11 = $10 + $7 | 0;
      $6 = $11 >>> 0 < $7 >>> 0 ? $12 + 1 | 0 : $12;
      $14 = $11;
      $13 = $6;
      $8 = $11;
      if (!$13 & $8 >>> 0 < 1000000001) {
       $17 = 0;
      } else {
       $8 = $13;
       $6 = __wasm_i64_udiv($14, $8, 1e9, 0);
       $17 = $6;
       $8 = i64toi32_i32$HIGH_BITS;
       $18 = $8;
       $6 = __wasm_i64_mul($17, $8, 1e9, 0);
       $8 = i64toi32_i32$HIGH_BITS;
       $11 = $8;
       $7 = $14;
       $10 = $6;
       $12 = $7 - $10 | 0;
       $14 = $12;
       $8 = $13;
       $6 = $11;
       $11 = $6 + ($10 >>> 0 > $7 >>> 0) | 0;
       $11 = $8 - $11 | 0;
       $13 = $11;
      }
      $16 = $17;
      SAFE_HEAP_STORE_i32_4_4($19, 0, $14);
      $2 = ($2 - 1 & 2047) != ($1 | 0) ? $2 : ($1 | 0) == ($15 | 0) ? $2 : $14 ? $2 : $1;
      $19 = $1 - 1 | 0;
      if (($1 | 0) != ($15 | 0)) {
       continue;
      }
      break;
     }
     $23 = $23 - 29 | 0;
     if (!$16) {
      continue;
     }
     break;
    }
    $15 = $15 - 1 & 2047;
    if (($15 | 0) == ($2 | 0)) {
     $1 = ($9 + 784 | 0) + (($2 + 2046 & 2047) << 2) | 0;
     $6 = $1;
     $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $1 = $2 - 1 & 2047;
     SAFE_HEAP_STORE_i32_4_4($6, 0, $7 | SAFE_HEAP_LOAD_i32_4_4(($9 + 784 | 0) + ($1 << 2) | 0, 0));
     $2 = $1;
    }
    $20 = $20 + 9 | 0;
    SAFE_HEAP_STORE_i32_4_4(($9 + 784 | 0) + ($15 << 2) | 0, 0, $16);
    continue;
   }
   break;
  }
  label$53: {
   label$54: while (1) {
    $6 = $2 + 1 & 2047;
    $10 = ($9 + 784 | 0) + (($2 - 1 & 2047) << 2) | 0;
    while (1) {
     $21 = ($20 | 0) > 45 ? 9 : 1;
     label$56: {
      while (1) {
       $19 = $15;
       $1 = 0;
       label$58: {
        while (1) {
         label$60: {
          $15 = $1 + $19 & 2047;
          if (($15 | 0) == ($2 | 0)) {
           break label$60;
          }
          $15 = SAFE_HEAP_LOAD_i32_4_4(($9 + 784 | 0) + ($15 << 2) | 0, 0);
          $16 = SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + 8336 | 0, 0);
          if ($15 >>> 0 < $16 >>> 0) {
           break label$60;
          }
          if ($15 >>> 0 > $16 >>> 0) {
           break label$58;
          }
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue;
          }
         }
         break;
        }
        if (($20 | 0) != 36) {
         break label$58;
        }
        $14 = 0;
        $13 = 0;
        $1 = 0;
        $17 = 0;
        $18 = 0;
        while (1) {
         $15 = $1 + $19 & 2047;
         if (($15 | 0) == ($2 | 0)) {
          $2 = $2 + 1 & 2047;
          SAFE_HEAP_STORE_i32_4_4((($2 << 2) + $9 | 0) + 780 | 0, 0, 0);
         }
         $11 = $13;
         $7 = $18;
         __multf3($9 + 768 | 0, $14, $11, $17, $7, 0, 0, 1342177280, 1075633366);
         __floatunsitf($9 + 752 | 0, SAFE_HEAP_LOAD_i32_4_4(($9 + 784 | 0) + ($15 << 2) | 0, 0));
         $25 = $9 + 736 | 0;
         $10 = SAFE_HEAP_LOAD_i64_8_8($9, 768);
         $17 = $10;
         $8 = i64toi32_i32$HIGH_BITS;
         $13 = $8;
         $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 776 | 0, 0);
         $14 = $8;
         $10 = i64toi32_i32$HIGH_BITS;
         $6 = $10;
         $10 = SAFE_HEAP_LOAD_i64_8_8($9, 752);
         $18 = $10;
         $8 = i64toi32_i32$HIGH_BITS;
         $7 = $8;
         $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 760 | 0, 0);
         $12 = $8;
         $10 = i64toi32_i32$HIGH_BITS;
         $11 = $10;
         $10 = $13;
         $8 = $6;
         __addtf3($25, $17, $10, $14, $8, $18, $7, $12, $11);
         $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 744 | 0, 0);
         $17 = $11;
         $7 = i64toi32_i32$HIGH_BITS;
         $18 = $7;
         $7 = SAFE_HEAP_LOAD_i64_8_8($9, 736);
         $14 = $7;
         $11 = i64toi32_i32$HIGH_BITS;
         $13 = $11;
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 4) {
          continue;
         }
         break;
        }
        __floatsitf($9 + 720 | 0, $5);
        $12 = $9 + 704 | 0;
        $11 = SAFE_HEAP_LOAD_i64_8_8($9, 720);
        $6 = $11;
        $7 = i64toi32_i32$HIGH_BITS;
        $8 = $7;
        $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 728 | 0, 0);
        $1 = $7;
        $11 = i64toi32_i32$HIGH_BITS;
        $10 = $11;
        $11 = $13;
        $7 = $18;
        __multf3($12, $14, $11, $17, $7, $6, $8, $1, $10);
        $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 712 | 0, 0);
        $17 = $10;
        $8 = i64toi32_i32$HIGH_BITS;
        $18 = $8;
        $14 = 0;
        $13 = 0;
        $8 = SAFE_HEAP_LOAD_i64_8_8($9, 704);
        $24 = $8;
        $10 = i64toi32_i32$HIGH_BITS;
        $25 = $10;
        $16 = $23 + 113 | 0;
        $1 = $16 - $4 | 0;
        $20 = ($3 | 0) > ($1 | 0);
        $15 = $20 ? ($1 | 0) > 0 ? $1 : 0 : $3;
        if (($15 | 0) <= 112) {
         break label$56;
        }
        break label$53;
       }
       $23 = $21 + $23 | 0;
       $15 = $2;
       if (($2 | 0) == ($19 | 0)) {
        continue;
       }
       break;
      }
      $27 = 1e9 >>> $21 | 0;
      $8 = -1 << $21 ^ -1;
      $1 = 0;
      $15 = $19;
      while (1) {
       $16 = ($9 + 784 | 0) + ($19 << 2) | 0;
       $7 = $16;
       $16 = SAFE_HEAP_LOAD_i32_4_4($16, 0);
       $1 = ($16 >>> $21 | 0) + $1 | 0;
       SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
       $1 = !$1 & ($15 | 0) == ($19 | 0);
       $15 = $1 ? $15 + 1 & 2047 : $15;
       $20 = $1 ? $20 - 9 | 0 : $20;
       $1 = Math_imul($16 & $8, $27);
       $19 = $19 + 1 & 2047;
       if (($19 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
      if (!$1) {
       continue;
      }
      if (($6 | 0) != ($15 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(($9 + 784 | 0) + ($2 << 2) | 0, 0, $1);
       $2 = $6;
       continue label$54;
      }
      SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) | 1);
      $15 = $6;
      continue;
     }
     break;
    }
    break;
   }
   __extenddftf2($9 + 656 | 0, scalbn(1, 225 - $15 | 0));
   $13 = $9 + 688 | 0;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 656);
   $6 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $4 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 664 | 0, 0);
   $10 = i64toi32_i32$HIGH_BITS;
   $3 = $10;
   $10 = $4;
   $4 = $8;
   $8 = $3;
   $7 = $25;
   $11 = $18;
   copysignl($13, $6, $10, $4, $8, $24, $7, $17, $11);
   $11 = SAFE_HEAP_LOAD_i64_8_8($9, 696);
   $29 = $11;
   $7 = i64toi32_i32$HIGH_BITS;
   $28 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 688);
   $30 = $7;
   $11 = i64toi32_i32$HIGH_BITS;
   $31 = $11;
   __extenddftf2($9 + 640 | 0, scalbn(1, 113 - $15 | 0));
   $6 = $9 + 672 | 0;
   $11 = SAFE_HEAP_LOAD_i64_8_8($9, 640);
   $4 = $11;
   $7 = i64toi32_i32$HIGH_BITS;
   $8 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 648 | 0, 0);
   $3 = $7;
   $11 = i64toi32_i32$HIGH_BITS;
   $10 = $11;
   $11 = $25;
   $7 = $18;
   fmodl($6, $24, $11, $17, $7, $4, $8, $3, $10);
   $3 = $9 + 624 | 0;
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 672);
   $14 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $13 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 680);
   $26 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $22 = $10;
   $10 = $11;
   $8 = $7;
   $7 = $13;
   $11 = $22;
   __subtf3($3, $24, $10, $17, $8, $14, $7, $26, $11);
   $6 = $9 + 608 | 0;
   $11 = SAFE_HEAP_LOAD_i64_8_8($9, 624);
   $4 = $11;
   $7 = i64toi32_i32$HIGH_BITS;
   $8 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 632 | 0, 0);
   $3 = $7;
   $11 = i64toi32_i32$HIGH_BITS;
   $10 = $11;
   $11 = $31;
   $7 = $28;
   __addtf3($6, $30, $11, $29, $7, $4, $8, $3, $10);
   $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 616 | 0, 0);
   $17 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $18 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 608);
   $24 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $25 = $10;
  }
  $21 = $19 + 4 & 2047;
  label$65: {
   if (($21 | 0) == ($2 | 0)) {
    break label$65;
   }
   $21 = SAFE_HEAP_LOAD_i32_4_4(($9 + 784 | 0) + ($21 << 2) | 0, 0);
   label$66: {
    if ($21 >>> 0 <= 499999999) {
     if (!(($19 + 5 & 2047) == ($2 | 0) ? $21 : 1)) {
      break label$66;
     }
     __extenddftf2($9 + 496 | 0, +($5 | 0) * .25);
     $4 = $9 + 480 | 0;
     $10 = SAFE_HEAP_LOAD_i64_8_8($9, 496);
     $3 = $10;
     $8 = i64toi32_i32$HIGH_BITS;
     $7 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 504 | 0, 0);
     $2 = $8;
     $10 = i64toi32_i32$HIGH_BITS;
     $11 = $10;
     $10 = $13;
     $8 = $22;
     __addtf3($4, $14, $10, $26, $8, $3, $7, $2, $11);
     $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 488 | 0, 0);
     $26 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $22 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9, 480);
     $14 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $13 = $11;
     break label$66;
    }
    if (($21 | 0) != 5e8) {
     __extenddftf2($9 + 592 | 0, +($5 | 0) * .75);
     $4 = $9 + 576 | 0;
     $11 = SAFE_HEAP_LOAD_i64_8_8($9, 592);
     $3 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $8 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 600 | 0, 0);
     $2 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $10 = $11;
     $11 = $13;
     $7 = $22;
     __addtf3($4, $14, $11, $26, $7, $3, $8, $2, $10);
     $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 584 | 0, 0);
     $26 = $10;
     $8 = i64toi32_i32$HIGH_BITS;
     $22 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9, 576);
     $14 = $8;
     $10 = i64toi32_i32$HIGH_BITS;
     $13 = $10;
     break label$66;
    }
    $33 = +($5 | 0);
    if (($19 + 5 & 2047) == ($2 | 0)) {
     __extenddftf2($9 + 528 | 0, $33 * .5);
     $4 = $9 + 512 | 0;
     $10 = SAFE_HEAP_LOAD_i64_8_8($9, 528);
     $3 = $10;
     $8 = i64toi32_i32$HIGH_BITS;
     $7 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 536 | 0, 0);
     $2 = $8;
     $10 = i64toi32_i32$HIGH_BITS;
     $11 = $10;
     $10 = $13;
     $8 = $22;
     __addtf3($4, $14, $10, $26, $8, $3, $7, $2, $11);
     $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 520 | 0, 0);
     $26 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $22 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9, 512);
     $14 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $13 = $11;
     break label$66;
    }
    __extenddftf2($9 + 560 | 0, $33 * .75);
    $4 = $9 + 544 | 0;
    $11 = SAFE_HEAP_LOAD_i64_8_8($9, 560);
    $3 = $11;
    $7 = i64toi32_i32$HIGH_BITS;
    $8 = $7;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 568 | 0, 0);
    $2 = $7;
    $11 = i64toi32_i32$HIGH_BITS;
    $10 = $11;
    $11 = $13;
    $7 = $22;
    __addtf3($4, $14, $11, $26, $7, $3, $8, $2, $10);
    $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 552 | 0, 0);
    $26 = $10;
    $8 = i64toi32_i32$HIGH_BITS;
    $22 = $8;
    $8 = SAFE_HEAP_LOAD_i64_8_8($9, 544);
    $14 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $13 = $10;
   }
   if (($15 | 0) > 111) {
    break label$65;
   }
   $10 = $13;
   $8 = $22;
   fmodl($9 + 464 | 0, $14, $10, $26, $8, 0, 0, 0, 1073676288);
   $11 = SAFE_HEAP_LOAD_i64_8_8($9, 464);
   $4 = $11;
   $7 = i64toi32_i32$HIGH_BITS;
   $3 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 472);
   $11 = i64toi32_i32$HIGH_BITS;
   $2 = $11;
   $11 = $3;
   $3 = $7;
   $7 = $2;
   if (__letf2($4, $11, $3, $7, 0, 0, 0, 0)) {
    break label$65;
   }
   $10 = $13;
   $8 = $22;
   __addtf3($9 + 448 | 0, $14, $10, $26, $8, 0, 0, 0, 1073676288);
   $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 456 | 0, 0);
   $26 = $11;
   $7 = i64toi32_i32$HIGH_BITS;
   $22 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9, 448);
   $14 = $7;
   $11 = i64toi32_i32$HIGH_BITS;
   $13 = $11;
  }
  $11 = $25;
  $7 = $18;
  $8 = $13;
  $10 = $22;
  __addtf3($9 + 432 | 0, $24, $11, $17, $7, $14, $8, $26, $10);
  $5 = $9 + 416 | 0;
  $10 = SAFE_HEAP_LOAD_i64_8_8($9, 432);
  $4 = $10;
  $8 = i64toi32_i32$HIGH_BITS;
  $3 = $8;
  $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 440 | 0, 0);
  $10 = i64toi32_i32$HIGH_BITS;
  $2 = $10;
  $10 = $3;
  $3 = $8;
  $8 = $2;
  $7 = $31;
  $11 = $28;
  __subtf3($5, $4, $10, $3, $8, $30, $7, $29, $11);
  $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 424 | 0, 0);
  $17 = $11;
  $7 = i64toi32_i32$HIGH_BITS;
  $18 = $7;
  $7 = SAFE_HEAP_LOAD_i64_8_8($9, 416);
  $24 = $7;
  $11 = i64toi32_i32$HIGH_BITS;
  $25 = $11;
  label$70: {
   if ((-2 - $32 | 0) >= ($16 & 2147483647)) {
    break label$70;
   }
   $11 = $25;
   $7 = $18;
   fabsl($9 + 400 | 0, $24, $11, $17, $7);
   $7 = $11;
   $11 = $18;
   __multf3($9 + 384 | 0, $24, $7, $17, $11, 0, 0, 0, 1073610752);
   $10 = SAFE_HEAP_LOAD_i64_8_8($9, 400);
   $30 = $10;
   $8 = i64toi32_i32$HIGH_BITS;
   $31 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 408);
   $29 = $8;
   $10 = i64toi32_i32$HIGH_BITS;
   $28 = $10;
   $10 = $31;
   $8 = $28;
   $2 = __getf2($30, $10, $29, $8, 0, 0, 0, 1081081856);
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 392 | 0, 0);
   $11 = i64toi32_i32$HIGH_BITS;
   $3 = $11;
   $16 = ($2 | 0) < 0;
   $10 = $16 ? $17 : $7;
   $17 = $10;
   $11 = $18;
   $7 = $3;
   $8 = $16 ? $11 : $7;
   $18 = $8;
   $8 = SAFE_HEAP_LOAD_i64_8_8($9, 384);
   $10 = i64toi32_i32$HIGH_BITS;
   $3 = $10;
   $7 = $16;
   $11 = $7 ? $24 : $8;
   $24 = $11;
   $10 = $25;
   $8 = $3;
   $6 = $7 ? $10 : $8;
   $25 = $6;
   $23 = (($2 | 0) > -1) + $23 | 0;
   if (($23 + 110 | 0) <= ($34 | 0)) {
    $6 = $31;
    $11 = $28;
    if ((((__getf2($30, $6, $29, $11, 0, 0, 0, 1081081856) | 0) < 0 ? $20 : ($1 | 0) != ($15 | 0) & $20) | 0) != 1) {
     break label$70;
    }
    $10 = $13;
    $7 = $22;
    if (!__letf2($14, $10, $26, $7, 0, 0, 0, 0)) {
     break label$70;
    }
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
  }
  $6 = $25;
  $11 = $18;
  scalbnl($9 + 368 | 0, $24, $6, $17, $11, $23);
  $11 = SAFE_HEAP_LOAD_i64_8_8($9, 376);
  $14 = $11;
  $6 = i64toi32_i32$HIGH_BITS;
  $13 = $6;
  $6 = SAFE_HEAP_LOAD_i64_8_8($9, 368);
  $17 = $6;
  $11 = i64toi32_i32$HIGH_BITS;
  $18 = $11;
 }
 $11 = $18;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $17, $11);
 $11 = $13;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $14, $11);
 __stack_pointer = $9 + 8976 | 0;
}

function Synthesis($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 $11 = __stack_pointer - 336 | 0;
 __stack_pointer = $11;
 randn_reseed();
 $29 = ($4 & 536870911) != ($4 | 0) ? -1 : $4 << 3;
 $25 = operator_20new_5b_5d_28unsigned_20long_29($29);
 $13 = ($7 | 0) < 1;
 if (!$13) {
  memset($8, 0, $7 << 3);
 }
 memset($11 + 240 | 0, 0, 96);
 InitializeMinimumPhaseAnalysis($4, $11 + 240 | 0);
 SAFE_HEAP_STORE_i32_4_4($11 + 232 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 224 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 216 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 208 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 200 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 192 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11, 184, 0, 0);
 InitializeInverseRealFFT($4, $11 + 184 | 0);
 SAFE_HEAP_STORE_i32_4_4($11 + 176 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 168 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 160 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 152 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 144 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11 + 136 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($11, 128, 0, 0);
 InitializeForwardRealFFT($4, $11 + 128 | 0);
 $16 = ($6 | 0) / ($4 | 0) | 0;
 $26 = +($6 | 0);
 $14 = ($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3;
 $37 = operator_20new_5b_5d_28unsigned_20long_29($14);
 $34 = operator_20new_5b_5d_28unsigned_20long_29(($7 & 1073741823) != ($7 | 0) ? -1 : $7 << 2);
 $38 = operator_20new_5b_5d_28unsigned_20long_29($14);
 $30 = operator_20new_5b_5d_28unsigned_20long_29($14);
 $22 = operator_20new_5b_5d_28unsigned_20long_29($14);
 $10 = $1 + 1 | 0;
 $6 = ($10 & 536870911) != ($10 | 0) ? -1 : $10 << 3;
 $20 = operator_20new_5b_5d_28unsigned_20long_29($6);
 $17 = operator_20new_5b_5d_28unsigned_20long_29($6);
 $18 = operator_20new_5b_5d_28unsigned_20long_29($6);
 label$2: {
  if ($13) {
   break label$2;
  }
  $19 = $7 & 1;
  $6 = 0;
  if (($7 | 0) != 1) {
   $13 = $7 & -2;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $22 | 0, 0, +($6 | 0) / $26);
    $15 = $6 | 1;
    SAFE_HEAP_STORE_f64_8_8(($15 << 3) + $22 | 0, 0, +($15 | 0) / $26);
    $6 = $6 + 2 | 0;
    $13 = $13 - 2 | 0;
    if ($13) {
     continue;
    }
    break;
   }
  }
  if (!$19) {
   break label$2;
  }
  SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $22 | 0, 0, +($6 | 0) / $26);
 }
 $39 = $5 / 1e3;
 if (($1 | 0) > 0) {
  $12 = +($16 | 0) + 1;
  while (1) {
   $6 = $9 << 3;
   SAFE_HEAP_STORE_f64_8_8($20 + $6 | 0, 0, $39 * +($9 | 0));
   $21 = $6 + $17 | 0;
   $5 = SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0);
   $5 = $5 < $12 ? 0 : $5;
   SAFE_HEAP_STORE_f64_8_8($21, 0, $5);
   SAFE_HEAP_STORE_f64_8_8($6 + $18 | 0, 0, $5 == 0 ? 0 : 1);
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $9 = $1 << 3;
 SAFE_HEAP_STORE_f64_8_8($20 + $9 | 0, 0, $39 * +($1 | 0));
 $21 = $9 + $17 | 0;
 $40 = $1 - 1 | 0;
 $6 = $40 << 3;
 $5 = SAFE_HEAP_LOAD_f64_8_8($17 + $6 | 0, 0);
 $0 = $9 - 16 | 0;
 SAFE_HEAP_STORE_f64_8_8($21, 0, $5 + $5 - SAFE_HEAP_LOAD_f64_8_8($17 + $0 | 0, 0));
 $9 = $9 + $18 | 0;
 $5 = SAFE_HEAP_LOAD_f64_8_8($6 + $18 | 0, 0);
 SAFE_HEAP_STORE_f64_8_8($9, 0, $5 + $5 - SAFE_HEAP_LOAD_f64_8_8($0 + $18 | 0, 0));
 $13 = operator_20new_5b_5d_28unsigned_20long_29($14);
 interp1($20, $17, $10, $22, $7, $13);
 interp1($20, $18, $10, $22, $7, $30);
 $6 = 1;
 label$7: {
  if (($7 | 0) < 1) {
   break label$7;
  }
  $16 = $7 & 1;
  $9 = 0;
  if (($7 | 0) != 1) {
   $15 = $7 & -2;
   while (1) {
    $0 = $9 << 3;
    $10 = $30 + $0 | 0;
    $23 = SAFE_HEAP_LOAD_f64_8_8($10, 0) > .5 ? 1 : 0;
    SAFE_HEAP_STORE_f64_8_8($10, 0, $23);
    $5 = 500;
    $12 = 500;
    $21 = $0 + $13 | 0;
    if ($23 != 0) {
     $12 = SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0);
    }
    SAFE_HEAP_STORE_f64_8_8($21, 0, $12);
    $0 = ($9 | 1) << 3;
    $10 = $30 + $0 | 0;
    $12 = SAFE_HEAP_LOAD_f64_8_8($10, 0) > .5 ? 1 : 0;
    SAFE_HEAP_STORE_f64_8_8($10, 0, $12);
    $21 = $0 + $13 | 0;
    if ($12 != 0) {
     $5 = SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0);
    }
    SAFE_HEAP_STORE_f64_8_8($21, 0, $5);
    $9 = $9 + 2 | 0;
    $15 = $15 - 2 | 0;
    if ($15) {
     continue;
    }
    break;
   }
  }
  if (!$16) {
   break label$7;
  }
  $9 = $9 << 3;
  $0 = $30 + $9 | 0;
  $12 = SAFE_HEAP_LOAD_f64_8_8($0, 0) > .5 ? 1 : 0;
  SAFE_HEAP_STORE_f64_8_8($0, 0, $12);
  $5 = 500;
  $0 = $9 + $13 | 0;
  if ($12 != 0) {
   $5 = SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0);
  }
  SAFE_HEAP_STORE_f64_8_8($0, 0, $5);
 }
 $15 = operator_20new_5b_5d_28unsigned_20long_29($14);
 $14 = $7 - 1 | 0;
 $10 = operator_20new_5b_5d_28unsigned_20long_29(($14 & 536870911) != ($14 | 0) ? -1 : $14 << 3);
 $12 = SAFE_HEAP_LOAD_f64_8_8($13, 0) * 6.283185307179586 / $26;
 $23 = fmod($12, 6.283185307179586);
 SAFE_HEAP_STORE_f64_8_8($15, 0, $23);
 $9 = 0;
 if (($7 | 0) >= 2) {
  while (1) {
   $0 = $6 << 3;
   $21 = $15 + $0 | 0;
   $12 = $12 + SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0) * 6.283185307179586 / $26;
   $5 = fmod($12, 6.283185307179586);
   SAFE_HEAP_STORE_f64_8_8($21, 0, $5);
   SAFE_HEAP_STORE_f64_8_8(($0 + $10 | 0) - 8 | 0, 0, Math_abs($5 - $23));
   $23 = $5;
   $6 = $6 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
  $6 = 0;
  while (1) {
   $0 = $6 << 3;
   label$19: {
    if (!(SAFE_HEAP_LOAD_f64_8_8($10 + $0 | 0, 0) > 3.141592653589793)) {
     $6 = $6 + 1 | 0;
     break label$19;
    }
    $16 = $27 << 3;
    SAFE_HEAP_STORE_f64_8_8($37 + $16 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $22 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4(($27 << 2) + $34 | 0, 0, $6);
    $21 = $16 + $38 | 0;
    $5 = SAFE_HEAP_LOAD_f64_8_8($0 + $15 | 0, 0) + -6.283185307179586;
    $6 = $6 + 1 | 0;
    SAFE_HEAP_STORE_f64_8_8($21, 0, -$5 / (SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $15 | 0, 0) - $5) / $26);
    $27 = $27 + 1 | 0;
   }
   if (($6 | 0) != ($14 | 0)) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($10);
 operator_20delete_5b_5d_28void__29($15);
 operator_20delete_5b_5d_28void__29($18);
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($20);
 operator_20delete_5b_5d_28void__29($22);
 operator_20delete_5b_5d_28void__29($13);
 $18 = ($4 | 0) / 2 | 0;
 $23 = +($4 | 0);
 $19 = operator_20new_5b_5d_28unsigned_20long_29($29);
 label$21: {
  if (($4 | 0) < 2) {
   break label$21;
  }
  $31 = $23 + 1;
  $5 = 0;
  while (1) {
   $6 = ($9 << 3) + $19 | 0;
   $12 = .5 - cos((+($9 | 0) + 1) * 6.283185307179586 / $31) * .5;
   SAFE_HEAP_STORE_f64_8_8($6, 0, $12);
   SAFE_HEAP_STORE_f64_8_8((($9 ^ -1) + $4 << 3) + $19 | 0, 0, $12);
   $12 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
   $5 = $5 + ($12 + $12);
   $9 = $9 + 1 | 0;
   if (($18 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
  $15 = $18 & 1;
  $9 = 0;
  if (($4 & -2) != 2) {
   $6 = $18 & -2;
   while (1) {
    $0 = $9 << 3;
    $13 = $19 + $0 | 0;
    $12 = SAFE_HEAP_LOAD_f64_8_8($13, 0) / $5;
    SAFE_HEAP_STORE_f64_8_8($13, 0, $12);
    SAFE_HEAP_STORE_f64_8_8((($9 ^ -1) + $4 << 3) + $19 | 0, 0, $12);
    $0 = ($0 | 8) + $19 | 0;
    $12 = SAFE_HEAP_LOAD_f64_8_8($0, 0) / $5;
    SAFE_HEAP_STORE_f64_8_8($0, 0, $12);
    SAFE_HEAP_STORE_f64_8_8((($4 - $9 << 3) + $19 | 0) - 16 | 0, 0, $12);
    $9 = $9 + 2 | 0;
    $6 = $6 - 2 | 0;
    if ($6) {
     continue;
    }
    break;
   }
  }
  if (!$15) {
   break label$21;
  }
  $6 = ($9 << 3) + $19 | 0;
  $5 = SAFE_HEAP_LOAD_f64_8_8($6, 0) / $5;
  SAFE_HEAP_STORE_f64_8_8($6, 0, $5);
  SAFE_HEAP_STORE_f64_8_8((($9 ^ -1) + $4 << 3) + $19 | 0, 0, $5);
 }
 $50 = ($4 | 0) / -2 | 0;
 if (($27 | 0) >= 1) {
  $51 = $4 << 3;
  $52 = $27 - 1 | 0;
  $32 = $11 + 140 | 0;
  $24 = $11 + 196 | 0;
  $53 = $4 & -2;
  $54 = $4 & 1;
  $55 = $18 & -4;
  $56 = $18 & 3;
  $44 = $18 << 3;
  $57 = $44 + $19 | 0;
  $9 = $4 - $18 | 0;
  $58 = $9 & 1;
  $59 = $9 & 3;
  $33 = $18 + 1 | 0;
  $21 = $33 & -2;
  $41 = $33 & 1;
  $60 = $33 & -4;
  $61 = $33 & 3;
  $45 = $4 - 1 | 0;
  $46 = $45 - $18 | 0;
  $62 = $18 - 1 >>> 0 < 3;
  $42 = $4 + 1 >>> 0 < 3;
  while (1) {
   $9 = $35;
   $0 = $9 << 3;
   $5 = SAFE_HEAP_LOAD_f64_8_8($37 + $0 | 0, 0) / $39;
   $12 = Math_ceil($5);
   label$27: {
    if (Math_abs($12) < 2147483648) {
     $6 = ~~$12;
     break label$27;
    }
    $6 = -2147483648;
   }
   $16 = ($1 | 0) > ($6 | 0) ? $6 : $40;
   $12 = Math_floor($5);
   label$29: {
    if (Math_abs($12) < 2147483648) {
     $6 = ~~$12;
     break label$29;
    }
    $6 = -2147483648;
   }
   $35 = $9 + 1 | 0;
   $47 = SAFE_HEAP_LOAD_i32_4_4(((($27 | 0) > ($35 | 0) ? $35 : $52) << 2) + $34 | 0, 0);
   $14 = ($1 | 0) > ($6 | 0) ? $6 : $40;
   $5 = $5 - +($14 | 0);
   $36 = SAFE_HEAP_LOAD_f64_8_8($0 + $38 | 0, 0);
   $48 = ($9 << 2) + $34 | 0;
   $43 = SAFE_HEAP_LOAD_i32_4_4($48, 0);
   $49 = SAFE_HEAP_LOAD_f64_8_8(($43 << 3) + $30 | 0, 0);
   $22 = operator_20new_5b_5d_28unsigned_20long_29($29);
   $15 = operator_20new_5b_5d_28unsigned_20long_29($29);
   $13 = operator_20new_5b_5d_28unsigned_20long_29($29);
   $20 = operator_20new_5b_5d_28unsigned_20long_29($29);
   $28 = ($14 | 0) == ($16 | 0);
   label$31: {
    label$32: {
     if (!$28) {
      if (($4 | 0) < -1) {
       break label$31;
      }
      $12 = 1 - $5;
      $0 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $2 | 0, 0);
      $10 = SAFE_HEAP_LOAD_i32_4_4(($14 << 2) + $2 | 0, 0);
      $6 = 0;
      $17 = $21;
      if (!$42) {
       while (1) {
        $9 = $6 << 3;
        SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, $12 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0)) + $5 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($0 + $9 | 0, 0)));
        $9 = $9 | 8;
        SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, $12 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0)) + $5 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($0 + $9 | 0, 0)));
        $6 = $6 + 2 | 0;
        $17 = $17 - 2 | 0;
        if ($17) {
         continue;
        }
        break;
       }
      }
      if (!$41) {
       break label$32;
      }
      $9 = $6 << 3;
      SAFE_HEAP_STORE_f64_8_8($13 + $9 | 0, 0, $12 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($9 + $10 | 0, 0)) + $5 * Math_abs(SAFE_HEAP_LOAD_f64_8_8($0 + $9 | 0, 0)));
      break label$32;
     }
     if (($4 | 0) < -1) {
      break label$31;
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(($14 << 2) + $2 | 0, 0);
     $9 = 0;
     $10 = $60;
     if ($18 >>> 0 >= 3) {
      while (1) {
       $0 = $9 << 3;
       SAFE_HEAP_STORE_f64_8_8($13 + $0 | 0, 0, Math_abs(SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0)));
       $17 = $0 | 8;
       SAFE_HEAP_STORE_f64_8_8($17 + $13 | 0, 0, Math_abs(SAFE_HEAP_LOAD_f64_8_8($6 + $17 | 0, 0)));
       $17 = $0 | 16;
       SAFE_HEAP_STORE_f64_8_8($17 + $13 | 0, 0, Math_abs(SAFE_HEAP_LOAD_f64_8_8($6 + $17 | 0, 0)));
       $0 = $0 | 24;
       SAFE_HEAP_STORE_f64_8_8($13 + $0 | 0, 0, Math_abs(SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0)));
       $9 = $9 + 4 | 0;
       $10 = $10 - 4 | 0;
       if ($10) {
        continue;
       }
       break;
      }
     }
     $0 = $61;
     if (!$0) {
      break label$32;
     }
     while (1) {
      $10 = $9 << 3;
      SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, Math_abs(SAFE_HEAP_LOAD_f64_8_8($6 + $10 | 0, 0)));
      $9 = $9 + 1 | 0;
      $0 = $0 - 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    if (!$28) {
     if (($4 | 0) < -1) {
      break label$31;
     }
     $31 = 1 - $5;
     $0 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $3 | 0, 0);
     $10 = SAFE_HEAP_LOAD_i32_4_4(($14 << 2) + $3 | 0, 0);
     $9 = 0;
     while (1) {
      $6 = $9 << 3;
      $14 = $20 + $6 | 0;
      $12 = $31 * Math_max(Math_min(SAFE_HEAP_LOAD_f64_8_8($6 + $10 | 0, 0), .999999999999), .001) + $5 * Math_max(Math_min(SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0), .999999999999), .001);
      SAFE_HEAP_STORE_f64_8_8($14, 0, $12 * $12);
      $6 = ($9 | 0) == ($18 | 0);
      $9 = $9 + 1 | 0;
      if (!$6) {
       continue;
      }
      break;
     }
     break label$31;
    }
    if (($4 | 0) < -1) {
     break label$31;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(($14 << 2) + $3 | 0, 0);
    $9 = 0;
    $10 = $21;
    if (!$42) {
     while (1) {
      $6 = $9 << 3;
      $14 = $20 + $6 | 0;
      $5 = Math_max(Math_min(SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0), .999999999999), .001);
      SAFE_HEAP_STORE_f64_8_8($14, 0, $5 * $5);
      $6 = $6 | 8;
      $14 = $20 + $6 | 0;
      $5 = Math_max(Math_min(SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0), .999999999999), .001);
      SAFE_HEAP_STORE_f64_8_8($14, 0, $5 * $5);
      $9 = $9 + 2 | 0;
      $10 = $10 - 2 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    if (!$41) {
     break label$31;
    }
    $9 = $9 << 3;
    $6 = $20 + $9 | 0;
    $5 = Math_max(Math_min(SAFE_HEAP_LOAD_f64_8_8($0 + $9 | 0, 0), .999999999999), .001);
    SAFE_HEAP_STORE_f64_8_8($6, 0, $5 * $5);
   }
   $17 = $47 - $43 | 0;
   label$43: {
    label$44: {
     label$45: {
      label$46: {
       label$47: {
        if ($49 <= .5) {
         break label$47;
        }
        $5 = SAFE_HEAP_LOAD_f64_8_8($20, 0);
        if ($5 > .999) {
         break label$47;
        }
        $9 = SAFE_HEAP_LOAD_i32_4_4($11, 240);
        label$48: {
         if (($9 | 0) < -1) {
          break label$48;
         }
         $5 = log((1 - $5) * SAFE_HEAP_LOAD_f64_8_8($13, 0) + 1e-12);
         $0 = SAFE_HEAP_LOAD_i32_4_4($11, 244);
         SAFE_HEAP_STORE_f64_8_8($0, 0, $5 * .5);
         $10 = ($9 | 0) / 2 | 0;
         if ($9 + 1 >>> 0 < 3) {
          break label$48;
         }
         $6 = 1;
         $14 = $10 & 1;
         if (($9 & -2) != 2) {
          $10 = $10 & -2;
          while (1) {
           $9 = $6 << 3;
           SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log((1 - SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) + 1e-12) * .5);
           $9 = $9 + 8 | 0;
           SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log((1 - SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) + 1e-12) * .5);
           $6 = $6 + 2 | 0;
           $10 = $10 - 2 | 0;
           if ($10) {
            continue;
           }
           break;
          }
         }
         if (!$14) {
          break label$48;
         }
         $9 = $6 << 3;
         SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log((1 - SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) + 1e-12) * .5);
        }
        GetMinimumPhaseSpectrum($11 + 240 | 0);
        if (($4 | 0) < -1) {
         break label$44;
        }
        $9 = 0;
        $0 = SAFE_HEAP_LOAD_i32_4_4($11, 192);
        $10 = SAFE_HEAP_LOAD_i32_4_4($11, 248);
        $14 = $21;
        if (!$42) {
         break label$46;
        }
        break label$45;
       }
       if (($4 | 0) < 1) {
        break label$43;
       }
       memset($15, 0, $51);
       break label$43;
      }
      while (1) {
       $6 = $9 << 4;
       $16 = $6 + $0 | 0;
       $28 = $6 + $10 | 0;
       SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($28, 0));
       SAFE_HEAP_STORE_f64_8_8($16, 8, SAFE_HEAP_LOAD_f64_8_8($28, 8));
       $6 = $6 | 16;
       $16 = $6 + $0 | 0;
       $6 = $6 + $10 | 0;
       SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($6, 0));
       SAFE_HEAP_STORE_f64_8_8($16, 8, SAFE_HEAP_LOAD_f64_8_8($6, 8));
       $9 = $9 + 2 | 0;
       $14 = $14 - 2 | 0;
       if ($14) {
        continue;
       }
       break;
      }
     }
     if ($41) {
      $9 = $9 << 4;
      $6 = $9 + $0 | 0;
      $9 = $9 + $10 | 0;
      SAFE_HEAP_STORE_f64_8_8($6, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0));
      SAFE_HEAP_STORE_f64_8_8($6, 8, SAFE_HEAP_LOAD_f64_8_8($9, 8));
     }
     $63 = $36 * 6.283185307179586 * $26 / $23;
     $9 = 0;
     while (1) {
      $6 = ($9 << 4) + $0 | 0;
      $12 = SAFE_HEAP_LOAD_f64_8_8($6, 8);
      $5 = cos($63 * +($9 | 0));
      $64 = $12 * $5;
      $31 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
      $36 = Math_sqrt(1 - $5 * $5);
      SAFE_HEAP_STORE_f64_8_8($6, 8, $64 - $31 * $36);
      SAFE_HEAP_STORE_f64_8_8($6, 0, $31 * $5 + $12 * $36);
      $6 = ($9 | 0) != ($18 | 0);
      $9 = $9 + 1 | 0;
      if ($6) {
       continue;
      }
      break;
     }
    }
    SAFE_HEAP_STORE_i64_8_8($11 + 120 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($11 + 112 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($11 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($11 + 96 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($11, 88, SAFE_HEAP_LOAD_i64_8_4($24, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($11 + 88 | 0);
    fftshift(SAFE_HEAP_LOAD_i32_4_4($11, 188), $4, $15);
    $5 = 0;
    $14 = ($4 | 0) <= ($18 | 0);
    label$54: {
     if ($14) {
      break label$54;
     }
     $9 = $18;
     $6 = $59;
     if ($6) {
      while (1) {
       $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $15 | 0, 0);
       $9 = $9 + 1 | 0;
       $6 = $6 - 1 | 0;
       if ($6) {
        continue;
       }
       break;
      }
     }
     if ($46 >>> 0 <= 2) {
      break label$54;
     }
     while (1) {
      $6 = ($9 << 3) + $15 | 0;
      $5 = $5 + SAFE_HEAP_LOAD_f64_8_8($6, 0) + SAFE_HEAP_LOAD_f64_8_8($6 + 8 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($6 + 16 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($6 + 24 | 0, 0);
      $9 = $9 + 4 | 0;
      if (($9 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
    }
    label$58: {
     if (($4 | 0) < 2) {
      break label$58;
     }
     $12 = -$5;
     $9 = 0;
     $0 = $55;
     if (!$62) {
      while (1) {
       $6 = $9 << 3;
       SAFE_HEAP_STORE_f64_8_8($15 + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($6 + $19 | 0, 0) * $12);
       $10 = $6 | 8;
       SAFE_HEAP_STORE_f64_8_8($15 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $19 | 0, 0) * $12);
       $10 = $6 | 16;
       SAFE_HEAP_STORE_f64_8_8($15 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $19 | 0, 0) * $12);
       $6 = $6 | 24;
       SAFE_HEAP_STORE_f64_8_8($15 + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($6 + $19 | 0, 0) * $12);
       $9 = $9 + 4 | 0;
       $0 = $0 - 4 | 0;
       if ($0) {
        continue;
       }
       break;
      }
     }
     $6 = $56;
     if (!$6) {
      break label$58;
     }
     while (1) {
      $0 = $9 << 3;
      SAFE_HEAP_STORE_f64_8_8($15 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $19 | 0, 0) * $12);
      $9 = $9 + 1 | 0;
      $6 = $6 - 1 | 0;
      if ($6) {
       continue;
      }
      break;
     }
    }
    if ($14) {
     break label$43;
    }
    $9 = $18;
    if ($58) {
     $9 = $15 + $44 | 0;
     SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $5 * SAFE_HEAP_LOAD_f64_8_8($57, 0));
     $9 = $33;
    }
    if (!$46) {
     break label$43;
    }
    while (1) {
     $6 = $9 << 3;
     $0 = $15 + $6 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $5 * SAFE_HEAP_LOAD_f64_8_8($6 + $19 | 0, 0));
     $6 = $6 + 8 | 0;
     $0 = $15 + $6 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $5 * SAFE_HEAP_LOAD_f64_8_8($6 + $19 | 0, 0));
     $9 = $9 + 2 | 0;
     if (($9 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $6 = 0;
   $12 = 0;
   label$64: {
    if (($17 | 0) <= 0) {
     break label$64;
    }
    while (1) {
     $5 = randn();
     $9 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
     SAFE_HEAP_STORE_f64_8_8($9 + ($6 << 3) | 0, 0, $5);
     $12 = $12 + $5;
     $6 = $6 + 1 | 0;
     if (($17 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    $10 = $17 & 3;
    $5 = $12 / +($17 | 0);
    $6 = 0;
    if (($43 ^ -1) + $47 >>> 0 >= 3) {
     $14 = $17 & -4;
     while (1) {
      $0 = $6 << 3;
      $16 = $9 + $0 | 0;
      SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($16, 0) - $5);
      $16 = ($0 | 8) + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($16, 0) - $5);
      $16 = ($0 | 16) + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($16, 0, SAFE_HEAP_LOAD_f64_8_8($16, 0) - $5);
      $0 = ($0 | 24) + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $5);
      $6 = $6 + 4 | 0;
      $14 = $14 - 4 | 0;
      if ($14) {
       continue;
      }
      break;
     }
    }
    if (!$10) {
     break label$64;
    }
    while (1) {
     $0 = ($6 << 3) + $9 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) - $5);
     $6 = $6 + 1 | 0;
     $10 = $10 - 1 | 0;
     if ($10) {
      continue;
     }
     break;
    }
   }
   if (($4 | 0) > ($17 | 0)) {
    memset(SAFE_HEAP_LOAD_i32_4_4($11, 132) + ($17 << 3) | 0, 0, $4 - $17 << 3);
   }
   SAFE_HEAP_STORE_i64_8_8($11 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($32 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($32 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($32 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($32 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 48, SAFE_HEAP_LOAD_i64_8_4($32, 0), i64toi32_i32$HIGH_BITS);
   fft_execute($11 + 48 | 0);
   $9 = SAFE_HEAP_LOAD_i32_4_4($11, 240);
   label$70: {
    if ($49 == 0) {
     if (($9 | 0) < -1) {
      break label$70;
     }
     $0 = ($9 | 0) / 2 | 0;
     $14 = $0 + 1 | 0;
     $10 = $14 & 3;
     $9 = 0;
     $6 = SAFE_HEAP_LOAD_i32_4_4($11, 244);
     if ($0 >>> 0 >= 3) {
      $14 = $14 & -4;
      while (1) {
       $0 = $9 << 3;
       SAFE_HEAP_STORE_f64_8_8($6 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0)) * .5);
       $16 = $0 | 8;
       SAFE_HEAP_STORE_f64_8_8($16 + $6 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($13 + $16 | 0, 0)) * .5);
       $16 = $0 | 16;
       SAFE_HEAP_STORE_f64_8_8($16 + $6 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($13 + $16 | 0, 0)) * .5);
       $0 = $0 | 24;
       SAFE_HEAP_STORE_f64_8_8($6 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0)) * .5);
       $9 = $9 + 4 | 0;
       $14 = $14 - 4 | 0;
       if ($14) {
        continue;
       }
       break;
      }
     }
     if (!$10) {
      break label$70;
     }
     while (1) {
      $0 = $9 << 3;
      SAFE_HEAP_STORE_f64_8_8($6 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($0 + $13 | 0, 0)) * .5);
      $9 = $9 + 1 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue;
      }
      break;
     }
     break label$70;
    }
    if (($9 | 0) < -1) {
     break label$70;
    }
    $10 = (($9 | 0) / 2 | 0) + 1 | 0;
    $14 = $10 & 1;
    $6 = 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($11, 244);
    if ($9 + 1 >>> 0 >= 3) {
     $10 = $10 & -2;
     while (1) {
      $9 = $6 << 3;
      SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * .5);
      $9 = $9 | 8;
      SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * .5);
      $6 = $6 + 2 | 0;
      $10 = $10 - 2 | 0;
      if ($10) {
       continue;
      }
      break;
     }
    }
    if (!$14) {
     break label$70;
    }
    $9 = $6 << 3;
    SAFE_HEAP_STORE_f64_8_8($9 + $0 | 0, 0, log(SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0)) * .5);
   }
   GetMinimumPhaseSpectrum($11 + 240 | 0);
   if (($4 | 0) >= -1) {
    $9 = 0;
    $14 = SAFE_HEAP_LOAD_i32_4_4($11, 192);
    $16 = SAFE_HEAP_LOAD_i32_4_4($11, 136);
    $28 = SAFE_HEAP_LOAD_i32_4_4($11, 248);
    while (1) {
     $0 = $9 << 4;
     $10 = $14 + $0 | 0;
     $6 = $0 + $28 | 0;
     $5 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
     $0 = $0 + $16 | 0;
     SAFE_HEAP_STORE_f64_8_8($10, 0, $5 * SAFE_HEAP_LOAD_f64_8_8($0, 0) - SAFE_HEAP_LOAD_f64_8_8($6, 8) * SAFE_HEAP_LOAD_f64_8_8($0, 8));
     SAFE_HEAP_STORE_f64_8_8($10, 8, SAFE_HEAP_LOAD_f64_8_8($6, 0) * SAFE_HEAP_LOAD_f64_8_8($0, 8) + SAFE_HEAP_LOAD_f64_8_8($6, 8) * SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $6 = ($9 | 0) != ($18 | 0);
     $9 = $9 + 1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i64_8_8($11 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($11, 8, SAFE_HEAP_LOAD_i64_8_4($24, 0), i64toi32_i32$HIGH_BITS);
   fft_execute($11 + 8 | 0);
   fftshift(SAFE_HEAP_LOAD_i32_4_4($11, 188), $4, $22);
   label$79: {
    if (($4 | 0) < 1) {
     break label$79;
    }
    $5 = Math_sqrt(+($17 | 0));
    $6 = 0;
    $0 = $53;
    if ($45) {
     while (1) {
      $9 = $6 << 3;
      SAFE_HEAP_STORE_f64_8_8($25 + $9 | 0, 0, ($5 * SAFE_HEAP_LOAD_f64_8_8($9 + $15 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0)) / $23);
      $9 = $9 | 8;
      SAFE_HEAP_STORE_f64_8_8($25 + $9 | 0, 0, ($5 * SAFE_HEAP_LOAD_f64_8_8($9 + $15 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0)) / $23);
      $6 = $6 + 2 | 0;
      $0 = $0 - 2 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    if (!$54) {
     break label$79;
    }
    $9 = $6 << 3;
    SAFE_HEAP_STORE_f64_8_8($25 + $9 | 0, 0, ($5 * SAFE_HEAP_LOAD_f64_8_8($9 + $15 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0)) / $23);
   }
   operator_20delete_5b_5d_28void__29($13);
   operator_20delete_5b_5d_28void__29($20);
   operator_20delete_5b_5d_28void__29($15);
   operator_20delete_5b_5d_28void__29($22);
   $0 = SAFE_HEAP_LOAD_i32_4_4($48, 0) + $50 | 0;
   $6 = $0 + 1 | 0;
   $9 = $7 - $6 | 0;
   $15 = ($4 | 0) < ($9 | 0) ? $4 : $9;
   $13 = ($0 | 0) < -1 ? $0 : -1;
   $9 = $13 ^ -1;
   label$82: {
    if (($15 | 0) <= ($9 | 0)) {
     break label$82;
    }
    if (($13 + $15 | 0) + 1 & 1) {
     $0 = ($0 - $13 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $25 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $9 = 0 - $13 | 0;
    }
    if ((0 - $13 | 0) == ($15 | 0)) {
     break label$82;
    }
    while (1) {
     $0 = ($6 + $9 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(($9 << 3) + $25 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $0 = $9 + 1 | 0;
     $13 = ($6 + $0 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8(($0 << 3) + $25 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($13, 0));
     $9 = $9 + 2 | 0;
     if (($15 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   if (($27 | 0) != ($35 | 0)) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($19);
 operator_20delete_5b_5d_28void__29($37);
 operator_20delete_5b_5d_28void__29($34);
 operator_20delete_5b_5d_28void__29($38);
 operator_20delete_5b_5d_28void__29($30);
 DestroyMinimumPhaseAnalysis($11 + 240 | 0);
 DestroyInverseRealFFT($11 + 184 | 0);
 DestroyForwardRealFFT($11 + 128 | 0);
 operator_20delete_5b_5d_28void__29($25);
 __stack_pointer = $11 + 336 | 0;
}

function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 $15 = __stack_pointer - 336 | 0;
 __stack_pointer = $15;
 $11 = $7;
 $20 = $11;
 $12 = $8;
 $10 = $12 & 65535;
 $18 = $10;
 $12 = $3;
 $26 = $12;
 $10 = $4;
 $11 = $10 & 65535;
 $28 = $11;
 $11 = $10;
 $10 = $12;
 $12 = $8;
 $12 = $11 ^ $12;
 $13 = $7;
 $10 = $12 & -2147483648;
 $24 = $10;
 $10 = $8;
 $27 = $10 >>> 16 & 32767;
 $11 = $4;
 $21 = $11 >>> 16 & 32767;
 label$1: {
  label$2: {
   if ($27 - 1 >>> 0 < 32766 ? $21 - 1 >>> 0 <= 32765 : 0) {
    break label$2;
   }
   $12 = $2;
   $14 = !($12 | $1);
   $12 = $4;
   $10 = $12 & 2147483647;
   $16 = $10;
   $9 = $10 >>> 0 < 2147418112;
   $12 = $10;
   $11 = $3;
   $17 = $11;
   $13 = $11;
   if (!(!$13 & ($12 | 0) == 2147418112 ? $14 : $9)) {
    $11 = $3;
    $29 = $11;
    $13 = $4;
    $12 = $13 | 32768;
    $24 = $12;
    break label$1;
   }
   $12 = $6;
   $14 = !($12 | $5);
   $12 = $8;
   $11 = $12 & 2147483647;
   $4 = $11;
   $9 = $11 >>> 0 < 2147418112;
   $12 = $11;
   $13 = $7;
   $3 = $13;
   $10 = $13;
   if (!(!$10 & ($12 | 0) == 2147418112 ? $14 : $9)) {
    $13 = $7;
    $29 = $13;
    $10 = $8;
    $12 = $10 | 32768;
    $24 = $12;
    $1 = $5;
    $12 = $6;
    $2 = $12;
    break label$1;
   }
   $12 = $16;
   $13 = $12 ^ 2147418112;
   $12 = $1;
   $10 = $17;
   $11 = $10;
   $10 = $13;
   $13 = $2;
   $10 = $10 | $13;
   if (!($12 | $11 | $10)) {
    $10 = $4;
    $12 = $10 ^ 2147418112;
    $1 = $12;
    $10 = $5;
    $13 = $3;
    $11 = $13;
    $12 = $6;
    $13 = $1;
    $13 = $12 | $13;
    if (!($10 | $11 | $13)) {
     $1 = 0;
     $2 = 0;
     $24 = 2147450880;
     break label$1;
    }
    $12 = $29;
    $29 = $12;
    $13 = $24;
    $10 = $13 | 2147418112;
    $24 = $10;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $4;
   $12 = $10 ^ 2147418112;
   $7 = $12;
   $10 = $5;
   $13 = $3;
   $11 = $13;
   $12 = $6;
   $13 = $7;
   $13 = $12 | $13;
   if (!($10 | $11 | $13)) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $16;
   $13 = $2;
   $10 = $10 | $13;
   $12 = $1;
   $11 = $17;
   if (!($10 | ($12 | $11))) {
    $12 = $6;
    $10 = $4;
    $12 = $12 | $10;
    $11 = $5;
    $13 = $3;
    $9 = !($12 | ($11 | $13));
    $11 = $9 ? 0 : $29;
    $29 = $11;
    $13 = $24;
    $10 = $9 ? 2147450880 : $13;
    $24 = $10;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $4;
   $11 = $6;
   $11 = $10 | $11;
   $12 = $5;
   $9 = $3;
   if (!($11 | ($12 | $9))) {
    $10 = $29;
    $29 = $10;
    $11 = $24;
    $9 = $11 | 2147418112;
    $24 = $9;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $9 = $16;
   if (($9 | 0) == 65535 | $9 >>> 0 < 65535) {
    $11 = $28;
    $19 = !($11 | $26);
    $13 = $19;
    $10 = $13 ? $1 : $26;
    $11 = $2;
    $9 = $28;
    $12 = $13 ? $11 : $9;
    $11 = Math_clz32($12);
    $10 = ($11 | 0) == 32 ? Math_clz32($10) + 32 | 0 : $11;
    $11 = $19 << 6;
    $9 = $10 + $11 | 0;
    $14 = $2;
    $10 = $28;
    __ashlti3($15 + 320 | 0, $1, $14, $26, $10, $9 - 15 | 0);
    $19 = 16 - $9 | 0;
    $10 = SAFE_HEAP_LOAD_i64_8_8($15 + 328 | 0, 0);
    $26 = $10;
    $14 = i64toi32_i32$HIGH_BITS;
    $28 = $14;
    $14 = SAFE_HEAP_LOAD_i64_8_8($15, 320);
    $1 = $14;
    $10 = i64toi32_i32$HIGH_BITS;
    $2 = $10;
   }
   $10 = $4;
   if ($10 >>> 0 > 65535) {
    break label$2;
   }
   $13 = $18;
   $3 = !($13 | $20);
   $12 = $3;
   $14 = $12 ? $5 : $20;
   $13 = $6;
   $10 = $18;
   $11 = $12 ? $13 : $10;
   $13 = Math_clz32($11);
   $14 = ($13 | 0) == 32 ? Math_clz32($14) + 32 | 0 : $13;
   $9 = 0;
   $13 = $3 << 6;
   $10 = $13 + $14 | 0;
   $9 = $6;
   $14 = $18;
   __ashlti3($15 + 304 | 0, $5, $9, $20, $14, $10 - 15 | 0);
   $19 = ($19 + $10 | 0) - 16 | 0;
   $14 = SAFE_HEAP_LOAD_i64_8_8($15 + 312 | 0, 0);
   $20 = $14;
   $9 = i64toi32_i32$HIGH_BITS;
   $18 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15, 304);
   $5 = $9;
   $14 = i64toi32_i32$HIGH_BITS;
   $6 = $14;
  }
  $14 = $18;
  $9 = $14 | 65536;
  $35 = $9;
  $12 = $20;
  $32 = $12;
  $14 = $12;
  $12 = $9 << 15 | $12 >>> 17;
  $4 = $12;
  $12 = $6;
  $13 = $12 >>> 17 | 0;
  $12 = $14 << 15;
  $3 = $12 | $13;
  $13 = $3;
  $11 = 0 - $13 | 0;
  $7 = $11;
  $14 = 0;
  $9 = $14;
  $14 = $4;
  $9 = $9 | $14;
  $4 = $9;
  $10 = $9 + (($13 | 0) != 0) | 0;
  $10 = 1963258675 - $10 | 0;
  $8 = $10;
  $10 = $9;
  $9 = $8;
  __multi3($15 + 288 | 0, $3, $10, 0, 0, $11, $9, 0, 0);
  $14 = $15 + 272 | 0;
  $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 296 | 0, 0);
  $10 = $13;
  $12 = 0 - $10 | 0;
  $9 = i64toi32_i32$HIGH_BITS;
  $11 = $9 + (($10 | 0) != 0) | 0;
  $11 = 0 - $11 | 0;
  $9 = $8;
  __multi3($14, $12, $11, 0, 0, $7, $9, 0, 0);
  $13 = $15 + 256 | 0;
  $10 = SAFE_HEAP_LOAD_i64_8_8($15, 272);
  $9 = i64toi32_i32$HIGH_BITS;
  $7 = $9 >>> 31 | 0;
  $10 = 0;
  $12 = $10;
  $10 = SAFE_HEAP_LOAD_i64_8_8($15 + 280 | 0, 0);
  $9 = $10;
  $14 = i64toi32_i32$HIGH_BITS;
  $10 = $14 << 1 | $9 >>> 31;
  $8 = $10;
  $11 = $9 << 1;
  $14 = $7;
  $7 = $11 | $14;
  $10 = $12;
  $9 = $8;
  $9 = $10 | $9;
  $8 = $9;
  $10 = $4;
  __multi3($13, $7, $9, 0, 0, $3, $10, 0, 0);
  $14 = $15 + 240 | 0;
  $11 = SAFE_HEAP_LOAD_i64_8_8($15 + 264 | 0, 0);
  $9 = $11;
  $13 = 0 - $9 | 0;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10 + (($9 | 0) != 0) | 0;
  $12 = 0 - $12 | 0;
  $10 = $12;
  $12 = $8;
  __multi3($14, $7, $12, 0, 0, $13, $10, 0, 0);
  $11 = $15 + 224 | 0;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15, 240);
  $10 = i64toi32_i32$HIGH_BITS;
  $7 = $10 >>> 31 | 0;
  $9 = 0;
  $8 = $9;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 248 | 0, 0);
  $10 = $9;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14 << 1 | $9 >>> 31;
  $12 = $10 << 1;
  $14 = $7;
  $7 = $12 | $14;
  $10 = $9;
  $9 = $8;
  $10 = $10 | $9;
  $8 = $10;
  $9 = $4;
  __multi3($11, $7, $10, 0, 0, $3, $9, 0, 0);
  $14 = $15 + 208 | 0;
  $12 = SAFE_HEAP_LOAD_i64_8_8($15 + 232 | 0, 0);
  $10 = $12;
  $11 = 0 - $10 | 0;
  $9 = i64toi32_i32$HIGH_BITS;
  $13 = $9 + (($10 | 0) != 0) | 0;
  $13 = 0 - $13 | 0;
  $9 = $13;
  $13 = $8;
  __multi3($14, $7, $13, 0, 0, $11, $9, 0, 0);
  $12 = $15 + 192 | 0;
  $10 = SAFE_HEAP_LOAD_i64_8_8($15, 208);
  $9 = i64toi32_i32$HIGH_BITS;
  $7 = $9 >>> 31 | 0;
  $10 = 0;
  $11 = $10;
  $10 = SAFE_HEAP_LOAD_i64_8_8($15 + 216 | 0, 0);
  $9 = $10;
  $14 = i64toi32_i32$HIGH_BITS;
  $10 = $14 << 1 | $9 >>> 31;
  $8 = $10;
  $13 = $9 << 1;
  $14 = $7;
  $7 = $13 | $14;
  $10 = $11;
  $9 = $8;
  $9 = $10 | $9;
  $8 = $9;
  $10 = $4;
  __multi3($12, $7, $9, 0, 0, $3, $10, 0, 0);
  $14 = $15 + 176 | 0;
  $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 200 | 0, 0);
  $9 = $13;
  $12 = 0 - $9 | 0;
  $10 = i64toi32_i32$HIGH_BITS;
  $11 = $10 + (($9 | 0) != 0) | 0;
  $11 = 0 - $11 | 0;
  $10 = $11;
  $11 = $8;
  __multi3($14, $7, $11, 0, 0, $12, $10, 0, 0);
  $16 = $15 + 160 | 0;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15, 176);
  $10 = i64toi32_i32$HIGH_BITS;
  $8 = $10 >>> 31 | 0;
  $9 = 0;
  $7 = $9;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 184 | 0, 0);
  $11 = $9 << 1;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14 << 1 | $9 >>> 31;
  $10 = $9;
  $9 = $7;
  $10 = $10 | $9;
  $14 = $8;
  $9 = $11 | $14;
  $13 = $9 - 1 | 0;
  $7 = $13;
  $12 = $9 >>> 0 < 1;
  $12 = $10 - $12 | 0;
  $8 = $12;
  $12 = $4;
  $10 = $8;
  __multi3($16, $3, $12, 0, 0, $13, $10, 0, 0);
  $9 = $5;
  $3 = $9 << 15;
  $11 = $6;
  $10 = $11 << 15 | $9 >>> 17;
  $11 = $8;
  __multi3($15 + 144 | 0, $3, $10, 0, 0, $13, $11, 0, 0);
  $23 = $15 + 112 | 0;
  $12 = SAFE_HEAP_LOAD_i64_8_8($15 + 168 | 0, 0);
  $17 = $12;
  $11 = i64toi32_i32$HIGH_BITS;
  $16 = $11;
  $11 = SAFE_HEAP_LOAD_i64_8_8($15, 160);
  $20 = $11;
  $12 = i64toi32_i32$HIGH_BITS;
  $18 = $12;
  $12 = SAFE_HEAP_LOAD_i64_8_8($15 + 152 | 0, 0);
  $10 = $12;
  $9 = $11;
  $14 = $10 + $9 | 0;
  $11 = i64toi32_i32$HIGH_BITS;
  $12 = $11;
  $11 = $18;
  $13 = $12 + $11 | 0;
  $3 = $14;
  $13 = $10 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
  $4 = $13;
  $9 = $11;
  $10 = $20;
  $11 = $14;
  $9 = ($13 | 0) == ($9 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $11 = $16;
  $10 = $17;
  $12 = $10 + $9 | 0;
  $14 = $12 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
  $16 = $14;
  $14 = $4;
  $11 = $3;
  $10 = !$14 & $11 >>> 0 > 1 | ($14 | 0) != 0;
  $9 = $12;
  $13 = $10 + $9 | 0;
  $11 = $16;
  $12 = $10 >>> 0 > $13 >>> 0 ? $11 + 1 | 0 : $11;
  $10 = $13;
  $14 = 0 - $10 | 0;
  $9 = $12;
  $13 = $9 + (($10 | 0) != 0) | 0;
  $13 = 0 - $13 | 0;
  $12 = $13;
  $13 = $8;
  __multi3($23, $7, $13, 0, 0, $14, $12, 0, 0);
  $13 = $3;
  $9 = 1 - $13 | 0;
  $12 = $4;
  $14 = $12 + ($13 >>> 0 > 1) | 0;
  $14 = 0 - $14 | 0;
  $10 = $8;
  __multi3($15 + 128 | 0, $9, $14, 0, 0, $7, $10, 0, 0);
  $27 = ($21 - $27 | 0) + $19 | 0;
  $13 = SAFE_HEAP_LOAD_i64_8_8($15, 112);
  $10 = i64toi32_i32$HIGH_BITS;
  $23 = $10;
  $11 = $13;
  $13 = $10 << 1 | $11 >>> 31;
  $21 = $11 << 1;
  $19 = $13;
  $13 = SAFE_HEAP_LOAD_i64_8_8($15, 128);
  $11 = i64toi32_i32$HIGH_BITS;
  $4 = $11 >>> 31 | 0;
  $13 = 0;
  $3 = $13;
  $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 136 | 0, 0);
  $10 = i64toi32_i32$HIGH_BITS;
  $33 = $10;
  $11 = $13;
  $13 = $10 << 1 | $11 >>> 31;
  $14 = $11 << 1;
  $11 = $13;
  $13 = $3;
  $11 = $11 | $13;
  $13 = $21;
  $10 = $4;
  $14 = $10 | $14;
  $12 = $13 + $14 | 0;
  $10 = $11;
  $11 = $19;
  $9 = $10 + $11 | 0;
  $17 = $12;
  $9 = $12 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
  $16 = $9;
  $11 = $12;
  $10 = $11 - 13927 | 0;
  $37 = $10;
  $12 = $11 >>> 0 < 13927;
  $12 = $9 - $12 | 0;
  $3 = $12;
  $11 = 0;
  $4 = $11;
  $11 = $28;
  $9 = $11 | 65536;
  $38 = $9;
  $12 = $26;
  $39 = $12;
  $11 = $12;
  $9 = ($9 & 2147483647) << 1 | $11 >>> 31;
  $7 = $9;
  $11 = 0;
  $8 = $11;
  $9 = $11;
  $9 = __wasm_i64_mul($3, $22, $7, $9);
  $22 = $9;
  $11 = i64toi32_i32$HIGH_BITS;
  $30 = $11;
  $11 = $2;
  $12 = $1;
  $11 = ($11 & 2147483647) << 1 | $12 >>> 31;
  $20 = $11;
  $12 = 0;
  $18 = $12;
  $12 = $16;
  $11 = $3;
  $9 = $17;
  $25 = ($12 | 0) == ($11 | 0) & $9 >>> 0 > $10 >>> 0 | $12 >>> 0 > $11 >>> 0;
  $9 = $12;
  $14 = $17;
  $12 = $19;
  $11 = $21;
  $16 = ($9 | 0) == ($12 | 0) & $14 >>> 0 < $11 >>> 0 | $9 >>> 0 < $12 >>> 0;
  $14 = SAFE_HEAP_LOAD_i64_8_8($15 + 120 | 0, 0);
  $11 = $14;
  $13 = $11 << 1;
  $9 = i64toi32_i32$HIGH_BITS;
  $14 = $9 << 1 | $11 >>> 31;
  $10 = $14;
  $11 = 0;
  $9 = $11;
  $14 = $23;
  $12 = $14 >>> 31 | 0;
  $14 = $13;
  $13 = $12 | $14;
  $11 = $10;
  $9 = $11 | $9;
  $14 = 0;
  $11 = $14;
  $10 = $11 + $9 | 0;
  $9 = $33;
  $12 = $9 >>> 31 | 0;
  $9 = $13;
  $13 = $12 + $9 | 0;
  $11 = $13;
  $10 = $12 >>> 0 > $13 >>> 0 ? $10 + 1 | 0 : $10;
  $9 = $10;
  $12 = $11;
  $14 = $16;
  $11 = $12 + $14 | 0;
  $10 = $11;
  $13 = $12 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
  $11 = $13;
  $12 = $10;
  $10 = $25;
  $9 = $12 + $10 | 0;
  $14 = $9 - 1 | 0;
  $25 = $14;
  $11 = $9 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
  $9 = $9 >>> 0 < 1;
  $9 = $11 - $9 | 0;
  $13 = 0;
  $16 = $13;
  $17 = $9;
  $11 = $13;
  $11 = __wasm_i64_mul($20, $40, $9, $11);
  $12 = $11;
  $9 = $22;
  $10 = $11 + $9 | 0;
  $13 = i64toi32_i32$HIGH_BITS;
  $11 = $13;
  $13 = $30;
  $14 = $11 + $13 | 0;
  $21 = $10;
  $9 = $13;
  $14 = $10 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
  $19 = $14;
  $12 = $22;
  $22 = ($9 | 0) == ($14 | 0) & $12 >>> 0 > $10 >>> 0 | $9 >>> 0 > $14 >>> 0;
  $12 = $25;
  $25 = $12;
  $14 = 0;
  $23 = $14;
  $14 = $2;
  $44 = $14 >>> 31 | 0;
  $12 = 0;
  $46 = $12;
  $14 = $26;
  $9 = $14 << 1;
  $12 = $28;
  $13 = $12 << 1 | $14 >>> 31;
  $14 = $13;
  $13 = $31;
  $12 = $44;
  $13 = $12 | $9;
  $26 = $13;
  $12 = 0;
  $28 = $12;
  $13 = __wasm_i64_mul($25, $34, $26, $12);
  $9 = $13;
  $12 = i64toi32_i32$HIGH_BITS;
  $13 = $12;
  $12 = $19;
  $10 = $12 + $13 | 0;
  $14 = $21;
  $11 = $9 + $14 | 0;
  $10 = $11 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
  $36 = $11;
  $33 = $10;
  $14 = $12;
  $9 = $21;
  $14 = ($10 | 0) == ($14 | 0) & $11 >>> 0 < $9 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $11 = 0;
  $9 = $22;
  $13 = $9 + $14 | 0;
  $11 = $13 >>> 0 < $14 >>> 0 ? 1 : $11;
  $12 = $13;
  $10 = $11;
  $11 = $8;
  $9 = $16;
  $9 = __wasm_i64_mul($7, $11, $17, $9);
  $14 = $9;
  $11 = i64toi32_i32$HIGH_BITS;
  $9 = $11;
  $11 = $10;
  $13 = $11 + $9 | 0;
  $10 = $12 + $14 | 0;
  $13 = $10 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
  $34 = $10;
  $31 = $13;
  $13 = $8;
  $12 = $23;
  $12 = __wasm_i64_mul($7, $13, $25, $12);
  $22 = $12;
  $13 = i64toi32_i32$HIGH_BITS;
  $30 = $13;
  $13 = $16;
  $12 = $28;
  $12 = __wasm_i64_mul($17, $13, $26, $12);
  $14 = $12;
  $13 = i64toi32_i32$HIGH_BITS;
  $12 = $13;
  $13 = $30;
  $10 = $12 + $13 | 0;
  $11 = $22;
  $9 = $11 + $14 | 0;
  $10 = $9 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
  $21 = $9;
  $19 = $10;
  $11 = $13;
  $14 = $22;
  $14 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $10 >>> 0 < $11 >>> 0;
  $10 = $14;
  $14 = 0;
  $13 = $14;
  $14 = $10;
  $13 = $13 | $14;
  $10 = 0;
  $11 = $19;
  $11 = $10 | $11;
  $14 = $34;
  $12 = $11 + $14 | 0;
  $10 = $13;
  $13 = $31;
  $9 = $10 + $13 | 0;
  $30 = $12;
  $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
  $22 = $9;
  $13 = $21;
  $9 = $33;
  $14 = $9;
  $12 = $13 + $9 | 0;
  $11 = 0;
  $9 = $36;
  $10 = $11 + $9 | 0;
  $12 = $10 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
  $21 = $10;
  $19 = $12;
  $9 = $14;
  $11 = $36;
  $9 = ($12 | 0) == ($9 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 > $12 >>> 0;
  $14 = $22;
  $10 = $14;
  $11 = $30;
  $13 = $11 + $9 | 0;
  $10 = $13 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
  $41 = $13;
  $42 = $10;
  $14 = $1;
  $43 = $14 << 1;
  $10 = $2;
  $11 = $10 << 1 | $14 >>> 31;
  $45 = $11;
  $14 = 0;
  $33 = $14;
  $14 = $23;
  $10 = $43;
  $36 = $10 & -2;
  $10 = $33;
  $10 = __wasm_i64_mul($25, $14, $36, $10);
  $31 = $10;
  $14 = i64toi32_i32$HIGH_BITS;
  $34 = $14;
  $11 = $37;
  $37 = $11;
  $10 = 0;
  $40 = $10;
  $11 = $28;
  $11 = __wasm_i64_mul($37, $10, $26, $11);
  $9 = $11;
  $10 = i64toi32_i32$HIGH_BITS;
  $11 = $10;
  $10 = $34;
  $13 = $10 + $11 | 0;
  $14 = $31;
  $12 = $9 + $14 | 0;
  $13 = $12 >>> 0 < $9 >>> 0 ? $13 + 1 | 0 : $13;
  $22 = $12;
  $30 = $13;
  $14 = $10;
  $10 = $12;
  $9 = $31;
  $47 = ($13 | 0) == ($14 | 0) & $10 >>> 0 < $9 >>> 0 | $14 >>> 0 > $13 >>> 0;
  $10 = $4;
  $13 = $18;
  $13 = __wasm_i64_mul($3, $10, $20, $13);
  $14 = $13;
  $10 = i64toi32_i32$HIGH_BITS;
  $13 = $10;
  $10 = $30;
  $12 = $10 + $13 | 0;
  $9 = $22;
  $11 = $9 + $14 | 0;
  $12 = $11 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
  $31 = $11;
  $34 = $12;
  $9 = $10;
  $10 = $11;
  $14 = $22;
  $9 = ($12 | 0) == ($9 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 > $12 >>> 0;
  $11 = 0;
  $14 = $47;
  $13 = $9 + $14 | 0;
  $11 = $13 >>> 0 < $9 >>> 0 ? 1 : $11;
  $9 = $13;
  $14 = $11;
  $11 = $19;
  $13 = $11 + $14 | 0;
  $10 = $21;
  $12 = $10 + $9 | 0;
  $13 = $12 >>> 0 < $9 >>> 0 ? $13 + 1 | 0 : $13;
  $22 = $12;
  $10 = $11;
  $30 = $13;
  $11 = $12;
  $9 = $21;
  $10 = ($10 | 0) == ($13 | 0) & $11 >>> 0 < $9 >>> 0 | $10 >>> 0 > $13 >>> 0;
  $11 = $42;
  $9 = $41;
  $14 = $10 + $9 | 0;
  $41 = $14;
  $12 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
  $42 = $12;
  $12 = $8;
  $9 = $40;
  $9 = __wasm_i64_mul($7, $12, $37, $9);
  $21 = $9;
  $12 = i64toi32_i32$HIGH_BITS;
  $19 = $12;
  $12 = $16;
  $9 = $33;
  $9 = __wasm_i64_mul($17, $12, $36, $9);
  $10 = $9;
  $12 = i64toi32_i32$HIGH_BITS;
  $9 = $12;
  $12 = $19;
  $14 = $12 + $9 | 0;
  $11 = $21;
  $13 = $10 + $11 | 0;
  $7 = $13;
  $14 = $10 >>> 0 > $13 >>> 0 ? $14 + 1 | 0 : $14;
  $8 = $14;
  $14 = $18;
  $11 = $23;
  $11 = __wasm_i64_mul($20, $14, $25, $11);
  $10 = $11;
  $14 = i64toi32_i32$HIGH_BITS;
  $11 = $14;
  $14 = $8;
  $13 = $11 + $14 | 0;
  $12 = $7;
  $9 = $12 + $10 | 0;
  $17 = $9;
  $13 = $9 >>> 0 < $10 >>> 0 ? $13 + 1 | 0 : $13;
  $16 = $13;
  $13 = $4;
  $12 = $28;
  $12 = __wasm_i64_mul($3, $13, $26, $12);
  $10 = $12;
  $11 = $10 + $9 | 0;
  $13 = i64toi32_i32$HIGH_BITS;
  $12 = $13;
  $13 = $16;
  $9 = $12 + $13 | 0;
  $25 = $11;
  $9 = $10 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
  $14 = 0;
  $28 = $14;
  $23 = $9;
  $13 = $9;
  $14 = $16;
  $10 = $11;
  $9 = $17;
  $26 = ($13 | 0) == ($14 | 0) & $10 >>> 0 < $9 >>> 0 | $14 >>> 0 > $13 >>> 0;
  $9 = $8;
  $14 = $19;
  $10 = $7;
  $13 = $21;
  $8 = ($9 | 0) == ($14 | 0) & $10 >>> 0 < $13 >>> 0 | $9 >>> 0 < $14 >>> 0;
  $10 = $9;
  $9 = $16;
  $13 = $7;
  $14 = $17;
  $9 = ($10 | 0) == ($9 | 0) & $13 >>> 0 > $14 >>> 0 | $9 >>> 0 < $10 >>> 0;
  $11 = 0;
  $14 = $8;
  $12 = $9 + $14 | 0;
  $11 = $12 >>> 0 < $9 >>> 0 ? 1 : $11;
  $9 = $12;
  $12 = $11;
  $13 = $26;
  $10 = $13 + $9 | 0;
  $13 = $28;
  $11 = $10 | $13;
  $13 = $22;
  $12 = $23;
  $9 = $48;
  $9 = $12 | $9;
  $14 = $13 + $9 | 0;
  $12 = $11;
  $11 = $30;
  $10 = $12 + $11 | 0;
  $7 = $14;
  $10 = $9 >>> 0 > $14 >>> 0 ? $10 + 1 | 0 : $10;
  $8 = $10;
  $13 = $11;
  $11 = $14;
  $9 = $22;
  $13 = ($10 | 0) == ($13 | 0) & $11 >>> 0 < $9 >>> 0 | $10 >>> 0 < $13 >>> 0;
  $11 = $42;
  $9 = $41;
  $12 = $13 + $9 | 0;
  $14 = $12 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
  $17 = $12;
  $16 = $14;
  $14 = $4;
  $9 = $33;
  $9 = __wasm_i64_mul($3, $14, $36, $9);
  $3 = $9;
  $14 = i64toi32_i32$HIGH_BITS;
  $4 = $14;
  $14 = $18;
  $9 = $40;
  $9 = __wasm_i64_mul($20, $14, $37, $9);
  $13 = $9;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14;
  $14 = $4;
  $12 = $9 + $14 | 0;
  $11 = $3;
  $10 = $11 + $13 | 0;
  $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $11 = 0;
  $4 = $11;
  $11 = $14;
  $14 = $12;
  $12 = $3;
  $13 = ($11 | 0) == ($14 | 0) & $12 >>> 0 > $10 >>> 0 | $14 >>> 0 < $11 >>> 0;
  $11 = $4;
  $13 = $11 | $13;
  $11 = $31;
  $12 = $14;
  $14 = 0;
  $14 = $12 | $14;
  $9 = $11 + $14 | 0;
  $12 = $13;
  $13 = $34;
  $10 = $12 + $13 | 0;
  $3 = $9;
  $10 = $9 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
  $4 = $10;
  $11 = $13;
  $13 = $9;
  $14 = $31;
  $18 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $10 >>> 0 < $11 >>> 0;
  $14 = $25;
  $10 = $4;
  $9 = $10 + $14 | 0;
  $11 = 0;
  $12 = $13 + $11 | 0;
  $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
  $13 = $10;
  $10 = $12;
  $11 = $3;
  $13 = ($9 | 0) == ($13 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $12 = 0;
  $11 = $18;
  $14 = $11 + $13 | 0;
  $3 = $14;
  $12 = $14 >>> 0 < $13 >>> 0 ? 1 : $12;
  $11 = $12;
  $12 = $8;
  $14 = $12 + $11 | 0;
  $10 = $7;
  $13 = $3;
  $9 = $10 + $13 | 0;
  $3 = $9;
  $10 = $12;
  $14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
  $4 = $14;
  $13 = $7;
  $10 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $10 >>> 0 > $14 >>> 0;
  $12 = $16;
  $9 = $12;
  $13 = $17;
  $11 = $10 + $13 | 0;
  $7 = $11;
  $9 = $10 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
  $8 = $9;
  label$12: {
   if (($9 | 0) == 131071 | $9 >>> 0 < 131071) {
    $12 = $38;
    $10 = $39;
    $9 = $12 << 1 | $10 >>> 31;
    $12 = $10 << 1;
    $13 = $44;
    $39 = $12 | $13;
    $10 = $46;
    $10 = $9 | $10;
    $38 = $10;
    $10 = $4;
    $12 = $8;
    $9 = $6;
    $13 = $35;
    __multi3($15 + 80 | 0, $3, $10, $7, $12, $5, $9, $32, $13);
    $12 = $1;
    $9 = $12 << 17;
    $2 = $9;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 88 | 0, 0);
    $12 = i64toi32_i32$HIGH_BITS;
    $1 = $12;
    $13 = $49;
    $10 = $9;
    $14 = $13 - $9 | 0;
    $12 = $2;
    $9 = $1;
    $11 = $9 + ($10 >>> 0 > $13 >>> 0) | 0;
    $11 = $12 - $11 | 0;
    $12 = $11;
    $11 = SAFE_HEAP_LOAD_i64_8_8($15, 80);
    $1 = $11;
    $13 = i64toi32_i32$HIGH_BITS;
    $2 = $13;
    $10 = $14;
    $11 = ($11 | 0) != 0 | ($13 | 0) != 0;
    $9 = $10 - $11 | 0;
    $17 = $9;
    $14 = $10 >>> 0 < $11 >>> 0;
    $14 = $12 - $14 | 0;
    $16 = $14;
    $27 = $27 + 16382 | 0;
    $11 = $1;
    $13 = 0 - $11 | 0;
    $20 = $13;
    $10 = $2;
    $9 = $10 + (($11 | 0) != 0) | 0;
    $9 = 0 - $9 | 0;
    $14 = 0;
    break label$12;
   }
   $14 = $7;
   $12 = $14 << 31;
   $11 = $12;
   $12 = $4;
   $14 = $12 >>> 1 | 0;
   $9 = $3;
   $3 = ($12 & 1) << 31 | $9 >>> 1;
   $9 = $14;
   $14 = $11;
   $9 = $9 | $14;
   $4 = $9;
   $12 = 0;
   $11 = $3;
   $3 = $12 | $11;
   $9 = $8;
   $12 = $9 >>> 1 | 0;
   $14 = $7;
   $7 = ($9 & 1) << 31 | $14 >>> 1;
   $8 = $12;
   $12 = $4;
   $14 = $8;
   $9 = $6;
   $11 = $35;
   __multi3($15 + 96 | 0, $3, $12, $7, $14, $5, $9, $32, $11);
   $14 = $1;
   $9 = $14 << 16;
   $16 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 104 | 0, 0);
   $14 = i64toi32_i32$HIGH_BITS;
   $13 = $14;
   $11 = $50;
   $12 = $9;
   $10 = $11 - $9 | 0;
   $14 = $16;
   $9 = $13;
   $13 = $9 + ($12 >>> 0 > $11 >>> 0) | 0;
   $13 = $14 - $13 | 0;
   $14 = $13;
   $13 = SAFE_HEAP_LOAD_i64_8_8($15, 96);
   $20 = $13;
   $11 = i64toi32_i32$HIGH_BITS;
   $18 = $11;
   $13 = ($13 | 0) != 0 | ($11 | 0) != 0;
   $9 = $10 - $13 | 0;
   $17 = $9;
   $10 = $10 >>> 0 < $13 >>> 0;
   $10 = $14 - $10 | 0;
   $16 = $10;
   $27 = $27 + 16383 | 0;
   $43 = $1;
   $10 = $2;
   $45 = $10;
   $13 = $20;
   $11 = 0 - $13 | 0;
   $20 = $11;
   $12 = $18;
   $9 = $12 + (($13 | 0) != 0) | 0;
   $9 = 0 - $9 | 0;
   $14 = 0;
  }
  $18 = $9;
  if (($27 | 0) >= 32767) {
   $10 = $29;
   $29 = $10;
   $9 = $24;
   $14 = $9 | 2147418112;
   $24 = $14;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  label$15: {
   if (($27 | 0) >= 1) {
    $9 = $17;
    $2 = $9 << 1;
    $14 = $16;
    $10 = $14 << 1 | $9 >>> 31;
    $1 = $10;
    $10 = $18;
    $13 = $10 >>> 31 | 0;
    $9 = 0;
    $14 = $9;
    $10 = $2;
    $17 = $10 | $13;
    $9 = $1;
    $14 = $9 | $14;
    $16 = $14;
    $14 = $8;
    $10 = $14 & 65535;
    $1 = $10;
    $14 = $27;
    $9 = $14 << 16;
    $14 = $9;
    $10 = $7;
    $13 = 0;
    $25 = $10 | $13;
    $9 = $1;
    $14 = $9 | $14;
    $23 = $14;
    $9 = $20;
    $7 = $9 << 1;
    $14 = $18;
    $10 = $14 << 1 | $9 >>> 31;
    $9 = $10;
    break label$15;
   }
   if (($27 | 0) <= -113) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $4;
   $9 = $8;
   __lshrti3($15 - -64 | 0, $3, $10, $7, $9, 1 - $27 | 0);
   $9 = $45;
   $10 = $38;
   __ashlti3($15 + 48 | 0, $43, $9, $39, $10, $27 + 112 | 0);
   $1 = $15 + 32 | 0;
   $10 = SAFE_HEAP_LOAD_i64_8_8($15, 64);
   $3 = $10;
   $9 = i64toi32_i32$HIGH_BITS;
   $4 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 72 | 0, 0);
   $25 = $9;
   $10 = i64toi32_i32$HIGH_BITS;
   $23 = $10;
   $10 = $6;
   $9 = $35;
   $14 = $4;
   $13 = $23;
   __multi3($1, $5, $10, $32, $9, $3, $14, $25, $13);
   $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 56 | 0, 0);
   $11 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $8 = $14;
   $14 = SAFE_HEAP_LOAD_i64_8_8($15 + 40 | 0, 0);
   $9 = $14;
   $12 = $9 << 1;
   $13 = i64toi32_i32$HIGH_BITS;
   $14 = $13 << 1 | $9 >>> 31;
   $7 = $14;
   $14 = SAFE_HEAP_LOAD_i64_8_8($15, 32);
   $1 = $14;
   $9 = i64toi32_i32$HIGH_BITS;
   $2 = $9;
   $14 = 0;
   $13 = $14;
   $14 = $7;
   $13 = $13 | $14;
   $7 = $13;
   $14 = $11;
   $10 = $9 >>> 31 | 0;
   $9 = $12;
   $10 = $10 | $9;
   $12 = $14 - $10 | 0;
   $13 = $8;
   $9 = $7;
   $11 = $9 + ($10 >>> 0 > $14 >>> 0) | 0;
   $11 = $13 - $11 | 0;
   $16 = $11;
   $11 = SAFE_HEAP_LOAD_i64_8_8($15, 48);
   $7 = $11;
   $14 = i64toi32_i32$HIGH_BITS;
   $8 = $14;
   $13 = $1;
   $1 = $13 << 1;
   $14 = $2;
   $11 = $14 << 1 | $13 >>> 31;
   $2 = $11;
   $11 = $8;
   $13 = $2;
   $10 = $1;
   $14 = $7;
   $13 = ($11 | 0) == ($13 | 0) & $10 >>> 0 > $14 >>> 0 | $13 >>> 0 > $11 >>> 0;
   $10 = $12;
   $9 = $10 - $13 | 0;
   $17 = $9;
   $14 = $16;
   $12 = $10 >>> 0 < $13 >>> 0;
   $12 = $14 - $12 | 0;
   $16 = $12;
   $14 = $7;
   $13 = $1;
   $11 = $14 - $13 | 0;
   $7 = $11;
   $12 = $8;
   $10 = $2;
   $9 = $10 + ($14 >>> 0 < $13 >>> 0) | 0;
   $9 = $12 - $9 | 0;
  }
  $8 = $9;
  $9 = $6;
  $14 = $35;
  __multi3($15 + 16 | 0, $5, $9, $32, $14, 3, 0, 0, 0);
  $13 = $9;
  $12 = $14;
  __multi3($15, $5, $13, $32, $12, 5, 0, 0, 0);
  $9 = $23;
  $23 = $9;
  $19 = $3;
  $9 = $4;
  $18 = $9;
  $12 = $3;
  $1 = $12 & 1;
  $12 = $8;
  $2 = 0;
  $11 = $12 + $2 | 0;
  $13 = $7;
  $9 = $1;
  $10 = $13 + $9 | 0;
  $11 = $10 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
  $7 = $10;
  $8 = $11;
  $9 = $6;
  $13 = $5;
  $6 = ($11 | 0) == ($9 | 0) & $13 >>> 0 < $10 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $14 = $2;
  $13 = $1;
  $9 = $10;
  $11 = ($14 | 0) == ($11 | 0) & $13 >>> 0 > $9 >>> 0 | $14 >>> 0 > $11 >>> 0;
  $13 = $16;
  $10 = $13;
  $9 = $17;
  $12 = $11 + $9 | 0;
  if ($12 >>> 0 < $11 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $1 = $12;
  $2 = $10;
  $9 = $35;
  $11 = $32;
  $13 = $12;
  $5 = ($10 | 0) == ($9 | 0) & $11 >>> 0 < $13 >>> 0 | $9 >>> 0 < $10 >>> 0;
  $13 = $10;
  $10 = $9;
  $11 = $12;
  $9 = $32;
  $10 = ($11 | 0) == ($9 | 0) & ($10 | 0) == ($13 | 0) ? $6 : $5;
  $11 = $18;
  $9 = $19;
  $14 = $10 + $9 | 0;
  $5 = $14;
  $12 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
  $6 = $12;
  $9 = $4;
  $10 = $3;
  $11 = $14;
  $9 = ($12 | 0) == ($9 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 > $12 >>> 0;
  $11 = $23;
  $10 = $25;
  $13 = $10 + $9 | 0;
  $14 = $13 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
  $18 = $13;
  $16 = $14;
  $13 = $14 >>> 0 < 2147418112;
  $11 = SAFE_HEAP_LOAD_i64_8_8($15, 16);
  $9 = $11;
  $11 = $8;
  $14 = i64toi32_i32$HIGH_BITS;
  $10 = $7;
  $12 = ($11 | 0) == ($14 | 0) & $10 >>> 0 > $9 >>> 0 | $14 >>> 0 < $11 >>> 0;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 24 | 0, 0);
  $3 = $9;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14;
  $14 = $2;
  $10 = $1;
  $11 = $3;
  $4 = ($9 | 0) == ($14 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $14 >>> 0;
  $10 = $14;
  $14 = $9;
  $11 = $1;
  $9 = $3;
  $14 = (($11 | 0) == ($9 | 0) & ($10 | 0) == ($14 | 0) ? $12 : $4) & $13;
  $11 = $6;
  $9 = $5;
  $12 = $9 + $14 | 0;
  $13 = $12 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
  $3 = $12;
  $4 = $13;
  $9 = $11;
  $11 = $12;
  $14 = $5;
  $9 = ($13 | 0) == ($9 | 0) & $11 >>> 0 < $14 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $11 = $16;
  $14 = $18;
  $10 = $9 + $14 | 0;
  $12 = $10 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
  $5 = $10;
  $6 = $12;
  $13 = $12 >>> 0 < 2147418112;
  $11 = SAFE_HEAP_LOAD_i64_8_8($15, 0);
  $9 = $11;
  $12 = i64toi32_i32$HIGH_BITS;
  $11 = $8;
  $14 = $7;
  $10 = ($12 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $12 >>> 0 < $11 >>> 0;
  $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 8 | 0, 0);
  $7 = $9;
  $12 = i64toi32_i32$HIGH_BITS;
  $8 = $12;
  $12 = $2;
  $9 = $8;
  $11 = $7;
  $14 = $1;
  $2 = ($12 | 0) == ($9 | 0) & $11 >>> 0 < $14 >>> 0 | $9 >>> 0 < $12 >>> 0;
  $14 = $12;
  $12 = $9;
  $11 = $1;
  $9 = $7;
  $12 = (($11 | 0) == ($9 | 0) & ($12 | 0) == ($14 | 0) ? $10 : $2) & $13;
  $11 = $4;
  $10 = $11;
  $9 = $3;
  $13 = $12 + $9 | 0;
  $1 = $13;
  $10 = $12 >>> 0 > $13 >>> 0 ? $10 + 1 | 0 : $10;
  $2 = $10;
  $9 = $11;
  $12 = $3;
  $11 = $13;
  $9 = ($10 | 0) == ($9 | 0) & $12 >>> 0 > $11 >>> 0 | $9 >>> 0 > $10 >>> 0;
  $12 = $5;
  $14 = $12 + $9 | 0;
  $11 = $6;
  $13 = $9 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
  $11 = $14;
  $9 = $29;
  $29 = $11 | $9;
  $12 = $24;
  $12 = $13 | $12;
  $24 = $12;
 }
 $12 = $2;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $12);
 $12 = $24;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $29, $12);
 __stack_pointer = $15 + 336 | 0;
}

function D4C($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 $14 = __stack_pointer - 240 | 0;
 __stack_pointer = $14;
 $34 = ($6 | 0) / 2 | 0;
 randn_reseed();
 if (!(($5 | 0) < 1 | ($6 | 0) < -1)) {
  $9 = $34 + 1 | 0;
  $15 = $9 & -8;
  $35 = $9 & 7;
  $18 = $34 >>> 0 > 6;
  while (1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($17 << 2) + $8 | 0, 0);
   $12 = 0;
   $13 = $15;
   if ($18) {
    while (1) {
     $11 = $12 << 3;
     SAFE_HEAP_STORE_i64_8_8($11 + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 8) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 16) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 24) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 32) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 40) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 48) + $9 | 0, 0, -9007, 1072693247);
     SAFE_HEAP_STORE_i64_8_8(($11 | 56) + $9 | 0, 0, -9007, 1072693247);
     $12 = $12 + 8 | 0;
     $13 = $13 - 8 | 0;
     if ($13) {
      continue;
     }
     break;
    }
   }
   $11 = $35;
   if ($11) {
    while (1) {
     SAFE_HEAP_STORE_i64_8_8(($12 << 3) + $9 | 0, 0, -9007, 1072693247);
     $12 = $12 + 1 | 0;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
   }
   $17 = $17 + 1 | 0;
   if (($17 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i32_4_4($14 + 176 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 168 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 160 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 152 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 144 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 136 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14, 128, 0, 0);
 $23 = +($2 | 0);
 $10 = log($23 * 4 / 47 + 1) / .6931471805599453;
 label$8: {
  if (Math_abs($10) < 2147483648) {
   $9 = ~~$10;
   break label$8;
  }
  $9 = -2147483648;
 }
 $10 = exp2(+($9 | 0) + 1);
 label$7: {
  if (Math_abs($10) < 2147483648) {
   $20 = ~~$10;
   break label$7;
  }
  $20 = -2147483648;
 }
 InitializeForwardRealFFT($20, $14 + 128 | 0);
 $51 = +($20 | 0);
 $10 = $51 * 3e3 / $23;
 label$11: {
  if (Math_abs($10) < 2147483648) {
   $9 = ~~$10;
   break label$11;
  }
  $9 = -2147483648;
 }
 $30 = $9 << 1 | 1;
 $35 = operator_20new_5b_5d_28unsigned_20long_29(($30 & 536870911) != ($30 | 0) ? -1 : $30 << 3);
 NuttallWindow($30, $35);
 $52 = operator_20new_5b_5d_28unsigned_20long_29(($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3);
 SAFE_HEAP_STORE_i32_4_4($14 + 232 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 224 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 216 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 208 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 200 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14 + 192 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($14, 184, 0, 0);
 $10 = log($23 * 3 / 40 + 1) / .6931471805599453;
 label$14: {
  if (Math_abs($10) < 2147483648) {
   $9 = ~~$10;
   break label$14;
  }
  $9 = -2147483648;
 }
 $10 = exp2(+($9 | 0) + 1);
 label$13: {
  if (Math_abs($10) < 2147483648) {
   $25 = ~~$10;
   break label$13;
  }
  $25 = -2147483648;
 }
 InitializeForwardRealFFT($25, $14 + 184 | 0);
 $15 = ($25 | 0) / 2 | 0;
 $10 = +($25 | 0);
 $16 = Math_ceil($10 * 100 / $23);
 label$17: {
  if (Math_abs($16) < 2147483648) {
   $19 = ~~$16;
   break label$17;
  }
  $19 = -2147483648;
 }
 $41 = $23 * .5;
 $16 = Math_min($41 + -3e3, 15e3) / 3e3;
 label$19: {
  if (Math_abs($16) < 2147483648) {
   $27 = ~~$16;
   break label$19;
  }
  $27 = -2147483648;
 }
 $16 = Math_ceil($10 * 7900 / $23);
 label$21: {
  if (Math_abs($16) < 2147483648) {
   $17 = ~~$16;
   break label$21;
  }
  $17 = -2147483648;
 }
 $9 = ($5 | 0) < 1;
 $10 = Math_ceil($10 * 4e3 / $23);
 label$23: {
  if (Math_abs($10) < 2147483648) {
   $11 = ~~$10;
   break label$23;
  }
  $11 = -2147483648;
 }
 if (!$9) {
  $21 = ($25 & 536870911) != ($25 | 0) ? -1 : $25 << 3;
  $22 = $23 * 1.5;
  $42 = ($19 << 3) + 8 | 0;
  $24 = $14 + 196 | 0;
  $43 = $15 - $19 & 1;
  $44 = ($19 << 3) - 8 | 0;
  $38 = $17 - $19 | 0;
  $31 = $38 + 1 & 3;
  $28 = $19 + 1 | 0;
  $45 = ($28 | 0) != ($15 | 0);
  $26 = $11 << 3;
  $18 = 0;
  while (1) {
   $10 = 0;
   $29 = $18 << 3;
   $16 = SAFE_HEAP_LOAD_f64_8_8($29 + $4 | 0, 0);
   if ($16 != 0) {
    $10 = SAFE_HEAP_LOAD_f64_8_8($3 + $29 | 0, 0);
    $11 = operator_20new_5b_5d_28unsigned_20long_29($21);
    $16 = $16 > 40 ? $16 : 40;
    $9 = matlab_round($22 / $16);
    $28anonymous_20namespace_29__GetWindowedWaveform_28double_20const__2c_20int_2c_20int_2c_20double_2c_20double_2c_20int_2c_20double_2c_20double__29($0, $1, $2, $16, $10, 2, 3, SAFE_HEAP_LOAD_i32_4_4($14, 188));
    $9 = $9 << 1;
    $12 = $9 | 1;
    if (($25 | 0) > ($12 | 0)) {
     memset(SAFE_HEAP_LOAD_i32_4_4($14, 188) + ($12 << 3) | 0, 0, ($9 ^ -1) + $25 << 3);
    }
    SAFE_HEAP_STORE_i64_8_8($14 + 120 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($14 + 112 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($14 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($14 + 96 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($24 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($14, 88, SAFE_HEAP_LOAD_i64_8_4($24, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($14 + 88 | 0);
    if (($19 | 0) >= 0) {
     memset($11, 0, $42);
    }
    label$30: {
     if (($15 | 0) <= ($19 | 0)) {
      break label$30;
     }
     $12 = SAFE_HEAP_LOAD_i32_4_4($14, 192);
     $9 = $19;
     if ($43) {
      $13 = ($28 << 3) + $11 | 0;
      $9 = ($28 << 4) + $12 | 0;
      $10 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
      $16 = $10 * $10;
      $10 = SAFE_HEAP_LOAD_f64_8_8($9, 8);
      SAFE_HEAP_STORE_f64_8_8($13, 0, $16 + $10 * $10);
      $9 = $28;
     }
     if (!$45) {
      break label$30;
     }
     while (1) {
      $13 = $9 + 1 | 0;
      $32 = ($13 << 3) + $11 | 0;
      $13 = ($13 << 4) + $12 | 0;
      $10 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
      $16 = $10 * $10;
      $10 = SAFE_HEAP_LOAD_f64_8_8($13, 8);
      SAFE_HEAP_STORE_f64_8_8($32, 0, $16 + $10 * $10);
      $9 = $9 + 2 | 0;
      $32 = ($9 << 3) + $11 | 0;
      $13 = ($9 << 4) + $12 | 0;
      $10 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
      $16 = $10 * $10;
      $10 = SAFE_HEAP_LOAD_f64_8_8($13, 8);
      SAFE_HEAP_STORE_f64_8_8($32, 0, $16 + $10 * $10);
      if (($9 | 0) != ($15 | 0)) {
       continue;
      }
      break;
     }
    }
    label$33: {
     if (($17 | 0) < ($19 | 0)) {
      break label$33;
     }
     $10 = SAFE_HEAP_LOAD_f64_8_8($11 + $44 | 0, 0);
     $9 = $19;
     $12 = $31;
     if ($12) {
      while (1) {
       $13 = ($9 << 3) + $11 | 0;
       $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($13, 0);
       SAFE_HEAP_STORE_f64_8_8($13, 0, $10);
       $9 = $9 + 1 | 0;
       $12 = $12 - 1 | 0;
       if ($12) {
        continue;
       }
       break;
      }
     }
     if ($38 >>> 0 < 3) {
      break label$33;
     }
     while (1) {
      $12 = ($9 << 3) + $11 | 0;
      $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($12, 0);
      SAFE_HEAP_STORE_f64_8_8($12, 0, $10);
      $13 = $12 + 8 | 0;
      $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($13, 0);
      SAFE_HEAP_STORE_f64_8_8($13, 0, $10);
      $12 = $12 + 16 | 0;
      $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($12, 0);
      SAFE_HEAP_STORE_f64_8_8($12, 0, $10);
      $12 = $9 + 3 | 0;
      $13 = ($12 << 3) + $11 | 0;
      $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($13, 0);
      SAFE_HEAP_STORE_f64_8_8($13, 0, $10);
      $9 = $9 + 4 | 0;
      if (($12 | 0) != ($17 | 0)) {
       continue;
      }
      break;
     }
    }
    $10 = SAFE_HEAP_LOAD_f64_8_8(($17 << 3) + $11 | 0, 0);
    $16 = SAFE_HEAP_LOAD_f64_8_8($11 + $26 | 0, 0);
    operator_20delete_5b_5d_28void__29($11);
    $10 = $16 / $10;
   }
   SAFE_HEAP_STORE_f64_8_8($29 + $52 | 0, 0, $10);
   $18 = $18 + 1 | 0;
   if (($18 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 DestroyForwardRealFFT($14 + 184 | 0);
 $46 = $27 + 2 | 0;
 $11 = ($46 & 536870911) != ($46 | 0) ? -1 : $46 << 3;
 $39 = operator_20new_5b_5d_28unsigned_20long_29($11);
 SAFE_HEAP_STORE_i64_8_8($39, 0, 0, -1068630016);
 $12 = $27 + 1 | 0;
 $17 = $12 << 3;
 SAFE_HEAP_STORE_i64_8_8($39 + $17 | 0, 0, -2127697391, -1116629095);
 $9 = 0;
 $33 = operator_20new_5b_5d_28unsigned_20long_29($11);
 label$37: {
  if (($27 | 0) < 0) {
   break label$37;
  }
  $11 = $12 & 3;
  if ($27 >>> 0 >= 3) {
   $12 = $12 & -4;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $33 | 0, 0, +($9 | 0) * 3e3);
    $13 = $9 | 1;
    SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $33 | 0, 0, +($13 | 0) * 3e3);
    $13 = $9 | 2;
    SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $33 | 0, 0, +($13 | 0) * 3e3);
    $13 = $9 | 3;
    SAFE_HEAP_STORE_f64_8_8(($13 << 3) + $33 | 0, 0, +($13 | 0) * 3e3);
    $9 = $9 + 4 | 0;
    $12 = $12 - 4 | 0;
    if ($12) {
     continue;
    }
    break;
   }
  }
  if (!$11) {
   break label$37;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $33 | 0, 0, +($9 | 0) * 3e3);
   $9 = $9 + 1 | 0;
   $11 = $11 - 1 | 0;
   if ($11) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_f64_8_8($17 + $33 | 0, 0, $41);
 $47 = $34 + 1 | 0;
 $40 = operator_20new_5b_5d_28unsigned_20long_29(($47 & 536870911) != ($47 | 0) ? -1 : $47 << 3);
 label$41: {
  if (($6 | 0) < -1) {
   break label$41;
  }
  $10 = +($6 | 0);
  $11 = $34 + 1 | 0;
  $13 = $11 & 1;
  $9 = 0;
  if ($6 + 1 >>> 0 >= 3) {
   $11 = $11 & -2;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $40 | 0, 0, $23 * +($9 | 0) / $10);
    $12 = $9 | 1;
    SAFE_HEAP_STORE_f64_8_8(($12 << 3) + $40 | 0, 0, $23 * +($12 | 0) / $10);
    $9 = $9 + 2 | 0;
    $11 = $11 - 2 | 0;
    if ($11) {
     continue;
    }
    break;
   }
  }
  if (!$13) {
   break label$41;
  }
  SAFE_HEAP_STORE_f64_8_8(($9 << 3) + $40 | 0, 0, $23 * +($9 | 0) / $10);
 }
 $53 = ($30 | 0) / 2 | 0;
 $36 = ($20 | 0) / 2 | 0;
 if (($5 | 0) >= 1) {
  $9 = $53 << 1;
  $55 = ($9 | 0) > 0 ? $9 : 0;
  $9 = $36 + 1 | 0;
  $37 = ($9 & 536870911) != ($9 | 0) ? -1 : $9 << 3;
  $54 = $20 << 3;
  $24 = $39 + 8 | 0;
  $41 = $51 * 8 / +($30 | 0);
  $31 = $14 + 140 | 0;
  $56 = $27 & -4;
  $57 = $27 & 3;
  $58 = $36 & -4;
  $59 = $36 & 3;
  $11 = $34 + 1 | 0;
  $60 = $11 & -2;
  $61 = $11 & 1;
  $32 = $9 & -2;
  $48 = $9 & 1;
  $62 = $9 & -4;
  $63 = $9 & 3;
  $64 = ($20 | 0) < 2;
  $65 = $27 - 1 >>> 0 < 3;
  $66 = $36 - 1 >>> 0 < 3;
  $67 = $6 + 1 >>> 0 < 3;
  $49 = $20 + 1 >>> 0 < 3;
  while (1) {
   $9 = $50 << 3;
   $10 = SAFE_HEAP_LOAD_f64_8_8($9 + $4 | 0, 0);
   label$46: {
    if ($10 == 0) {
     break label$46;
    }
    if (SAFE_HEAP_LOAD_f64_8_8($9 + $52 | 0, 0) <= SAFE_HEAP_LOAD_f64_8_8($7, 0)) {
     break label$46;
    }
    $22 = SAFE_HEAP_LOAD_f64_8_8($3 + $9 | 0, 0);
    $26 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $21 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $17 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $12 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $13 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $16 = Math_max($10, 47);
    $10 = .25 / $16;
    $28anonymous_20namespace_29__GetCentroid_28double_20const__2c_20int_2c_20int_2c_20double_2c_20int_2c_20double_2c_20ForwardRealFFT_20const__2c_20double__29($0, $1, $2, $16, $20, $22 - $10, $14 + 128 | 0, $12);
    $28anonymous_20namespace_29__GetCentroid_28double_20const__2c_20int_2c_20int_2c_20double_2c_20int_2c_20double_2c_20ForwardRealFFT_20const__2c_20double__29($0, $1, $2, $16, $20, $10 + $22, $14 + 128 | 0, $13);
    $28 = ($20 | 0) < -1;
    label$47: {
     if ($28) {
      break label$47;
     }
     $11 = 0;
     $15 = $32;
     if (!$49) {
      while (1) {
       $9 = $11 << 3;
       SAFE_HEAP_STORE_f64_8_8($26 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $12 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0));
       $9 = $9 | 8;
       SAFE_HEAP_STORE_f64_8_8($26 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $12 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0));
       $11 = $11 + 2 | 0;
       $15 = $15 - 2 | 0;
       if ($15) {
        continue;
       }
       break;
      }
     }
     if (!$48) {
      break label$47;
     }
     $9 = $11 << 3;
     SAFE_HEAP_STORE_f64_8_8($26 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $12 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0));
    }
    DCCorrection($26, $16, $2, $20, $26);
    operator_20delete_5b_5d_28void__29($12);
    operator_20delete_5b_5d_28void__29($13);
    $29 = ($20 | 0) < 1;
    if (!$29) {
     memset(SAFE_HEAP_LOAD_i32_4_4($14, 132), 0, $54);
    }
    $28anonymous_20namespace_29__GetWindowedWaveform_28double_20const__2c_20int_2c_20int_2c_20double_2c_20double_2c_20int_2c_20double_2c_20double__29($0, $1, $2, $16, $22, 1, 4, SAFE_HEAP_LOAD_i32_4_4($14, 132));
    $42 = $31 + 32 | 0;
    SAFE_HEAP_STORE_i64_8_8($14 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($42, 0), i64toi32_i32$HIGH_BITS);
    $43 = $31 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_8($14 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($43, 0), i64toi32_i32$HIGH_BITS);
    $44 = $31 + 16 | 0;
    SAFE_HEAP_STORE_i64_8_8($14 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($44, 0), i64toi32_i32$HIGH_BITS);
    $38 = $31 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($14 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($38, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($14, 48, SAFE_HEAP_LOAD_i64_8_4($31, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($14 + 48 | 0);
    label$51: {
     label$52: {
      label$53: {
       if (!$28) {
        $9 = 0;
        $11 = SAFE_HEAP_LOAD_i32_4_4($14, 136);
        $12 = $32;
        if (!$49) {
         while (1) {
          $19 = ($9 << 3) + $21 | 0;
          $13 = ($9 << 4) + $11 | 0;
          $10 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
          $22 = $10 * $10;
          $10 = SAFE_HEAP_LOAD_f64_8_8($13, 8);
          SAFE_HEAP_STORE_f64_8_8($19, 0, $22 + $10 * $10);
          $13 = $9 | 1;
          $19 = ($13 << 3) + $21 | 0;
          $13 = ($13 << 4) + $11 | 0;
          $10 = SAFE_HEAP_LOAD_f64_8_8($13, 0);
          $22 = $10 * $10;
          $10 = SAFE_HEAP_LOAD_f64_8_8($13, 8);
          SAFE_HEAP_STORE_f64_8_8($19, 0, $22 + $10 * $10);
          $9 = $9 + 2 | 0;
          $12 = $12 - 2 | 0;
          if ($12) {
           continue;
          }
          break;
         }
        }
        if ($48) {
         $12 = ($9 << 3) + $21 | 0;
         $9 = ($9 << 4) + $11 | 0;
         $10 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
         $22 = $10 * $10;
         $10 = SAFE_HEAP_LOAD_f64_8_8($9, 8);
         SAFE_HEAP_STORE_f64_8_8($12, 0, $22 + $10 * $10);
        }
        DCCorrection($21, $16, $2, $20, $21);
        LinearSmoothing($21, $16, $2, $20, $21);
        $11 = 0;
        $12 = $32;
        if (!$49) {
         break label$53;
        }
        break label$52;
       }
       DCCorrection($21, $16, $2, $20, $21);
       LinearSmoothing($21, $16, $2, $20, $21);
       break label$51;
      }
      while (1) {
       $9 = $11 << 3;
       SAFE_HEAP_STORE_f64_8_8($17 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $26 | 0, 0) / SAFE_HEAP_LOAD_f64_8_8($9 + $21 | 0, 0));
       $9 = $9 | 8;
       SAFE_HEAP_STORE_f64_8_8($17 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $26 | 0, 0) / SAFE_HEAP_LOAD_f64_8_8($9 + $21 | 0, 0));
       $11 = $11 + 2 | 0;
       $12 = $12 - 2 | 0;
       if ($12) {
        continue;
       }
       break;
      }
     }
     if (!$48) {
      break label$51;
     }
     $9 = $11 << 3;
     SAFE_HEAP_STORE_f64_8_8($17 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $26 | 0, 0) / SAFE_HEAP_LOAD_f64_8_8($9 + $21 | 0, 0));
    }
    LinearSmoothing($17, $16 * .5, $2, $20, $17);
    $11 = operator_20new_5b_5d_28unsigned_20long_29($37);
    LinearSmoothing($17, $16, $2, $20, $11);
    label$59: {
     if ($28) {
      break label$59;
     }
     $9 = 0;
     $13 = $62;
     if ($36 >>> 0 >= 3) {
      while (1) {
       $12 = $9 << 3;
       $15 = $17 + $12 | 0;
       SAFE_HEAP_STORE_f64_8_8($15, 0, SAFE_HEAP_LOAD_f64_8_8($15, 0) - SAFE_HEAP_LOAD_f64_8_8($11 + $12 | 0, 0));
       $15 = $12 | 8;
       $18 = $17 + $15 | 0;
       SAFE_HEAP_STORE_f64_8_8($18, 0, SAFE_HEAP_LOAD_f64_8_8($18, 0) - SAFE_HEAP_LOAD_f64_8_8($11 + $15 | 0, 0));
       $15 = $12 | 16;
       $18 = $17 + $15 | 0;
       SAFE_HEAP_STORE_f64_8_8($18, 0, SAFE_HEAP_LOAD_f64_8_8($18, 0) - SAFE_HEAP_LOAD_f64_8_8($11 + $15 | 0, 0));
       $12 = $12 | 24;
       $15 = $17 + $12 | 0;
       SAFE_HEAP_STORE_f64_8_8($15, 0, SAFE_HEAP_LOAD_f64_8_8($15, 0) - SAFE_HEAP_LOAD_f64_8_8($11 + $12 | 0, 0));
       $9 = $9 + 4 | 0;
       $13 = $13 - 4 | 0;
       if ($13) {
        continue;
       }
       break;
      }
     }
     $12 = $63;
     if (!$12) {
      break label$59;
     }
     while (1) {
      $13 = $9 << 3;
      $15 = $17 + $13 | 0;
      SAFE_HEAP_STORE_f64_8_8($15, 0, SAFE_HEAP_LOAD_f64_8_8($15, 0) - SAFE_HEAP_LOAD_f64_8_8($11 + $13 | 0, 0));
      $9 = $9 + 1 | 0;
      $12 = $12 - 1 | 0;
      if ($12) {
       continue;
      }
      break;
     }
    }
    operator_20delete_5b_5d_28void__29($11);
    $9 = matlab_round($41);
    if (!$29) {
     memset(SAFE_HEAP_LOAD_i32_4_4($14, 132), 0, $54);
    }
    $12 = operator_20new_5b_5d_28unsigned_20long_29($37);
    $19 = 0;
    label$64: {
     if (($27 | 0) > 0) {
      $45 = ($36 << 3) + $12 | 0;
      $34 = $45 + 8 | 0;
      $68 = (($9 ^ -1) + $36 << 3) + $12 | 0;
      while (1) {
       $25 = $19;
       $19 = $19 + 1 | 0;
       $10 = +($19 | 0) * 3e3 * $51 / $23;
       label$67: {
        if (Math_abs($10) < 2147483648) {
         $9 = ~~$10;
         break label$67;
        }
        $9 = -2147483648;
       }
       if (($30 | 0) >= -1) {
        $11 = $9 - $53 | 0;
        $9 = 0;
        $13 = SAFE_HEAP_LOAD_i32_4_4($14, 132);
        $15 = $55;
        if (($30 | 0) > 1) {
         while (1) {
          $18 = $9 << 3;
          SAFE_HEAP_STORE_f64_8_8($18 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($9 + $11 << 3) + $17 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($18 + $35 | 0, 0));
          $18 = $9 | 1;
          $29 = $18 << 3;
          SAFE_HEAP_STORE_f64_8_8($29 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($11 + $18 << 3) + $17 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($35 + $29 | 0, 0));
          $9 = $9 + 2 | 0;
          $15 = $15 - 2 | 0;
          if ($15) {
           continue;
          }
          break;
         }
        }
        $15 = $9 << 3;
        SAFE_HEAP_STORE_f64_8_8($15 + $13 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($9 + $11 << 3) + $17 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($15 + $35 | 0, 0));
       }
       SAFE_HEAP_STORE_i64_8_8($14 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($42, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($14 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($43, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($14 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($44, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($14 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($38, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($14, 8, SAFE_HEAP_LOAD_i64_8_4($31, 0), i64toi32_i32$HIGH_BITS);
       fft_execute($14 + 8 | 0);
       label$72: {
        if ($28) {
         break label$72;
        }
        $9 = 0;
        $11 = SAFE_HEAP_LOAD_i32_4_4($14, 136);
        $13 = $32;
        if (!$49) {
         while (1) {
          $18 = ($9 << 3) + $12 | 0;
          $15 = ($9 << 4) + $11 | 0;
          $10 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
          $22 = $10 * $10;
          $10 = SAFE_HEAP_LOAD_f64_8_8($15, 8);
          SAFE_HEAP_STORE_f64_8_8($18, 0, $22 + $10 * $10);
          $15 = $9 | 1;
          $18 = ($15 << 3) + $12 | 0;
          $15 = ($15 << 4) + $11 | 0;
          $10 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
          $22 = $10 * $10;
          $10 = SAFE_HEAP_LOAD_f64_8_8($15, 8);
          SAFE_HEAP_STORE_f64_8_8($18, 0, $22 + $10 * $10);
          $9 = $9 + 2 | 0;
          $13 = $13 - 2 | 0;
          if ($13) {
           continue;
          }
          break;
         }
        }
        if (!$48) {
         break label$72;
        }
        $13 = ($9 << 3) + $12 | 0;
        $9 = ($9 << 4) + $11 | 0;
        $10 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
        $22 = $10 * $10;
        $10 = SAFE_HEAP_LOAD_f64_8_8($9, 8);
        SAFE_HEAP_STORE_f64_8_8($13, 0, $22 + $10 * $10);
       }
       void_20std____2____sort_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($12, $34, $14 + 184 | 0);
       label$75: {
        if ($64) {
         break label$75;
        }
        $10 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
        $9 = 1;
        $13 = $58;
        if (!$66) {
         while (1) {
          $11 = ($9 << 3) + $12 | 0;
          $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($11, 0);
          SAFE_HEAP_STORE_f64_8_8($11, 0, $10);
          $15 = $11 + 8 | 0;
          $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($15, 0);
          SAFE_HEAP_STORE_f64_8_8($15, 0, $10);
          $15 = $11 + 16 | 0;
          $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($15, 0);
          SAFE_HEAP_STORE_f64_8_8($15, 0, $10);
          $11 = $11 + 24 | 0;
          $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($11, 0);
          SAFE_HEAP_STORE_f64_8_8($11, 0, $10);
          $9 = $9 + 4 | 0;
          $13 = $13 - 4 | 0;
          if ($13) {
           continue;
          }
          break;
         }
        }
        $11 = $59;
        if (!$11) {
         break label$75;
        }
        while (1) {
         $13 = ($9 << 3) + $12 | 0;
         $10 = $10 + SAFE_HEAP_LOAD_f64_8_8($13, 0);
         SAFE_HEAP_STORE_f64_8_8($13, 0, $10);
         $9 = $9 + 1 | 0;
         $11 = $11 - 1 | 0;
         if ($11) {
          continue;
         }
         break;
        }
       }
       SAFE_HEAP_STORE_f64_8_8(($25 << 3) + $24 | 0, 0, log10(SAFE_HEAP_LOAD_f64_8_8($68, 0) / SAFE_HEAP_LOAD_f64_8_8($45, 0)) * 10);
       if (($19 | 0) != ($27 | 0)) {
        continue;
       }
       break;
      }
      operator_20delete_5b_5d_28void__29($12);
      $10 = ($16 + -100) / 50;
      $9 = 0;
      $12 = $56;
      if (!$65) {
       while (1) {
        $11 = $9 << 3;
        $13 = $24 + $11 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, Math_min($10 + SAFE_HEAP_LOAD_f64_8_8($13, 0), 0));
        $13 = ($11 | 8) + $24 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, Math_min($10 + SAFE_HEAP_LOAD_f64_8_8($13, 0), 0));
        $13 = ($11 | 16) + $24 | 0;
        SAFE_HEAP_STORE_f64_8_8($13, 0, Math_min($10 + SAFE_HEAP_LOAD_f64_8_8($13, 0), 0));
        $11 = ($11 | 24) + $24 | 0;
        SAFE_HEAP_STORE_f64_8_8($11, 0, Math_min($10 + SAFE_HEAP_LOAD_f64_8_8($11, 0), 0));
        $9 = $9 + 4 | 0;
        $12 = $12 - 4 | 0;
        if ($12) {
         continue;
        }
        break;
       }
      }
      $11 = $57;
      if (!$11) {
       break label$64;
      }
      while (1) {
       $12 = ($9 << 3) + $24 | 0;
       SAFE_HEAP_STORE_f64_8_8($12, 0, Math_min($10 + SAFE_HEAP_LOAD_f64_8_8($12, 0), 0));
       $9 = $9 + 1 | 0;
       $11 = $11 - 1 | 0;
       if ($11) {
        continue;
       }
       break;
      }
      break label$64;
     }
     operator_20delete_5b_5d_28void__29($12);
    }
    operator_20delete_5b_5d_28void__29($26);
    operator_20delete_5b_5d_28void__29($21);
    operator_20delete_5b_5d_28void__29($17);
    $12 = SAFE_HEAP_LOAD_i32_4_4(($50 << 2) + $8 | 0, 0);
    interp1($33, $39, $46, $40, $47, $12);
    if (($6 | 0) < -1) {
     break label$46;
    }
    $9 = 0;
    $13 = $60;
    if (!$67) {
     while (1) {
      $17 = $9 << 3;
      $11 = $17 + $12 | 0;
      SAFE_HEAP_STORE_f64_8_8($11, 0, pow(10, SAFE_HEAP_LOAD_f64_8_8($11, 0) / 20));
      $11 = ($17 | 8) + $12 | 0;
      SAFE_HEAP_STORE_f64_8_8($11, 0, pow(10, SAFE_HEAP_LOAD_f64_8_8($11, 0) / 20));
      $9 = $9 + 2 | 0;
      $13 = $13 - 2 | 0;
      if ($13) {
       continue;
      }
      break;
     }
    }
    if (!$61) {
     break label$46;
    }
    $9 = ($9 << 3) + $12 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, pow(10, SAFE_HEAP_LOAD_f64_8_8($9, 0) / 20));
   }
   $50 = $50 + 1 | 0;
   if (($50 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 DestroyForwardRealFFT($14 + 128 | 0);
 operator_20delete_5b_5d_28void__29($52);
 operator_20delete_5b_5d_28void__29($33);
 operator_20delete_5b_5d_28void__29($39);
 operator_20delete_5b_5d_28void__29($35);
 operator_20delete_5b_5d_28void__29($40);
 __stack_pointer = $14 + 240 | 0;
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $11 = __stack_pointer - 560 | 0;
 __stack_pointer = $11;
 SAFE_HEAP_STORE_i32_4_4($11, 548, $10);
 SAFE_HEAP_STORE_i32_4_4($11, 552, $1);
 SAFE_HEAP_STORE_i32_4_4($11, 96, 42);
 $15 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 96 | 0);
 $1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
 SAFE_HEAP_STORE_i32_4_4($11, 132, $1);
 SAFE_HEAP_STORE_i32_4_4($11, 128, $1 + 400 | 0);
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 96 | 0);
 $14 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 80 | 0);
 $12 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 - -64 | 0);
 $13 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 48 | 0);
 $16 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 32 | 0);
 std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 116 | 0, $11 + 112 | 0, $17, $14, $12, $13, $11 + 28 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 0, std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($8));
 $19 = $4 & 512;
 $20 = $19 >>> 9 | 0;
 $1 = 0;
 $2 = 0;
 while (1) {
  $10 = $2;
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      if (($1 | 0) == 4) {
       break label$5;
      }
      if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
       break label$5;
      }
      $4 = 0;
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           switch (SAFE_HEAP_LOAD_i32_1_1(($11 + 120 | 0) + $1 | 0, 0) | 0) {
           case 1:
            if (($1 | 0) == 3) {
             break label$3;
            }
            if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
             std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0, 0);
             std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($11 + 16 | 0));
             break label$9;
            }
            SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
            $0 = 0;
            break label$4;

           case 0:
            break label$10;

           case 4:
            break label$6;

           case 2:
            break label$7;

           case 3:
            break label$8;

           default:
            break label$2;
           }
          }
          if (($1 | 0) == 3) {
           break label$3;
          }
         }
         while (1) {
          if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
           break label$3;
          }
          if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
           break label$3;
          }
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0, 0);
          std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($11 + 16 | 0));
          continue;
         }
        }
        if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) | 0)) {
         break label$3;
        }
        label$14: {
         if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12)) {
          if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13)) {
           break label$14;
          }
         }
         $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12);
         $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
         if ($4) {
          if ((SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($12, 0), 0) | 0) == ($2 | 0)) {
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
           $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
           break label$2;
          }
          SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
          break label$3;
         }
         if ((SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($13, 0), 0) | 0) != ($2 | 0)) {
          break label$3;
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
         $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$2;
        }
        if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == (SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($12, 0), 0) | 0)) {
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
         break label$2;
        }
        if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == (SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($13, 0), 0) | 0)) {
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
         $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$2;
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       if (!($1 >>> 0 < 2 | $10)) {
        $2 = 0;
        if (!(($1 | 0) == 2 & (SAFE_HEAP_LOAD_i32_1_U_1($11, 123) | 0) != 0 | $20)) {
         break label$2;
        }
       }
       SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14));
       $4 = std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0, 0);
       label$21: {
        if (!$1) {
         break label$21;
        }
        if (SAFE_HEAP_LOAD_i32_1_U_1(($1 + $11 | 0) + 119 | 0, 0) >>> 0 > 1) {
         break label$21;
        }
        while (1) {
         label$23: {
          SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14));
          if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($4, $11 + 8 | 0)) {
           break label$23;
          }
          if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($4), 0))) {
           break label$23;
          }
          std____2____wrap_iter_wchar_t_20const____operator___28_29($4);
          continue;
         }
         break;
        }
        SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14));
        $4 = decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($4, $11 + 8 | 0);
        if ($4 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($16) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16));
         if (bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29(std____2____wrap_iter_wchar_t____operator__28long_29_20const($11 + 8 | 0, $4), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14))) {
          break label$21;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($11, 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14));
        std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($11 + 8 | 0, $11, 0);
        SAFE_HEAP_STORE_i32_4_4($11, 16, SAFE_HEAP_LOAD_i32_4_4($11, 8));
       }
       SAFE_HEAP_STORE_i32_4_4($11, 8, SAFE_HEAP_LOAD_i32_4_4($11, 16));
       while (1) {
        label$26: {
         SAFE_HEAP_STORE_i32_4_4($11, 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14));
         if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($11 + 8 | 0, $11)) {
          break label$26;
         }
         if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
          break label$26;
         }
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) != (SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($11 + 8 | 0), 0) | 0)) {
          break label$26;
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         std____2____wrap_iter_wchar_t_20const____operator___28_29($11 + 8 | 0);
         continue;
        }
        break;
       }
       if (!$19) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($11, 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14));
       if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($11 + 8 | 0, $11)) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
       $0 = 0;
       break label$4;
      }
      while (1) {
       label$28: {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
         break label$28;
        }
        $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
        label$29: {
         if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 2048, $2)) {
          $18 = $9;
          $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
          if (($3 | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 548) | 0)) {
           void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($8, $9, $11 + 548 | 0);
           $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
          }
          SAFE_HEAP_STORE_i32_4_4($18, 0, $3 + 4 | 0);
          SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
          $4 = $4 + 1 | 0;
          break label$29;
         }
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17) | !$4) {
          break label$28;
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($11, 112) | 0) != ($2 | 0)) {
          break label$28;
         }
         $3 = $11;
         $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
         if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 128) | 0)) {
          void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
          $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
         }
         SAFE_HEAP_STORE_i32_4_4($3, 132, $2 + 4 | 0);
         SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
         $4 = 0;
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        continue;
       }
       break;
      }
      $3 = !$4;
      $18 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
      $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
      if (!(($18 | 0) == ($2 | 0) | $3)) {
       $3 = $11;
       if ((SAFE_HEAP_LOAD_i32_4_4($11, 128) | 0) == ($2 | 0)) {
        void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
       }
       SAFE_HEAP_STORE_i32_4_4($3, 132, $2 + 4 | 0);
       SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
      }
      label$38: {
       if ((SAFE_HEAP_LOAD_i32_4_4($11, 28) | 0) < 1) {
        break label$38;
       }
       label$39: {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0)) {
          break label$39;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       while (1) {
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        if ((SAFE_HEAP_LOAD_i32_4_4($11, 28) | 0) < 1) {
         break label$38;
        }
        label$42: {
         if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
          if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 2048, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
           break label$42;
          }
         }
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
         $0 = 0;
         break label$4;
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 548) | 0)) {
         void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($8, $9, $11 + 548 | 0);
        }
        $4 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
        SAFE_HEAP_STORE_i32_4_4($9, 0, $2 + 4 | 0);
        SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
        SAFE_HEAP_STORE_i32_4_4($11, 28, SAFE_HEAP_LOAD_i32_4_4($11, 28) - 1 | 0);
        continue;
       }
      }
      $2 = $10;
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) != (std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($8) | 0)) {
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
      $0 = 0;
      break label$4;
     }
     label$45: {
      if (!$10) {
       break label$45;
      }
      $4 = 1;
      while (1) {
       if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($10) >>> 0 <= $4 >>> 0) {
        break label$45;
       }
       label$47: {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == (SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($10, $4), 0) | 0)) {
          break label$47;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
       $4 = $4 + 1 | 0;
       continue;
      }
     }
     $0 = 1;
     if ((std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15) | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 132) | 0)) {
      break label$4;
     }
     $0 = 0;
     SAFE_HEAP_STORE_i32_4_4($11, 16, 0);
     std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15), SAFE_HEAP_LOAD_i32_4_4($11, 132), $11 + 16 | 0);
     if (SAFE_HEAP_LOAD_i32_4_4($11, 16)) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
      break label$4;
     }
     $0 = 1;
    }
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($16);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($13);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($12);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($14);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
    std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    __stack_pointer = $11 + 560 | 0;
    return $0;
   }
   $2 = $10;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}

function vfscanf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $11 = __stack_pointer - 304 | 0;
 __stack_pointer = $11;
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0) {
  $25 = __lockfile($0);
 }
 $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
 label$2: {
  if (!$6) {
   break label$2;
  }
  label$3: {
   label$4: {
    label$5: {
     label$6: {
      while (1) {
       label$8: {
        label$9: {
         if (isspace($6 & 255)) {
          while (1) {
           $6 = $1;
           $1 = $1 + 1 | 0;
           if (isspace(SAFE_HEAP_LOAD_i32_1_U_1($6, 1))) {
            continue;
           }
           break;
          }
          __shlim($0, 0, 0);
          while (1) {
           $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
           label$13: {
            if ($1 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
             SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
             $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
             break label$13;
            }
            $1 = __shgetc($0);
           }
           if (isspace($1)) {
            continue;
           }
           break;
          }
          $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
           $1 = $1 - 1 | 0;
           SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
          }
          $4 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
          $10 = $17;
          $7 = $4 + $10 | 0;
          $4 = $18;
          $8 = i64toi32_i32$HIGH_BITS;
          $5 = $4 + $8 | 0;
          $8 = $7;
          $5 = $7 >>> 0 < $10 >>> 0 ? $5 + 1 | 0 : $5;
          $4 = $5;
          $9 = $1 - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
          $5 = $9 >> 31;
          $10 = $9;
          $9 = $5;
          $5 = $4;
          $7 = $9 + $5 | 0;
          $4 = $8 + $10 | 0;
          $7 = $4 >>> 0 < $10 >>> 0 ? $7 + 1 | 0 : $7;
          $17 = $4;
          $18 = $7;
          break label$9;
         }
         label$16: {
          label$17: {
           label$18: {
            $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
            if (($6 | 0) == 37) {
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
             if (($3 | 0) == 42) {
              break label$18;
             }
             if (($3 | 0) != 37) {
              break label$17;
             }
            }
            __shlim($0, 0, 0);
            $6 = (($6 | 0) == 37) + $1 | 0;
            $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
            label$20: {
             if ($1 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
              SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
              $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
              break label$20;
             }
             $1 = __shgetc($0);
            }
            if (($1 | 0) != (SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0)) {
             if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
              SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
             }
             if (($1 | 0) > -1) {
              break label$2;
             }
             $21 = 0;
             if ($23) {
              break label$2;
             }
             break label$4;
            }
            $7 = $18;
            $4 = $7;
            $5 = $17;
            $9 = $5 + 1 | 0;
            $4 = $9 >>> 0 < 1 ? $4 + 1 | 0 : $4;
            $17 = $9;
            $18 = $4;
            break label$9;
           }
           $6 = $1 + 2 | 0;
           $12 = 0;
           break label$16;
          }
          label$24: {
           if (!isdigit($3)) {
            break label$24;
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) != 36) {
            break label$24;
           }
           $6 = $1 + 3 | 0;
           $12 = arg_n($2, SAFE_HEAP_LOAD_i32_1_U_1($1, 1) - 48 | 0);
           break label$16;
          }
          $6 = $1 + 1 | 0;
          $12 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
          $2 = $2 + 4 | 0;
         }
         $21 = 0;
         $1 = 0;
         if (isdigit(SAFE_HEAP_LOAD_i32_1_U_1($6, 0))) {
          while (1) {
           $1 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 0) + Math_imul($1, 10) | 0) - 48 | 0;
           $3 = SAFE_HEAP_LOAD_i32_1_U_1($6, 1);
           $6 = $6 + 1 | 0;
           if (isdigit($3)) {
            continue;
           }
           break;
          }
         }
         $13 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
         label$27: {
          if (($13 | 0) != 109) {
           $3 = $6;
           break label$27;
          }
          $3 = $6 + 1 | 0;
          $14 = 0;
          $21 = ($12 | 0) != 0;
          $13 = SAFE_HEAP_LOAD_i32_1_U_1($6, 1);
          $15 = 0;
         }
         $6 = $3 + 1 | 0;
         $4 = 3;
         label$29: {
          label$30: {
           switch (($13 & 255) - 65 | 0) {
           case 39:
            $5 = $3 + 2 | 0;
            $3 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 1) | 0) == 104;
            $6 = $3 ? $5 : $6;
            $4 = $3 ? -2 : -1;
            break label$29;

           case 43:
            $5 = $3 + 2 | 0;
            $3 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 1) | 0) == 108;
            $6 = $3 ? $5 : $6;
            $4 = $3 ? 3 : 1;
            break label$29;

           case 51:
           case 57:
            $4 = 1;
            break label$29;

           case 11:
            $4 = 2;
            break label$29;

           case 41:
            break label$29;

           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$30;

           default:
            break label$5;
           }
          }
          $4 = 0;
          $6 = $3;
         }
         $3 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
         $13 = ($3 & 47) == 3;
         $24 = $13 ? 1 : $4;
         $16 = $13 ? $3 | 32 : $3;
         label$35: {
          if (($16 | 0) == 91) {
           break label$35;
          }
          label$36: {
           if (($16 | 0) != 110) {
            if (($16 | 0) != 99) {
             break label$36;
            }
            $1 = ($1 | 0) > 1 ? $1 : 1;
            break label$35;
           }
           $4 = $18;
           store_int($12, $24, $17, $4);
           break label$9;
          }
          __shlim($0, 0, 0);
          while (1) {
           $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
           label$39: {
            if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
             SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
             break label$39;
            }
            $3 = __shgetc($0);
           }
           if (isspace($3)) {
            continue;
           }
           break;
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
           $3 = $3 - 1 | 0;
           SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
          }
          $4 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
          $7 = $4;
          $4 = $18;
          $5 = i64toi32_i32$HIGH_BITS;
          $9 = $4 + $5 | 0;
          $10 = $17;
          $8 = $10 + $7 | 0;
          $9 = $8 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
          $5 = $8;
          $4 = $9;
          $7 = $3 - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
          $9 = $7 >> 31;
          $10 = $7;
          $7 = $9;
          $9 = $4;
          $8 = $9 + $7 | 0;
          $4 = $10 + $5 | 0;
          $8 = $4 >>> 0 < $10 >>> 0 ? $8 + 1 | 0 : $8;
          $17 = $4;
          $18 = $8;
         }
         $8 = $1 >> 31;
         $19 = $8;
         $20 = $1;
         __shlim($0, $1, $8);
         $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
         $3 = SAFE_HEAP_LOAD_i32_4_4($0, 104);
         label$42: {
          if ($4 >>> 0 < $3 >>> 0) {
           SAFE_HEAP_STORE_i32_4_4($0, 4, $4 + 1 | 0);
           break label$42;
          }
          if ((__shgetc($0) | 0) < 0) {
           break label$5;
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4($0, 104);
         }
         if ($3) {
          SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
         }
         $3 = 16;
         label$45: {
          label$46: {
           label$47: {
            label$48: {
             label$49: {
              label$50: {
               label$51: {
                switch ($16 - 88 | 0) {
                default:
                 $1 = $16 - 65 | 0;
                 if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
                  break label$45;
                 }

                case 9:
                case 13:
                case 14:
                case 15:
                 __floatscan($11, $0, $24, 0);
                 $8 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
                 $1 = $8;
                 $5 = i64toi32_i32$HIGH_BITS;
                 $9 = $5;
                 $8 = SAFE_HEAP_LOAD_i32_4_4($0, 4) - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
                 $5 = $8 >> 31;
                 $10 = $8;
                 $7 = 0 - $8 | 0;
                 $4 = $5 + (($10 | 0) != 0) | 0;
                 $4 = 0 - $4 | 0;
                 $10 = $4;
                 $5 = $1;
                 $4 = $9;
                 $9 = $10;
                 if (($7 | 0) == ($5 | 0) & ($4 | 0) == ($9 | 0)) {
                  break label$3;
                 }
                 if (!$12) {
                  break label$45;
                 }
                 $5 = SAFE_HEAP_LOAD_i64_8_8($11, 8);
                 $20 = $5;
                 $4 = i64toi32_i32$HIGH_BITS;
                 $19 = $4;
                 $4 = SAFE_HEAP_LOAD_i64_8_8($11, 0);
                 $5 = i64toi32_i32$HIGH_BITS;
                 switch ($24 | 0) {
                 case 2:
                  break label$47;

                 case 1:
                  break label$48;

                 case 0:
                  break label$49;

                 default:
                  break label$45;
                 }
                 ;

                case 3:
                case 11:
                case 27:
                 if (($16 & 239) == 99) {
                  memset($11 + 32 | 0, -1, 257);
                  SAFE_HEAP_STORE_i32_1_1($11, 32, 0);
                  if (($16 | 0) != 115) {
                   break label$46;
                  }
                  SAFE_HEAP_STORE_i32_1_1($11, 65, 0);
                  SAFE_HEAP_STORE_i32_1_1($11, 46, 0);
                  SAFE_HEAP_STORE_i32_4_2($11, 42, 0);
                  break label$46;
                 }
                 $5 = $11 + 32 | 0;
                 $4 = SAFE_HEAP_LOAD_i32_1_U_1($6, 1);
                 $3 = ($4 | 0) == 94;
                 memset($5, $3, 257);
                 SAFE_HEAP_STORE_i32_1_1($11, 32, 0);
                 $13 = $3 ? $6 + 2 | 0 : $6 + 1 | 0;
                 label$58: {
                  label$59: {
                   label$60: {
                    $6 = SAFE_HEAP_LOAD_i32_1_U_1(($3 ? 2 : 1) + $6 | 0, 0);
                    if (($6 | 0) != 45) {
                     if (($6 | 0) == 93) {
                      break label$60;
                     }
                     $4 = ($4 | 0) != 94;
                     $6 = $13;
                     break label$58;
                    }
                    $4 = ($4 | 0) != 94;
                    SAFE_HEAP_STORE_i32_1_1($11, 78, $4);
                    break label$59;
                   }
                   $4 = ($4 | 0) != 94;
                   SAFE_HEAP_STORE_i32_1_1($11, 126, $4);
                  }
                  $6 = $13 + 1 | 0;
                 }
                 while (1) {
                  $3 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
                  label$63: {
                   if (($3 | 0) != 45) {
                    if (!$3) {
                     break label$5;
                    }
                    if (($3 | 0) != 93) {
                     break label$63;
                    }
                    break label$46;
                   }
                   $3 = 45;
                   $22 = SAFE_HEAP_LOAD_i32_1_U_1($6, 1);
                   if (!$22 | ($22 | 0) == 93) {
                    break label$63;
                   }
                   $13 = $6 + 1 | 0;
                   $6 = SAFE_HEAP_LOAD_i32_1_U_1($6 - 1 | 0, 0);
                   label$65: {
                    if ($22 >>> 0 <= $6 >>> 0) {
                     $3 = $22;
                     break label$65;
                    }
                    while (1) {
                     $6 = $6 + 1 | 0;
                     SAFE_HEAP_STORE_i32_1_1($6 + ($11 + 32 | 0) | 0, 0, $4);
                     $3 = SAFE_HEAP_LOAD_i32_1_U_1($13, 0);
                     if ($6 >>> 0 < $3 >>> 0) {
                      continue;
                     }
                     break;
                    }
                   }
                   $6 = $13;
                  }
                  SAFE_HEAP_STORE_i32_1_1(($3 + $11 | 0) + 33 | 0, 0, $4);
                  $6 = $6 + 1 | 0;
                  continue;
                 }
                 ;

                case 23:
                 $3 = 8;
                 break label$50;

                case 12:
                case 29:
                 $3 = 10;
                 break label$50;

                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$45;

                case 0:
                case 24:
                case 32:
                 break label$50;

                case 17:
                 break label$51;
                }
               }
               $3 = 0;
              }
              $5 = __intscan($0, $3, 0, -1, -1);
              $20 = $5;
              $4 = i64toi32_i32$HIGH_BITS;
              $19 = $4;
              $4 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
              $1 = $4;
              $5 = i64toi32_i32$HIGH_BITS;
              $3 = $5;
              $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4) - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
              $5 = $4 >> 31;
              $9 = $4;
              $8 = 0 - $4 | 0;
              $7 = $5 + (($9 | 0) != 0) | 0;
              $7 = 0 - $7 | 0;
              $5 = $1;
              $10 = $7;
              $7 = $3;
              if (($8 | 0) == ($5 | 0) & ($10 | 0) == ($7 | 0)) {
               break label$3;
              }
              if (!(!$12 | ($16 | 0) != 112)) {
               $5 = $19;
               SAFE_HEAP_STORE_i64_4_4($12, 0, $20, $5);
               break label$45;
              }
              $5 = $19;
              store_int($12, $24, $20, $5);
              break label$45;
             }
             $7 = $19;
             SAFE_HEAP_STORE_f32_4_4($12, 0, __trunctfsf2($4, $5, $20, $7));
             break label$45;
            }
            $7 = $5;
            $5 = $19;
            SAFE_HEAP_STORE_f64_8_8($12, 0, __trunctfdf2($4, $7, $20, $5));
            break label$45;
           }
           SAFE_HEAP_STORE_i64_8_8($12, 0, $4, $5);
           $5 = $19;
           SAFE_HEAP_STORE_i64_8_8($12, 8, $20, $5);
           break label$45;
          }
          $13 = ($16 | 0) == 99;
          $4 = $13 ? $1 + 1 | 0 : 31;
          $22 = ($24 | 0) != 1;
          label$69: {
           if (!$22) {
            $3 = $12;
            if ($21) {
             $3 = dlmalloc($4 << 2);
             if (!$3) {
              break label$6;
             }
            }
            SAFE_HEAP_STORE_i64_8_8($11, 296, 0, 0);
            $1 = 0;
            $14 = $21;
            while (1) {
             $15 = $3;
             label$73: {
              while (1) {
               $5 = $11;
               $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
               label$75: {
                if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
                 SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
                 $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
                 break label$75;
                }
                $3 = __shgetc($0);
               }
               if (!SAFE_HEAP_LOAD_i32_1_U_1(($5 + $3 | 0) + 33 | 0, 0)) {
                break label$73;
               }
               SAFE_HEAP_STORE_i32_1_1($11, 27, $3);
               $3 = mbrtowc($11 + 28 | 0, $11 + 27 | 0, 1, $11 + 296 | 0);
               if (($3 | 0) == -2) {
                continue;
               }
               if (($3 | 0) == -1) {
                break label$8;
               }
               if ($15) {
                SAFE_HEAP_STORE_i32_4_4(($1 << 2) + $15 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($11, 28));
                $1 = $1 + 1 | 0;
               }
               if (!(($1 | 0) == ($4 | 0) & $14)) {
                continue;
               }
               break;
              }
              $4 = $4 << 1 | 1;
              $3 = dlrealloc($15, $4 << 2);
              if ($3) {
               continue;
              }
              break label$8;
             }
             break;
            }
            if (!mbsinit($11 + 296 | 0)) {
             break label$8;
            }
            $14 = 0;
            break label$69;
           }
           if ($21) {
            $1 = 0;
            $3 = dlmalloc($4);
            if (!$3) {
             break label$6;
            }
            while (1) {
             $14 = $3;
             while (1) {
              $5 = $11;
              $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
              label$81: {
               if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
                SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
                $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
                break label$81;
               }
               $3 = __shgetc($0);
              }
              if (!SAFE_HEAP_LOAD_i32_1_U_1(($5 + $3 | 0) + 33 | 0, 0)) {
               $15 = 0;
               break label$69;
              }
              SAFE_HEAP_STORE_i32_1_1($1 + $14 | 0, 0, $3);
              $1 = $1 + 1 | 0;
              if (($4 | 0) != ($1 | 0)) {
               continue;
              }
              break;
             }
             $15 = 0;
             $4 = $4 << 1 | 1;
             $3 = dlrealloc($14, $4);
             if ($3) {
              continue;
             }
             break;
            }
            break label$5;
           }
           $1 = 0;
           if ($12) {
            while (1) {
             $5 = $11;
             $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
             label$86: {
              if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
               SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
               break label$86;
              }
              $3 = __shgetc($0);
             }
             if (!SAFE_HEAP_LOAD_i32_1_U_1(($5 + $3 | 0) + 33 | 0, 0)) {
              $15 = 0;
              $14 = $12;
              break label$69;
             }
             SAFE_HEAP_STORE_i32_1_1($1 + $12 | 0, 0, $3);
             $1 = $1 + 1 | 0;
             continue;
            }
           }
           while (1) {
            $5 = $11;
            $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
            label$90: {
             if ($1 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
              SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
              $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
              break label$90;
             }
             $1 = __shgetc($0);
            }
            if (SAFE_HEAP_LOAD_i32_1_U_1(($5 + $1 | 0) + 33 | 0, 0)) {
             continue;
            }
            break;
           }
           $14 = 0;
           $15 = 0;
           $1 = 0;
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
           $3 = $3 - 1 | 0;
           SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
          }
          $5 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
          $9 = $5;
          $7 = i64toi32_i32$HIGH_BITS;
          $4 = $7;
          $5 = $3 - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
          $7 = $5 >> 31;
          $10 = $5;
          $5 = $7;
          $7 = $4;
          $8 = $7 + $5 | 0;
          $4 = $9 + $10 | 0;
          $8 = $4 >>> 0 < $10 >>> 0 ? $8 + 1 | 0 : $8;
          $10 = !($8 | $4);
          $5 = $8;
          $7 = $20;
          $8 = $19;
          $9 = $5;
          if ($10 | (($4 | 0) != ($7 | 0) | ($8 | 0) != ($9 | 0) ? ($16 | 0) == 99 : 0)) {
           break label$3;
          }
          label$93: {
           if (!$21) {
            break label$93;
           }
           if (!$22) {
            SAFE_HEAP_STORE_i32_4_4($12, 0, $15);
            break label$93;
           }
           SAFE_HEAP_STORE_i32_4_4($12, 0, $14);
          }
          if ($13) {
           break label$45;
          }
          if ($15) {
           SAFE_HEAP_STORE_i32_4_4(($1 << 2) + $15 | 0, 0, 0);
          }
          if (!$14) {
           $14 = 0;
           break label$45;
          }
          SAFE_HEAP_STORE_i32_1_1($1 + $14 | 0, 0, 0);
         }
         $7 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
         $10 = $7;
         $8 = i64toi32_i32$HIGH_BITS;
         $7 = $18;
         $4 = $8 + $7 | 0;
         $9 = $17;
         $5 = $9 + $10 | 0;
         $8 = $5;
         $4 = $5 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
         $1 = $4;
         $10 = SAFE_HEAP_LOAD_i32_4_4($0, 4) - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
         $4 = $10 >> 31;
         $9 = $10;
         $10 = $4;
         $4 = $1;
         $5 = $4 + $10 | 0;
         $7 = $8 + $9 | 0;
         $17 = $7;
         $5 = $7 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5;
         $18 = $5;
         $23 = (($12 | 0) != 0) + $23 | 0;
        }
        $1 = $6 + 1 | 0;
        $6 = SAFE_HEAP_LOAD_i32_1_U_1($6, 1);
        if ($6) {
         continue;
        }
        break label$2;
       }
       break;
      }
      $14 = 0;
      break label$5;
     }
     $14 = 0;
     $15 = 0;
    }
    if ($23) {
     break label$3;
    }
   }
   $23 = -1;
  }
  if (!$21) {
   break label$2;
  }
  dlfree($14);
  dlfree($15);
 }
 if ($25) {
  __unlockfile($0);
 }
 __stack_pointer = $11 + 304 | 0;
 return $23;
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $11 = __stack_pointer - 560 | 0;
 __stack_pointer = $11;
 SAFE_HEAP_STORE_i32_4_4($11, 548, $10);
 SAFE_HEAP_STORE_i32_4_4($11, 552, $1);
 SAFE_HEAP_STORE_i32_4_4($11, 104, 42);
 $15 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 104 | 0);
 $1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
 SAFE_HEAP_STORE_i32_4_4($11, 132, $1);
 SAFE_HEAP_STORE_i32_4_4($11, 128, $1 + 400 | 0);
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 104 | 0);
 $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 88 | 0);
 $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 72 | 0);
 $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 56 | 0);
 $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 40 | 0);
 std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 119 | 0, $11 + 118 | 0, $17, $14, $12, $13, $11 + 36 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 0, std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8));
 $19 = $4 & 512;
 $20 = $19 >>> 9 | 0;
 $1 = 0;
 $2 = 0;
 while (1) {
  $10 = $2;
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      if (($1 | 0) == 4) {
       break label$5;
      }
      if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
       break label$5;
      }
      $4 = 0;
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           switch (SAFE_HEAP_LOAD_i32_1_1(($11 + 120 | 0) + $1 | 0, 0) | 0) {
           case 1:
            if (($1 | 0) == 3) {
             break label$3;
            }
            if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
             std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0, 0);
             std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($11 + 24 | 0));
             break label$9;
            }
            SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
            $0 = 0;
            break label$4;

           case 0:
            break label$10;

           case 4:
            break label$6;

           case 2:
            break label$7;

           case 3:
            break label$8;

           default:
            break label$2;
           }
          }
          if (($1 | 0) == 3) {
           break label$3;
          }
         }
         while (1) {
          if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
           break label$3;
          }
          if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
           break label$3;
          }
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0, 0);
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($11 + 24 | 0));
          continue;
         }
        }
        if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) | 0)) {
         break label$3;
        }
        label$14: {
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13)) {
           break label$14;
          }
         }
         $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12);
         $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
         if ($4) {
          if ((SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($12, 0), 0) | 0) == ($2 & 255)) {
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
           $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
           break label$2;
          }
          SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
          break label$3;
         }
         if ((SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($13, 0), 0) | 0) != ($2 & 255)) {
          break label$3;
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
         $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$2;
        }
        if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == (SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($12, 0), 0) | 0)) {
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
         break label$2;
        }
        if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == (SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($13, 0), 0) | 0)) {
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         SAFE_HEAP_STORE_i32_1_1($6, 0, 1);
         $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$2;
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       if (!($1 >>> 0 < 2 | $10)) {
        $2 = 0;
        if (!(($1 | 0) == 2 & (SAFE_HEAP_LOAD_i32_1_U_1($11, 123) | 0) != 0 | $20)) {
         break label$2;
        }
       }
       SAFE_HEAP_STORE_i32_4_4($11, 16, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14));
       $4 = std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 24 | 0, $11 + 16 | 0, 0);
       label$21: {
        if (!$1) {
         break label$21;
        }
        if (SAFE_HEAP_LOAD_i32_1_U_1(($1 + $11 | 0) + 119 | 0, 0) >>> 0 > 1) {
         break label$21;
        }
        while (1) {
         label$23: {
          SAFE_HEAP_STORE_i32_4_4($11, 16, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14));
          if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($4, $11 + 16 | 0)) {
           break label$23;
          }
          if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, SAFE_HEAP_LOAD_i32_1_1(std____2____wrap_iter_char_20const____operator__28_29_20const($4), 0))) {
           break label$23;
          }
          std____2____wrap_iter_char_20const____operator___28_29($4);
          continue;
         }
         break;
        }
        SAFE_HEAP_STORE_i32_4_4($11, 16, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14));
        $4 = decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($4, $11 + 16 | 0);
        if ($4 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($16) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($11, 16, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16));
         if (bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29(std____2____wrap_iter_char____operator__28long_29_20const($11 + 16 | 0, $4), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14))) {
          break label$21;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14));
        std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0, 0);
        SAFE_HEAP_STORE_i32_4_4($11, 24, SAFE_HEAP_LOAD_i32_4_4($11, 16));
       }
       SAFE_HEAP_STORE_i32_4_4($11, 16, SAFE_HEAP_LOAD_i32_4_4($11, 24));
       while (1) {
        label$26: {
         SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14));
         if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
          break label$26;
         }
         if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
          break label$26;
         }
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) != (SAFE_HEAP_LOAD_i32_1_U_1(std____2____wrap_iter_char_20const____operator__28_29_20const($11 + 16 | 0), 0) | 0)) {
          break label$26;
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         std____2____wrap_iter_char_20const____operator___28_29($11 + 16 | 0);
         continue;
        }
        break;
       }
       if (!$19) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($11, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14));
       if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
       $0 = 0;
       break label$4;
      }
      while (1) {
       label$28: {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
         break label$28;
        }
        $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
        label$29: {
         if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, $2)) {
          $18 = $9;
          $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
          if (($3 | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 548) | 0)) {
           void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
           $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
          }
          SAFE_HEAP_STORE_i32_4_4($18, 0, $3 + 1 | 0);
          SAFE_HEAP_STORE_i32_1_1($3, 0, $2);
          $4 = $4 + 1 | 0;
          break label$29;
         }
         if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17) | !$4) {
          break label$28;
         }
         if (($2 & 255) != (SAFE_HEAP_LOAD_i32_1_U_1($11, 118) & 255)) {
          break label$28;
         }
         $3 = $11;
         $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
         if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 128) | 0)) {
          void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
          $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
         }
         SAFE_HEAP_STORE_i32_4_4($3, 132, $2 + 4 | 0);
         SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
         $4 = 0;
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        continue;
       }
       break;
      }
      $3 = !$4;
      $18 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
      $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
      if (!(($18 | 0) == ($2 | 0) | $3)) {
       $3 = $11;
       if ((SAFE_HEAP_LOAD_i32_4_4($11, 128) | 0) == ($2 | 0)) {
        void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
       }
       SAFE_HEAP_STORE_i32_4_4($3, 132, $2 + 4 | 0);
       SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
      }
      label$38: {
       if ((SAFE_HEAP_LOAD_i32_4_4($11, 36) | 0) < 1) {
        break label$38;
       }
       label$39: {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == (SAFE_HEAP_LOAD_i32_1_U_1($11, 119) | 0)) {
          break label$39;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       while (1) {
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        if ((SAFE_HEAP_LOAD_i32_4_4($11, 36) | 0) < 1) {
         break label$38;
        }
        label$42: {
         if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
          if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
           break label$42;
          }
         }
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
         $0 = 0;
         break label$4;
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 548) | 0)) {
         void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
        }
        $4 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
        SAFE_HEAP_STORE_i32_4_4($9, 0, $2 + 1 | 0);
        SAFE_HEAP_STORE_i32_1_1($2, 0, $4);
        SAFE_HEAP_STORE_i32_4_4($11, 36, SAFE_HEAP_LOAD_i32_4_4($11, 36) - 1 | 0);
        continue;
       }
      }
      $2 = $10;
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) != (std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8) | 0)) {
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
      $0 = 0;
      break label$4;
     }
     label$45: {
      if (!$10) {
       break label$45;
      }
      $4 = 1;
      while (1) {
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) >>> 0 <= $4 >>> 0) {
        break label$45;
       }
       label$47: {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == (SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $4), 0) | 0)) {
          break label$47;
         }
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
        $0 = 0;
        break label$4;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
       $4 = $4 + 1 | 0;
       continue;
      }
     }
     $0 = 1;
     if ((std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15) | 0) == (SAFE_HEAP_LOAD_i32_4_4($11, 132) | 0)) {
      break label$4;
     }
     $0 = 0;
     SAFE_HEAP_STORE_i32_4_4($11, 24, 0);
     std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15), SAFE_HEAP_LOAD_i32_4_4($11, 132), $11 + 24 | 0);
     if (SAFE_HEAP_LOAD_i32_4_4($11, 24)) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
      break label$4;
     }
     $0 = 1;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
    std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    __stack_pointer = $11 + 560 | 0;
    return $0;
   }
   $2 = $10;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}

function printf_core($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $8 = __stack_pointer - 80 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i32_4_4($8, 76, $1);
 $22 = $8 + 55 | 0;
 $20 = $8 + 56 | 0;
 $1 = 0;
 label$1: {
  label$2: while (1) {
   label$3: {
    if (($15 | 0) < 0) {
     break label$3;
    }
    if ((2147483647 - $15 | 0) < ($1 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 61);
     $15 = -1;
     break label$3;
    }
    $15 = $1 + $15 | 0;
   }
   label$5: {
    label$7: {
     label$8: {
      $14 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
      $1 = $14;
      $7 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
      if ($7) {
       while (1) {
        label$11: {
         $7 = $7 & 255;
         label$12: {
          if (!$7) {
           $7 = $1;
           break label$12;
          }
          if (($7 | 0) != 37) {
           break label$11;
          }
          $7 = $1;
          while (1) {
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 37) {
            break label$12;
           }
           $9 = $1 + 2 | 0;
           SAFE_HEAP_STORE_i32_4_4($8, 76, $9);
           $7 = $7 + 1 | 0;
           $11 = SAFE_HEAP_LOAD_i32_1_U_1($1, 2);
           $1 = $9;
           if (($11 | 0) == 37) {
            continue;
           }
           break;
          }
         }
         $1 = $7 - $14 | 0;
         if ($0) {
          out($0, $14, $1);
         }
         if ($1) {
          continue label$2;
         }
         $19 = -1;
         $7 = 1;
         $9 = isdigit(SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($8, 76), 1));
         $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
         label$16: {
          if (!$9) {
           break label$16;
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) != 36) {
           break label$16;
          }
          $19 = SAFE_HEAP_LOAD_i32_1_1($1, 1) - 48 | 0;
          $21 = 1;
          $7 = 3;
         }
         $1 = $1 + $7 | 0;
         SAFE_HEAP_STORE_i32_4_4($8, 76, $1);
         $18 = 0;
         $11 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
         $9 = $11 - 32 | 0;
         label$17: {
          if ($9 >>> 0 > 31) {
           $7 = $1;
           break label$17;
          }
          $7 = $1;
          $9 = 1 << $9;
          if (!($9 & 75913)) {
           break label$17;
          }
          while (1) {
           $7 = $1 + 1 | 0;
           SAFE_HEAP_STORE_i32_4_4($8, 76, $7);
           $18 = $9 | $18;
           $11 = SAFE_HEAP_LOAD_i32_1_1($1, 1);
           $9 = $11 - 32 | 0;
           if ($9 >>> 0 >= 32) {
            break label$17;
           }
           $1 = $7;
           $9 = 1 << $9;
           if ($9 & 75913) {
            continue;
           }
           break;
          }
         }
         label$20: {
          if (($11 | 0) == 42) {
           label$22: {
            label$23: {
             if (!isdigit(SAFE_HEAP_LOAD_i32_1_1($7, 1))) {
              break label$23;
             }
             $7 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
             if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) != 36) {
              break label$23;
             }
             SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($7, 1) << 2) + $4 | 0) - 192 | 0, 0, 10);
             $1 = $7 + 3 | 0;
             $16 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($7, 1) << 3) + $3 | 0) - 384 | 0, 0);
             $21 = 1;
             break label$22;
            }
            if ($21) {
             break label$8;
            }
            $21 = 0;
            $16 = 0;
            if ($0) {
             $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
             SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
             $16 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
            }
            $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76) + 1 | 0;
           }
           SAFE_HEAP_STORE_i32_4_4($8, 76, $1);
           if (($16 | 0) > -1) {
            break label$20;
           }
           $16 = 0 - $16 | 0;
           $18 = $18 | 8192;
           break label$20;
          }
          $16 = getint($8 + 76 | 0);
          if (($16 | 0) < 0) {
           break label$8;
          }
          $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
         }
         $10 = -1;
         label$25: {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 46) {
           break label$25;
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) == 42) {
           label$27: {
            if (!isdigit(SAFE_HEAP_LOAD_i32_1_1($1, 2))) {
             break label$27;
            }
            $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
            if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 3) | 0) != 36) {
             break label$27;
            }
            SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($1, 2) << 2) + $4 | 0) - 192 | 0, 0, 10);
            $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($1, 2) << 3) + $3 | 0) - 384 | 0, 0);
            $1 = $1 + 4 | 0;
            SAFE_HEAP_STORE_i32_4_4($8, 76, $1);
            break label$25;
           }
           if ($21) {
            break label$8;
           }
           if ($0) {
            $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
            SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
            $10 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
           } else {
            $10 = 0;
           }
           $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76) + 2 | 0;
           SAFE_HEAP_STORE_i32_4_4($8, 76, $1);
           break label$25;
          }
          SAFE_HEAP_STORE_i32_4_4($8, 76, $1 + 1 | 0);
          $10 = getint($8 + 76 | 0);
          $1 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
         }
         $7 = 0;
         while (1) {
          $9 = $7;
          $17 = -1;
          if (SAFE_HEAP_LOAD_i32_1_1($1, 0) - 65 >>> 0 > 57) {
           break label$1;
          }
          $11 = $1 + 1 | 0;
          SAFE_HEAP_STORE_i32_4_4($8, 76, $11);
          $7 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
          $1 = $11;
          $7 = SAFE_HEAP_LOAD_i32_1_U_1((Math_imul($9, 58) + $7 | 0) + 7647 | 0, 0);
          if ($7 - 1 >>> 0 < 8) {
           continue;
          }
          break;
         }
         label$31: {
          label$32: {
           if (($7 | 0) != 19) {
            if (!$7) {
             break label$1;
            }
            if (($19 | 0) >= 0) {
             SAFE_HEAP_STORE_i32_4_4(($19 << 2) + $4 | 0, 0, $7);
             $13 = SAFE_HEAP_LOAD_i64_8_8(($19 << 3) + $3 | 0, 0);
             $12 = i64toi32_i32$HIGH_BITS;
             SAFE_HEAP_STORE_i64_8_8($8, 64, $13, $12);
             break label$32;
            }
            if (!$0) {
             break label$5;
            }
            pop_arg($8 - -64 | 0, $7, $2, $6);
            $11 = SAFE_HEAP_LOAD_i32_4_4($8, 76);
            break label$31;
           }
           if (($19 | 0) > -1) {
            break label$1;
           }
          }
          $1 = 0;
          if (!$0) {
           continue label$2;
          }
         }
         $12 = $18 & -65537;
         $7 = $18 & 8192 ? $12 : $18;
         $17 = 0;
         $19 = 1138;
         $18 = $20;
         label$35: {
          label$36: {
           label$37: {
            label$38: {
             label$39: {
              label$40: {
               label$41: {
                label$42: {
                 label$43: {
                  label$44: {
                   label$45: {
                    label$46: {
                     label$47: {
                      label$48: {
                       label$49: {
                        label$50: {
                         $1 = SAFE_HEAP_LOAD_i32_1_1($11 - 1 | 0, 0);
                         $1 = $9 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
                         switch ($1 - 88 | 0) {
                         case 11:
                          break label$35;

                         case 9:
                         case 13:
                         case 14:
                         case 15:
                          break label$36;

                         case 27:
                          break label$41;

                         case 12:
                         case 17:
                          break label$44;

                         case 23:
                          break label$45;

                         case 0:
                         case 32:
                          break label$46;

                         case 24:
                          break label$47;

                         case 22:
                          break label$48;

                         case 29:
                          break label$49;

                         case 1:
                         case 2:
                         case 3:
                         case 4:
                         case 5:
                         case 6:
                         case 7:
                         case 8:
                         case 10:
                         case 16:
                         case 18:
                         case 19:
                         case 20:
                         case 21:
                         case 25:
                         case 26:
                         case 28:
                         case 30:
                         case 31:
                          break label$7;

                         default:
                          break label$50;
                         }
                        }
                        label$51: {
                         switch ($1 - 65 | 0) {
                         case 0:
                         case 4:
                         case 5:
                         case 6:
                          break label$36;

                         case 2:
                          break label$39;

                         case 1:
                         case 3:
                          break label$7;

                         default:
                          break label$51;
                         }
                        }
                        if (($1 | 0) == 83) {
                         break label$40;
                        }
                        break label$7;
                       }
                       $12 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                       $9 = $12;
                       $13 = i64toi32_i32$HIGH_BITS;
                       $1 = $13;
                       break label$43;
                      }
                      $1 = 0;
                      label$52: {
                       switch ($9 & 255) {
                       case 0:
                        SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0, $15);
                        continue label$2;

                       case 1:
                        SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0, $15);
                        continue label$2;

                       case 2:
                        $7 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
                        $13 = $15 >> 31;
                        SAFE_HEAP_STORE_i64_8_8($7, 0, $15, $13);
                        continue label$2;

                       case 3:
                        SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0, $15);
                        continue label$2;

                       case 4:
                        SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0, $15);
                        continue label$2;

                       case 6:
                        SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0, $15);
                        continue label$2;

                       case 7:
                        break label$52;

                       default:
                        continue label$2;
                       }
                      }
                      $7 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
                      $13 = $15 >> 31;
                      SAFE_HEAP_STORE_i64_8_8($7, 0, $15, $13);
                      continue label$2;
                     }
                     $10 = $10 >>> 0 > 8 ? $10 : 8;
                     $7 = $7 | 8;
                     $1 = 120;
                    }
                    $13 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                    $12 = i64toi32_i32$HIGH_BITS;
                    $14 = fmt_x($13, $12, $20, $1 & 32);
                    $9 = !($7 & 8);
                    $12 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                    $13 = i64toi32_i32$HIGH_BITS;
                    if ($9 | !($12 | $13)) {
                     break label$42;
                    }
                    $19 = ($1 >>> 4 | 0) + 1138 | 0;
                    $17 = 2;
                    break label$42;
                   }
                   $13 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                   $12 = i64toi32_i32$HIGH_BITS;
                   $14 = fmt_o($13, $12, $20);
                   if (!($7 & 8)) {
                    break label$42;
                   }
                   $1 = $20 - $14 | 0;
                   $10 = ($1 | 0) < ($10 | 0) ? $10 : $1 + 1 | 0;
                   break label$42;
                  }
                  $12 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                  $9 = $12;
                  $13 = i64toi32_i32$HIGH_BITS;
                  $1 = $13;
                  if (($13 | 0) < -1 ? 1 : ($13 | 0) <= -1) {
                   $12 = $9;
                   $9 = 0 - $12 | 0;
                   $13 = $1;
                   $12 = $13 + (($12 | 0) != 0) | 0;
                   $12 = 0 - $12 | 0;
                   $1 = $12;
                   SAFE_HEAP_STORE_i64_8_8($8, 64, $9, $12);
                   $17 = 1;
                   break label$43;
                  }
                  if ($7 & 2048) {
                   $17 = 1;
                   $19 = 1139;
                   break label$43;
                  }
                  $17 = $7 & 1;
                  $19 = $17 ? 1140 : 1138;
                 }
                 $12 = $1;
                 $14 = fmt_u($9, $12, $20);
                }
                $7 = ($10 | 0) > -1 ? $7 & -65537 : $7;
                $12 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
                $9 = $12;
                $13 = i64toi32_i32$HIGH_BITS;
                $1 = $13;
                if (!(($9 | 0) != 0 | ($13 | 0) != 0 | $10)) {
                 $10 = 0;
                 $14 = $20;
                 break label$7;
                }
                $1 = !($9 | $1) + ($20 - $14 | 0) | 0;
                $10 = ($1 | 0) < ($10 | 0) ? $10 : $1;
                break label$7;
               }
               $1 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
               $14 = $1 ? $1 : 2882;
               $1 = memchr($14, 0, $10);
               $18 = $1 ? $1 : $10 + $14 | 0;
               $7 = $12;
               $10 = $1 ? $1 - $14 | 0 : $10;
               break label$7;
              }
              if ($10) {
               $9 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
               break label$38;
              }
              $1 = 0;
              pad($0, 32, $16, 0, $7);
              break label$37;
             }
             SAFE_HEAP_STORE_i32_4_4($8, 12, 0);
             $1 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
             $13 = i64toi32_i32$HIGH_BITS;
             SAFE_HEAP_STORE_i64_4_4($8, 8, $1, $13);
             SAFE_HEAP_STORE_i32_4_4($8, 64, $8 + 8 | 0);
             $10 = -1;
             $9 = $8 + 8 | 0;
            }
            $1 = 0;
            label$63: {
             while (1) {
              $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
              if (!$11) {
               break label$63;
              }
              $11 = wctomb($8 + 4 | 0, $11);
              $14 = ($11 | 0) < 0;
              if (!($14 | $10 - $1 >>> 0 < $11 >>> 0)) {
               $9 = $9 + 4 | 0;
               $1 = $1 + $11 | 0;
               if ($10 >>> 0 > $1 >>> 0) {
                continue;
               }
               break label$63;
              }
              break;
             }
             $17 = -1;
             if ($14) {
              break label$1;
             }
            }
            pad($0, 32, $16, $1, $7);
            if (!$1) {
             $1 = 0;
             break label$37;
            }
            $9 = 0;
            $11 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
            while (1) {
             $14 = SAFE_HEAP_LOAD_i32_4_4($11, 0);
             if (!$14) {
              break label$37;
             }
             $14 = wctomb($8 + 4 | 0, $14);
             $9 = $14 + $9 | 0;
             if (($9 | 0) > ($1 | 0)) {
              break label$37;
             }
             out($0, $8 + 4 | 0, $14);
             $11 = $11 + 4 | 0;
             if ($1 >>> 0 > $9 >>> 0) {
              continue;
             }
             break;
            }
           }
           pad($0, 32, $16, $1, $7 ^ 8192);
           $1 = ($1 | 0) < ($16 | 0) ? $16 : $1;
           continue label$2;
          }
          $1 = FUNCTION_TABLE[$5 | 0]($0, SAFE_HEAP_LOAD_f64_8_8($8, 64), $16, $10, $7, $1) | 0;
          continue label$2;
         }
         $13 = SAFE_HEAP_LOAD_i64_8_8($8, 64);
         SAFE_HEAP_STORE_i64_1_1($8, 55, $13, i64toi32_i32$HIGH_BITS);
         $10 = 1;
         $14 = $22;
         $7 = $12;
         break label$7;
        }
        $9 = $1 + 1 | 0;
        SAFE_HEAP_STORE_i32_4_4($8, 76, $9);
        $7 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
        $1 = $9;
        continue;
       }
      }
      $17 = $15;
      if ($0) {
       break label$1;
      }
      if (!$21) {
       break label$5;
      }
      $1 = 1;
      while (1) {
       $7 = SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + $4 | 0, 0);
       if ($7) {
        pop_arg(($1 << 3) + $3 | 0, $7, $2, $6);
        $17 = 1;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 10) {
         continue;
        }
        break label$1;
       }
       break;
      }
      $17 = 1;
      if ($1 >>> 0 >= 10) {
       break label$1;
      }
      while (1) {
       if (SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + $4 | 0, 0)) {
        break label$8;
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 10) {
        continue;
       }
       break;
      }
      break label$1;
     }
     $17 = -1;
     break label$1;
    }
    $11 = $18 - $14 | 0;
    $18 = ($10 | 0) < ($11 | 0) ? $11 : $10;
    $9 = $18 + $17 | 0;
    $1 = ($9 | 0) > ($16 | 0) ? $9 : $16;
    pad($0, 32, $1, $9, $7);
    out($0, $19, $17);
    pad($0, 48, $1, $9, $7 ^ 65536);
    pad($0, 48, $18, $11, 0);
    out($0, $14, $11);
    pad($0, 32, $1, $9, $7 ^ 8192);
    continue;
   }
   break;
  }
  $17 = 0;
 }
 __stack_pointer = $8 + 80 | 0;
 return $17;
}

function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 $15 = __stack_pointer - 96 | 0;
 __stack_pointer = $15;
 $10 = $3;
 $13 = 0;
 $11 = $2;
 $25 = $13 | $11;
 $10 = 0;
 $9 = $10;
 $10 = $3;
 $9 = $9 | $10;
 $26 = $9;
 $10 = $7;
 $13 = $10 << 15;
 $12 = $13;
 $13 = $6;
 $10 = $13 >>> 17 | 0;
 $9 = $5;
 $11 = ($13 & 131071) << 15 | $9 >>> 17;
 $13 = 0;
 $23 = $13 | $11;
 $9 = $10;
 $10 = $12;
 $9 = $9 | $10;
 $9 = $8;
 $13 = $9 & 65535;
 $27 = $13;
 $10 = $7;
 $21 = $10;
 $9 = $10;
 $14 = $9 << 15;
 $10 = $13 << 15 | $9 >>> 17;
 $12 = $10;
 $10 = $6;
 $11 = $10 >>> 17 | 0;
 $9 = 0;
 $13 = $9;
 $10 = $14;
 $33 = $10 | $11;
 $9 = $12;
 $13 = $9 | $13;
 $30 = $13;
 $13 = $4;
 $10 = $8;
 $10 = $13 ^ $10;
 $9 = $3;
 $11 = $7;
 $9 = $10 & -2147483648;
 $16 = $9;
 $9 = $4;
 $13 = $9 & 65535;
 $20 = $13;
 $10 = $3;
 $22 = $10;
 $31 = $13;
 $10 = 0;
 $34 = $10;
 $10 = $27;
 $9 = $10 >>> 17 | 0;
 $37 = ($10 & 131071) << 15 | $11 >>> 17;
 $9 = $8;
 $18 = $9 >>> 16 & 32767;
 $10 = 0;
 $13 = $4;
 $32 = $13 >>> 16 & 32767;
 label$1: {
  label$2: {
   if ($18 - 1 >>> 0 < 32766 ? $32 - 1 >>> 0 <= 32765 : 0) {
    break label$2;
   }
   $10 = $2;
   $14 = !($10 | $1);
   $10 = $4;
   $9 = $10 & 2147483647;
   $28 = $9;
   $12 = $9 >>> 0 < 2147418112;
   $10 = $9;
   $13 = $3;
   $24 = $13;
   $11 = $13;
   if (!(!$11 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $13 = $3;
    $17 = $13;
    $11 = $4;
    $10 = $11 | 32768;
    $16 = $10;
    break label$1;
   }
   $10 = $6;
   $14 = !($10 | $5);
   $10 = $8;
   $13 = $10 & 2147483647;
   $4 = $13;
   $12 = $13 >>> 0 < 2147418112;
   $10 = $13;
   $11 = $7;
   $3 = $11;
   $9 = $11;
   if (!(!$9 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $11 = $7;
    $17 = $11;
    $9 = $8;
    $10 = $9 | 32768;
    $16 = $10;
    $1 = $5;
    $10 = $6;
    $2 = $10;
    break label$1;
   }
   $10 = $28;
   $11 = $10 ^ 2147418112;
   $9 = $24;
   $13 = $9;
   $10 = $1;
   $9 = $11;
   $11 = $2;
   $9 = $9 | $11;
   if (!($13 | $10 | $9)) {
    $9 = $4;
    $10 = $6;
    $10 = $9 | $10;
    $13 = $5;
    $11 = $3;
    if (!($10 | ($13 | $11))) {
     $16 = 2147450880;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $9 = $17;
    $17 = $9;
    $10 = $16;
    $11 = $10 | 2147418112;
    $16 = $11;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $11 = $4;
   $9 = $11 ^ 2147418112;
   $7 = $9;
   $10 = $3;
   $13 = $10;
   $11 = $5;
   $9 = $6;
   $10 = $7;
   $10 = $9 | $10;
   if (!($13 | $11 | $10)) {
    $9 = $1;
    $13 = $24;
    $3 = $9 | $13;
    $10 = $2;
    $11 = $28;
    $11 = $10 | $11;
    $1 = 0;
    $2 = 0;
    if (!($11 | $3)) {
     $16 = 2147450880;
     break label$1;
    }
    $10 = $17;
    $17 = $10;
    $11 = $16;
    $9 = $11 | 2147418112;
    $16 = $9;
    break label$1;
   }
   $9 = $2;
   $10 = $28;
   $10 = $9 | $10;
   $13 = $24;
   $11 = $1;
   if (!($10 | ($13 | $11))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $4;
   $11 = $6;
   $11 = $10 | $11;
   $9 = $3;
   $13 = $5;
   if (!($11 | ($9 | $13))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $9 = 65535;
   $11 = $28;
   if (($11 | 0) == 65535 | $11 >>> 0 < 65535) {
    $10 = $20;
    $19 = !($10 | $22);
    $14 = $19;
    $9 = $14 ? $1 : $22;
    $10 = $2;
    $11 = $20;
    $13 = $14 ? $10 : $11;
    $10 = Math_clz32($13);
    $9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
    $10 = $19 << 6;
    $11 = $9 + $10 | 0;
    $12 = $2;
    $9 = $20;
    __ashlti3($15 + 80 | 0, $1, $12, $22, $9, $11 - 15 | 0);
    $19 = 16 - $11 | 0;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15, 80);
    $1 = $9;
    $12 = i64toi32_i32$HIGH_BITS;
    $2 = $12;
    $9 = 0;
    $7 = $9;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 88 | 0, 0);
    $22 = $9;
    $14 = i64toi32_i32$HIGH_BITS;
    $20 = $14;
    $10 = 0;
    $25 = $10 | $12;
    $9 = $7;
    $12 = $22;
    $12 = $9 | $12;
    $26 = $12;
    $12 = $20;
    $31 = $12;
    $14 = 0;
    $34 = $14;
    $9 = 0;
   }
   $10 = -1;
   $14 = $4;
   if ($14 >>> 0 > 65535) {
    break label$2;
   }
   $12 = $27;
   $3 = !($12 | $21);
   $13 = $3;
   $9 = $13 ? $5 : $21;
   $12 = $6;
   $14 = $27;
   $10 = $13 ? $12 : $14;
   $12 = Math_clz32($10);
   $11 = 0;
   $9 = ($12 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $12;
   $12 = $3 << 6;
   $14 = $9 + $12 | 0;
   $11 = $6;
   $9 = $27;
   __ashlti3($15 - -64 | 0, $5, $11, $21, $9, $14 - 15 | 0);
   $19 = ($19 - $14 | 0) + 16 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15, 64);
   $5 = $9;
   $11 = i64toi32_i32$HIGH_BITS;
   $6 = $11;
   $10 = $11 >>> 17 | 0;
   $9 = 0;
   $8 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 72 | 0, 0);
   $3 = $9;
   $13 = i64toi32_i32$HIGH_BITS;
   $4 = $13;
   $11 = $9;
   $9 = $13 << 15 | $9 >>> 17;
   $7 = $9;
   $13 = $10;
   $12 = $11 << 15;
   $33 = $13 | $12;
   $9 = $8;
   $11 = $7;
   $11 = $9 | $11;
   $30 = $11;
   $9 = $3;
   $13 = $9 << 15;
   $7 = $13;
   $13 = $6;
   $9 = $13 >>> 17 | 0;
   $11 = $5;
   $12 = ($13 & 131071) << 15 | $11 >>> 17;
   $11 = $9;
   $13 = 0;
   $23 = $13 | $12;
   $9 = $7;
   $11 = $9 | $11;
   $11 = $4;
   $13 = $11 >>> 17 | 0;
   $9 = $3;
   $37 = ($11 & 131071) << 15 | $9 >>> 17;
   $10 = 17;
  }
  $11 = $23;
  $3 = $11;
  $11 = 0;
  $8 = $11;
  $9 = 0;
  $4 = $9;
  $11 = $9;
  $13 = $1;
  $7 = $13;
  $13 = $8;
  $13 = __wasm_i64_mul($3, $11, $1, $13);
  $35 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $36 = $11;
  $11 = $6;
  $9 = $5;
  $11 = $9 << 15;
  $1 = $11 & -32768;
  $11 = 0;
  $6 = $11;
  $9 = 0;
  $2 = $9;
  $11 = $9;
  $13 = $25;
  $5 = $13;
  $13 = $6;
  $13 = __wasm_i64_mul($1, $11, $5, $13);
  $12 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $13 = $11;
  $11 = $36;
  $14 = $13 + $11 | 0;
  $9 = $35;
  $10 = $9 + $12 | 0;
  $14 = $10 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
  $25 = $10;
  $26 = $14;
  $11 = $10;
  $9 = $11;
  $21 = 0;
  $9 = $2;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $9, $7, $11);
  $12 = $11;
  $9 = i64toi32_i32$HIGH_BITS;
  $11 = $9;
  $9 = $10;
  $10 = $9 + $11 | 0;
  $14 = $21;
  $13 = $14 + $12 | 0;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $23 = $13;
  $29 = $10;
  $14 = $9;
  $9 = $13;
  $12 = $21;
  $38 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $12 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $9 = $4;
  $10 = $6;
  $10 = __wasm_i64_mul($3, $9, $5, $10);
  $41 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $42 = $9;
  $10 = 0;
  $27 = $10;
  $10 = $2;
  $12 = $22;
  $21 = $12;
  $12 = $27;
  $12 = __wasm_i64_mul($1, $10, $21, $12);
  $14 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $42;
  $13 = $10 + $12 | 0;
  $9 = $41;
  $11 = $9 + $14 | 0;
  $13 = $11 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
  $24 = $11;
  $28 = $13;
  $10 = $33;
  $22 = $10;
  $9 = 0;
  $20 = $9;
  $10 = $8;
  $10 = __wasm_i64_mul($22, $9, $7, $10);
  $14 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $10 = $9;
  $9 = $28;
  $11 = $9 + $10 | 0;
  $13 = $24;
  $12 = $13 + $14 | 0;
  $33 = $12;
  $11 = $12 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
  $30 = $11;
  $13 = $36;
  $11 = $26;
  $9 = $25;
  $14 = $35;
  $14 = ($13 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $11 >>> 0 < $13 >>> 0;
  $11 = $14;
  $14 = 0;
  $9 = $14;
  $9 = $9 | $11;
  $14 = $9;
  $11 = $26;
  $13 = $11;
  $11 = 0;
  $13 = $13 | $11;
  $10 = $13 + $12 | 0;
  $9 = $30;
  $11 = $14;
  $12 = $9 + $11 | 0;
  $35 = $10;
  $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $36 = $12;
  $12 = $4;
  $14 = $27;
  $14 = __wasm_i64_mul($3, $12, $21, $14);
  $43 = $14;
  $12 = i64toi32_i32$HIGH_BITS;
  $44 = $12;
  $12 = $34;
  $26 = $12;
  $14 = $2;
  $9 = $31;
  $25 = $9 | 65536;
  $9 = $12;
  $9 = __wasm_i64_mul($1, $14, $25, $9);
  $13 = $9;
  $12 = $43;
  $11 = $9 + $12 | 0;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14;
  $14 = $44;
  $10 = $9 + $14 | 0;
  $31 = $11;
  $10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
  $34 = $10;
  $10 = $6;
  $12 = $20;
  $12 = __wasm_i64_mul($5, $10, $22, $12);
  $13 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $34;
  $11 = $10 + $12 | 0;
  $14 = $31;
  $9 = $13 + $14 | 0;
  $11 = $9 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
  $39 = $9;
  $40 = $11;
  $10 = $37;
  $11 = $10 & 2147483647;
  $1 = $11 | -2147483648;
  $14 = 0;
  $10 = $14;
  $2 = $10;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $10, $7, $11);
  $13 = $11;
  $10 = i64toi32_i32$HIGH_BITS;
  $11 = $10;
  $10 = $40;
  $9 = $10 + $11 | 0;
  $14 = $39;
  $12 = $13 + $14 | 0;
  $37 = $12;
  $9 = $13 >>> 0 > $12 >>> 0 ? $9 + 1 | 0 : $9;
  $45 = $9;
  $10 = $12;
  $14 = $36;
  $12 = $10 + $14 | 0;
  $9 = $35;
  $13 = 0;
  $11 = $9 + $13 | 0;
  $46 = $11;
  $12 = $11 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $47 = $12;
  $9 = $12;
  $13 = $46;
  $14 = $38;
  $10 = $13 + $14 | 0;
  $7 = $10;
  $11 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
  $8 = $11;
  $18 = (($18 + $32 | 0) + $19 | 0) - 16383 | 0;
  $11 = $27;
  $14 = $20;
  $14 = __wasm_i64_mul($21, $11, $22, $14);
  $19 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $9 = $11;
  $11 = $4;
  $14 = $26;
  $14 = __wasm_i64_mul($3, $11, $25, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $9;
  $10 = $11 + $14 | 0;
  $12 = $19;
  $9 = $13 + $12 | 0;
  $10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
  $3 = $9;
  $4 = $10;
  $12 = $11;
  $13 = $19;
  $19 = ($10 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $10 >>> 0 < $12 >>> 0;
  $11 = $2;
  $10 = $6;
  $10 = __wasm_i64_mul($1, $11, $5, $10);
  $12 = $10;
  $11 = i64toi32_i32$HIGH_BITS;
  $10 = $11;
  $11 = $4;
  $9 = $10 + $11 | 0;
  $13 = $3;
  $14 = $13 + $12 | 0;
  $9 = $14 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
  $5 = $14;
  $6 = $9;
  $13 = $11;
  $11 = $14;
  $12 = $3;
  $13 = ($9 | 0) == ($13 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $14 = 0;
  $12 = $19;
  $10 = $13 + $12 | 0;
  $38 = $10;
  $14 = $10 >>> 0 < $13 >>> 0 ? 1 : $14;
  $19 = $14;
  $14 = $28;
  $12 = $42;
  $13 = $41;
  $11 = $24;
  $3 = ($14 | 0) == ($12 | 0) & $13 >>> 0 > $11 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $11 = $14;
  $14 = $30;
  $13 = $24;
  $12 = $33;
  $14 = ($11 | 0) == ($14 | 0) & $13 >>> 0 > $12 >>> 0 | $11 >>> 0 > $14 >>> 0;
  $10 = 0;
  $12 = $3;
  $9 = $14 + $12 | 0;
  $10 = $9 >>> 0 < $14 >>> 0 ? 1 : $10;
  $14 = $9;
  $12 = $10;
  $10 = $6;
  $9 = $10 + $12 | 0;
  $13 = $5;
  $11 = $13 + $14 | 0;
  $9 = $11 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
  $3 = $11;
  $4 = $9;
  $13 = $10;
  $10 = $11;
  $14 = $5;
  $13 = ($9 | 0) == ($13 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $10 = $19;
  $14 = $38;
  $12 = $13 + $14 | 0;
  $6 = $12;
  $11 = $13 >>> 0 > $12 >>> 0 ? $10 + 1 | 0 : $10;
  $5 = $11;
  $11 = $2;
  $14 = $26;
  $14 = __wasm_i64_mul($1, $11, $25, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $5;
  $12 = $11 + $14 | 0;
  $10 = $6;
  $9 = $13 + $10 | 0;
  $12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $28 = $9;
  $24 = $12;
  $12 = $2;
  $10 = $27;
  $10 = __wasm_i64_mul($1, $12, $21, $10);
  $5 = $10;
  $12 = i64toi32_i32$HIGH_BITS;
  $6 = $12;
  $12 = $20;
  $10 = $26;
  $10 = __wasm_i64_mul($22, $12, $25, $10);
  $13 = $10;
  $11 = $5;
  $14 = $10 + $11 | 0;
  $12 = i64toi32_i32$HIGH_BITS;
  $10 = $12;
  $12 = $6;
  $9 = $10 + $12 | 0;
  $1 = $14;
  $9 = $13 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
  $2 = $9;
  $11 = $12;
  $13 = $5;
  $12 = $14;
  $13 = ($9 | 0) == ($11 | 0) & $13 >>> 0 > $12 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $13;
  $13 = 0;
  $12 = $13;
  $13 = $9;
  $12 = $13 | $12;
  $13 = $28;
  $9 = 0;
  $11 = $2;
  $11 = $9 | $11;
  $10 = $13 + $11 | 0;
  $9 = $12;
  $12 = $24;
  $14 = $9 + $12 | 0;
  $6 = $10;
  $14 = $10 >>> 0 < $11 >>> 0 ? $14 + 1 | 0 : $14;
  $5 = $14;
  $12 = $1;
  $14 = $4;
  $13 = $14;
  $10 = $13 + $12 | 0;
  $11 = 0;
  $14 = $3;
  $9 = $11 + $14 | 0;
  $10 = $9 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
  $1 = $9;
  $2 = $10;
  $14 = $13;
  $11 = $3;
  $14 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $13 = $5;
  $9 = $13;
  $11 = $6;
  $12 = $11 + $14 | 0;
  $20 = $12;
  $9 = $12 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
  $4 = $9;
  $9 = $45;
  $11 = $40;
  $13 = $37;
  $14 = $39;
  $5 = ($9 | 0) == ($11 | 0) & $13 >>> 0 < $14 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $44;
  $13 = $34;
  $11 = $43;
  $14 = $31;
  $3 = ($9 | 0) == ($13 | 0) & $11 >>> 0 > $14 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $14 = $13;
  $11 = $31;
  $13 = $40;
  $9 = $39;
  $13 = ($14 | 0) == ($13 | 0) & $11 >>> 0 > $9 >>> 0 | $13 >>> 0 < $14 >>> 0;
  $12 = 0;
  $9 = $3;
  $10 = $9 + $13 | 0;
  $12 = $10 >>> 0 < $13 >>> 0 ? 1 : $12;
  $9 = $12;
  $11 = $5;
  $14 = $10 + $11 | 0;
  $12 = $14;
  $11 = $12;
  $12 = 0;
  $10 = $12;
  $10 = $10 | $11;
  $3 = $10;
  $11 = $45;
  $13 = $11;
  $11 = $48;
  $13 = $13 | $11;
  $12 = $1;
  $9 = $13 + $12 | 0;
  $10 = $2;
  $11 = $3;
  $14 = $10 + $11 | 0;
  $5 = $9;
  $14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
  $6 = $14;
  $12 = $10;
  $13 = $1;
  $12 = ($14 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $10 = $4;
  $9 = $10;
  $13 = $20;
  $11 = $13 + $12 | 0;
  $9 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
  $2 = $11;
  $1 = $9;
  $9 = $30;
  $13 = $36;
  $10 = $33;
  $12 = $35;
  $3 = ($9 | 0) == ($13 | 0) & $10 >>> 0 > $12 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $9 = $47;
  $10 = $13;
  $13 = $46;
  $9 = ($9 | 0) == ($10 | 0) & $12 >>> 0 > $13 >>> 0 | $9 >>> 0 < $10 >>> 0;
  $13 = $3;
  $14 = $9 + $13 | 0;
  $11 = 0;
  $11 = $9 >>> 0 > $14 >>> 0 ? 1 : $11;
  $9 = $14;
  $12 = $5;
  $10 = $9 + $12 | 0;
  $13 = $11;
  $11 = $6;
  $14 = $13 + $11 | 0;
  $3 = $10;
  $14 = $9 >>> 0 > $10 >>> 0 ? $14 + 1 | 0 : $14;
  $4 = $14;
  $12 = $11;
  $9 = $5;
  $12 = ($14 | 0) == ($12 | 0) & $9 >>> 0 > $10 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $11 = $1;
  $10 = $11;
  $9 = $2;
  $13 = $9 + $12 | 0;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $1 = $13;
  $2 = $10;
  $9 = $10 & 65536;
  label$13: {
   if ($9) {
    $18 = $18 + 1 | 0;
    break label$13;
   }
   $9 = $29;
   $5 = $9 >>> 31 | 0;
   $11 = 0;
   $6 = $11;
   $9 = $1;
   $1 = $9 << 1;
   $11 = $2;
   $10 = $11 << 1 | $9 >>> 31;
   $2 = $10;
   $10 = $4;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $1;
   $1 = $10 | $12;
   $9 = $2;
   $11 = $9 | $11;
   $2 = $11;
   $9 = $3;
   $3 = $9 << 1;
   $11 = $4;
   $10 = $11 << 1 | $9 >>> 31;
   $4 = $10;
   $10 = $8;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $3;
   $3 = $10 | $12;
   $9 = $4;
   $11 = $9 | $11;
   $4 = $11;
   $9 = $23;
   $23 = $9 << 1;
   $11 = $29;
   $10 = $11 << 1 | $9 >>> 31;
   $29 = $10;
   $11 = $7;
   $10 = $8;
   $9 = $10 << 1 | $11 >>> 31;
   $8 = $9;
   $10 = $5;
   $12 = $11 << 1;
   $7 = $10 | $12;
   $9 = $6;
   $11 = $8;
   $11 = $9 | $11;
   $8 = $11;
  }
  if (($18 | 0) >= 32767) {
   $9 = $17;
   $17 = $9;
   $11 = $16;
   $10 = $11 | 2147418112;
   $16 = $10;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  label$16: {
   if (($18 | 0) <= 0) {
    $32 = 1 - $18 | 0;
    if ($32 >>> 0 >= 128) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $10 = $29;
    $9 = $8;
    $18 = $18 + 127 | 0;
    __ashlti3($15 + 48 | 0, $23, $10, $7, $9, $18);
    $9 = $4;
    $10 = $2;
    __ashlti3($15 + 32 | 0, $3, $9, $1, $10, $18);
    $10 = $29;
    $9 = $8;
    __lshrti3($15 + 16 | 0, $23, $10, $7, $9, $32);
    $9 = $4;
    $10 = $2;
    __lshrti3($15, $3, $9, $1, $10, $32);
    $10 = SAFE_HEAP_LOAD_i64_8_8($15, 32);
    $9 = i64toi32_i32$HIGH_BITS;
    $1 = $9;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15, 16);
    $3 = $10 | $9;
    $10 = i64toi32_i32$HIGH_BITS;
    $9 = $10;
    $10 = $1;
    $9 = $9 | $10;
    $2 = $9;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15, 48);
    $10 = $9;
    $11 = i64toi32_i32$HIGH_BITS;
    $1 = $11;
    $11 = SAFE_HEAP_LOAD_i64_8_8($15 + 56 | 0, 0);
    $12 = $11;
    $9 = i64toi32_i32$HIGH_BITS;
    $11 = $9;
    $9 = $1;
    $11 = $9 | $11;
    $9 = $10 | $12;
    $10 = ($9 | 0) != 0 | ($11 | 0) != 0;
    $12 = $3;
    $23 = $10 | $12;
    $9 = $2;
    $29 = $9;
    $11 = SAFE_HEAP_LOAD_i64_8_8($15 + 40 | 0, 0);
    $9 = $11;
    $12 = i64toi32_i32$HIGH_BITS;
    $2 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($15 + 24 | 0, 0);
    $11 = i64toi32_i32$HIGH_BITS;
    $1 = $11;
    $10 = $12;
    $7 = $9 | $10;
    $11 = $2;
    $12 = $1;
    $12 = $11 | $12;
    $8 = $12;
    $12 = SAFE_HEAP_LOAD_i64_8_8($15 + 8 | 0, 0);
    $1 = $12;
    $9 = i64toi32_i32$HIGH_BITS;
    $2 = $9;
    $9 = SAFE_HEAP_LOAD_i64_8_8($15, 0);
    $3 = $9;
    $12 = i64toi32_i32$HIGH_BITS;
    $4 = $12;
    break label$16;
   }
   $12 = $2;
   $9 = $12 & 65535;
   $2 = $9;
   $12 = $18;
   $11 = $12 << 16;
   $12 = $11;
   $9 = $1;
   $10 = 0;
   $1 = $9 | $10;
   $11 = $2;
   $12 = $11 | $12;
   $2 = $12;
  }
  $10 = $17;
  $11 = $1;
  $17 = $10 | $11;
  $9 = $16;
  $12 = $2;
  $9 = $9 | $12;
  $16 = $9;
  $9 = $29;
  $2 = !($9 | $23);
  $9 = $8;
  $1 = ($9 | 0) > -1;
  $10 = $7;
  $12 = $8;
  if (!(!$10 & ($12 | 0) == -2147483648 ? $2 : $1)) {
   $10 = $4;
   $11 = $3;
   $14 = $11 + 1 | 0;
   $13 = $14 >>> 0 < 1 ? $10 + 1 | 0 : $10;
   $1 = $14;
   $2 = $13;
   $11 = $10;
   $9 = $3;
   $10 = $14;
   $11 = ($13 | 0) == ($11 | 0) & $9 >>> 0 > $10 >>> 0 | $11 >>> 0 > $13 >>> 0;
   $10 = $16;
   $9 = $17;
   $12 = $9 + $11 | 0;
   $17 = $12;
   $14 = $11 >>> 0 > $12 >>> 0 ? $10 + 1 | 0 : $10;
   $16 = $14;
   break label$1;
  }
  $14 = $8;
  $9 = $14 ^ -2147483648;
  $10 = $9;
  $11 = $7;
  $14 = $23;
  $9 = $29;
  $10 = $9 | $10;
  if ($11 | $14 | $10) {
   $1 = $3;
   $10 = $4;
   $2 = $10;
   break label$1;
  }
  $14 = 0;
  $1 = $14;
  $10 = $4;
  $14 = $10;
  $10 = $3;
  $9 = $10;
  $11 = $9 & 1;
  $13 = $9 + $11 | 0;
  $9 = $1;
  $12 = $14 + $9 | 0;
  $1 = $13;
  $10 = $14;
  $12 = $11 >>> 0 > $13 >>> 0 ? $12 + 1 | 0 : $12;
  $2 = $12;
  $11 = $3;
  $10 = ($10 | 0) == ($12 | 0) & $11 >>> 0 > $13 >>> 0 | $10 >>> 0 > $12 >>> 0;
  $14 = $16;
  $13 = $14;
  $11 = $17;
  $9 = $10 + $11 | 0;
  $13 = $9 >>> 0 < $10 >>> 0 ? $13 + 1 | 0 : $13;
  $17 = $9;
  $16 = $13;
 }
 $13 = $2;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $13);
 $13 = $16;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $17, $13);
 __stack_pointer = $15 + 96 | 0;
}

function CheapTrick($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 $12 = __stack_pointer - 320 | 0;
 __stack_pointer = $12;
 $17 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
 randn_reseed();
 $34 = ($17 & 536870911) != ($17 | 0) ? -1 : $17 << 3;
 $24 = operator_20new_5b_5d_28unsigned_20long_29($34);
 SAFE_HEAP_STORE_i32_4_4($12 + 312 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 304 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 296 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 288 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 280 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 272 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12, 264, 0, 0);
 InitializeForwardRealFFT($17, $12 + 264 | 0);
 SAFE_HEAP_STORE_i32_4_4($12 + 256 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 248 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 240 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 232 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 224 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12 + 216 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($12, 208, 0, 0);
 InitializeInverseRealFFT($17, $12 + 208 | 0);
 $27 = ($17 | 0) / 2 | 0;
 if (($5 | 0) >= 1) {
  $29 = +($2 | 0);
  $38 = +($17 | 0);
  $39 = $29 * 3 / ($38 + -3);
  $35 = $1 - 1 | 0;
  $40 = $29 * 1.5;
  $25 = $12 + 220 | 0;
  $28 = $12 + 276 | 0;
  $9 = $27 + 1 | 0;
  $36 = $9 & -4;
  $37 = $9 & 3;
  $10 = ($27 | 0) > 2 ? $27 : 2;
  $8 = $10 - 1 | 0;
  $41 = $8 & -4;
  $42 = $8 & 3;
  $43 = $9 & -2;
  $44 = $9 & 1;
  $45 = $10 - 2 >>> 0 < 3;
  $46 = $17 + 1 >>> 0 < 3;
  while (1) {
   $9 = $33 << 3;
   $16 = SAFE_HEAP_LOAD_f64_8_8($9 + $3 | 0, 0);
   $30 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
   $14 = SAFE_HEAP_LOAD_f64_8_8($4 + $9 | 0, 0);
   $26 = $14 <= $39 ? 500 : $14;
   $31 = $40 / $26;
   $8 = matlab_round($31);
   $18 = $8 << 1;
   $13 = $18 | 1;
   $9 = ($13 & 1073741823) != ($13 | 0) ? -1 : $13 << 2;
   $15 = operator_20new_5b_5d_28unsigned_20long_29($9);
   $19 = operator_20new_5b_5d_28unsigned_20long_29($9);
   $10 = operator_20new_5b_5d_28unsigned_20long_29(($13 & 536870911) != ($13 | 0) ? -1 : $13 << 3);
   label$3: {
    if (($8 | 0) <= -1) {
     matlab_round($16 * $29 + .001);
     break label$3;
    }
    $9 = 0 - $8 | 0;
    $20 = $8 << 1;
    $11 = $20 & 2 | 1;
    while (1) {
     SAFE_HEAP_STORE_i32_4_4(($9 + $8 << 2) + $15 | 0, 0, $9);
     $9 = $9 + 1 | 0;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
    if ($20 >>> 0 > 2) {
     while (1) {
      SAFE_HEAP_STORE_i32_4_4(($9 + $8 << 2) + $15 | 0, 0, $9);
      $11 = $9 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4(($11 + $8 << 2) + $15 | 0, 0, $11);
      $11 = $9 + 2 | 0;
      SAFE_HEAP_STORE_i32_4_4(($11 + $8 << 2) + $15 | 0, 0, $11);
      $11 = $9 + 3 | 0;
      SAFE_HEAP_STORE_i32_4_4(($11 + $8 << 2) + $15 | 0, 0, $11);
      $9 = $9 + 4 | 0;
      if (($8 | 0) != ($11 | 0)) {
       continue;
      }
      break;
     }
    }
    $20 = matlab_round($16 * $29 + .001);
    if (($8 | 0) < 0) {
     break label$3;
    }
    $9 = 0;
    $8 = 0;
    $22 = ($18 | 0) > 0 ? $18 : 0;
    $23 = $22;
    $32 = ($18 | 0) < 1;
    if (!$32) {
     while (1) {
      $11 = $8 << 2;
      $47 = $19 + $11 | 0;
      $21 = SAFE_HEAP_LOAD_i32_4_4($11 + $15 | 0, 0) + $20 | 0;
      $21 = ($21 | 0) > 0 ? $21 : 0;
      SAFE_HEAP_STORE_i32_4_4($47, 0, ($1 | 0) > ($21 | 0) ? $21 : $35);
      $11 = $11 | 4;
      $21 = $19 + $11 | 0;
      $11 = SAFE_HEAP_LOAD_i32_4_4($11 + $15 | 0, 0) + $20 | 0;
      $11 = ($11 | 0) > 0 ? $11 : 0;
      SAFE_HEAP_STORE_i32_4_4($21, 0, ($1 | 0) > ($11 | 0) ? $11 : $35);
      $8 = $8 + 2 | 0;
      $23 = $23 - 2 | 0;
      if ($23) {
       continue;
      }
      break;
     }
    }
    $11 = $22 | 1;
    $8 = $8 << 2;
    $23 = $19 + $8 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($8 + $15 | 0, 0) + $20 | 0;
    $8 = ($8 | 0) > 0 ? $8 : 0;
    SAFE_HEAP_STORE_i32_4_4($23, 0, ($1 | 0) > ($8 | 0) ? $8 : $35);
    $16 = 0;
    while (1) {
     $8 = ($9 << 3) + $10 | 0;
     $14 = cos($26 * (+(SAFE_HEAP_LOAD_i32_4_4(($9 << 2) + $15 | 0, 0) | 0) / 1.5 / $29 * 3.141592653589793)) * .5 + .5;
     SAFE_HEAP_STORE_f64_8_8($8, 0, $14);
     $16 = $16 + $14 * $14;
     $9 = $9 + 1 | 0;
     if (($11 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
    $14 = Math_sqrt($16);
    $9 = 0;
    if (!$32) {
     while (1) {
      $8 = $9 << 3;
      $11 = $10 + $8 | 0;
      SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0) / $14);
      $8 = ($8 | 8) + $10 | 0;
      SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) / $14);
      $9 = $9 + 2 | 0;
      $22 = $22 - 2 | 0;
      if ($22) {
       continue;
      }
      break;
     }
    }
    $9 = ($9 << 3) + $10 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) / $14);
   }
   $8 = 0;
   if (($18 | 0) >= 0) {
    $9 = SAFE_HEAP_LOAD_i32_4_4($12, 268);
    while (1) {
     $11 = $8 << 3;
     SAFE_HEAP_STORE_f64_8_8($11 + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $19 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0) + randn() * 1e-12);
     $8 = $8 + 1 | 0;
     if (($13 | 0) != ($8 | 0)) {
      continue;
     }
     break;
    }
    label$15: {
     if ($18 >>> 0 < 3) {
      $14 = 0;
      $8 = 0;
      $16 = 0;
      break label$15;
     }
     $20 = $18 & -4;
     $14 = 0;
     $8 = 0;
     $16 = 0;
     while (1) {
      $11 = $8 << 3;
      $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($11 + $10 | 0, 0);
      $22 = $11 | 8;
      $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($22 + $10 | 0, 0);
      $23 = $11 | 16;
      $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($23 + $10 | 0, 0);
      $21 = $11 | 24;
      $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($21 + $10 | 0, 0);
      $16 = $16 + SAFE_HEAP_LOAD_f64_8_8($9 + $11 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $22 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $23 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($9 + $21 | 0, 0);
      $8 = $8 + 4 | 0;
      $20 = $20 - 4 | 0;
      if ($20) {
       continue;
      }
      break;
     }
    }
    $11 = $13 & 3;
    while (1) {
     $13 = $8 << 3;
     $14 = $14 + SAFE_HEAP_LOAD_f64_8_8($13 + $10 | 0, 0);
     $16 = $16 + SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0);
     $8 = $8 + 1 | 0;
     $11 = $11 - 1 | 0;
     if ($11) {
      continue;
     }
     break;
    }
    $14 = $16 / $14;
    $8 = 0;
    if ($18) {
     while (1) {
      $11 = $8 << 3;
      $13 = $11 + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($13, 0) - $14 * SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
      $11 = $11 | 8;
      $13 = $11 + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($13, 0) - $14 * SAFE_HEAP_LOAD_f64_8_8($10 + $11 | 0, 0));
      $8 = $8 + 2 | 0;
      $18 = $18 - 2 | 0;
      if ($18) {
       continue;
      }
      break;
     }
    }
    $8 = $8 << 3;
    $9 = $8 + $9 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $14 * SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0));
   }
   operator_20delete_5b_5d_28void__29($15);
   operator_20delete_5b_5d_28void__29($19);
   operator_20delete_5b_5d_28void__29($10);
   $9 = matlab_round($31) << 1;
   $10 = $9 | 1;
   if (($17 | 0) > ($10 | 0)) {
    memset(SAFE_HEAP_LOAD_i32_4_4($12, 268) + ($10 << 3) | 0, 0, ($9 ^ -1) + $17 << 3);
   }
   $20 = $28 + 32 | 0;
   SAFE_HEAP_STORE_i64_8_8($12 + 200 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($20, 0), i64toi32_i32$HIGH_BITS);
   $22 = $28 + 24 | 0;
   SAFE_HEAP_STORE_i64_8_8($12 + 192 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($22, 0), i64toi32_i32$HIGH_BITS);
   $23 = $28 + 16 | 0;
   SAFE_HEAP_STORE_i64_8_8($12 + 184 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($23, 0), i64toi32_i32$HIGH_BITS);
   $21 = $28 + 8 | 0;
   SAFE_HEAP_STORE_i64_8_8($12 + 176 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($21, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($12, 168, SAFE_HEAP_LOAD_i64_8_4($28, 0), i64toi32_i32$HIGH_BITS);
   fft_execute($12 + 168 | 0);
   $10 = SAFE_HEAP_LOAD_i32_4_4($12, 268);
   $18 = ($17 | 0) < -1;
   label$22: {
    if ($18) {
     break label$22;
    }
    $9 = 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($12, 272);
    $15 = $43;
    if (!$46) {
     while (1) {
      $13 = ($9 << 3) + $10 | 0;
      $11 = ($9 << 4) + $8 | 0;
      $14 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
      $16 = $14 * $14;
      $14 = SAFE_HEAP_LOAD_f64_8_8($11, 8);
      SAFE_HEAP_STORE_f64_8_8($13, 0, $16 + $14 * $14);
      $11 = $9 | 1;
      $13 = ($11 << 3) + $10 | 0;
      $11 = ($11 << 4) + $8 | 0;
      $14 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
      $16 = $14 * $14;
      $14 = SAFE_HEAP_LOAD_f64_8_8($11, 8);
      SAFE_HEAP_STORE_f64_8_8($13, 0, $16 + $14 * $14);
      $9 = $9 + 2 | 0;
      $15 = $15 - 2 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    if (!$44) {
     break label$22;
    }
    $13 = ($9 << 3) + $10 | 0;
    $9 = ($9 << 4) + $8 | 0;
    $14 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
    $16 = $14 * $14;
    $14 = SAFE_HEAP_LOAD_f64_8_8($9, 8);
    SAFE_HEAP_STORE_f64_8_8($13, 0, $16 + $14 * $14);
   }
   DCCorrection($10, $26, $2, $17, $10);
   $9 = SAFE_HEAP_LOAD_i32_4_4($12, 268);
   LinearSmoothing($9, ($26 + $26) / 3, $2, $17, $9);
   if (!$18) {
    $9 = 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($12, 268);
    while (1) {
     $10 = ($9 << 3) + $8 | 0;
     SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0) + Math_abs(randn()) * 2.220446049250313e-16);
     $10 = ($9 | 0) != ($27 | 0);
     $9 = $9 + 1 | 0;
     if ($10) {
      continue;
     }
     break;
    }
   }
   $15 = operator_20new_5b_5d_28unsigned_20long_29($34);
   $11 = operator_20new_5b_5d_28unsigned_20long_29($34);
   SAFE_HEAP_STORE_i64_8_8($15, 0, 0, 1072693248);
   $30 = $30 + $30;
   $31 = 1 - $30;
   SAFE_HEAP_STORE_f64_8_8($11, 0, $30 + $31);
   $10 = SAFE_HEAP_LOAD_i32_4_4($12, 264);
   if (($10 | 0) >= 2) {
    $48 = $26 * 3.141592653589793;
    $9 = 1;
    $8 = $10 >>> 1 | 0;
    while (1) {
     $10 = $9 << 3;
     $14 = +($9 | 0) / $29;
     $16 = $48 * $14;
     SAFE_HEAP_STORE_f64_8_8($15 + $10 | 0, 0, sin($16) / $16);
     SAFE_HEAP_STORE_f64_8_8($10 + $11 | 0, 0, $31 + $30 * cos($26 * ($14 * 6.283185307179586)));
     $10 = ($9 | 0) == ($8 | 0);
     $9 = $9 + 1 | 0;
     if (!$10) {
      continue;
     }
     break;
    }
   }
   label$29: {
    label$30: {
     if (!$18) {
      $10 = 0;
      $9 = SAFE_HEAP_LOAD_i32_4_4($12, 268);
      $19 = $36;
      $32 = $27 >>> 0 < 3;
      if ($32) {
       break label$30;
      }
      while (1) {
       $8 = $10 << 3;
       $13 = $8 + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($13, 0, log(SAFE_HEAP_LOAD_f64_8_8($13, 0)));
       $13 = ($8 | 8) + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($13, 0, log(SAFE_HEAP_LOAD_f64_8_8($13, 0)));
       $13 = ($8 | 16) + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($13, 0, log(SAFE_HEAP_LOAD_f64_8_8($13, 0)));
       $8 = ($8 | 24) + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($8, 0, log(SAFE_HEAP_LOAD_f64_8_8($8, 0)));
       $10 = $10 + 4 | 0;
       $19 = $19 - 4 | 0;
       if ($19) {
        continue;
       }
       break;
      }
      break label$30;
     }
     SAFE_HEAP_STORE_i64_8_8($12 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($20, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($22, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($23, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($21, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12, 48, SAFE_HEAP_LOAD_i64_8_4($28, 0), i64toi32_i32$HIGH_BITS);
     fft_execute($12 + 48 | 0);
     SAFE_HEAP_STORE_i64_8_8($12 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($12, 8, SAFE_HEAP_LOAD_i64_8_4($25, 0), i64toi32_i32$HIGH_BITS);
     fft_execute($12 + 8 | 0);
     break label$29;
    }
    $13 = $37;
    if ($13) {
     while (1) {
      $8 = ($10 << 3) + $9 | 0;
      SAFE_HEAP_STORE_f64_8_8($8, 0, log(SAFE_HEAP_LOAD_f64_8_8($8, 0)));
      $10 = $10 + 1 | 0;
      $13 = $13 - 1 | 0;
      if ($13) {
       continue;
      }
      break;
     }
    }
    label$35: {
     if (($17 | 0) < 4) {
      break label$35;
     }
     $10 = 1;
     $8 = $41;
     if (!$45) {
      while (1) {
       SAFE_HEAP_STORE_f64_8_8(($17 - $10 << 3) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $9 | 0, 0));
       $13 = $10 + 1 | 0;
       SAFE_HEAP_STORE_f64_8_8(($17 - $13 << 3) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $9 | 0, 0));
       $13 = $10 + 2 | 0;
       SAFE_HEAP_STORE_f64_8_8(($17 - $13 << 3) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $9 | 0, 0));
       $13 = $10 + 3 | 0;
       SAFE_HEAP_STORE_f64_8_8(($17 - $13 << 3) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($13 << 3) + $9 | 0, 0));
       $10 = $10 + 4 | 0;
       $8 = $8 - 4 | 0;
       if ($8) {
        continue;
       }
       break;
      }
     }
     $8 = $42;
     if (!$8) {
      break label$35;
     }
     while (1) {
      SAFE_HEAP_STORE_f64_8_8(($17 - $10 << 3) + $9 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($10 << 3) + $9 | 0, 0));
      $10 = $10 + 1 | 0;
      $8 = $8 - 1 | 0;
      if ($8) {
       continue;
      }
      break;
     }
    }
    SAFE_HEAP_STORE_i64_8_8($12 + 160 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($20, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 152 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($22, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 144 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($23, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 136 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($21, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12, 128, SAFE_HEAP_LOAD_i64_8_4($28, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($12 + 128 | 0);
    $9 = 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($12, 216);
    $13 = SAFE_HEAP_LOAD_i32_4_4($12, 272);
    while (1) {
     $10 = $9 << 3;
     $14 = SAFE_HEAP_LOAD_f64_8_8($11 + $10 | 0, 0);
     $16 = SAFE_HEAP_LOAD_f64_8_8($10 + $15 | 0, 0);
     $10 = $9 << 4;
     $26 = SAFE_HEAP_LOAD_f64_8_8($13 + $10 | 0, 0);
     $10 = $8 + $10 | 0;
     SAFE_HEAP_STORE_i64_8_8($10, 8, 0, 0);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $14 * ($26 * $16) / $38);
     $10 = ($9 | 0) == ($27 | 0);
     $9 = $9 + 1 | 0;
     if (!$10) {
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i64_8_8($12 + 120 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 112 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 96 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($25 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12, 88, SAFE_HEAP_LOAD_i64_8_4($25, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($12 + 88 | 0);
    $9 = 0;
    $10 = SAFE_HEAP_LOAD_i32_4_4($12, 212);
    $13 = $36;
    if (!$32) {
     while (1) {
      $8 = $9 << 3;
      SAFE_HEAP_STORE_f64_8_8($24 + $8 | 0, 0, exp(SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0)));
      $19 = $8 | 8;
      SAFE_HEAP_STORE_f64_8_8($24 + $19 | 0, 0, exp(SAFE_HEAP_LOAD_f64_8_8($10 + $19 | 0, 0)));
      $19 = $8 | 16;
      SAFE_HEAP_STORE_f64_8_8($24 + $19 | 0, 0, exp(SAFE_HEAP_LOAD_f64_8_8($10 + $19 | 0, 0)));
      $8 = $8 | 24;
      SAFE_HEAP_STORE_f64_8_8($24 + $8 | 0, 0, exp(SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0)));
      $9 = $9 + 4 | 0;
      $13 = $13 - 4 | 0;
      if ($13) {
       continue;
      }
      break;
     }
    }
    $8 = $37;
    if (!$8) {
     break label$29;
    }
    while (1) {
     $13 = $9 << 3;
     SAFE_HEAP_STORE_f64_8_8($24 + $13 | 0, 0, exp(SAFE_HEAP_LOAD_f64_8_8($10 + $13 | 0, 0)));
     $9 = $9 + 1 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   operator_20delete_5b_5d_28void__29($15);
   operator_20delete_5b_5d_28void__29($11);
   label$43: {
    if ($18) {
     break label$43;
    }
    $10 = SAFE_HEAP_LOAD_i32_4_4(($33 << 2) + $7 | 0, 0);
    $9 = 0;
    $15 = $36;
    if ($27 >>> 0 > 2) {
     while (1) {
      $8 = $9 << 3;
      SAFE_HEAP_STORE_f64_8_8($10 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $24 | 0, 0));
      $11 = $8 | 8;
      SAFE_HEAP_STORE_f64_8_8($11 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($11 + $24 | 0, 0));
      $11 = $8 | 16;
      SAFE_HEAP_STORE_f64_8_8($11 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($11 + $24 | 0, 0));
      $8 = $8 | 24;
      SAFE_HEAP_STORE_f64_8_8($10 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8 + $24 | 0, 0));
      $9 = $9 + 4 | 0;
      $15 = $15 - 4 | 0;
      if ($15) {
       continue;
      }
      break;
     }
    }
    $8 = $37;
    if (!$8) {
     break label$43;
    }
    while (1) {
     $15 = $9 << 3;
     SAFE_HEAP_STORE_f64_8_8($15 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($15 + $24 | 0, 0));
     $9 = $9 + 1 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   $33 = $33 + 1 | 0;
   if (($33 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 DestroyForwardRealFFT($12 + 264 | 0);
 DestroyInverseRealFFT($12 + 208 | 0);
 operator_20delete_5b_5d_28void__29($24);
 __stack_pointer = $12 + 320 | 0;
}

function bitrv2conj_28int_2c_20int__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $13 = $0;
 $15 = 1;
 while (1) {
  $18 = $15;
  $15 = $15 << 1;
  $5 = ($13 | 0) > 35;
  $3 = $13 >> 2;
  $13 = $3;
  if ($5) {
   continue;
  }
  break;
 }
 $13 = $18 << 2;
 $15 = $0 >> 1;
 label$2: {
  if (($3 | 0) != 8) {
   if (($18 | 0) <= 0) {
    break label$2;
   }
   while (1) {
    $20 = $17 + $18 | 0;
    $21 = $17 << 2;
    if ($17) {
     $19 = SAFE_HEAP_LOAD_i32_4_4(($20 << 2) + $1 | 0, 0);
     $3 = 0;
     while (1) {
      $4 = ($3 << 2) + $19 | 0;
      $5 = ($4 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $12 = SAFE_HEAP_LOAD_i32_4_4(($3 + $18 << 2) + $1 | 0, 0) + $21 | 0;
      $0 = ($12 << 3) + $2 | 0;
      $7 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($7, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $7 = $4 + $13 | 0;
      $0 = ($7 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      $4 = $13 + $12 | 0;
      $5 = ($4 << 3) + $2 | 0;
      $12 = $5 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      $0 = $0 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($12, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
      $12 = $7 + $15 | 0;
      $0 = ($12 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      $5 = $5 + 24 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $7 = $4 + 2 | 0;
      $10 = ($7 << 3) + $2 | 0;
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $11 = $0 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
      SAFE_HEAP_STORE_f64_8_8($11, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($10, 0, $6);
      SAFE_HEAP_STORE_f64_8_8($5, 0, -$9);
      $5 = ($12 - $13 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $11 = $7 - $13 | 0;
      $10 = ($11 << 3) + $2 | 0;
      $14 = $10 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $16 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
      SAFE_HEAP_STORE_f64_8_8($16, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($14, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($10, 0, $6);
      $14 = $5 + 16 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
      $10 = ($11 + $15 << 3) + $2 | 0;
      $11 = $10 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
      SAFE_HEAP_STORE_f64_8_8($14, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $5 = $5 + 24 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($11, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($10, 0, $6);
      $12 = $12 + 2 | 0;
      $10 = ($12 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
      $0 = $0 + 24 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      $5 = ($7 + $15 << 3) + $2 | 0;
      $7 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8($0, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($7, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
      $12 = $12 - $15 | 0;
      $5 = ($12 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $4 = $4 + $15 | 0;
      $0 = ($4 << 3) + $2 | 0;
      $7 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($7, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $5 = ($12 - $13 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $0 = ($4 - $13 << 3) + $2 | 0;
      $4 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, -$8);
      SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $3 = $3 + 1 | 0;
      if (($17 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4(($20 << 2) + $1 | 0, 0) + $21 | 0;
    $3 = ($5 << 3) + $2 | 0;
    $0 = $3 + 8 | 0;
    SAFE_HEAP_STORE_f64_8_8($0, 0, -SAFE_HEAP_LOAD_f64_8_8($0, 0));
    $0 = $5 + 2 | 0;
    $4 = ($0 << 3) + $2 | 0;
    $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
    $3 = $3 + 24 | 0;
    $8 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
    $12 = $5 + $15 | 0;
    $5 = ($12 << 3) + $2 | 0;
    $7 = $5 + 8 | 0;
    $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
    SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
    SAFE_HEAP_STORE_f64_8_8($3, 0, -$9);
    SAFE_HEAP_STORE_f64_8_8($7, 0, -$8);
    SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
    $5 = $5 + 24 | 0;
    SAFE_HEAP_STORE_f64_8_8($5, 0, -SAFE_HEAP_LOAD_f64_8_8($5, 0));
    $5 = ($0 + $13 << 3) + $2 | 0;
    $3 = $5 - 8 | 0;
    SAFE_HEAP_STORE_f64_8_8($3, 0, -SAFE_HEAP_LOAD_f64_8_8($3, 0));
    $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
    $3 = ($13 + $12 << 3) + $2 | 0;
    $0 = $3 + 8 | 0;
    $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
    SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
    $5 = $5 + 8 | 0;
    $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
    SAFE_HEAP_STORE_f64_8_8($5, 0, -$8);
    SAFE_HEAP_STORE_f64_8_8($0, 0, -$9);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
    $5 = $3 + 24 | 0;
    SAFE_HEAP_STORE_f64_8_8($5, 0, -SAFE_HEAP_LOAD_f64_8_8($5, 0));
    $17 = $17 + 1 | 0;
    if (($18 | 0) != ($17 | 0)) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (($18 | 0) < 1) {
   break label$2;
  }
  $5 = $18 << 3;
  while (1) {
   $22 = $18 + $19 | 0;
   $20 = $19 << 2;
   if ($19) {
    $23 = SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $1 | 0, 0) << 1;
    $12 = 0;
    while (1) {
     $3 = ($12 << 2) + $23 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = (SAFE_HEAP_LOAD_i32_4_4(($12 + $18 << 2) + $1 | 0, 0) << 1) + $20 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, -$6);
     $3 = $3 + $13 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = $5 + $7 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, -$6);
     $3 = $3 + $13 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = $7 - $13 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, -$6);
     $0 = $3 + $13 | 0;
     $3 = $0 << 3;
     $4 = ($3 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $10 = $2 + $3 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     $11 = $5 + $7 | 0;
     $3 = $11 << 3;
     $7 = ($3 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $3 = $2 + $3 | 0;
     SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($7, 0, -$6);
     $10 = $0 + $15 | 0;
     $7 = ($10 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $3 = $3 + 24 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $0 = $11 + 2 | 0;
     $4 = ($0 << 3) + $2 | 0;
     SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     $11 = $7 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     SAFE_HEAP_STORE_f64_8_8($11, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$9);
     $4 = $10 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $11 = $0 - $5 | 0;
     $0 = ($11 << 3) + $2 | 0;
     $14 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $16 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($16, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($14, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $14 = $4 - $13 | 0;
     $0 = ($14 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $11 = $13 + $11 | 0;
     $4 = ($11 << 3) + $2 | 0;
     $16 = $4 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     $17 = $0 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $6);
     $4 = ($14 - $13 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $16 = $11 - $5 | 0;
     $14 = ($16 << 3) + $2 | 0;
     $17 = $14 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($14, 0));
     $21 = $4 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($21, 0);
     SAFE_HEAP_STORE_f64_8_8($21, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($17, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $6);
     $17 = $4 + 16 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     $14 = ($15 + $16 << 3) + $2 | 0;
     $16 = $14 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($14, 0));
     $4 = $4 + 24 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $6);
     $14 = $0 + 16 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     $11 = $11 + $15 | 0;
     $4 = ($11 << 3) + $2 | 0;
     $16 = $4 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($14, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     $0 = $0 + 24 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $6);
     $4 = $3 + 16 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $11 = $11 - $13 | 0;
     $0 = ($11 << 3) + $2 | 0;
     $14 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 24 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($14, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $0 = $10 + 2 | 0;
     $4 = ($0 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $7 = $7 + 24 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $10 = $5 + $11 | 0;
     $3 = ($10 << 3) + $2 | 0;
     $11 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     SAFE_HEAP_STORE_f64_8_8($7, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($11, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
     $4 = $0 - $15 | 0;
     $0 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $3 = $3 - 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $7 = $10 - 2 | 0;
     $10 = ($7 << 3) + $2 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     $0 = $0 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$9);
     $4 = $4 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $7 = $7 - $5 | 0;
     $0 = ($7 << 3) + $2 | 0;
     $10 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($10, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $4 = $4 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $7 = $7 + $13 | 0;
     $0 = ($7 << 3) + $2 | 0;
     $10 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($10, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $3 = ($4 - $13 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $0 = ($7 - $5 << 3) + $2 | 0;
     $4 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, -$8);
     SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $12 = $12 + 1 | 0;
     if (($19 | 0) != ($12 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = (SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $1 | 0, 0) << 1) + $20 | 0;
   $0 = $3 << 3;
   $4 = ($0 | 8) + $2 | 0;
   SAFE_HEAP_STORE_f64_8_8($4, 0, -SAFE_HEAP_LOAD_f64_8_8($4, 0));
   $4 = $3 + 2 | 0;
   $12 = ($4 << 3) + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $0 = ($0 + $2 | 0) + 24 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $7 = $3 + $15 | 0;
   $3 = ($7 << 3) + $2 | 0;
   $10 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   SAFE_HEAP_STORE_f64_8_8($12, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($0, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($10, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $3 = $3 + 24 | 0;
   SAFE_HEAP_STORE_f64_8_8($3, 0, -SAFE_HEAP_LOAD_f64_8_8($3, 0));
   $0 = $4 + $13 | 0;
   $3 = $0 << 3;
   $4 = $3 + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $12 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $7 = $5 + $7 | 0;
   $3 = ($7 << 3) + $2 | 0;
   $10 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($12, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($10, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $4 = $0 + $13 | 0;
   $3 = $4 << 3;
   $0 = $3 + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $10 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $12 = $7 - $13 | 0;
   $3 = ($12 << 3) + $2 | 0;
   $7 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($10, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($7, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $10 = $0 - 16 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $7 = ($12 - $15 << 3) + $2 | 0;
   $11 = $7 + 8 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
   SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0));
   $0 = $0 - 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($11, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $6);
   $0 = ($4 + $15 << 3) + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $7 = $3 + 24 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   $3 = $3 + 16 | 0;
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   $0 = $0 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($7, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $3 = $4 + $13 << 3;
   $0 = $3 + $2 | 0;
   $4 = $0 - 8 | 0;
   SAFE_HEAP_STORE_f64_8_8($4, 0, -SAFE_HEAP_LOAD_f64_8_8($4, 0));
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $4 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $3 = ($5 + $12 << 3) + $2 | 0;
   $12 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($4, 0, -$9);
   SAFE_HEAP_STORE_f64_8_8($12, 0, -$8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $3 = $3 + 24 | 0;
   SAFE_HEAP_STORE_f64_8_8($3, 0, -SAFE_HEAP_LOAD_f64_8_8($3, 0));
   $19 = $19 + 1 | 0;
   if (($19 | 0) != ($18 | 0)) {
    continue;
   }
   break;
  }
 }
}

function bitrv2_28int_2c_20int__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $13 = $0;
 $15 = 1;
 while (1) {
  $18 = $15;
  $15 = $15 << 1;
  $5 = ($13 | 0) > 35;
  $3 = $13 >> 2;
  $13 = $3;
  if ($5) {
   continue;
  }
  break;
 }
 $13 = $18 << 2;
 $15 = $0 >> 1;
 label$2: {
  if (($3 | 0) != 8) {
   if (($18 | 0) <= 0) {
    break label$2;
   }
   while (1) {
    $20 = $17 + $18 | 0;
    $21 = $17 << 2;
    if ($17) {
     $19 = SAFE_HEAP_LOAD_i32_4_4(($20 << 2) + $1 | 0, 0);
     $3 = 0;
     while (1) {
      $4 = ($3 << 2) + $19 | 0;
      $5 = ($4 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $12 = SAFE_HEAP_LOAD_i32_4_4(($3 + $18 << 2) + $1 | 0, 0) + $21 | 0;
      $0 = ($12 << 3) + $2 | 0;
      $7 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $7 = $4 + $13 | 0;
      $0 = ($7 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      $4 = $13 + $12 | 0;
      $5 = ($4 << 3) + $2 | 0;
      $12 = $5 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      $0 = $0 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($12, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
      $12 = $7 + $15 | 0;
      $0 = ($12 << 3) + $2 | 0;
      $10 = $0 + 8 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
      $7 = $4 + 2 | 0;
      $11 = ($7 << 3) + $2 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
      $5 = $5 + 24 | 0;
      SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($11, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
      $5 = ($12 - $13 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $11 = $7 - $13 | 0;
      $10 = ($11 << 3) + $2 | 0;
      $14 = $10 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
      $16 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
      SAFE_HEAP_STORE_f64_8_8($16, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($14, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($10, 0, $6);
      $14 = $5 + 24 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
      $10 = ($11 + $15 << 3) + $2 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
      $11 = $10 + 8 | 0;
      SAFE_HEAP_STORE_f64_8_8($14, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0));
      $5 = $5 + 16 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($11, 0, $6);
      SAFE_HEAP_STORE_f64_8_8($10, 0, $9);
      $12 = $12 + 2 | 0;
      $10 = ($12 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
      $0 = $0 + 24 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
      $5 = ($7 + $15 << 3) + $2 | 0;
      $7 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
      SAFE_HEAP_STORE_f64_8_8($0, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($7, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
      $12 = $12 - $15 | 0;
      $5 = ($12 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $4 = $4 + $15 | 0;
      $0 = ($4 << 3) + $2 | 0;
      $7 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $5 = ($12 - $13 << 3) + $2 | 0;
      $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      $0 = ($4 - $13 << 3) + $2 | 0;
      $4 = $0 + 8 | 0;
      $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
      $5 = $5 + 8 | 0;
      $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
      SAFE_HEAP_STORE_f64_8_8($5, 0, $8);
      SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
      SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
      $3 = $3 + 1 | 0;
      if (($17 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4(($20 << 2) + $1 | 0, 0) + $21 | 0;
    $3 = $5 + 2 | 0;
    $0 = ($3 << 3) + $2 | 0;
    $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
    $4 = (($5 << 3) + $2 | 0) + 24 | 0;
    $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
    $12 = $5 + $15 | 0;
    $5 = ($12 << 3) + $2 | 0;
    $7 = $5 + 8 | 0;
    $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($5, 0));
    SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
    SAFE_HEAP_STORE_f64_8_8($7, 0, $8);
    SAFE_HEAP_STORE_f64_8_8($5, 0, $6);
    $5 = ($3 + $13 << 3) + $2 | 0;
    $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
    $3 = ($13 + $12 << 3) + $2 | 0;
    $0 = $3 + 8 | 0;
    $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
    SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
    $5 = $5 + 8 | 0;
    $9 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
    SAFE_HEAP_STORE_f64_8_8($5, 0, $8);
    SAFE_HEAP_STORE_f64_8_8($0, 0, $9);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
    $17 = $17 + 1 | 0;
    if (($18 | 0) != ($17 | 0)) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (($18 | 0) < 1) {
   break label$2;
  }
  $5 = $18 << 3;
  while (1) {
   $22 = $18 + $19 | 0;
   $20 = $19 << 2;
   if ($19) {
    $23 = SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $1 | 0, 0) << 1;
    $12 = 0;
    while (1) {
     $3 = ($12 << 2) + $23 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = (SAFE_HEAP_LOAD_i32_4_4(($12 + $18 << 2) + $1 | 0, 0) << 1) + $20 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $6);
     $3 = $3 + $13 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = $5 + $7 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $6);
     $3 = $3 + $13 | 0;
     $0 = $3 << 3;
     $4 = ($0 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $0 = $0 + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $7 = $7 - $13 | 0;
     $10 = $7 << 3;
     $11 = ($10 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $10 = $2 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $6);
     $0 = $3 + $13 | 0;
     $3 = $0 << 3;
     $4 = ($3 | 8) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $10 = $2 + $3 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     $11 = $5 + $7 | 0;
     $3 = $11 << 3;
     $7 = ($3 | 8) + $2 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $3 = $2 + $3 | 0;
     SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($7, 0, $6);
     $10 = $0 + $15 | 0;
     $7 = ($10 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $3 = $3 + 24 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $0 = $11 + 2 | 0;
     $4 = ($0 << 3) + $2 | 0;
     SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     $11 = $7 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $9);
     $4 = $10 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $11 = $0 - $5 | 0;
     $0 = ($11 << 3) + $2 | 0;
     $14 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $16 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($16, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $14 = $4 - $13 | 0;
     $0 = ($14 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $11 = $11 + $13 | 0;
     $4 = ($11 << 3) + $2 | 0;
     $16 = $4 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     $17 = $0 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     SAFE_HEAP_STORE_f64_8_8($17, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $6);
     $4 = ($14 - $13 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $16 = $11 - $5 | 0;
     $14 = ($16 << 3) + $2 | 0;
     $17 = $14 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($14, 0));
     $21 = $4 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($21, 0);
     SAFE_HEAP_STORE_f64_8_8($21, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($17, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $6);
     $17 = $4 + 24 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
     $14 = ($15 + $16 << 3) + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     $16 = $14 + 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($17, 0, SAFE_HEAP_LOAD_f64_8_8($16, 0));
     $4 = $4 + 16 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $9);
     $14 = $0 + 24 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     $11 = $11 + $15 | 0;
     $4 = ($11 << 3) + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $16 = $4 + 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($14, 0, SAFE_HEAP_LOAD_f64_8_8($16, 0));
     $0 = $0 + 16 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($16, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     $4 = $3 + 24 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $11 = $11 - $13 | 0;
     $0 = ($11 << 3) + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     $14 = $0 + 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($14, 0));
     $3 = $3 + 16 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($14, 0, $6);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $9);
     $0 = $10 + 2 | 0;
     $4 = ($0 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     $7 = $7 + 24 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $10 = $5 + $11 | 0;
     $3 = ($10 << 3) + $2 | 0;
     $11 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
     $4 = $0 - $15 | 0;
     $0 = ($4 << 3) + $2 | 0;
     $7 = $0 + 8 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $10 = $10 - 2 | 0;
     $11 = ($10 << 3) + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($11, 0);
     $3 = $3 - 8 | 0;
     SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($11, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
     $4 = $4 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $7 = $10 - $5 | 0;
     $0 = ($7 << 3) + $2 | 0;
     $10 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $4 = $4 - $13 | 0;
     $3 = ($4 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $7 = $7 + $13 | 0;
     $0 = ($7 << 3) + $2 | 0;
     $10 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($10, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $3 = ($4 - $13 << 3) + $2 | 0;
     $6 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $0 = ($7 - $5 << 3) + $2 | 0;
     $4 = $0 + 8 | 0;
     $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0));
     $3 = $3 + 8 | 0;
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $8);
     SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
     SAFE_HEAP_STORE_f64_8_8($0, 0, $6);
     $12 = $12 + 1 | 0;
     if (($19 | 0) != ($12 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = (SAFE_HEAP_LOAD_i32_4_4(($22 << 2) + $1 | 0, 0) << 1) + $20 | 0;
   $0 = $3 + 2 | 0;
   $4 = ($0 << 3) + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $12 = (($3 << 3) + $2 | 0) + 24 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $7 = $3 + $15 | 0;
   $3 = ($7 << 3) + $2 | 0;
   $10 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($12, 0, $9);
   SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $0 = $0 + $13 | 0;
   $3 = $0 << 3;
   $4 = $3 + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $12 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $7 = $5 + $7 | 0;
   $3 = ($7 << 3) + $2 | 0;
   $10 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($12, 0, $9);
   SAFE_HEAP_STORE_f64_8_8($10, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $4 = $0 + $13 | 0;
   $3 = $4 << 3;
   $0 = $3 + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $10 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $12 = $7 - $13 | 0;
   $3 = ($12 << 3) + $2 | 0;
   $7 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($10, 0, $9);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $10 = $0 - 8 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $7 = ($12 - $15 << 3) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   $11 = $7 + 8 | 0;
   SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0));
   $0 = $0 - 16 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($11, 0, $6);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
   $0 = ($4 + $15 << 3) + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $7 = $3 + 24 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
   $3 = $3 + 16 | 0;
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   $0 = $0 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $3 = $4 + $13 << 3;
   $0 = $3 + $2 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   $4 = ($3 | 8) + $2 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $3 = ($5 + $12 << 3) + $2 | 0;
   $12 = $3 + 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0));
   SAFE_HEAP_STORE_f64_8_8($4, 0, $9);
   SAFE_HEAP_STORE_f64_8_8($12, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $6);
   $19 = $19 + 1 | 0;
   if (($19 | 0) != ($18 | 0)) {
    continue;
   }
   break;
  }
 }
}

function hexfloat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $9 = __stack_pointer - 432 | 0;
 __stack_pointer = $9;
 $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
 label$1: {
  if ($12 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
   SAFE_HEAP_STORE_i32_4_4($1, 4, $12 + 1 | 0);
   $12 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
   break label$1;
  }
  $12 = __shgetc($1);
 }
 label$3: {
  label$4: {
   while (1) {
    label$6: {
     if (($12 | 0) != 48) {
      if (($12 | 0) != 46) {
       break label$3;
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      if ($12 >>> 0 >= SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
       break label$6;
      }
      SAFE_HEAP_STORE_i32_4_4($1, 4, $12 + 1 | 0);
      $12 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
      break label$4;
     }
     $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     if ($12 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
      $7 = 1;
      SAFE_HEAP_STORE_i32_4_4($1, 4, $12 + 1 | 0);
      $12 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
      continue;
     }
     $7 = 1;
     $12 = __shgetc($1);
     continue;
    }
    break;
   }
   $12 = __shgetc($1);
  }
  $27 = 1;
  if (($12 | 0) != 48) {
   break label$3;
  }
  while (1) {
   $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   label$10: {
    if ($12 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($1, 4, $12 + 1 | 0);
     $12 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
     break label$10;
    }
    $12 = __shgetc($1);
   }
   $10 = $24;
   $13 = $10 - 1 | 0;
   $24 = $13;
   $7 = $22;
   $6 = $10 >>> 0 < 1;
   $6 = $7 - $6 | 0;
   $22 = $6;
   if (($12 | 0) == 48) {
    continue;
   }
   break;
  }
  $7 = 1;
 }
 $18 = 1073676288;
 label$12: {
  while (1) {
   label$14: {
    $6 = $12 | 32;
    label$15: {
     label$16: {
      $8 = $12 - 48 | 0;
      if ($8 >>> 0 < 10) {
       break label$16;
      }
      if (($12 | 0) != 46 ? $6 - 97 >>> 0 >= 6 : 0) {
       break label$12;
      }
      if (($12 | 0) != 46) {
       break label$16;
      }
      if ($27) {
       break label$14;
      }
      $27 = 1;
      $24 = $14;
      $6 = $16;
      $22 = $6;
      break label$15;
     }
     $12 = ($12 | 0) > 57 ? $6 - 87 | 0 : $8;
     $7 = $14;
     $6 = $16;
     label$17: {
      if (($6 | 0) < 0 ? 1 : ($6 | 0) <= 0 ? $7 >>> 0 <= 7 : 0) {
       $23 = ($23 << 4) + $12 | 0;
       break label$17;
      }
      $11 = $14;
      $7 = $16;
      if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $11 >>> 0 <= 28 : 0) {
       __floatsitf($9 + 48 | 0, $12);
       $11 = $25;
       $7 = $18;
       __multf3($9 + 32 | 0, $26, $11, $19, $7, 0, 0, 0, 1073414144);
       $12 = $9 + 16 | 0;
       $6 = SAFE_HEAP_LOAD_i64_8_8($9, 32);
       $26 = $6;
       $10 = i64toi32_i32$HIGH_BITS;
       $25 = $10;
       $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 40 | 0, 0);
       $19 = $10;
       $6 = i64toi32_i32$HIGH_BITS;
       $18 = $6;
       $6 = SAFE_HEAP_LOAD_i64_8_8($9, 48);
       $8 = $6;
       $10 = i64toi32_i32$HIGH_BITS;
       $7 = $10;
       $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 56 | 0, 0);
       $13 = $10;
       $6 = i64toi32_i32$HIGH_BITS;
       $11 = $6;
       $6 = $25;
       $10 = $18;
       __multf3($12, $26, $6, $19, $10, $8, $7, $13, $11);
       $11 = SAFE_HEAP_LOAD_i64_8_8($9, 16);
       $8 = $11;
       $7 = i64toi32_i32$HIGH_BITS;
       $10 = $7;
       $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 24 | 0, 0);
       $13 = $7;
       $11 = i64toi32_i32$HIGH_BITS;
       $6 = $11;
       $11 = $17;
       $7 = $20;
       __addtf3($9, $15, $11, $21, $7, $8, $10, $13, $6);
       $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0);
       $21 = $6;
       $10 = i64toi32_i32$HIGH_BITS;
       $20 = $10;
       $10 = SAFE_HEAP_LOAD_i64_8_8($9, 0);
       $15 = $10;
       $6 = i64toi32_i32$HIGH_BITS;
       $17 = $6;
       break label$17;
      }
      if (!$12 | $30) {
       break label$17;
      }
      $6 = $25;
      $10 = $18;
      __multf3($9 + 80 | 0, $26, $6, $19, $10, 0, 0, 0, 1073610752);
      $12 = $9 - -64 | 0;
      $11 = SAFE_HEAP_LOAD_i64_8_8($9, 80);
      $8 = $11;
      $7 = i64toi32_i32$HIGH_BITS;
      $10 = $7;
      $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 88 | 0, 0);
      $13 = $7;
      $11 = i64toi32_i32$HIGH_BITS;
      $6 = $11;
      $11 = $17;
      $7 = $20;
      __addtf3($12, $15, $11, $21, $7, $8, $10, $13, $6);
      $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 72 | 0, 0);
      $21 = $6;
      $10 = i64toi32_i32$HIGH_BITS;
      $20 = $10;
      $30 = 1;
      $10 = SAFE_HEAP_LOAD_i64_8_8($9, 64);
      $15 = $10;
      $6 = i64toi32_i32$HIGH_BITS;
      $17 = $6;
     }
     $6 = $16;
     $7 = $14;
     $8 = $7 + 1 | 0;
     $13 = $8 >>> 0 < 1 ? $6 + 1 | 0 : $6;
     $14 = $8;
     $16 = $13;
     $7 = 1;
    }
    $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    if ($12 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($1, 4, $12 + 1 | 0);
     $12 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
     continue;
    }
    $12 = __shgetc($1);
    continue;
   }
   break;
  }
  $12 = 46;
 }
 label$21: {
  label$22: {
   label$23: {
    if (!$7) {
     if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
      if ($5) {
       break label$22;
      }
      break label$23;
     }
     $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     SAFE_HEAP_STORE_i32_4_4($1, 4, $12 - 1 | 0);
     if (!$5) {
      break label$23;
     }
     SAFE_HEAP_STORE_i32_4_4($1, 4, $12 - 2 | 0);
     if (!$27) {
      break label$22;
     }
     SAFE_HEAP_STORE_i32_4_4($1, 4, $12 - 3 | 0);
     break label$22;
    }
    $6 = $14;
    $13 = $16;
    if (($13 | 0) < 0 ? 1 : ($13 | 0) <= 0 ? $6 >>> 0 <= 7 : 0) {
     $19 = $14;
     $6 = $16;
     $18 = $6;
     while (1) {
      $23 = $23 << 4;
      $6 = $18;
      $11 = $19;
      $10 = $11 + 1 | 0;
      $8 = $10 >>> 0 < 1 ? $6 + 1 | 0 : $6;
      $19 = $10;
      $6 = $10;
      $18 = $8;
      if (($6 | 0) != 8 | $8) {
       continue;
      }
      break;
     }
    }
    label$28: {
     label$29: {
      label$30: {
       if (($12 & -33) == 80) {
        $6 = scanexp($1, $5);
        $19 = $6;
        $8 = i64toi32_i32$HIGH_BITS;
        $18 = $8;
        $7 = $19;
        if ($7 | ($8 | 0) != -2147483648) {
         break label$28;
        }
        if ($5) {
         if (SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
          break label$30;
         }
         break label$29;
        }
        $15 = 0;
        $17 = 0;
        __shlim($1, 0, 0);
        $14 = 0;
        $16 = 0;
        break label$21;
       }
       if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
        break label$29;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) - 1 | 0);
     }
     $19 = 0;
     $18 = 0;
    }
    if (!$23) {
     __extenddftf2($9 + 112 | 0, +($4 | 0) * 0);
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 120 | 0, 0);
     $14 = $7;
     $8 = i64toi32_i32$HIGH_BITS;
     $16 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9, 112);
     $15 = $8;
     $7 = i64toi32_i32$HIGH_BITS;
     $17 = $7;
     break label$21;
    }
    $13 = $27;
    $6 = $13 ? $24 : $14;
    $7 = $22;
    $8 = $16;
    $11 = $13 ? $7 : $8;
    $13 = $6;
    $6 = $11 << 2 | $6 >>> 30;
    $11 = $13 << 2;
    $13 = $18;
    $10 = $6 + $13 | 0;
    $7 = $19;
    $8 = $7 + $11 | 0;
    $6 = $8;
    $13 = $6 - 32 | 0;
    $14 = $13;
    $10 = $6 >>> 0 < $7 >>> 0 ? $10 + 1 | 0 : $10;
    $8 = $6 >>> 0 < 32;
    $8 = $10 - $8 | 0;
    $16 = $8;
    $7 = 0 - $3 | 0;
    $10 = $13;
    if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $7 >>> 0 < $10 >>> 0 : 0) {
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
     __floatsitf($9 + 160 | 0, $4);
     $4 = $9 + 144 | 0;
     $10 = SAFE_HEAP_LOAD_i64_8_8($9, 160);
     $3 = $10;
     $8 = i64toi32_i32$HIGH_BITS;
     $1 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 168 | 0, 0);
     $10 = i64toi32_i32$HIGH_BITS;
     $2 = $10;
     $10 = $1;
     $1 = $8;
     $8 = $2;
     __multf3($4, $3, $10, $1, $8, -1, -1, -1, 2147418111);
     $4 = $9 + 128 | 0;
     $6 = SAFE_HEAP_LOAD_i64_8_8($9, 144);
     $3 = $6;
     $7 = i64toi32_i32$HIGH_BITS;
     $1 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 152 | 0, 0);
     $6 = i64toi32_i32$HIGH_BITS;
     $2 = $6;
     $6 = $1;
     $1 = $7;
     $7 = $2;
     __multf3($4, $3, $6, $1, $7, -1, -1, -1, 2147418111);
     $10 = SAFE_HEAP_LOAD_i64_8_8($9 + 136 | 0, 0);
     $14 = $10;
     $8 = i64toi32_i32$HIGH_BITS;
     $16 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9, 128);
     $15 = $8;
     $10 = i64toi32_i32$HIGH_BITS;
     $17 = $10;
     break label$21;
    }
    $8 = $3 - 226 | 0;
    $10 = $8 >> 31;
    $7 = $8;
    $6 = $14;
    $8 = $16;
    if (($10 | 0) < ($8 | 0) ? 1 : ($10 | 0) <= ($8 | 0) ? $7 >>> 0 <= $6 >>> 0 : 0) {
     if (($23 | 0) > -1) {
      while (1) {
       $7 = $17;
       $10 = $20;
       __addtf3($9 + 416 | 0, $15, $7, $21, $10, 0, 0, 0, -1073807360);
       $8 = $7;
       $6 = $10;
       $12 = __getf2($15, $8, $21, $6, 0, 0, 0, 1073610752);
       $22 = $9 + 400 | 0;
       $7 = SAFE_HEAP_LOAD_i64_8_8($9, 416);
       $10 = i64toi32_i32$HIGH_BITS;
       $5 = $10;
       $10 = $8;
       $1 = ($12 | 0) < 0;
       $11 = $1;
       $8 = $11 ? $15 : $7;
       $13 = $8;
       $7 = $5;
       $6 = $11 ? $10 : $7;
       $1 = $6;
       $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 424 | 0, 0);
       $8 = i64toi32_i32$HIGH_BITS;
       $5 = $8;
       $7 = $11;
       $10 = $7 ? $21 : $6;
       $18 = $10;
       $8 = $20;
       $6 = $5;
       $11 = $7 ? $8 : $6;
       $5 = $11;
       $11 = $17;
       $10 = $8;
       $7 = $1;
       $8 = $5;
       __addtf3($22, $15, $11, $21, $10, $13, $7, $18, $8);
       $10 = $14;
       $6 = $10 - 1 | 0;
       $14 = $6;
       $8 = $16;
       $13 = $10 >>> 0 < 1;
       $13 = $8 - $13 | 0;
       $16 = $13;
       $13 = SAFE_HEAP_LOAD_i64_8_8($9 + 408 | 0, 0);
       $21 = $13;
       $10 = i64toi32_i32$HIGH_BITS;
       $20 = $10;
       $10 = SAFE_HEAP_LOAD_i64_8_8($9, 400);
       $15 = $10;
       $13 = i64toi32_i32$HIGH_BITS;
       $17 = $13;
       $23 = $23 << 1 | ($12 | 0) > -1;
       if (($23 | 0) > -1) {
        continue;
       }
       break;
      }
     }
     $10 = $3;
     $13 = $10 >> 31;
     $1 = $13;
     $8 = $14;
     $11 = $10;
     $7 = $8 - $10 | 0;
     $13 = $16;
     $10 = $1;
     $6 = $10 + ($11 >>> 0 > $8 >>> 0) | 0;
     $6 = $13 - $6 | 0;
     $13 = $7;
     $10 = $13 + 32 | 0;
     $7 = $10 >>> 0 < 32 ? $6 + 1 | 0 : $6;
     $11 = $2;
     $6 = $10;
     $12 = (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $11 >>> 0 > $6 >>> 0 : 0) ? ($6 | 0) > 0 ? $6 : 0 : $11;
     label$38: {
      if (($12 | 0) >= 113) {
       __floatsitf($9 + 384 | 0, $4);
       $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 392 | 0, 0);
       $24 = $6;
       $7 = i64toi32_i32$HIGH_BITS;
       $22 = $7;
       $19 = 0;
       $18 = 0;
       $7 = SAFE_HEAP_LOAD_i64_8_8($9, 384);
       $26 = $7;
       $6 = i64toi32_i32$HIGH_BITS;
       $25 = $6;
       break label$38;
      }
      __extenddftf2($9 + 352 | 0, scalbn(1, 144 - $12 | 0));
      __floatsitf($9 + 336 | 0, $4);
      $5 = $9 + 368 | 0;
      $6 = SAFE_HEAP_LOAD_i64_8_8($9, 352);
      $3 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $1 = $7;
      $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 360 | 0, 0);
      $4 = $7;
      $6 = i64toi32_i32$HIGH_BITS;
      $2 = $6;
      $6 = SAFE_HEAP_LOAD_i64_8_8($9, 336);
      $26 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $25 = $7;
      $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 344 | 0, 0);
      $24 = $7;
      $6 = i64toi32_i32$HIGH_BITS;
      $22 = $6;
      $6 = $1;
      $7 = $2;
      $11 = $25;
      $13 = $22;
      copysignl($5, $3, $6, $4, $7, $26, $11, $24, $13);
      $13 = SAFE_HEAP_LOAD_i64_8_8($9, 376);
      $28 = $13;
      $11 = i64toi32_i32$HIGH_BITS;
      $29 = $11;
      $11 = SAFE_HEAP_LOAD_i64_8_8($9, 368);
      $19 = $11;
      $13 = i64toi32_i32$HIGH_BITS;
      $18 = $13;
     }
     $1 = $9 + 320 | 0;
     $13 = $17;
     $11 = $20;
     $12 = !($23 & 1) & ((__letf2($15, $13, $21, $11, 0, 0, 0, 0) | 0) != 0 & ($12 | 0) < 32);
     __floatunsitf($1, $23 + $12 | 0);
     $3 = $9 + 304 | 0;
     $6 = SAFE_HEAP_LOAD_i64_8_8($9, 320);
     $1 = $6;
     $7 = i64toi32_i32$HIGH_BITS;
     $11 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 328 | 0, 0);
     $2 = $7;
     $6 = i64toi32_i32$HIGH_BITS;
     $13 = $6;
     $6 = $25;
     $7 = $22;
     __multf3($3, $26, $6, $24, $7, $1, $11, $2, $13);
     $4 = $9 + 272 | 0;
     $13 = SAFE_HEAP_LOAD_i64_8_8($9, 304);
     $3 = $13;
     $11 = i64toi32_i32$HIGH_BITS;
     $1 = $11;
     $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 312 | 0, 0);
     $13 = i64toi32_i32$HIGH_BITS;
     $2 = $13;
     $13 = $1;
     $1 = $11;
     $11 = $2;
     $7 = $18;
     $6 = $29;
     __addtf3($4, $3, $13, $1, $11, $19, $7, $28, $6);
     $8 = $12;
     $13 = $8 ? 0 : $15;
     $2 = $13;
     $13 = $20;
     $8 = $8 ? 0 : $13;
     $1 = $8;
     $7 = $17;
     $11 = $12 ? 0 : $7;
     $8 = $11;
     $7 = $12;
     $6 = $7 ? 0 : $21;
     $3 = $6;
     $6 = $1;
     $7 = $25;
     $11 = $22;
     __multf3($9 + 288 | 0, $2, $8, $3, $6, $26, $7, $24, $11);
     $13 = $9 + 256 | 0;
     $11 = SAFE_HEAP_LOAD_i64_8_8($9, 288);
     $3 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $1 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 296 | 0, 0);
     $4 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $2 = $11;
     $11 = SAFE_HEAP_LOAD_i64_8_8($9, 272);
     $5 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $6 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 280 | 0, 0);
     $10 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $8 = $11;
     $11 = $1;
     $7 = $2;
     __addtf3($13, $3, $11, $4, $7, $5, $6, $10, $8);
     $4 = $9 + 240 | 0;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9, 256);
     $3 = $8;
     $6 = i64toi32_i32$HIGH_BITS;
     $1 = $6;
     $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 264 | 0, 0);
     $8 = i64toi32_i32$HIGH_BITS;
     $2 = $8;
     $8 = $1;
     $1 = $6;
     $6 = $2;
     $7 = $18;
     $11 = $29;
     __subtf3($4, $3, $8, $1, $6, $19, $7, $28, $11);
     $11 = SAFE_HEAP_LOAD_i64_8_8($9, 240);
     $15 = $11;
     $7 = i64toi32_i32$HIGH_BITS;
     $17 = $7;
     $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 248 | 0, 0);
     $21 = $7;
     $11 = i64toi32_i32$HIGH_BITS;
     $20 = $11;
     $11 = $17;
     $7 = $20;
     if (!__letf2($15, $11, $21, $7, 0, 0, 0, 0)) {
      SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
     }
     $8 = $17;
     $6 = $20;
     scalbnl($9 + 224 | 0, $15, $8, $21, $6, $14);
     $6 = SAFE_HEAP_LOAD_i64_8_8($9, 232);
     $14 = $6;
     $8 = i64toi32_i32$HIGH_BITS;
     $16 = $8;
     $8 = SAFE_HEAP_LOAD_i64_8_8($9, 224);
     $15 = $8;
     $6 = i64toi32_i32$HIGH_BITS;
     $17 = $6;
     break label$21;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
    __floatsitf($9 + 208 | 0, $4);
    $4 = $9 + 192 | 0;
    $6 = SAFE_HEAP_LOAD_i64_8_8($9, 208);
    $3 = $6;
    $8 = i64toi32_i32$HIGH_BITS;
    $1 = $8;
    $8 = SAFE_HEAP_LOAD_i64_8_8($9 + 216 | 0, 0);
    $6 = i64toi32_i32$HIGH_BITS;
    $2 = $6;
    $6 = $1;
    $1 = $8;
    $8 = $2;
    __multf3($4, $3, $6, $1, $8, 0, 0, 0, 65536);
    $4 = $9 + 176 | 0;
    $11 = SAFE_HEAP_LOAD_i64_8_8($9, 192);
    $3 = $11;
    $7 = i64toi32_i32$HIGH_BITS;
    $1 = $7;
    $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 200 | 0, 0);
    $11 = i64toi32_i32$HIGH_BITS;
    $2 = $11;
    $11 = $1;
    $1 = $7;
    $7 = $2;
    __multf3($4, $3, $11, $1, $7, 0, 0, 0, 65536);
    $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 184 | 0, 0);
    $14 = $6;
    $8 = i64toi32_i32$HIGH_BITS;
    $16 = $8;
    $8 = SAFE_HEAP_LOAD_i64_8_8($9, 176);
    $15 = $8;
    $6 = i64toi32_i32$HIGH_BITS;
    $17 = $6;
    break label$21;
   }
   __shlim($1, 0, 0);
  }
  __extenddftf2($9 + 96 | 0, +($4 | 0) * 0);
  $6 = SAFE_HEAP_LOAD_i64_8_8($9 + 104 | 0, 0);
  $14 = $6;
  $8 = i64toi32_i32$HIGH_BITS;
  $16 = $8;
  $8 = SAFE_HEAP_LOAD_i64_8_8($9, 96);
  $15 = $8;
  $6 = i64toi32_i32$HIGH_BITS;
  $17 = $6;
 }
 $6 = $17;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $15, $6);
 $6 = $16;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $14, $6);
 __stack_pointer = $9 + 432 | 0;
}

function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $12 = __stack_pointer - 560 | 0;
 __stack_pointer = $12;
 SAFE_HEAP_STORE_i32_4_4($12, 44, 0);
 $10 = __DOUBLE_BITS_1($1);
 $7 = i64toi32_i32$HIGH_BITS;
 $15 = $7;
 label$1: {
  if (($7 | 0) < -1 ? 1 : ($7 | 0) <= -1) {
   $21 = 1;
   $22 = 1148;
   $1 = -$1;
   $15 = __DOUBLE_BITS_1($1);
   $7 = i64toi32_i32$HIGH_BITS;
   $15 = $7;
   break label$1;
  }
  if ($4 & 2048) {
   $21 = 1;
   $22 = 1151;
   break label$1;
  }
  $21 = $4 & 1;
  $22 = $21 ? 1154 : 1149;
  $26 = !$21;
 }
 $7 = $15;
 $15 = $7 & 2146435072;
 $7 = 0;
 label$4: {
  if (!$7 & ($15 | 0) == 2146435072) {
   $11 = $21 + 3 | 0;
   pad($0, 32, $2, $11, $4 & -65537);
   out($0, $22, $21);
   $6 = $5 & 32;
   out($0, $1 != $1 ? $6 ? 1534 : 2029 : $6 ? 1741 : 2051, 3);
   break label$4;
  }
  $19 = $12 + 16 | 0;
  label$6: {
   label$7: {
    label$8: {
     $1 = frexp($1, $12 + 44 | 0);
     $1 = $1 + $1;
     if ($1 != 0) {
      $6 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
      SAFE_HEAP_STORE_i32_4_4($12, 44, $6 - 1 | 0);
      $23 = $5 | 32;
      if (($23 | 0) != 97) {
       break label$8;
      }
      break label$6;
     }
     $23 = $5 | 32;
     if (($23 | 0) == 97) {
      break label$6;
     }
     $13 = ($3 | 0) < 0 ? 6 : $3;
     $24 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
     break label$7;
    }
    $24 = $6 - 29 | 0;
    SAFE_HEAP_STORE_i32_4_4($12, 44, $24);
    $13 = ($3 | 0) < 0 ? 6 : $3;
    $1 = $1 * 268435456;
   }
   $18 = ($24 | 0) < 0 ? $12 + 48 | 0 : $12 + 336 | 0;
   $9 = $18;
   while (1) {
    $3 = $9;
    if ($1 < 4294967296 & $1 >= 0) {
     $6 = ~~$1 >>> 0;
    } else {
     $6 = 0;
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, $6);
    $9 = $9 + 4 | 0;
    $1 = ($1 - +($6 >>> 0)) * 1e9;
    if ($1 != 0) {
     continue;
    }
    break;
   }
   label$13: {
    if (($24 | 0) < 1) {
     $3 = $24;
     $6 = $9;
     $8 = $18;
     break label$13;
    }
    $8 = $18;
    $3 = $24;
    while (1) {
     $3 = ($3 | 0) < 29 ? $3 : 29;
     $6 = $9 - 4 | 0;
     label$16: {
      if ($8 >>> 0 > $6 >>> 0) {
       break label$16;
      }
      $27 = $3;
      $11 = 0;
      $15 = 0;
      while (1) {
       $28 = $6;
       $10 = $11;
       $11 = $10;
       $15 = 0;
       $14 = $15;
       $15 = SAFE_HEAP_LOAD_i64_4_U_4($6, 0);
       $10 = i64toi32_i32$HIGH_BITS;
       $7 = $15;
       $17 = $27;
       $16 = $17 & 31;
       if (($17 & 63) >>> 0 >= 32) {
        $15 = $7 << $16;
        $17 = 0;
       } else {
        $15 = (1 << $16) - 1 & $7 >>> 32 - $16 | $10 << $16;
        $17 = $7 << $16;
       }
       $7 = $15;
       $15 = $14;
       $14 = $7 + $15 | 0;
       $10 = $11;
       $16 = $10 + $17 | 0;
       $14 = $16 >>> 0 < $17 >>> 0 ? $14 + 1 | 0 : $14;
       $29 = $14;
       $10 = __wasm_i64_udiv($16, $14, 1e9, 0);
       $11 = $10;
       $14 = i64toi32_i32$HIGH_BITS;
       $15 = $14;
       $10 = __wasm_i64_mul($11, $14, 1e9, 0);
       $14 = i64toi32_i32$HIGH_BITS;
       $30 = $14;
       $17 = $10;
       $7 = $16 - $10 | 0;
       $14 = $29;
       $10 = $30;
       $16 = $10 + ($16 >>> 0 < $17 >>> 0) | 0;
       $16 = $14 - $16 | 0;
       SAFE_HEAP_STORE_i64_4_4($28, 0, $7, $16);
       $6 = $6 - 4 | 0;
       if ($8 >>> 0 <= $6 >>> 0) {
        continue;
       }
       break;
      }
      $6 = $11;
      if (!$6) {
       break label$16;
      }
      $8 = $8 - 4 | 0;
      SAFE_HEAP_STORE_i32_4_4($8, 0, $6);
     }
     while (1) {
      $6 = $9;
      if ($8 >>> 0 < $6 >>> 0) {
       $9 = $6 - 4 | 0;
       if (!SAFE_HEAP_LOAD_i32_4_4($9, 0)) {
        continue;
       }
      }
      break;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($12, 44) - $3 | 0;
     SAFE_HEAP_STORE_i32_4_4($12, 44, $3);
     $9 = $6;
     if (($3 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   $9 = ($13 + 25 | 0) / 9 | 0;
   if (($3 | 0) <= -1) {
    $17 = $9 + 1 | 0;
    $25 = ($23 | 0) == 102;
    while (1) {
     $11 = ($3 | 0) < -9 ? 9 : 0 - $3 | 0;
     label$22: {
      if ($6 >>> 0 > $8 >>> 0) {
       $10 = 1e9 >>> $11 | 0;
       $14 = -1 << $11 ^ -1;
       $3 = 0;
       $9 = $8;
       while (1) {
        $7 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
        SAFE_HEAP_STORE_i32_4_4($9, 0, ($7 >>> $11 | 0) + $3 | 0);
        $3 = Math_imul($7 & $14, $10);
        $9 = $9 + 4 | 0;
        if ($9 >>> 0 < $6 >>> 0) {
         continue;
        }
        break;
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4($8, 0) ? $8 : $8 + 4 | 0;
       if (!$3) {
        break label$22;
       }
       SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
       $6 = $6 + 4 | 0;
       break label$22;
      }
      $8 = SAFE_HEAP_LOAD_i32_4_4($8, 0) ? $8 : $8 + 4 | 0;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($12, 44) + $11 | 0;
     SAFE_HEAP_STORE_i32_4_4($12, 44, $3);
     $9 = $25 ? $18 : $8;
     $6 = $6 - $9 >> 2 > ($17 | 0) ? $9 + ($17 << 2) | 0 : $6;
     if (($3 | 0) < 0) {
      continue;
     }
     break;
    }
   }
   $9 = 0;
   label$25: {
    if ($6 >>> 0 <= $8 >>> 0) {
     break label$25;
    }
    $9 = Math_imul($18 - $8 >> 2, 9);
    $3 = 10;
    $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    if ($7 >>> 0 < 10) {
     break label$25;
    }
    while (1) {
     $9 = $9 + 1 | 0;
     $3 = Math_imul($3, 10);
     if ($7 >>> 0 >= $3 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = ($13 - (($23 | 0) == 102 ? 0 : $9) | 0) - (($23 | 0) == 103 & ($13 | 0) != 0) | 0;
   if (($3 | 0) < (Math_imul($6 - $18 >> 2, 9) - 9 | 0)) {
    $7 = $3 + 9216 | 0;
    $10 = ($7 | 0) / 9 | 0;
    $11 = (($10 << 2) + (($24 | 0) < 0 ? $12 + 48 | 4 : $12 + 340 | 0) | 0) - 4096 | 0;
    $3 = 10;
    $7 = $7 - Math_imul($10, 9) | 0;
    if (($7 | 0) <= 7) {
     while (1) {
      $3 = Math_imul($3, 10);
      $7 = $7 + 1 | 0;
      if (($7 | 0) != 8) {
       continue;
      }
      break;
     }
    }
    $14 = $11 + 4 | 0;
    $7 = SAFE_HEAP_LOAD_i32_4_4($11, 0);
    $17 = ($7 >>> 0) / ($3 >>> 0) | 0;
    $10 = $7 - Math_imul($3, $17) | 0;
    label$30: {
     if (!(($6 | 0) == ($14 | 0) ? $10 : 1)) {
      break label$30;
     }
     $1 = ($6 | 0) == ($14 | 0) ? 1 : 1.5;
     $14 = $3 >>> 1 | 0;
     $20 = $10 >>> 0 < $14 >>> 0 ? .5 : ($14 | 0) == ($10 | 0) ? $1 : 1.5;
     $1 = $17 & 1 ? 9007199254740994 : 9007199254740992;
     label$31: {
      if ($26) {
       break label$31;
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 0) | 0) != 45) {
       break label$31;
      }
      $20 = -$20;
      $1 = -$1;
     }
     $7 = $7 - $10 | 0;
     SAFE_HEAP_STORE_i32_4_4($11, 0, $7);
     if ($1 + $20 == $1) {
      break label$30;
     }
     $9 = $3 + $7 | 0;
     SAFE_HEAP_STORE_i32_4_4($11, 0, $9);
     if ($9 >>> 0 >= 1e9) {
      while (1) {
       SAFE_HEAP_STORE_i32_4_4($11, 0, 0);
       $11 = $11 - 4 | 0;
       if ($11 >>> 0 < $8 >>> 0) {
        $8 = $8 - 4 | 0;
        SAFE_HEAP_STORE_i32_4_4($8, 0, 0);
       }
       $9 = SAFE_HEAP_LOAD_i32_4_4($11, 0) + 1 | 0;
       SAFE_HEAP_STORE_i32_4_4($11, 0, $9);
       if ($9 >>> 0 > 999999999) {
        continue;
       }
       break;
      }
     }
     $9 = Math_imul($18 - $8 >> 2, 9);
     $3 = 10;
     $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
     if ($7 >>> 0 < 10) {
      break label$30;
     }
     while (1) {
      $9 = $9 + 1 | 0;
      $3 = Math_imul($3, 10);
      if ($7 >>> 0 >= $3 >>> 0) {
       continue;
      }
      break;
     }
    }
    $3 = $11 + 4 | 0;
    $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
   }
   while (1) {
    $3 = $6;
    $7 = $6 >>> 0 <= $8 >>> 0;
    if (!$7) {
     $6 = $3 - 4 | 0;
     if (!SAFE_HEAP_LOAD_i32_4_4($6, 0)) {
      continue;
     }
    }
    break;
   }
   label$38: {
    if (($23 | 0) != 103) {
     $14 = $4 & 8;
     break label$38;
    }
    $6 = $13 ? $13 : 1;
    $11 = ($9 | 0) < ($6 | 0) & ($9 | 0) > -5;
    $13 = ($11 ? $9 ^ -1 : -1) + $6 | 0;
    $5 = ($11 ? -1 : -2) + $5 | 0;
    $14 = $4 & 8;
    if ($14) {
     break label$38;
    }
    $6 = -9;
    label$40: {
     if ($7) {
      break label$40;
     }
     $11 = SAFE_HEAP_LOAD_i32_4_4($3 - 4 | 0, 0);
     if (!$11) {
      break label$40;
     }
     $7 = 10;
     $6 = 0;
     if (($11 >>> 0) % 10 | 0) {
      break label$40;
     }
     while (1) {
      $10 = $6;
      $6 = $6 + 1 | 0;
      $7 = Math_imul($7, 10);
      if (!(($11 >>> 0) % ($7 >>> 0) | 0)) {
       continue;
      }
      break;
     }
     $6 = $10 ^ -1;
    }
    $7 = Math_imul($3 - $18 >> 2, 9);
    if (($5 & -33) == 70) {
     $14 = 0;
     $6 = ($6 + $7 | 0) - 9 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
     break label$38;
    }
    $14 = 0;
    $6 = (($9 + $7 | 0) + $6 | 0) - 9 | 0;
    $6 = ($6 | 0) > 0 ? $6 : 0;
    $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
   }
   $17 = ($13 | $14) != 0;
   $10 = $0;
   $15 = $2;
   $7 = $5 & -33;
   if (($7 | 0) == 70) {
    $6 = ($9 | 0) > 0 ? $9 : 0;
   } else {
    $6 = $9 >> 31;
    $6 = fmt_u($6 ^ $6 + $9, 0, $19);
    if (($19 - $6 | 0) <= 1) {
     while (1) {
      $6 = $6 - 1 | 0;
      SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
      if (($19 - $6 | 0) < 2) {
       continue;
      }
      break;
     }
    }
    $25 = $6 - 2 | 0;
    SAFE_HEAP_STORE_i32_1_1($25, 0, $5);
    SAFE_HEAP_STORE_i32_1_1($6 - 1 | 0, 0, ($9 | 0) < 0 ? 45 : 43);
    $6 = $19 - $25 | 0;
   }
   $11 = ($6 + (($13 + $21 | 0) + $17 | 0) | 0) + 1 | 0;
   pad($10, 32, $15, $11, $4);
   out($0, $22, $21);
   pad($0, 48, $2, $11, $4 ^ 65536);
   label$47: {
    label$48: {
     label$49: {
      if (($7 | 0) == 70) {
       $10 = $12 + 16 | 8;
       $9 = $12 + 16 | 9;
       $7 = $8 >>> 0 > $18 >>> 0 ? $18 : $8;
       $8 = $7;
       while (1) {
        $16 = SAFE_HEAP_LOAD_i64_4_U_4($8, 0);
        $15 = i64toi32_i32$HIGH_BITS;
        $6 = fmt_u($16, $15, $9);
        label$52: {
         if (($8 | 0) != ($7 | 0)) {
          if ($12 + 16 >>> 0 >= $6 >>> 0) {
           break label$52;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$52;
         }
         if (($6 | 0) != ($9 | 0)) {
          break label$52;
         }
         SAFE_HEAP_STORE_i32_1_1($12, 24, 48);
         $6 = $10;
        }
        out($0, $6, $9 - $6 | 0);
        $8 = $8 + 4 | 0;
        if ($18 >>> 0 >= $8 >>> 0) {
         continue;
        }
        break;
       }
       $6 = 0;
       if (!$17) {
        break label$48;
       }
       out($0, 2880, 1);
       if (($13 | 0) < 1 | $3 >>> 0 <= $8 >>> 0) {
        break label$49;
       }
       while (1) {
        $15 = SAFE_HEAP_LOAD_i64_4_U_4($8, 0);
        $16 = i64toi32_i32$HIGH_BITS;
        $6 = fmt_u($15, $16, $9);
        if ($6 >>> 0 > $12 + 16 >>> 0) {
         while (1) {
          $6 = $6 - 1 | 0;
          SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
          if ($12 + 16 >>> 0 < $6 >>> 0) {
           continue;
          }
          break;
         }
        }
        out($0, $6, ($13 | 0) < 9 ? $13 : 9);
        $6 = $13 - 9 | 0;
        $8 = $8 + 4 | 0;
        if ($8 >>> 0 >= $3 >>> 0) {
         break label$48;
        }
        $7 = ($13 | 0) > 9;
        $13 = $6;
        if ($7) {
         continue;
        }
        break;
       }
       break label$48;
      }
      label$58: {
       if (($13 | 0) < 0) {
        break label$58;
       }
       $10 = $3 >>> 0 > $8 >>> 0 ? $3 : $8 + 4 | 0;
       $3 = $12 + 16 | 9;
       $18 = $12 + 16 | 8;
       $9 = $8;
       while (1) {
        $16 = SAFE_HEAP_LOAD_i64_4_U_4($9, 0);
        $15 = i64toi32_i32$HIGH_BITS;
        $6 = fmt_u($16, $15, $3);
        if (($6 | 0) == ($3 | 0)) {
         SAFE_HEAP_STORE_i32_1_1($12, 24, 48);
         $6 = $18;
        }
        label$61: {
         if (($8 | 0) != ($9 | 0)) {
          if ($12 + 16 >>> 0 >= $6 >>> 0) {
           break label$61;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$61;
         }
         out($0, $6, 1);
         $6 = $6 + 1 | 0;
         if ($14 ? 0 : ($13 | 0) <= 0) {
          break label$61;
         }
         out($0, 2880, 1);
        }
        $7 = $3 - $6 | 0;
        out($0, $6, ($7 | 0) < ($13 | 0) ? $7 : $13);
        $13 = $13 - $7 | 0;
        $9 = $9 + 4 | 0;
        if ($10 >>> 0 <= $9 >>> 0) {
         break label$58;
        }
        if (($13 | 0) > -1) {
         continue;
        }
        break;
       }
      }
      pad($0, 48, $13 + 18 | 0, 18, 0);
      out($0, $25, $19 - $25 | 0);
      break label$47;
     }
     $6 = $13;
    }
    pad($0, 48, $6 + 9 | 0, 9, 0);
   }
   break label$4;
  }
  $9 = $5 & 32;
  $13 = $9 ? $22 + 9 | 0 : $22;
  label$64: {
   if ($3 >>> 0 > 11) {
    break label$64;
   }
   $6 = 12 - $3 | 0;
   if (!$6) {
    break label$64;
   }
   $20 = 8;
   while (1) {
    $20 = $20 * 16;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue;
    }
    break;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($13, 0) | 0) == 45) {
    $1 = -($20 + (-$1 - $20));
    break label$64;
   }
   $1 = $1 + $20 - $20;
  }
  $6 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
  $10 = $6;
  $6 = $6 >> 31;
  $6 = fmt_u($6 ^ $6 + $10, 0, $19);
  if (($19 | 0) == ($6 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($12, 15, 48);
   $6 = $12 + 15 | 0;
  }
  $14 = $21 | 2;
  $8 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
  $10 = $6 - 2 | 0;
  SAFE_HEAP_STORE_i32_1_1($10, 0, $5 + 15 | 0);
  SAFE_HEAP_STORE_i32_1_1($6 - 1 | 0, 0, ($8 | 0) < 0 ? 45 : 43);
  $7 = $4 & 8;
  $8 = $12 + 16 | 0;
  while (1) {
   $6 = $8;
   $5 = $6;
   if (Math_abs($1) < 2147483648) {
    $8 = ~~$1;
   } else {
    $8 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($8 + 8176 | 0, 0) | $9);
   $1 = ($1 - +($8 | 0)) * 16;
   $8 = $6 + 1 | 0;
   if (!(!($7 ? 1 : ($3 | 0) > 0 | $1 != 0) | ($8 - ($12 + 16 | 0) | 0) != 1)) {
    SAFE_HEAP_STORE_i32_1_1($6, 1, 46);
    $8 = $6 + 2 | 0;
   }
   if ($1 != 0) {
    continue;
   }
   break;
  }
  $6 = !$3 | (($8 - $12 | 0) - 18 | 0) >= ($3 | 0) ? ($19 - (($12 + 16 | 0) + $10 | 0) | 0) + $8 | 0 : (($3 + $19 | 0) - $10 | 0) + 2 | 0;
  $11 = $14 + $6 | 0;
  pad($0, 32, $2, $11, $4);
  out($0, $13, $14);
  pad($0, 48, $2, $11, $4 ^ 65536);
  $8 = $8 - ($12 + 16 | 0) | 0;
  out($0, $12 + 16 | 0, $8);
  $9 = $19 - $10 | 0;
  pad($0, 48, $6 - ($9 + $8 | 0) | 0, 0, 0);
  out($0, $10, $9);
 }
 pad($0, 32, $2, $11, $4 ^ 8192);
 __stack_pointer = $12 + 560 | 0;
 return (($2 | 0) > ($11 | 0) ? $2 : $11) | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 SAFE_HEAP_STORE_i32_4_4($7, 56, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 std____2__ios_base__getloc_28_29_20const($7, $3);
 $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($7);
 std____2__locale___locale_28_29($7);
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     switch ($6 - 65 | 0) {
     case 0:
     case 32:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 1:
     case 33:
     case 39:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 34:
      $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 12) | 0]($0 + 8 | 0) | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) << 2) | 0));
      break label$2;

     case 35:
     case 36:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 12 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 3:
      SAFE_HEAP_STORE_i64_8_8($7 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13096), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13088), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_8(0, 13080), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13072), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0));
      break label$2;

     case 5:
      SAFE_HEAP_STORE_i64_8_8($7 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13128), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13120), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_8(0, 13112), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13104), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0));
      break label$2;

     case 7:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 8:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 41:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 28 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 44:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 12:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 4 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 45:
     case 51:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 47:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 49:
      $6 = memcpy($7, 13136, 44);
      SAFE_HEAP_STORE_i32_4_4($6, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 44 | 0));
      break label$2;

     case 17:
      SAFE_HEAP_STORE_i32_4_4($7 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_4_4(0, 13200));
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_8(0, 13192), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13184), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 20 | 0));
      break label$2;

     case 18:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 19:
      SAFE_HEAP_STORE_i64_8_8($7 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13240), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13232), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_8(0, 13224), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13216), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0));
      break label$2;

     case 54:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 55:
      $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4, $5) | 0;
      break label$1;

     case 23:
      $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 24) | 0]($0 + 8 | 0) | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 56, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) << 2) | 0));
      break label$2;

     case 56:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     case 24:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$2;

     default:
      if (($6 | 0) == 37) {
       break label$3;
      }
      break;

     case 2:
     case 4:
     case 6:
     case 9:
     case 10:
     case 11:
     case 13:
     case 14:
     case 15:
     case 16:
     case 20:
     case 21:
     case 22:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 37:
     case 38:
     case 40:
     case 42:
     case 43:
     case 46:
     case 48:
     case 50:
     case 52:
     case 53:
      break label$4;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 4);
    break label$2;
   }
   std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $7 + 56 | 0, $2, $4, $8);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($7, 56);
 }
 __stack_pointer = $7 - -64 | 0;
 return $4 | 0;
}

function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $15 = __stack_pointer - 112 | 0;
 __stack_pointer = $15;
 $12 = $7;
 $19 = $12;
 $14 = $8;
 $10 = $14 & 2147483647;
 $18 = $10;
 $10 = $2;
 $11 = $1 >>> 0 < 1;
 $11 = $10 - $11 | 0;
 $20 = $11;
 $14 = $1;
 $9 = $14 - 1 | 0;
 $21 = ($9 | 0) == -1 & ($11 | 0) == -1;
 $13 = $3;
 $22 = $13;
 $10 = $4;
 $11 = $10 & 2147483647;
 $23 = $11;
 $13 = $20;
 $11 = $2;
 $10 = $1;
 $13 = ($13 | 0) == ($11 | 0) & $9 >>> 0 < $10 >>> 0 | $11 >>> 0 > $13 >>> 0;
 $10 = $23;
 $9 = $10;
 $14 = $3;
 $12 = $14 + $13 | 0;
 $9 = $12 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $10 = $12;
 $11 = $10 - 1 | 0;
 $12 = $10 >>> 0 < 1;
 $12 = $9 - $12 | 0;
 label$1: {
  label$2: {
   $10 = $12 >>> 0 > 2147418111;
   $9 = $12;
   if (!(($11 | 0) == -1 & ($9 | 0) == 2147418111 ? $21 : $10)) {
    $13 = $6;
    $11 = $5 >>> 0 < 1;
    $11 = $13 - $11 | 0;
    $10 = $5;
    $14 = $10 - 1 | 0;
    $20 = ($14 | 0) != -1 | ($11 | 0) != -1;
    $13 = $6;
    $10 = $14;
    $12 = $5;
    $11 = ($11 | 0) == ($13 | 0) & $10 >>> 0 < $12 >>> 0 | $13 >>> 0 > $11 >>> 0;
    $12 = $18;
    $10 = $19;
    $9 = $10 + $11 | 0;
    $14 = $9 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
    $13 = $9 - 1 | 0;
    $9 = $9 >>> 0 < 1;
    $9 = $14 - $9 | 0;
    $10 = ($9 | 0) == 2147418111 & ($13 | 0) != -1 | $9 >>> 0 < 2147418111;
    $14 = $9;
    $11 = $13;
    if (($11 | 0) == -1 & ($14 | 0) == 2147418111 ? $20 : $10) {
     break label$2;
    }
   }
   $11 = $2;
   $14 = !($11 | $1);
   $11 = $23;
   $10 = $11 >>> 0 < 2147418112;
   $12 = $11;
   $9 = $22;
   if (!(!$9 & ($12 | 0) == 2147418112 ? $14 : $10)) {
    $14 = $3;
    $7 = $14;
    $9 = $4;
    $12 = $9 | 32768;
    $8 = $12;
    $5 = $1;
    $12 = $2;
    $6 = $12;
    break label$1;
   }
   $12 = $6;
   $14 = !($12 | $5);
   $12 = $18;
   $10 = $12 >>> 0 < 2147418112;
   $9 = $12;
   $11 = $19;
   if (!(!$11 & ($9 | 0) == 2147418112 ? $14 : $10)) {
    $14 = $7;
    $7 = $14;
    $11 = $8;
    $9 = $11 | 32768;
    $8 = $9;
    break label$1;
   }
   $9 = $23;
   $14 = $9 ^ 2147418112;
   $10 = $14;
   $11 = $22;
   $12 = $11;
   $9 = $1;
   $14 = $2;
   $11 = $10;
   $11 = $14 | $11;
   if (!($12 | $9 | $11)) {
    $14 = $1;
    $12 = $5;
    $10 = $14 ^ $12;
    $9 = $6;
    $11 = $2;
    $9 = $9 ^ $11;
    $5 = $9;
    $14 = $8;
    $9 = $4;
    $14 = $14 ^ $9;
    $12 = $7;
    $11 = $3;
    $9 = $12 ^ $11;
    $12 = $9;
    $11 = $14 ^ -2147483648;
    $9 = $11;
    $11 = $5;
    $9 = $9 | $11;
    $14 = $10;
    $16 = !($9 | ($14 | $12));
    $10 = $16;
    $12 = $10 ? 0 : $3;
    $7 = $12;
    $14 = $4;
    $11 = $10 ? 2147450880 : $14;
    $8 = $11;
    $9 = $10 ? 0 : $1;
    $5 = $9;
    $12 = $2;
    $10 = $10 ? 0 : $12;
    $6 = $10;
    break label$1;
   }
   $10 = $18;
   $9 = $10 ^ 2147418112;
   $10 = $5;
   $14 = $19;
   $11 = $14;
   $14 = $9;
   $9 = $6;
   $14 = $14 | $9;
   if (!($10 | $11 | $14)) {
    break label$1;
   }
   $14 = $2;
   $10 = $23;
   $10 = $14 | $10;
   $9 = $1;
   $11 = $22;
   if (!($10 | ($9 | $11))) {
    $10 = $6;
    $9 = $18;
    $9 = $10 | $9;
    $14 = $5;
    $11 = $19;
    $10 = $14 | $11;
    if ($10 | $9) {
     break label$1;
    }
    $14 = $5;
    $11 = $1;
    $5 = $14 & $11;
    $10 = $2;
    $9 = $6;
    $9 = $10 & $9;
    $6 = $9;
    $14 = $7;
    $10 = $3;
    $7 = $14 & $10;
    $9 = $4;
    $11 = $8;
    $11 = $9 & $11;
    $8 = $11;
    break label$1;
   }
   $10 = $18;
   $11 = $6;
   $10 = $10 | $11;
   $14 = $19;
   $9 = $5;
   if ($10 | ($14 | $9)) {
    break label$2;
   }
   $5 = $1;
   $10 = $2;
   $6 = $10;
   $7 = $3;
   $10 = $4;
   $8 = $10;
   break label$1;
  }
  $10 = $2;
  $9 = $6;
  $14 = $5;
  $11 = $1;
  $13 = ($10 | 0) == ($9 | 0) & $14 >>> 0 > $11 >>> 0 | $10 >>> 0 < $9 >>> 0;
  $10 = $23;
  $11 = $18;
  $14 = $19;
  $9 = $22;
  $12 = ($10 | 0) == ($11 | 0) & $14 >>> 0 > $9 >>> 0 | $11 >>> 0 > $10 >>> 0;
  $14 = $11;
  $9 = $19;
  $11 = $10;
  $10 = $22;
  $17 = ($9 | 0) == ($10 | 0) & ($11 | 0) == ($14 | 0) ? $13 : $12;
  $12 = $17;
  $11 = $12 ? $5 : $1;
  $19 = $11;
  $9 = $6;
  $14 = $2;
  $10 = $12 ? $9 : $14;
  $18 = $10;
  $9 = $12 ? $7 : $3;
  $22 = $9;
  $10 = $8;
  $11 = $4;
  $12 = $12 ? $10 : $11;
  $23 = $12;
  $21 = $9;
  $9 = $12 & 65535;
  $20 = $9;
  $11 = $17;
  $10 = $11 ? $3 : $7;
  $3 = $10;
  $9 = $4;
  $14 = $8;
  $12 = $11 ? $9 : $14;
  $4 = $12;
  $24 = $12 >>> 16 & 32767;
  $10 = $23;
  $16 = $10 >>> 16 & 32767;
  if (!$16) {
   $11 = $20;
   $16 = !($11 | $21);
   $14 = $16;
   $9 = $14 ? $19 : $21;
   $11 = $18;
   $12 = $20;
   $10 = $14 ? $11 : $12;
   $11 = Math_clz32($10);
   $13 = 0;
   $9 = ($11 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $11;
   $11 = $16 << 6;
   $12 = $9 + $11 | 0;
   $13 = $18;
   $9 = $20;
   __ashlti3($15 + 96 | 0, $19, $13, $21, $9, $12 - 15 | 0);
   $16 = 16 - $12 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 104 | 0, 0);
   $21 = $9;
   $13 = i64toi32_i32$HIGH_BITS;
   $20 = $13;
   $13 = SAFE_HEAP_LOAD_i64_8_8($15, 96);
   $19 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $18 = $9;
  }
  $10 = $17;
  $11 = $10 ? $1 : $5;
  $5 = $11;
  $9 = $2;
  $13 = $6;
  $14 = $10 ? $9 : $13;
  $6 = $14;
  $10 = $3;
  $7 = $10;
  $14 = $4;
  $11 = $14 & 65535;
  $8 = $11;
  if (!$24) {
   $11 = $8;
   $17 = !($7 | $11);
   $13 = $17;
   $9 = $13 ? $5 : $7;
   $11 = $6;
   $10 = $8;
   $14 = $13 ? $11 : $10;
   $11 = Math_clz32($14);
   $12 = 0;
   $9 = ($11 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $11;
   $11 = $17 << 6;
   $10 = $9 + $11 | 0;
   $12 = $6;
   $9 = $8;
   __ashlti3($15 + 80 | 0, $5, $12, $7, $9, $10 - 15 | 0);
   $24 = 16 - $10 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 88 | 0, 0);
   $7 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $8 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($15, 80);
   $5 = $12;
   $9 = i64toi32_i32$HIGH_BITS;
   $6 = $9;
  }
  $13 = $7;
  $2 = $13 << 3;
  $9 = $8;
  $12 = $9 << 3 | $13 >>> 29;
  $1 = $12;
  $12 = $6;
  $11 = $12 >>> 29 | 0;
  $13 = 0;
  $9 = $13;
  $13 = $1;
  $9 = $13 | $9;
  $12 = $2;
  $13 = $12 | $11;
  $7 = $13;
  $12 = $9 | 524288;
  $8 = $12;
  $9 = $21;
  $12 = $20;
  $13 = $12 << 3 | $9 >>> 29;
  $2 = $13;
  $13 = $18;
  $11 = $13 >>> 29 | 0;
  $13 = $9 << 3;
  $1 = $13 | $11;
  $9 = 0;
  $12 = $9;
  $9 = $2;
  $12 = $12 | $9;
  $2 = $12;
  $9 = $5;
  $5 = $9 << 3;
  $12 = $6;
  $13 = $12 << 3 | $9 >>> 29;
  $6 = $13;
  $12 = $3;
  $11 = $22;
  $21 = $12 ^ $11;
  $13 = $4;
  $9 = $23;
  $9 = $13 ^ $9;
  $20 = $9;
  $17 = $16 - $24 | 0;
  label$10: {
   if (!$17) {
    break label$10;
   }
   if ($17 >>> 0 > 127) {
    $7 = 0;
    $8 = 0;
    $5 = 1;
    $6 = 0;
    break label$10;
   }
   $9 = $6;
   $12 = $8;
   __ashlti3($15 - -64 | 0, $5, $9, $7, $12, 128 - $17 | 0);
   $12 = $9;
   $9 = $8;
   __lshrti3($15 + 48 | 0, $5, $12, $7, $9, $17);
   $9 = SAFE_HEAP_LOAD_i64_8_8($15, 48);
   $5 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $4 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($15, 64);
   $13 = $12;
   $9 = i64toi32_i32$HIGH_BITS;
   $3 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 72 | 0, 0);
   $11 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $9 = $12;
   $12 = $3;
   $9 = $12 | $9;
   $12 = $13 | $11;
   $13 = ($12 | 0) != 0 | ($9 | 0) != 0;
   $11 = $5;
   $5 = $13 | $11;
   $12 = $4;
   $9 = $12;
   $6 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($15 + 56 | 0, 0);
   $7 = $9;
   $11 = i64toi32_i32$HIGH_BITS;
   $8 = $11;
  }
  $12 = $1;
  $24 = $12;
  $11 = $2;
  $9 = $11 | 524288;
  $17 = $9;
  $11 = $19;
  $3 = $11 << 3;
  $9 = $18;
  $12 = $9 << 3 | $11 >>> 29;
  $4 = $12;
  $12 = $20;
  label$12: {
   if (($12 | 0) < -1 ? 1 : ($12 | 0) <= -1) {
    $13 = $3;
    $11 = $5;
    $14 = $13 - $11 | 0;
    $1 = $14;
    $9 = $4;
    $12 = $6;
    $10 = $12 + ($13 >>> 0 < $11 >>> 0) | 0;
    $10 = $9 - $10 | 0;
    $2 = $10;
    $9 = $24;
    $11 = $7;
    $12 = $9 - $11 | 0;
    $10 = $17;
    $13 = $8;
    $14 = $13 + ($9 >>> 0 < $11 >>> 0) | 0;
    $14 = $10 - $14 | 0;
    $8 = $14;
    $14 = $4;
    $9 = $6;
    $10 = $3;
    $11 = $5;
    $9 = ($14 | 0) == ($9 | 0) & $10 >>> 0 < $11 >>> 0 | $14 >>> 0 < $9 >>> 0;
    $11 = $12;
    $13 = $11 - $9 | 0;
    $7 = $13;
    $10 = $8;
    $12 = $9 >>> 0 > $11 >>> 0;
    $12 = $10 - $12 | 0;
    $8 = $12;
    $12 = $2;
    $11 = $8;
    $11 = $12 | $11;
    $10 = $1;
    $9 = $13;
    if (!($11 | ($10 | $9))) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     break label$1;
    }
    $11 = $8;
    if ($11 >>> 0 > 524287) {
     break label$12;
    }
    $12 = $8;
    $17 = !($7 | $12);
    $14 = $17;
    $10 = $14 ? $1 : $7;
    $12 = $2;
    $9 = $14 ? $12 : $8;
    $12 = Math_clz32($9);
    $10 = ($12 | 0) == 32 ? Math_clz32($10) + 32 | 0 : $12;
    $12 = $17 << 6;
    $11 = $10 + $12 | 0;
    $17 = $11 - 12 | 0;
    $13 = $2;
    $10 = $8;
    __ashlti3($15 + 32 | 0, $1, $13, $7, $10, $17);
    $16 = $16 - $17 | 0;
    $10 = SAFE_HEAP_LOAD_i64_8_8($15 + 40 | 0, 0);
    $7 = $10;
    $13 = i64toi32_i32$HIGH_BITS;
    $8 = $13;
    $13 = SAFE_HEAP_LOAD_i64_8_8($15, 32);
    $1 = $13;
    $10 = i64toi32_i32$HIGH_BITS;
    $2 = $10;
    break label$12;
   }
   $10 = $4;
   $13 = $6;
   $11 = $10 + $13 | 0;
   $14 = $3;
   $12 = $5;
   $9 = $14 + $12 | 0;
   $1 = $9;
   $11 = $12 >>> 0 > $9 >>> 0 ? $11 + 1 | 0 : $11;
   $2 = $11;
   $4 = ($13 | 0) == ($11 | 0) & $9 >>> 0 < $12 >>> 0 | $13 >>> 0 > $11 >>> 0;
   $10 = $8;
   $11 = $17;
   $9 = $10 + $11 | 0;
   $14 = $24;
   $12 = $7;
   $13 = $14 + $12 | 0;
   $3 = $13;
   $9 = $14 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $12 = $9;
   $14 = $3;
   $10 = $4;
   $11 = $14 + $10 | 0;
   $7 = $11;
   $13 = $11 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $13;
   $10 = $13 & 1048576;
   if (!$10) {
    break label$12;
   }
   $13 = $1;
   $5 = $13 & 1;
   $9 = 0;
   $4 = $9;
   $10 = $7;
   $13 = $10 << 31;
   $3 = $13;
   $9 = $1;
   $14 = ($2 & 1) << 31 | $9 >>> 1;
   $13 = $2;
   $10 = $13 >>> 1 | 0;
   $9 = $10;
   $10 = $3;
   $9 = $10 | $9;
   $13 = 0;
   $14 = $14 | $13;
   $10 = $5;
   $1 = $14 | $10;
   $13 = $9;
   $9 = $4;
   $13 = $13 | $9;
   $2 = $13;
   $16 = $16 + 1 | 0;
   $9 = $7;
   $7 = ($8 & 1) << 31 | $9 >>> 1;
   $13 = $8;
   $10 = $13 >>> 1 | 0;
   $8 = $10;
  }
  $3 = 0;
  $10 = $23;
  $9 = $10 & -2147483648;
  $4 = $9;
  if (($16 | 0) >= 32767) {
   $10 = $3;
   $7 = $10;
   $9 = $4;
   $13 = $9 | 2147418112;
   $8 = $13;
   $5 = 0;
   $6 = 0;
   break label$1;
  }
  $17 = 0;
  label$16: {
   if (($16 | 0) > 0) {
    $17 = $16;
    break label$16;
   }
   $13 = $2;
   $10 = $8;
   __ashlti3($15 + 16 | 0, $1, $13, $7, $10, $16 + 127 | 0);
   $10 = $13;
   $13 = $8;
   __lshrti3($15, $1, $10, $7, $13, 1 - $16 | 0);
   $13 = SAFE_HEAP_LOAD_i64_8_8($15, 0);
   $5 = $13;
   $10 = i64toi32_i32$HIGH_BITS;
   $2 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($15, 16);
   $9 = $10;
   $13 = i64toi32_i32$HIGH_BITS;
   $1 = $13;
   $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 24 | 0, 0);
   $14 = $13;
   $10 = i64toi32_i32$HIGH_BITS;
   $13 = $10;
   $10 = $1;
   $13 = $10 | $13;
   $10 = $14 | $9;
   $14 = $5;
   $9 = ($10 | 0) != 0 | ($13 | 0) != 0;
   $1 = $14 | $9;
   $10 = $2;
   $2 = $10;
   $13 = SAFE_HEAP_LOAD_i64_8_8($15 + 8 | 0, 0);
   $7 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $8 = $14;
  }
  $10 = $7;
  $13 = $10 << 29;
  $6 = $13;
  $13 = $2;
  $10 = $13 >>> 3 | 0;
  $14 = $1;
  $13 = 0;
  $9 = ($2 & 7) << 29 | $14 >>> 3;
  $5 = $13 | $9;
  $14 = $10;
  $10 = $6;
  $14 = $14 | $10;
  $6 = $14;
  $14 = $8;
  $13 = $14 >>> 3 | 0;
  $10 = $7;
  $14 = ($14 & 7) << 29 | $10 >>> 3;
  $7 = $14;
  $10 = $13 & 65535;
  $13 = $17;
  $14 = $13 << 16;
  $13 = $14;
  $13 = $10 | $13;
  $10 = $7;
  $9 = 0;
  $14 = $10 | $9;
  $7 = $14 | $3;
  $10 = $4;
  $10 = $10 | $13;
  $8 = $10;
  $16 = $1 & 7;
  label$18: {
   label$19: {
    label$20: {
     switch (__fe_getround() | 0) {
     case 0:
      $10 = $6;
      $11 = $10;
      $13 = $5;
      $9 = $16 >>> 0 > 4;
      $12 = $13 + $9 | 0;
      $11 = $12 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
      $1 = $12;
      $13 = $10;
      $2 = $11;
      $10 = $12;
      $9 = $5;
      $13 = ($13 | 0) == ($11 | 0) & $10 >>> 0 < $9 >>> 0 | $13 >>> 0 > $11 >>> 0;
      $10 = $8;
      $9 = $7;
      $14 = $13 + $9 | 0;
      $12 = $14 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
      $7 = $14;
      $8 = $12;
      if (($16 | 0) != 4) {
       $5 = $1;
       $12 = $2;
       $6 = $12;
       break label$19;
      }
      $10 = $1;
      $3 = $10 & 1;
      $12 = $3;
      $13 = $10;
      $11 = $12 + $10 | 0;
      $10 = $2;
      $9 = 0;
      $14 = $10 + $9 | 0;
      $5 = $11;
      $14 = $13 >>> 0 > $11 >>> 0 ? $14 + 1 | 0 : $14;
      $6 = $14;
      $12 = $9;
      $13 = $3;
      $9 = $11;
      $12 = ($14 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $14 >>> 0 < $12 >>> 0;
      $9 = $8;
      $13 = $7;
      $10 = $12 + $13 | 0;
      $11 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $7 = $10;
      $8 = $11;
      break label$18;

     case 1:
      $11 = $4;
      $13 = (($3 | 0) != 0 | ($11 | 0) != 0) & ($16 | 0) != 0;
      $9 = $6;
      $12 = $5;
      $14 = $12 + $13 | 0;
      $10 = $14 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
      $1 = $14;
      $2 = $10;
      $12 = $9;
      $13 = $5;
      $9 = $14;
      $12 = ($10 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $10 >>> 0 < $12 >>> 0;
      $9 = $8;
      $13 = $7;
      $11 = $12 + $13 | 0;
      $7 = $11;
      $14 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $8 = $14;
      $5 = $1;
      $14 = $2;
      $6 = $14;
      break label$19;

     case 2:
      break label$20;

     default:
      break label$19;
     }
    }
    $14 = $4;
    $12 = !($14 | $3) & ($16 | 0) != 0;
    $9 = $5;
    $10 = $12 + $9 | 0;
    $1 = $10;
    $14 = $6;
    $11 = $14;
    $9 = $11;
    $11 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
    $2 = $11;
    $12 = $5;
    $9 = ($9 | 0) == ($11 | 0) & $10 >>> 0 < $12 >>> 0 | $9 >>> 0 > $11 >>> 0;
    $14 = $8;
    $10 = $14;
    $12 = $7;
    $13 = $12 + $9 | 0;
    $10 = $13 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
    $7 = $13;
    $8 = $10;
    $5 = $1;
    $10 = $2;
    $6 = $10;
   }
   if (!$16) {
    break label$1;
   }
  }
  __fe_raise_inexact();
 }
 $10 = $6;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $5, $10);
 $10 = $8;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $7, $10);
 __stack_pointer = $15 + 112 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0;
 $7 = __stack_pointer - 32 | 0;
 __stack_pointer = $7;
 SAFE_HEAP_STORE_i32_4_4($7, 24, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 std____2__ios_base__getloc_28_29_20const($7 + 8 | 0, $3);
 $8 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($7 + 8 | 0);
 std____2__locale___locale_28_29($7 + 8 | 0);
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     switch ($6 - 65 | 0) {
     case 0:
     case 32:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 1:
     case 33:
     case 39:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 34:
      $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 12) | 0]($0 + 8 | 0) | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | 0));
      break label$2;

     case 35:
     case 36:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 12 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 3:
      SAFE_HEAP_STORE_i64_8_8($7, 8, 623865125, 2032480100);
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0));
      break label$2;

     case 5:
      SAFE_HEAP_STORE_i64_8_8($7, 8, 623728933, 1680158061);
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0));
      break label$2;

     case 7:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 8:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 41:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 28 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 44:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 12:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 4 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 45:
     case 51:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 47:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 49:
      SAFE_HEAP_STORE_i32_4_1($7, 15, SAFE_HEAP_LOAD_i32_4_1(0, 13060));
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_1(0, 13053), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 19 | 0));
      break label$2;

     case 17:
      SAFE_HEAP_STORE_i32_1_1($7 + 12 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1(0, 13068));
      SAFE_HEAP_STORE_i32_4_4($7, 8, SAFE_HEAP_LOAD_i32_4_1(0, 13064));
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 13 | 0));
      break label$2;

     case 18:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 19:
      SAFE_HEAP_STORE_i64_8_8($7, 8, 624576549, 1394948685);
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0));
      break label$2;

     case 54:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 55:
      $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4, $5) | 0;
      break label$1;

     case 23:
      $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 24) | 0]($0 + 8 | 0) | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 24, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | 0));
      break label$2;

     case 56:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     case 24:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$2;

     default:
      if (($6 | 0) == 37) {
       break label$3;
      }
      break;

     case 2:
     case 4:
     case 6:
     case 9:
     case 10:
     case 11:
     case 13:
     case 14:
     case 15:
     case 16:
     case 20:
     case 21:
     case 22:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 37:
     case 38:
     case 40:
     case 42:
     case 43:
     case 46:
     case 48:
     case 50:
     case 52:
     case 53:
      break label$4;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 4);
    break label$2;
   }
   std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $7 + 24 | 0, $2, $4, $8);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($7, 24);
 }
 __stack_pointer = $7 + 32 | 0;
 return $4 | 0;
}

function StoneMask($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 $12 = __stack_pointer - 144 | 0;
 __stack_pointer = $12;
 if (($5 | 0) > 0) {
  $25 = +($2 | 0);
  $42 = $25 * 1.5;
  $43 = $25 / 12;
  $27 = $12 + 100 | 0;
  $44 = $12 + 136 | 0;
  $45 = $12 + 128 | 0;
  $46 = $12 + 120 | 0;
  $47 = $12 + 112 | 0;
  $48 = $12 + 104 | 0;
  $49 = $12 + 96 | 0;
  while (1) {
   $21 = 0;
   $33 = $32 << 3;
   $24 = SAFE_HEAP_LOAD_f64_8_8($33 + $4 | 0, 0);
   if (!($24 <= 40 | $24 > $43)) {
    $21 = SAFE_HEAP_LOAD_f64_8_8($3 + $33 | 0, 0);
    $14 = $42 / $24 + 1;
    label$4: {
     if (Math_abs($14) < 2147483648) {
      $13 = ~~$14;
      break label$4;
     }
     $13 = -2147483648;
    }
    $14 = +($13 | 0);
    $14 = $14 + $14 + 1;
    $19 = $13 << 1;
    $11 = $19 | 1;
    $34 = $11 << 3;
    $7 = ($11 & 536870911) != ($11 | 0) ? -1 : $34;
    $28 = operator_20new_5b_5d_28unsigned_20long_29($7);
    $31 = ($11 | 0) < 1;
    if (!$31) {
     $8 = 0;
     $17 = $19;
     if ($13) {
      while (1) {
       SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $28 | 0, 0, +($8 - $13 | 0) / $25);
       $20 = $8 | 1;
       SAFE_HEAP_STORE_f64_8_8(($20 << 3) + $28 | 0, 0, +($20 - $13 | 0) / $25);
       $8 = $8 + 2 | 0;
       $17 = $17 - 2 | 0;
       if ($17) {
        continue;
       }
       break;
      }
     }
     SAFE_HEAP_STORE_f64_8_8(($8 << 3) + $28 | 0, 0, +($8 - $13 | 0) / $25);
    }
    $8 = 0;
    SAFE_HEAP_STORE_i32_4_4($44, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($45, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($46, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($47, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($48, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($49, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($12, 88, 0, 0);
    $22 = log($14) / .6931471805599453;
    label$10: {
     if (Math_abs($22) < 2147483648) {
      $17 = ~~$22;
      break label$10;
     }
     $17 = -2147483648;
    }
    $22 = exp2(+($17 | 0) + 2);
    label$9: {
     if (Math_abs($22) < 2147483648) {
      $18 = ~~$22;
      break label$9;
     }
     $18 = -2147483648;
    }
    InitializeForwardRealFFT($18, $12 + 88 | 0);
    $17 = ($18 & 268435455) != ($18 | 0) ? -1 : $18 << 4;
    $29 = operator_20new_5b_5d_28unsigned_20long_29($17);
    $30 = operator_20new_5b_5d_28unsigned_20long_29($17);
    $16 = ($11 & 1073741823) != ($11 | 0) ? -1 : $11 << 2;
    $17 = operator_20new_5b_5d_28unsigned_20long_29($16);
    $20 = operator_20new_5b_5d_28unsigned_20long_29($7);
    $23 = operator_20new_5b_5d_28unsigned_20long_29($7);
    label$13: {
     if (!$31) {
      $14 = $14 / $25;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $17 | 0, 0, matlab_round(($21 + SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $28 | 0, 0)) * $25));
       $8 = $8 + 1 | 0;
       if (($11 | 0) != ($8 | 0)) {
        continue;
       }
       break;
      }
      $8 = 0;
      while (1) {
       $9 = ($8 << 3) + $20 | 0;
       $22 = (+(SAFE_HEAP_LOAD_i32_4_4(($8 << 2) + $17 | 0, 0) | 0) + -1) / $25 - $21;
       SAFE_HEAP_STORE_f64_8_8($9, 0, cos($22 * 12.566370614359172 / $14) * .08 + (cos($22 * 6.283185307179586 / $14) * .5 + .42));
       $8 = $8 + 1 | 0;
       if (($11 | 0) != ($8 | 0)) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_f64_8_8($23, 0, SAFE_HEAP_LOAD_f64_8_8($20, 8) * -.5);
      if (($11 | 0) < 3) {
       break label$13;
      }
      $8 = 1;
      if (($13 | 0) != 1) {
       $10 = $19 - 2 | 0;
       while (1) {
        $7 = $8 << 3;
        $15 = $23 + $7 | 0;
        $9 = $7 + 8 | 0;
        $14 = SAFE_HEAP_LOAD_f64_8_8($20 + $9 | 0, 0);
        $7 = $7 + $20 | 0;
        SAFE_HEAP_STORE_f64_8_8($15, 0, ($14 - SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0)) * -.5);
        $8 = $8 + 2 | 0;
        SAFE_HEAP_STORE_f64_8_8($9 + $23 | 0, 0, (SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $20 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($7, 0)) * -.5);
        $10 = $10 - 2 | 0;
        if ($10) {
         continue;
        }
        break;
       }
      }
      $8 = $8 << 3;
      $9 = $23 + $8 | 0;
      $8 = $8 + $20 | 0;
      SAFE_HEAP_STORE_f64_8_8($9, 0, (SAFE_HEAP_LOAD_f64_8_8($8 + 8 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($8 - 8 | 0, 0)) * -.5);
      break label$13;
     }
     SAFE_HEAP_STORE_i64_8_8($23, 0, 0, 2146959360);
    }
    $8 = $19 << 3;
    SAFE_HEAP_STORE_f64_8_8($23 + $8 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 + $20 | 0) - 8 | 0, 0) * .5);
    $8 = operator_20new_5b_5d_28unsigned_20long_29($16);
    if (!$31) {
     $7 = 0;
     $10 = 0;
     $16 = $19;
     if ($13) {
      while (1) {
       $9 = $10 << 2;
       $26 = $9 + $8 | 0;
       $15 = SAFE_HEAP_LOAD_i32_4_4($9 + $17 | 0, 0);
       $15 = ($1 | 0) < ($15 | 0) ? $1 : $15;
       SAFE_HEAP_STORE_i32_4_4($26, 0, ($15 | 0) > 0 ? $15 - 1 | 0 : 0);
       $9 = $9 | 4;
       $15 = $9 + $8 | 0;
       $9 = SAFE_HEAP_LOAD_i32_4_4($9 + $17 | 0, 0);
       $9 = ($1 | 0) < ($9 | 0) ? $1 : $9;
       SAFE_HEAP_STORE_i32_4_4($15, 0, ($9 | 0) > 0 ? $9 - 1 | 0 : 0);
       $10 = $10 + 2 | 0;
       $16 = $16 - 2 | 0;
       if ($16) {
        continue;
       }
       break;
      }
     }
     $10 = $10 << 2;
     $9 = $10 + $8 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($10 + $17 | 0, 0);
     $10 = ($1 | 0) < ($10 | 0) ? $1 : $10;
     SAFE_HEAP_STORE_i32_4_4($9, 0, ($10 | 0) > 0 ? $10 - 1 | 0 : 0);
     $10 = SAFE_HEAP_LOAD_i32_4_4($12, 92);
     $9 = $19;
     if ($13) {
      while (1) {
       $16 = $7 << 3;
       SAFE_HEAP_STORE_f64_8_8($16 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($20 + $16 | 0, 0));
       $16 = $7 | 1;
       $15 = $16 << 3;
       SAFE_HEAP_STORE_f64_8_8($15 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($20 + $15 | 0, 0));
       $7 = $7 + 2 | 0;
       $9 = $9 - 2 | 0;
       if ($9) {
        continue;
       }
       break;
      }
     }
     $9 = $7 << 3;
     SAFE_HEAP_STORE_f64_8_8($9 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $20 | 0, 0));
    }
    $35 = ($11 | 0) >= ($18 | 0);
    if (!$35) {
     memset(SAFE_HEAP_LOAD_i32_4_4($12, 92) + $34 | 0, 0, $18 - $11 << 3);
    }
    $36 = $27 + 32 | 0;
    SAFE_HEAP_STORE_i64_8_8($12 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($36, 0), i64toi32_i32$HIGH_BITS);
    $37 = $27 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_8($12 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($37, 0), i64toi32_i32$HIGH_BITS);
    $38 = $27 + 16 | 0;
    SAFE_HEAP_STORE_i64_8_8($12 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($38, 0), i64toi32_i32$HIGH_BITS);
    $39 = $27 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($12 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($39, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12, 48, SAFE_HEAP_LOAD_i64_8_4($27, 0), i64toi32_i32$HIGH_BITS);
    $16 = ($18 | 0) / 2 | 0;
    fft_execute($12 + 48 | 0);
    $40 = ($18 | 0) < -1;
    label$25: {
     if ($40) {
      break label$25;
     }
     $10 = $16 + 1 | 0;
     $50 = $10 & 1;
     $7 = 0;
     $9 = SAFE_HEAP_LOAD_i32_4_4($12, 96);
     if ($18 + 1 >>> 0 >= 3) {
      $15 = $10 & -2;
      while (1) {
       $10 = $7 << 4;
       $26 = $29 + $10 | 0;
       $41 = $10 + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($26, 0, SAFE_HEAP_LOAD_f64_8_8($41, 0));
       SAFE_HEAP_STORE_f64_8_8($26, 8, SAFE_HEAP_LOAD_f64_8_8($41, 8));
       $10 = $10 | 16;
       $26 = $29 + $10 | 0;
       $10 = $10 + $9 | 0;
       SAFE_HEAP_STORE_f64_8_8($26, 0, SAFE_HEAP_LOAD_f64_8_8($10, 0));
       SAFE_HEAP_STORE_f64_8_8($26, 8, SAFE_HEAP_LOAD_f64_8_8($10, 8));
       $7 = $7 + 2 | 0;
       $15 = $15 - 2 | 0;
       if ($15) {
        continue;
       }
       break;
      }
     }
     if (!$50) {
      break label$25;
     }
     $7 = $7 << 4;
     $10 = $29 + $7 | 0;
     $7 = $7 + $9 | 0;
     SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0));
     SAFE_HEAP_STORE_f64_8_8($10, 8, SAFE_HEAP_LOAD_f64_8_8($7, 8));
    }
    if (!$31) {
     $7 = 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($12, 92);
     if ($13) {
      while (1) {
       $9 = $7 << 3;
       SAFE_HEAP_STORE_f64_8_8($9 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $23 | 0, 0));
       $9 = $7 | 1;
       $13 = $9 << 3;
       SAFE_HEAP_STORE_f64_8_8($13 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($9 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($13 + $23 | 0, 0));
       $7 = $7 + 2 | 0;
       $19 = $19 - 2 | 0;
       if ($19) {
        continue;
       }
       break;
      }
     }
     $9 = $7 << 3;
     SAFE_HEAP_STORE_f64_8_8($9 + $10 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $8 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $23 | 0, 0));
    }
    if (!$35) {
     memset(SAFE_HEAP_LOAD_i32_4_4($12, 92) + $34 | 0, 0, $18 - $11 << 3);
    }
    SAFE_HEAP_STORE_i64_8_8($12 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($36, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($37, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($38, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($39, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($12, 8, SAFE_HEAP_LOAD_i64_8_4($27, 0), i64toi32_i32$HIGH_BITS);
    fft_execute($12 + 8 | 0);
    label$32: {
     if ($40) {
      break label$32;
     }
     $11 = $16 + 1 | 0;
     $15 = $11 & 1;
     $7 = 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($12, 96);
     if ($18 + 1 >>> 0 >= 3) {
      $9 = $11 & -2;
      while (1) {
       $11 = $7 << 4;
       $13 = $30 + $11 | 0;
       $19 = $10 + $11 | 0;
       SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($19, 0));
       SAFE_HEAP_STORE_f64_8_8($13, 8, SAFE_HEAP_LOAD_f64_8_8($19, 8));
       $11 = $11 | 16;
       $13 = $30 + $11 | 0;
       $11 = $10 + $11 | 0;
       SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($11, 0));
       SAFE_HEAP_STORE_f64_8_8($13, 8, SAFE_HEAP_LOAD_f64_8_8($11, 8));
       $7 = $7 + 2 | 0;
       $9 = $9 - 2 | 0;
       if ($9) {
        continue;
       }
       break;
      }
     }
     if (!$15) {
      break label$32;
     }
     $7 = $7 << 4;
     $11 = $30 + $7 | 0;
     $7 = $7 + $10 | 0;
     SAFE_HEAP_STORE_f64_8_8($11, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0));
     SAFE_HEAP_STORE_f64_8_8($11, 8, SAFE_HEAP_LOAD_f64_8_8($7, 8));
    }
    operator_20delete_5b_5d_28void__29($8);
    $8 = 0;
    $7 = $16 + 1 | 0;
    $7 = ($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3;
    $9 = operator_20new_5b_5d_28unsigned_20long_29($7);
    $13 = operator_20new_5b_5d_28unsigned_20long_29($7);
    if (($18 | 0) > -2) {
     while (1) {
      $7 = $8 << 3;
      $19 = $13 + $7 | 0;
      $11 = $8 << 4;
      $10 = $29 + $11 | 0;
      $21 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
      $11 = $11 + $30 | 0;
      $22 = $21 * SAFE_HEAP_LOAD_f64_8_8($11, 8);
      $14 = SAFE_HEAP_LOAD_f64_8_8($10, 8);
      SAFE_HEAP_STORE_f64_8_8($19, 0, $22 - $14 * SAFE_HEAP_LOAD_f64_8_8($11, 0));
      SAFE_HEAP_STORE_f64_8_8($7 + $9 | 0, 0, $21 * $21 + $14 * $14);
      $7 = ($8 | 0) == ($16 | 0);
      $8 = $8 + 1 | 0;
      if (!$7) {
       continue;
      }
      break;
     }
    }
    $21 = 0;
    $14 = $28anonymous_20namespace_29__FixF0_28double_20const__2c_20double_20const__2c_20int_2c_20int_2c_20double_2c_20int_29($9, $13, $18, $2, $24, 2);
    if (!($14 <= 0 | $24 + $24 < $14)) {
     $21 = $28anonymous_20namespace_29__FixF0_28double_20const__2c_20double_20const__2c_20int_2c_20int_2c_20double_2c_20int_29($9, $13, $18, $2, $14, 6);
    }
    operator_20delete_5b_5d_28void__29($30);
    operator_20delete_5b_5d_28void__29($23);
    operator_20delete_5b_5d_28void__29($20);
    operator_20delete_5b_5d_28void__29($17);
    operator_20delete_5b_5d_28void__29($13);
    operator_20delete_5b_5d_28void__29($9);
    operator_20delete_5b_5d_28void__29($29);
    DestroyForwardRealFFT($12 + 88 | 0);
    operator_20delete_5b_5d_28void__29($28);
    $21 = Math_abs($21 - $24) > $24 * .2 ? $24 : $21;
   }
   SAFE_HEAP_STORE_f64_8_8($6 + $33 | 0, 0, $21);
   $32 = $32 + 1 | 0;
   if (($32 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $12 + 144 | 0;
}

function std____2__locale____imp____imp_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13256);
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___vector_28unsigned_20long_29($0 + 16 | 0, 30);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0 + 192 | 0, 2067);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___clear_28_29($1);
 std____2__collate_char___20std____2___28anonymous_20namespace_29__make_std____2__collate_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29($0, 27584);
 std____2__collate_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__collate_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29($0, 27592);
 std____2__ctype_char___20std____2___28anonymous_20namespace_29__make_std____2__ctype_char__2c_20std__nullptr_t_2c_20bool_2c_20unsigned_20int__28std__nullptr_t_2c_20bool_2c_20unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29($0, 27600);
 std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29($0, 27616);
 std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29($0, 27624);
 std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29($0, 27632);
 std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29($0, 27648);
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29($0, 27656);
 std____2__numpunct_char___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29($0, 27664);
 std____2__numpunct_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29($0, 27696);
 std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27728);
 std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27736);
 std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27744);
 std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27752);
 std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29($0, 27760);
 std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29($0, 27768);
 std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29($0, 27776);
 std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29($0, 27784);
 std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27792);
 std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27800);
 std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27808);
 std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27816);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27824);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27840);
 std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 27856);
 std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 27872);
 std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29($0, 27888);
 std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29($0, 27896);
 return $0;
}

function __intscan($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $17 = __stack_pointer - 16 | 0;
 __stack_pointer = $17;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       if ($1 >>> 0 <= 36) {
        while (1) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
         label$9: {
          if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
           SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
           $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
           break label$9;
          }
          $5 = __shgetc($0);
         }
         if (isspace($5)) {
          continue;
         }
         break;
        }
        label$11: {
         label$12: {
          switch ($5 - 43 | 0) {
          case 0:
          case 2:
           break label$12;

          default:
           break label$11;
          }
         }
         $16 = ($5 | 0) == 45 ? -1 : 0;
         $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
         if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
          SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
          $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
          break label$11;
         }
         $5 = __shgetc($0);
        }
        label$14: {
         if (!($1 & -17 | ($5 | 0) != 48)) {
          $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          label$16: {
           if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
            SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
            $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
            break label$16;
           }
           $5 = __shgetc($0);
          }
          if (($5 & -33) == 88) {
           $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
           label$19: {
            if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
             SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
             $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
             break label$19;
            }
            $5 = __shgetc($0);
           }
           $1 = 16;
           if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0) >>> 0 < 16) {
            break label$5;
           }
           if (!SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
            $3 = 0;
            $4 = 0;
            if ($2) {
             break label$1;
            }
            break label$2;
           }
           $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
           SAFE_HEAP_STORE_i32_4_4($0, 4, $5 - 1 | 0);
           if (!$2) {
            break label$2;
           }
           SAFE_HEAP_STORE_i32_4_4($0, 4, $5 - 2 | 0);
           $3 = 0;
           $4 = 0;
           break label$1;
          }
          if ($1) {
           break label$14;
          }
          $1 = 8;
          break label$5;
         }
         $1 = $1 ? $1 : 10;
         if ($1 >>> 0 > SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0) >>> 0) {
          break label$14;
         }
         if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
          SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
         }
         $3 = 0;
         $4 = 0;
         __shlim($0, 0, 0);
         SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
         break label$1;
        }
        if (($1 | 0) != 10) {
         break label$5;
        }
        $2 = $5 - 48 | 0;
        if ($2 >>> 0 <= 9) {
         $1 = 0;
         while (1) {
          $1 = Math_imul($1, 10);
          $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
          label$25: {
           if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
            SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
            $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
            break label$25;
           }
           $5 = __shgetc($0);
          }
          $1 = $1 + $2 | 0;
          $2 = $5 - 48 | 0;
          if ($1 >>> 0 < 429496729 ? $2 >>> 0 <= 9 : 0) {
           continue;
          }
          break;
         }
         $11 = $1;
        }
        if ($2 >>> 0 > 9) {
         break label$6;
        }
        $12 = __wasm_i64_mul($11, 0, 10, 0);
        $14 = $12;
        $6 = i64toi32_i32$HIGH_BITS;
        $1 = $6;
        $12 = $2;
        while (1) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
         label$28: {
          if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
           SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
           $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
           break label$28;
          }
          $5 = __shgetc($0);
         }
         $2 = $5 - 48 | 0;
         $7 = $14;
         $10 = $12;
         $8 = $7 + $10 | 0;
         $6 = $1;
         $9 = $8 >>> 0 < $10 >>> 0 ? $6 + 1 | 0 : $6;
         $11 = $8;
         $13 = $9;
         $6 = $8;
         if (($9 | 0) == 429496729 & $6 >>> 0 >= 2576980378 | $9 >>> 0 > 429496729 | $2 >>> 0 > 9) {
          break label$6;
         }
         $6 = $13;
         $9 = __wasm_i64_mul($11, $6, 10, 0);
         $14 = $9;
         $12 = $2;
         $6 = i64toi32_i32$HIGH_BITS;
         $1 = $6;
         $9 = $6;
         $6 = $14;
         $7 = $2 ^ -1;
         if (($9 | 0) == -1 & $6 >>> 0 <= $7 >>> 0 | ($9 | 0) != -1) {
          continue;
         }
         break;
        }
        $1 = 10;
        break label$4;
       }
       SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
       $3 = 0;
       $4 = 0;
       break label$1;
      }
      $1 = 10;
      if ($2 >>> 0 <= 9) {
       break label$4;
      }
      break label$3;
     }
     if ($1 - 1 & $1) {
      $7 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
      if ($7 >>> 0 < $1 >>> 0) {
       $2 = 0;
       while (1) {
        $2 = Math_imul($1, $2);
        $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
        label$33: {
         if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
          SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
          $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
          break label$33;
         }
         $5 = __shgetc($0);
        }
        $2 = $2 + $7 | 0;
        $7 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
        if ($2 >>> 0 < 119304647 ? $7 >>> 0 < $1 >>> 0 : 0) {
         continue;
        }
        break;
       }
       $11 = $2;
      }
      if ($1 >>> 0 <= $7 >>> 0) {
       break label$4;
      }
      $14 = $1;
      while (1) {
       $6 = $13;
       $9 = __wasm_i64_mul($11, $6, $14, 0);
       $12 = $9;
       $6 = i64toi32_i32$HIGH_BITS;
       $2 = $6;
       $15 = $7 & 255;
       $6 = $15;
       $10 = $6 ^ -1;
       $7 = $2;
       if (($7 | 0) == -1 & $10 >>> 0 < $9 >>> 0) {
        break label$4;
       }
       $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
       label$36: {
        if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
         $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
         break label$36;
        }
        $5 = __shgetc($0);
       }
       $9 = $2;
       $8 = $9;
       $6 = $15;
       $10 = $12;
       $12 = $6 + $10 | 0;
       $11 = $12;
       $8 = $6 >>> 0 > $11 >>> 0 ? $8 + 1 | 0 : $8;
       $13 = $8;
       $7 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
       if ($7 >>> 0 >= $1 >>> 0) {
        break label$4;
       }
       $9 = $13;
       __multi3($17, $14, 0, 0, 0, $11, $9, 0, 0);
       $6 = SAFE_HEAP_LOAD_i64_8_8($17, 8);
       $9 = i64toi32_i32$HIGH_BITS;
       if (!($6 | $9)) {
        continue;
       }
       break;
      }
      break label$4;
     }
     $12 = SAFE_HEAP_LOAD_i32_1_1((Math_imul($1, 23) >>> 5 & 7) + 8673 | 0, 0);
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
     if ($2 >>> 0 < $1 >>> 0) {
      while (1) {
       $7 = $7 << $12;
       $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
       label$40: {
        if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
         $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
         break label$40;
        }
        $5 = __shgetc($0);
       }
       $7 = $2 | $7;
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
       if ($7 >>> 0 < 134217728 ? $2 >>> 0 < $1 >>> 0 : 0) {
        continue;
       }
       break;
      }
      $11 = $7;
     }
     if ($1 >>> 0 <= $2 >>> 0) {
      break label$4;
     }
     $8 = $12;
     $7 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $15 = -1 >>> $7 | 0;
     } else {
      $6 = -1 >>> $7 | 0;
      $15 = (1 << $7) - 1 << 32 - $7 | -1 >>> $7;
     }
     $18 = $6;
     $8 = $11;
     $9 = $15;
     if (!$6 & $8 >>> 0 > $9 >>> 0) {
      break label$4;
     }
     while (1) {
      $9 = $13;
      $8 = $11;
      $10 = $12;
      $7 = $10 & 31;
      if (($10 & 63) >>> 0 >= 32) {
       $6 = $8 << $7;
       $11 = 0;
      } else {
       $6 = (1 << $7) - 1 & $8 >>> 32 - $7 | $9 << $7;
       $11 = $8 << $7;
      }
      $13 = $6;
      $14 = $2 & 255;
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$43: {
       if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
        SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
        break label$43;
       }
       $5 = __shgetc($0);
      }
      $6 = $11;
      $10 = $14;
      $11 = $6 | $10;
      $8 = $13;
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0);
      if ($2 >>> 0 >= $1 >>> 0) {
       break label$4;
      }
      $6 = $18;
      $9 = $13;
      $10 = $15;
      $8 = $11;
      if (($6 | 0) == ($9 | 0) & $10 >>> 0 >= $8 >>> 0 | $6 >>> 0 > $9 >>> 0) {
       continue;
      }
      break;
     }
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0) >>> 0 >= $1 >>> 0) {
     break label$3;
    }
    while (1) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$46: {
      if ($5 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
       SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
       $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
       break label$46;
      }
      $5 = __shgetc($0);
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 8417 | 0, 0) >>> 0 < $1 >>> 0) {
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
    $9 = 0;
    $10 = $3;
    $16 = !($9 | $10 & 1) ? $16 : 0;
    $11 = $10;
    $8 = $4;
    $13 = $8;
   }
   if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
   }
   label$49: {
    $10 = $13;
    $9 = $4;
    $6 = $11;
    $8 = $3;
    if (($10 | 0) == ($9 | 0) & $6 >>> 0 < $8 >>> 0 | $9 >>> 0 > $10 >>> 0) {
     break label$49;
    }
    if (!($3 & 1 | $16)) {
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
     $6 = $3;
     $7 = $6 - 1 | 0;
     $3 = $7;
     $12 = $6 >>> 0 < 1;
     $12 = $4 - $12 | 0;
     $4 = $12;
     break label$1;
    }
    $6 = $13;
    $10 = $11;
    $8 = $3;
    if (($6 | 0) == ($4 | 0) & $10 >>> 0 <= $8 >>> 0 | $4 >>> 0 > $6 >>> 0) {
     break label$49;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
    break label$1;
   }
   $12 = $16;
   $8 = $12 >> 31;
   $4 = $8;
   $8 = $13;
   $12 = $4 ^ $8;
   $3 = $16;
   $6 = $3;
   $10 = $11;
   $8 = $6 ^ $10;
   $9 = $8 - $6 | 0;
   $3 = $9;
   $10 = $4;
   $7 = $10 + ($6 >>> 0 > $8 >>> 0) | 0;
   $7 = $12 - $7 | 0;
   $4 = $7;
   break label$1;
  }
  $3 = 0;
  $4 = 0;
  __shlim($0, 0, 0);
 }
 __stack_pointer = $17 + 16 | 0;
 $7 = $4;
 i64toi32_i32$HIGH_BITS = $7;
 $8 = $3;
 return $8;
}

function cftb1st_28int_2c_20double__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 $31 = $0 >> 3;
 $15 = $31 << 5;
 $12 = ($15 | 8) + $1 | 0;
 $16 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $9 = Math_imul($31, 48);
 $14 = ($9 | 8) + $1 | 0;
 $17 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $31 << 4;
 $24 = ($5 | 8) + $1 | 0;
 $20 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $21 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $15 = $1 + $15 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $4 = $21 + $3;
 $5 = $1 + $5 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $9 = $1 + $9 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
 $11 = $7 + $10;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $4 + $11);
 $8 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $6 = -$8 - $16;
 $13 = $20 + $17;
 SAFE_HEAP_STORE_f64_8_8($1, 8, $6 - $13);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $4 - $11);
 SAFE_HEAP_STORE_f64_8_8($24, 0, $6 + $13);
 $21 = $21 - $3;
 $17 = $20 - $17;
 SAFE_HEAP_STORE_f64_8_8($15, 0, $21 + $17);
 $16 = $16 - $8;
 $20 = $7 - $10;
 SAFE_HEAP_STORE_f64_8_8($12, 0, $16 + $20);
 SAFE_HEAP_STORE_f64_8_8($9, 0, $21 - $17);
 SAFE_HEAP_STORE_f64_8_8($14, 0, $16 - $20);
 $56 = $31 - 2 | 0;
 $53 = SAFE_HEAP_LOAD_f64_8_8($2, 24);
 $54 = SAFE_HEAP_LOAD_f64_8_8($2, 16);
 $35 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
 $32 = 1;
 label$1: {
  if (($0 | 0) < 40) {
   $16 = 1;
   $17 = 0;
   $20 = 1;
   $21 = 0;
   break label$1;
  }
  $0 = $31 << 1;
  $24 = 0;
  $15 = 2;
  $3 = 1;
  while (1) {
   $12 = ($24 << 3) + $2 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($12 + 48 | 0, 0);
   $21 = SAFE_HEAP_LOAD_f64_8_8($12 + 56 | 0, 0);
   $24 = $24 + 4 | 0;
   $16 = SAFE_HEAP_LOAD_f64_8_8(($24 << 3) + $2 | 0, 0);
   $17 = SAFE_HEAP_LOAD_f64_8_8($12 + 40 | 0, 0);
   $9 = $0 + $15 | 0;
   $25 = $9 << 3;
   $12 = $25 + $1 | 0;
   $33 = $12 + 16 | 0;
   $7 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
   $5 = $0 + $9 | 0;
   $26 = $5 + $0 << 3;
   $9 = $26 + $1 | 0;
   $37 = $9 + 16 | 0;
   $10 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
   $27 = $15 << 3;
   $14 = $27 + $1 | 0;
   $38 = $14 + 16 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($38, 0);
   $34 = $5 << 3;
   $5 = $34 + $1 | 0;
   $39 = $5 + 16 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($39, 0);
   $40 = $12 + 24 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($40, 0);
   $41 = $9 + 24 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($41, 0);
   $42 = $5 + 24 | 0;
   $22 = SAFE_HEAP_LOAD_f64_8_8($42, 0);
   $57 = $14 + 24 | 0;
   $23 = SAFE_HEAP_LOAD_f64_8_8($57, 0);
   $25 = ($25 | 8) + $1 | 0;
   $4 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $26 = ($26 | 8) + $1 | 0;
   $18 = SAFE_HEAP_LOAD_f64_8_8($26, 0);
   $34 = ($34 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($34, 0);
   $27 = ($27 | 8) + $1 | 0;
   $28 = SAFE_HEAP_LOAD_f64_8_8($27, 0);
   $29 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $30 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $43 = $29 + $30;
   $44 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $45 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
   $46 = $44 + $45;
   SAFE_HEAP_STORE_f64_8_8($14, 0, $43 + $46);
   $47 = -$28 - $19;
   $48 = $4 + $18;
   SAFE_HEAP_STORE_f64_8_8($27, 0, $47 - $48);
   $49 = -$23 - $22;
   $50 = $6 + $13;
   SAFE_HEAP_STORE_f64_8_8($57, 0, $49 - $50);
   $51 = $11 + $8;
   $52 = $7 + $10;
   SAFE_HEAP_STORE_f64_8_8($38, 0, $51 + $52);
   SAFE_HEAP_STORE_f64_8_8($12, 0, $43 - $46);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $47 + $48);
   SAFE_HEAP_STORE_f64_8_8($40, 0, $49 + $50);
   SAFE_HEAP_STORE_f64_8_8($33, 0, $51 - $52);
   $3 = $54 * ($3 + $16);
   $29 = $29 - $30;
   $18 = $4 - $18;
   $30 = $29 + $18;
   $4 = $54 * ($36 + $17);
   $19 = $19 - $28;
   $28 = $44 - $45;
   $36 = $19 + $28;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $3 * $30 - $4 * $36);
   SAFE_HEAP_STORE_f64_8_8($34, 0, $3 * $36 + $4 * $30);
   $22 = $22 - $23;
   $23 = $7 - $10;
   $7 = $22 + $23;
   $11 = $11 - $8;
   $8 = $6 - $13;
   $10 = $11 + $8;
   SAFE_HEAP_STORE_f64_8_8($42, 0, $16 * $7 + $17 * $10);
   SAFE_HEAP_STORE_f64_8_8($39, 0, $16 * $10 - $17 * $7);
   $7 = $53 * ($55 + $21);
   $6 = $19 - $28;
   $10 = $53 * ($32 + $20);
   $13 = $29 - $18;
   SAFE_HEAP_STORE_f64_8_8($9, 0, $7 * $6 + $10 * $13);
   SAFE_HEAP_STORE_f64_8_8($26, 0, $10 * $6 - $7 * $13);
   $6 = $22 - $23;
   $11 = $11 - $8;
   SAFE_HEAP_STORE_f64_8_8($41, 0, $20 * $6 - $21 * $11);
   SAFE_HEAP_STORE_f64_8_8($37, 0, $21 * $6 + $20 * $11);
   $5 = $0 - $15 | 0;
   $14 = $5 + $0 | 0;
   $9 = $14 + $0 | 0;
   $25 = $9 << 3;
   $12 = $25 + $1 | 0;
   $33 = $12 - 16 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
   $26 = $0 + $9 << 3;
   $9 = $26 + $1 | 0;
   $37 = $9 - 16 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
   $27 = $14 << 3;
   $14 = $27 + $1 | 0;
   $38 = $14 - 16 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($38, 0);
   $34 = $12 - 8 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($34, 0);
   $39 = $9 - 8 | 0;
   $22 = SAFE_HEAP_LOAD_f64_8_8($39, 0);
   $40 = $14 - 8 | 0;
   $23 = SAFE_HEAP_LOAD_f64_8_8($40, 0);
   $25 = ($25 | 8) + $1 | 0;
   $18 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $5 = $5 << 3;
   $41 = ($5 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($41, 0);
   $26 = ($26 | 8) + $1 | 0;
   $28 = SAFE_HEAP_LOAD_f64_8_8($26, 0);
   $27 = ($27 | 8) + $1 | 0;
   $32 = SAFE_HEAP_LOAD_f64_8_8($27, 0);
   $5 = $1 + $5 | 0;
   $29 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $30 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $43 = $29 + $30;
   $44 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $45 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
   $46 = $44 + $45;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $43 + $46);
   $42 = $5 - 16 | 0;
   $55 = SAFE_HEAP_LOAD_f64_8_8($42, 0);
   $5 = $5 - 8 | 0;
   $36 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $47 = -$19 - $18;
   $48 = $32 + $28;
   SAFE_HEAP_STORE_f64_8_8($41, 0, $47 - $48);
   $49 = -$36 - $13;
   $50 = $23 + $22;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $49 - $50);
   $51 = $55 + $11;
   $52 = $6 + $8;
   SAFE_HEAP_STORE_f64_8_8($42, 0, $51 + $52);
   SAFE_HEAP_STORE_f64_8_8($14, 0, $43 - $46);
   SAFE_HEAP_STORE_f64_8_8($27, 0, $47 + $48);
   SAFE_HEAP_STORE_f64_8_8($40, 0, $49 + $50);
   SAFE_HEAP_STORE_f64_8_8($38, 0, $51 - $52);
   $29 = $29 - $30;
   $28 = $32 - $28;
   $32 = $29 + $28;
   $18 = $18 - $19;
   $19 = $44 - $45;
   $30 = $18 + $19;
   SAFE_HEAP_STORE_f64_8_8($12, 0, $4 * $32 - $3 * $30);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $4 * $30 + $3 * $32);
   $3 = $13 - $36;
   $4 = $6 - $8;
   $8 = $3 + $4;
   $11 = $55 - $11;
   $6 = $23 - $22;
   $13 = $11 + $6;
   SAFE_HEAP_STORE_f64_8_8($34, 0, $17 * $8 + $16 * $13);
   SAFE_HEAP_STORE_f64_8_8($33, 0, $17 * $13 - $16 * $8);
   $8 = $18 - $19;
   $13 = $29 - $28;
   SAFE_HEAP_STORE_f64_8_8($9, 0, $10 * $8 + $7 * $13);
   SAFE_HEAP_STORE_f64_8_8($26, 0, $7 * $8 - $10 * $13);
   $3 = $3 - $4;
   $4 = $11 - $6;
   SAFE_HEAP_STORE_f64_8_8($39, 0, $21 * $3 - $20 * $4);
   SAFE_HEAP_STORE_f64_8_8($37, 0, $20 * $3 + $21 * $4);
   $55 = $21;
   $32 = $20;
   $36 = $17;
   $3 = $16;
   $15 = $15 + 4 | 0;
   if (($56 | 0) > ($15 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = Math_imul($31, 40) + $1 | 0;
 $14 = $0 - 8 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $9 = ($31 << 3) + $1 | 0;
 $5 = $9 - 8 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $15 = Math_imul($31, 56) + $1 | 0;
 $24 = $15 - 8 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $12 = Math_imul($31, 24) + $1 | 0;
 $2 = $12 - 8 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
 $1 = ($56 << 3) + $1 | 0;
 $26 = $1;
 $11 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $1 = $0 - 16 | 0;
 $8 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $6 = $11 + $8;
 $25 = $12 - 16 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
 $33 = $15 - 16 | 0;
 $22 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
 $23 = $13 + $22;
 SAFE_HEAP_STORE_f64_8_8($26, 0, $6 + $23);
 $18 = -$4 - $3;
 $19 = $10 + $7;
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 - $19);
 SAFE_HEAP_STORE_f64_8_8($2, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($25, 0, $6 - $23);
 $16 = $54 * ($35 + $16);
 $3 = $3 - $4;
 $4 = $13 - $22;
 $6 = $3 + $4;
 $17 = $54 * ($35 + $17);
 $11 = $11 - $8;
 $7 = $10 - $7;
 $10 = $11 + $7;
 SAFE_HEAP_STORE_f64_8_8($14, 0, $16 * $6 + $17 * $10);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $16 * $10 - $17 * $6);
 $20 = $53 * ($20 - $35);
 $3 = $3 - $4;
 $21 = $53 * ($21 - $35);
 $4 = $11 - $7;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $20 * $3 - $21 * $4);
 SAFE_HEAP_STORE_f64_8_8($33, 0, $21 * $3 + $20 * $4);
 $1 = $0 + 8 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $14 = $15 + 8 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $12 + 8 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $10 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
 $11 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $8 = $10 + $11;
 $6 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $13 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $22 = $6 + $13;
 SAFE_HEAP_STORE_f64_8_8($9, 0, $8 + $22);
 $24 = $9 + 8 | 0;
 $23 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $18 = -$23 - $3;
 $19 = $7 + $4;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $18 - $19);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($12, 0, $8 - $22);
 $3 = $3 - $23;
 $8 = $6 - $13;
 $6 = $3 + $8;
 $10 = $10 - $11;
 $4 = $7 - $4;
 $7 = $10 + $4;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $35 * ($6 + $7));
 SAFE_HEAP_STORE_f64_8_8($0, 0, $35 * ($7 - $6));
 $3 = $3 - $8;
 $4 = $10 - $4;
 $7 = -$35;
 SAFE_HEAP_STORE_f64_8_8($14, 0, ($3 - $4) * $7);
 SAFE_HEAP_STORE_f64_8_8($15, 0, ($3 + $4) * $7);
 $1 = $0 + 24 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $14 = $15 + 24 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $12 + 24 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $24 = $9 + 16 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $0 = $0 + 16 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $8 = $10 + $11;
 $12 = $12 + 16 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $15 = $15 + 16 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $22 = $6 + $13;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $8 + $22);
 $9 = $9 + 24 | 0;
 $23 = SAFE_HEAP_LOAD_f64_8_8($9, 0);
 $18 = -$23 - $3;
 $19 = $7 + $4;
 SAFE_HEAP_STORE_f64_8_8($9, 0, $18 - $19);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($12, 0, $8 - $22);
 $3 = $3 - $23;
 $8 = $6 - $13;
 $6 = $3 + $8;
 $10 = $10 - $11;
 $4 = $7 - $4;
 $7 = $10 + $4;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $17 * $6 + $16 * $7);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $17 * $7 - $16 * $6);
 $16 = $3 - $8;
 $17 = $10 - $4;
 SAFE_HEAP_STORE_f64_8_8($14, 0, $21 * $16 - $20 * $17);
 SAFE_HEAP_STORE_f64_8_8($15, 0, $20 * $16 + $21 * $17);
}

function cftf1st_28int_2c_20double__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 $31 = $0 >> 3;
 $15 = $31 << 5;
 $12 = ($15 | 8) + $1 | 0;
 $16 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $10 = Math_imul($31, 48);
 $14 = ($10 | 8) + $1 | 0;
 $17 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $31 << 4;
 $24 = ($5 | 8) + $1 | 0;
 $20 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $21 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $15 = $1 + $15 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $4 = $21 + $3;
 $5 = $1 + $5 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $10 = $1 + $10 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
 $7 = $6 + $11;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $4 + $7);
 $8 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $9 = $16 + $8;
 $13 = $20 + $17;
 SAFE_HEAP_STORE_f64_8_8($1, 8, $9 + $13);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $4 - $7);
 SAFE_HEAP_STORE_f64_8_8($24, 0, $9 - $13);
 $21 = $21 - $3;
 $17 = $20 - $17;
 SAFE_HEAP_STORE_f64_8_8($15, 0, $21 - $17);
 $16 = $8 - $16;
 $20 = $6 - $11;
 SAFE_HEAP_STORE_f64_8_8($12, 0, $16 + $20);
 SAFE_HEAP_STORE_f64_8_8($10, 0, $21 + $17);
 SAFE_HEAP_STORE_f64_8_8($14, 0, $16 - $20);
 $56 = $31 - 2 | 0;
 $53 = SAFE_HEAP_LOAD_f64_8_8($2, 24);
 $54 = SAFE_HEAP_LOAD_f64_8_8($2, 16);
 $35 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
 $32 = 1;
 label$1: {
  if (($0 | 0) < 40) {
   $16 = 1;
   $17 = 0;
   $20 = 1;
   $21 = 0;
   break label$1;
  }
  $0 = $31 << 1;
  $24 = 0;
  $15 = 2;
  $3 = 1;
  while (1) {
   $12 = ($24 << 3) + $2 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($12 + 48 | 0, 0);
   $21 = SAFE_HEAP_LOAD_f64_8_8($12 + 56 | 0, 0);
   $24 = $24 + 4 | 0;
   $16 = SAFE_HEAP_LOAD_f64_8_8(($24 << 3) + $2 | 0, 0);
   $17 = SAFE_HEAP_LOAD_f64_8_8($12 + 40 | 0, 0);
   $10 = $0 + $15 | 0;
   $25 = $10 << 3;
   $12 = $25 + $1 | 0;
   $33 = $12 + 16 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
   $5 = $0 + $10 | 0;
   $26 = $5 + $0 << 3;
   $10 = $26 + $1 | 0;
   $37 = $10 + 16 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
   $27 = $15 << 3;
   $14 = $27 + $1 | 0;
   $38 = $14 + 16 | 0;
   $7 = SAFE_HEAP_LOAD_f64_8_8($38, 0);
   $34 = $5 << 3;
   $5 = $34 + $1 | 0;
   $39 = $5 + 16 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($39, 0);
   $40 = $12 + 24 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($40, 0);
   $41 = $10 + 24 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($41, 0);
   $42 = $14 + 24 | 0;
   $22 = SAFE_HEAP_LOAD_f64_8_8($42, 0);
   $57 = $5 + 24 | 0;
   $23 = SAFE_HEAP_LOAD_f64_8_8($57, 0);
   $25 = ($25 | 8) + $1 | 0;
   $4 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $26 = ($26 | 8) + $1 | 0;
   $18 = SAFE_HEAP_LOAD_f64_8_8($26, 0);
   $27 = ($27 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($27, 0);
   $34 = ($34 | 8) + $1 | 0;
   $28 = SAFE_HEAP_LOAD_f64_8_8($34, 0);
   $29 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $30 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $43 = $29 + $30;
   $44 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $45 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $46 = $44 + $45;
   SAFE_HEAP_STORE_f64_8_8($14, 0, $43 + $46);
   $47 = $19 + $28;
   $48 = $4 + $18;
   SAFE_HEAP_STORE_f64_8_8($27, 0, $47 + $48);
   $49 = $22 + $23;
   $50 = $9 + $13;
   SAFE_HEAP_STORE_f64_8_8($42, 0, $49 + $50);
   $51 = $7 + $8;
   $52 = $6 + $11;
   SAFE_HEAP_STORE_f64_8_8($38, 0, $51 + $52);
   SAFE_HEAP_STORE_f64_8_8($12, 0, $43 - $46);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $47 - $48);
   SAFE_HEAP_STORE_f64_8_8($40, 0, $49 - $50);
   SAFE_HEAP_STORE_f64_8_8($33, 0, $51 - $52);
   $3 = $54 * ($3 + $16);
   $29 = $29 - $30;
   $18 = $4 - $18;
   $30 = $29 - $18;
   $4 = $54 * ($36 + $17);
   $19 = $19 - $28;
   $28 = $44 - $45;
   $36 = $19 + $28;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $3 * $30 - $4 * $36);
   SAFE_HEAP_STORE_f64_8_8($34, 0, $3 * $36 + $4 * $30);
   $22 = $22 - $23;
   $23 = $6 - $11;
   $6 = $22 + $23;
   $7 = $7 - $8;
   $8 = $9 - $13;
   $11 = $7 - $8;
   SAFE_HEAP_STORE_f64_8_8($57, 0, $16 * $6 + $17 * $11);
   SAFE_HEAP_STORE_f64_8_8($39, 0, $16 * $11 - $17 * $6);
   $6 = $53 * ($55 + $21);
   $9 = $19 - $28;
   $11 = $53 * ($32 + $20);
   $13 = $29 + $18;
   SAFE_HEAP_STORE_f64_8_8($10, 0, $6 * $9 + $11 * $13);
   SAFE_HEAP_STORE_f64_8_8($26, 0, $11 * $9 - $6 * $13);
   $9 = $22 - $23;
   $7 = $7 + $8;
   SAFE_HEAP_STORE_f64_8_8($41, 0, $20 * $9 - $21 * $7);
   SAFE_HEAP_STORE_f64_8_8($37, 0, $21 * $9 + $20 * $7);
   $5 = $0 - $15 | 0;
   $14 = $5 + $0 | 0;
   $10 = $14 + $0 | 0;
   $25 = $10 << 3;
   $12 = $25 + $1 | 0;
   $33 = $12 - 16 | 0;
   $7 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
   $26 = $0 + $10 << 3;
   $10 = $26 + $1 | 0;
   $37 = $10 - 16 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($37, 0);
   $27 = $14 << 3;
   $14 = $27 + $1 | 0;
   $38 = $14 - 16 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($38, 0);
   $34 = $12 - 8 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($34, 0);
   $39 = $10 - 8 | 0;
   $22 = SAFE_HEAP_LOAD_f64_8_8($39, 0);
   $40 = $14 - 8 | 0;
   $23 = SAFE_HEAP_LOAD_f64_8_8($40, 0);
   $25 = ($25 | 8) + $1 | 0;
   $18 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $5 = $5 << 3;
   $41 = ($5 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($41, 0);
   $26 = ($26 | 8) + $1 | 0;
   $28 = SAFE_HEAP_LOAD_f64_8_8($26, 0);
   $27 = ($27 | 8) + $1 | 0;
   $32 = SAFE_HEAP_LOAD_f64_8_8($27, 0);
   $5 = $1 + $5 | 0;
   $29 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $30 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $43 = $29 + $30;
   $44 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $45 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
   $46 = $44 + $45;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $43 + $46);
   $42 = $5 - 16 | 0;
   $55 = SAFE_HEAP_LOAD_f64_8_8($42, 0);
   $5 = $5 - 8 | 0;
   $36 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $47 = $19 + $18;
   $48 = $32 + $28;
   SAFE_HEAP_STORE_f64_8_8($41, 0, $47 + $48);
   $49 = $36 + $13;
   $50 = $23 + $22;
   SAFE_HEAP_STORE_f64_8_8($5, 0, $49 + $50);
   $51 = $55 + $7;
   $52 = $9 + $8;
   SAFE_HEAP_STORE_f64_8_8($42, 0, $51 + $52);
   SAFE_HEAP_STORE_f64_8_8($14, 0, $43 - $46);
   SAFE_HEAP_STORE_f64_8_8($27, 0, $47 - $48);
   SAFE_HEAP_STORE_f64_8_8($40, 0, $49 - $50);
   SAFE_HEAP_STORE_f64_8_8($38, 0, $51 - $52);
   $29 = $29 - $30;
   $28 = $32 - $28;
   $32 = $29 - $28;
   $18 = $19 - $18;
   $19 = $44 - $45;
   $30 = $18 + $19;
   SAFE_HEAP_STORE_f64_8_8($12, 0, $4 * $32 - $3 * $30);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $4 * $30 + $3 * $32);
   $3 = $36 - $13;
   $4 = $9 - $8;
   $8 = $3 + $4;
   $7 = $55 - $7;
   $9 = $23 - $22;
   $13 = $7 - $9;
   SAFE_HEAP_STORE_f64_8_8($34, 0, $17 * $8 + $16 * $13);
   SAFE_HEAP_STORE_f64_8_8($33, 0, $17 * $13 - $16 * $8);
   $8 = $18 - $19;
   $13 = $29 + $28;
   SAFE_HEAP_STORE_f64_8_8($10, 0, $11 * $8 + $6 * $13);
   SAFE_HEAP_STORE_f64_8_8($26, 0, $6 * $8 - $11 * $13);
   $3 = $3 - $4;
   $4 = $7 + $9;
   SAFE_HEAP_STORE_f64_8_8($39, 0, $21 * $3 - $20 * $4);
   SAFE_HEAP_STORE_f64_8_8($37, 0, $20 * $3 + $21 * $4);
   $55 = $21;
   $32 = $20;
   $36 = $17;
   $3 = $16;
   $15 = $15 + 4 | 0;
   if (($56 | 0) > ($15 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = Math_imul($31, 40) + $1 | 0;
 $14 = $0 - 8 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $10 = ($31 << 3) + $1 | 0;
 $5 = $10 - 8 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $15 = Math_imul($31, 56) + $1 | 0;
 $24 = $15 - 8 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $12 = Math_imul($31, 24) + $1 | 0;
 $2 = $12 - 8 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
 $1 = ($56 << 3) + $1 | 0;
 $26 = $1;
 $7 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $1 = $0 - 16 | 0;
 $8 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $9 = $7 + $8;
 $25 = $12 - 16 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
 $33 = $15 - 16 | 0;
 $22 = SAFE_HEAP_LOAD_f64_8_8($33, 0);
 $23 = $13 + $22;
 SAFE_HEAP_STORE_f64_8_8($26, 0, $9 + $23);
 $18 = $4 + $3;
 $19 = $11 + $6;
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($2, 0, $18 - $19);
 SAFE_HEAP_STORE_f64_8_8($25, 0, $9 - $23);
 $16 = $54 * ($35 + $16);
 $3 = $4 - $3;
 $4 = $13 - $22;
 $9 = $3 + $4;
 $17 = $54 * ($35 + $17);
 $7 = $7 - $8;
 $6 = $11 - $6;
 $11 = $7 - $6;
 SAFE_HEAP_STORE_f64_8_8($14, 0, $16 * $9 + $17 * $11);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $16 * $11 - $17 * $9);
 $20 = $53 * ($20 - $35);
 $3 = $3 - $4;
 $21 = $53 * ($21 - $35);
 $4 = $7 + $6;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $20 * $3 - $21 * $4);
 SAFE_HEAP_STORE_f64_8_8($33, 0, $21 * $3 + $20 * $4);
 $1 = $0 + 8 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $14 = $15 + 8 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $12 + 8 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $11 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
 $7 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $8 = $11 + $7;
 $9 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $13 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $22 = $9 + $13;
 SAFE_HEAP_STORE_f64_8_8($10, 0, $8 + $22);
 $24 = $10 + 8 | 0;
 $23 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $18 = $3 + $23;
 $19 = $6 + $4;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 - $19);
 SAFE_HEAP_STORE_f64_8_8($12, 0, $8 - $22);
 $3 = $23 - $3;
 $8 = $9 - $13;
 $9 = $3 + $8;
 $11 = $11 - $7;
 $4 = $6 - $4;
 $6 = $11 - $4;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $35 * ($9 + $6));
 SAFE_HEAP_STORE_f64_8_8($0, 0, $35 * ($6 - $9));
 $3 = $3 - $8;
 $4 = $11 + $4;
 $6 = -$35;
 SAFE_HEAP_STORE_f64_8_8($14, 0, ($3 - $4) * $6);
 SAFE_HEAP_STORE_f64_8_8($15, 0, ($3 + $4) * $6);
 $1 = $0 + 16 | 0;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $14 = $15 + 16 | 0;
 $4 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $5 = $12 + 16 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
 $24 = $10 + 24 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $0 = $0 + 24 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $8 = $11 + $7;
 $12 = $12 + 24 | 0;
 $9 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $15 = $15 + 24 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $22 = $9 + $13;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $8 + $22);
 $10 = $10 + 16 | 0;
 $23 = SAFE_HEAP_LOAD_f64_8_8($10, 0);
 $18 = $3 + $23;
 $19 = $6 + $4;
 SAFE_HEAP_STORE_f64_8_8($10, 0, $18 + $19);
 SAFE_HEAP_STORE_f64_8_8($12, 0, $8 - $22);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $18 - $19);
 $11 = $11 - $7;
 $4 = $6 - $4;
 $6 = $11 + $4;
 $3 = $23 - $3;
 $7 = $9 - $13;
 $8 = $3 - $7;
 SAFE_HEAP_STORE_f64_8_8($0, 0, $17 * $6 + $16 * $8);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $17 * $8 - $16 * $6);
 $16 = $11 - $4;
 $17 = $3 + $7;
 SAFE_HEAP_STORE_f64_8_8($15, 0, $21 * $16 - $20 * $17);
 SAFE_HEAP_STORE_f64_8_8($14, 0, $20 * $16 + $21 * $17);
}

function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $8 = __stack_pointer - 560 | 0;
 __stack_pointer = $8;
 $7 = ($2 - 3 | 0) / 24 | 0;
 $19 = ($7 | 0) > 0 ? $7 : 0;
 $12 = Math_imul($19, -24) + $2 | 0;
 $14 = SAFE_HEAP_LOAD_i32_4_4(($4 << 2) + 4816 | 0, 0);
 $10 = $3 - 1 | 0;
 if (($14 + $10 | 0) >= 0) {
  $6 = $3 + $14 | 0;
  $2 = $19 - $10 | 0;
  $7 = 0;
  while (1) {
   $11 = ($8 + 320 | 0) + ($7 << 3) | 0;
   if (($2 | 0) < 0) {
    $5 = 0;
   } else {
    $5 = +(SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + 4832 | 0, 0) | 0);
   }
   SAFE_HEAP_STORE_f64_8_8($11, 0, $5);
   $2 = $2 + 1 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $17 = $12 - 24 | 0;
 $11 = ($14 | 0) > 0 ? $14 : 0;
 $6 = 0;
 while (1) {
  $5 = 0;
  if (($3 | 0) > 0) {
   $7 = $6 + $10 | 0;
   $2 = 0;
   while (1) {
    $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($2 << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($8 + 320 | 0) + ($7 - $2 << 3) | 0, 0);
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $8 | 0, 0, $5);
  $2 = ($6 | 0) == ($11 | 0);
  $6 = $6 + 1 | 0;
  if (!$2) {
   continue;
  }
  break;
 }
 $23 = 47 - $12 | 0;
 $21 = 48 - $12 | 0;
 $24 = $12 - 25 | 0;
 $6 = $14;
 label$8: {
  while (1) {
   $5 = SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $8 | 0, 0);
   $2 = 0;
   $7 = $6;
   $18 = ($6 | 0) < 1;
   if (!$18) {
    while (1) {
     $11 = $2 << 2;
     $11 = $11 + ($8 + 480 | 0) | 0;
     $15 = $5;
     $9 = $5 * 5.960464477539063e-8;
     label$13: {
      if (Math_abs($9) < 2147483648) {
       $10 = ~~$9;
       break label$13;
      }
      $10 = -2147483648;
     }
     $9 = +($10 | 0);
     $5 = $15 + $9 * -16777216;
     label$12: {
      if (Math_abs($5) < 2147483648) {
       $10 = ~~$5;
       break label$12;
      }
      $10 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($11, 0, $10);
     $7 = $7 - 1 | 0;
     $5 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $8 | 0, 0) + $9;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $17);
   $5 = $5 + floor($5 * .125) * -8;
   label$16: {
    if (Math_abs($5) < 2147483648) {
     $16 = ~~$5;
     break label$16;
    }
    $16 = -2147483648;
   }
   $5 = $5 - +($16 | 0);
   label$18: {
    label$19: {
     label$20: {
      $22 = ($17 | 0) < 1;
      label$21: {
       if (!$22) {
        $2 = (($6 << 2) + $8 | 0) + 476 | 0;
        $10 = $2;
        $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
        $7 = $2;
        $2 = $2 >> $21;
        $7 = $7 - ($2 << $21) | 0;
        SAFE_HEAP_STORE_i32_4_4($10, 0, $7);
        $16 = $2 + $16 | 0;
        $13 = $7 >> $23;
        break label$21;
       }
       if ($17) {
        break label$20;
       }
       $13 = SAFE_HEAP_LOAD_i32_4_4((($6 << 2) + $8 | 0) + 476 | 0, 0) >> 23;
      }
      if (($13 | 0) < 1) {
       break label$18;
      }
      break label$19;
     }
     $13 = 2;
     if ($5 >= .5) {
      break label$19;
     }
     $13 = 0;
     break label$18;
    }
    $2 = 0;
    $10 = 0;
    if (!$18) {
     while (1) {
      $18 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4($18, 0);
      $11 = 16777215;
      label$25: {
       label$26: {
        if ($10) {
         break label$26;
        }
        $11 = 16777216;
        if ($7) {
         break label$26;
        }
        $10 = 0;
        break label$25;
       }
       SAFE_HEAP_STORE_i32_4_4($18, 0, $11 - $7 | 0);
       $10 = 1;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$27: {
     if ($22) {
      break label$27;
     }
     $2 = 8388607;
     label$28: {
      switch ($24 | 0) {
      case 1:
       $2 = 4194303;
       break;

      case 0:
       break label$28;

      default:
       break label$27;
      }
     }
     $7 = (($6 << 2) + $8 | 0) + 476 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) & $2);
    }
    $16 = $16 + 1 | 0;
    if (($13 | 0) != 2) {
     break label$18;
    }
    $5 = 1 - $5;
    $13 = 2;
    if (!$10) {
     break label$18;
    }
    $5 = $5 - scalbn(1, $17);
   }
   if ($5 == 0) {
    $7 = 0;
    label$31: {
     $2 = $6;
     if (($14 | 0) >= ($2 | 0)) {
      break label$31;
     }
     while (1) {
      $2 = $2 - 1 | 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4(($8 + 480 | 0) + ($2 << 2) | 0, 0) | $7;
      if (($2 | 0) > ($14 | 0)) {
       continue;
      }
      break;
     }
     if (!$7) {
      break label$31;
     }
     $12 = $17;
     while (1) {
      $12 = $12 - 24 | 0;
      $6 = $6 - 1 | 0;
      if (!SAFE_HEAP_LOAD_i32_4_4(($8 + 480 | 0) + ($6 << 2) | 0, 0)) {
       continue;
      }
      break;
     }
     break label$8;
    }
    $2 = 1;
    while (1) {
     $7 = $2;
     $2 = $2 + 1 | 0;
     if (!SAFE_HEAP_LOAD_i32_4_4(($8 + 480 | 0) + ($14 - $7 << 2) | 0, 0)) {
      continue;
     }
     break;
    }
    $11 = $6 + $7 | 0;
    while (1) {
     $7 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     SAFE_HEAP_STORE_f64_8_8(($8 + 320 | 0) + ($7 << 3) | 0, 0, +(SAFE_HEAP_LOAD_i32_4_4(($19 + $6 << 2) + 4832 | 0, 0) | 0));
     $2 = 0;
     $5 = 0;
     if (($3 | 0) >= 1) {
      while (1) {
       $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($2 << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($8 + 320 | 0) + ($7 - $2 << 3) | 0, 0);
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     SAFE_HEAP_STORE_f64_8_8(($6 << 3) + $8 | 0, 0, $5);
     if (($6 | 0) < ($11 | 0)) {
      continue;
     }
     break;
    }
    $6 = $11;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 24 - $12 | 0);
  label$38: {
   if ($5 >= 16777216) {
    $3 = $6 << 2;
    $3 = $3 + ($8 + 480 | 0) | 0;
    $15 = $5;
    $9 = $5 * 5.960464477539063e-8;
    label$41: {
     if (Math_abs($9) < 2147483648) {
      $2 = ~~$9;
      break label$41;
     }
     $2 = -2147483648;
    }
    $5 = $15 + +($2 | 0) * -16777216;
    label$40: {
     if (Math_abs($5) < 2147483648) {
      $7 = ~~$5;
      break label$40;
     }
     $7 = -2147483648;
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, $7);
    $6 = $6 + 1 | 0;
    break label$38;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $12 = $17;
  }
  SAFE_HEAP_STORE_i32_4_4(($8 + 480 | 0) + ($6 << 2) | 0, 0, $2);
 }
 $5 = scalbn(1, $12);
 label$46: {
  if (($6 | 0) <= -1) {
   break label$46;
  }
  $2 = $6;
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $8 | 0, 0, $5 * +(SAFE_HEAP_LOAD_i32_4_4(($8 + 480 | 0) + ($2 << 2) | 0, 0) | 0));
   $5 = $5 * 5.960464477539063e-8;
   $3 = ($2 | 0) > 0;
   $2 = $2 - 1 | 0;
   if ($3) {
    continue;
   }
   break;
  }
  if (($6 | 0) <= -1) {
   break label$46;
  }
  $2 = $6;
  while (1) {
   $7 = $2;
   $0 = $6 - $2 | 0;
   $5 = 0;
   $2 = 0;
   while (1) {
    label$50: {
     $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($2 << 3) + 7600 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($2 + $7 << 3) + $8 | 0, 0);
     if (($2 | 0) >= ($14 | 0)) {
      break label$50;
     }
     $3 = $0 >>> 0 > $2 >>> 0;
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
    }
    break;
   }
   SAFE_HEAP_STORE_f64_8_8(($8 + 160 | 0) + ($0 << 3) | 0, 0, $5);
   $2 = $7 - 1 | 0;
   if (($7 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 label$51: {
  label$52: {
   label$53: {
    switch ($4 | 0) {
    case 3:
     label$56: {
      if (($6 | 0) < 1) {
       break label$56;
      }
      $5 = SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($6 << 3) | 0, 0);
      $2 = $6;
      while (1) {
       $0 = ($8 + 160 | 0) + ($2 << 3) | 0;
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
       $15 = $9;
       $9 = $9 + $5;
       SAFE_HEAP_STORE_f64_8_8($0, 0, $5 + ($15 - $9));
       SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
       $7 = ($2 | 0) > 1;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$56;
      }
      $5 = SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($6 << 3) | 0, 0);
      $2 = $6;
      while (1) {
       $0 = ($8 + 160 | 0) + ($2 << 3) | 0;
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
       $15 = $9;
       $9 = $9 + $5;
       SAFE_HEAP_STORE_f64_8_8($0, 0, $5 + ($15 - $9));
       SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
       $7 = ($2 | 0) > 2;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) <= 1) {
       break label$56;
      }
      while (1) {
       $20 = $20 + SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($6 << 3) | 0, 0);
       $2 = ($6 | 0) > 2;
       $6 = $6 - 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $5 = SAFE_HEAP_LOAD_f64_8_8($8, 160);
     if ($13) {
      break label$52;
     }
     SAFE_HEAP_STORE_f64_8_8($1, 0, $5);
     $5 = SAFE_HEAP_LOAD_f64_8_8($8, 168);
     SAFE_HEAP_STORE_f64_8_8($1, 16, $20);
     SAFE_HEAP_STORE_f64_8_8($1, 8, $5);
     break label$51;

    case 0:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($6 << 3) | 0, 0);
       $2 = ($6 | 0) > 0;
       $6 = $6 - 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     SAFE_HEAP_STORE_f64_8_8($1, 0, $13 ? -$5 : $5);
     break label$51;

    case 1:
    case 2:
     break label$53;

    default:
     break label$51;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $2 = $6;
    while (1) {
     $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($2 << 3) | 0, 0);
     $3 = ($2 | 0) > 0;
     $2 = $2 - 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_f64_8_8($1, 0, $13 ? -$5 : $5);
   $5 = SAFE_HEAP_LOAD_f64_8_8($8, 160) - $5;
   $2 = 1;
   if (($6 | 0) >= 1) {
    while (1) {
     $5 = $5 + SAFE_HEAP_LOAD_f64_8_8(($8 + 160 | 0) + ($2 << 3) | 0, 0);
     $3 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_f64_8_8($1, 8, $13 ? -$5 : $5);
   break label$51;
  }
  SAFE_HEAP_STORE_f64_8_8($1, 0, -$5);
  $5 = SAFE_HEAP_LOAD_f64_8_8($8, 168);
  SAFE_HEAP_STORE_f64_8_8($1, 16, -$20);
  SAFE_HEAP_STORE_f64_8_8($1, 8, -$5);
 }
 __stack_pointer = $8 + 560 | 0;
 return $16 & 7;
}

function fft_execute($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 label$1: {
  label$2: {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) == 1) {
    $11 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
    $10 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    label$4: {
     if ($1) {
      if (($6 | 0) >= 1) {
       $8 = $6 & 1;
       $12 = $6 - 1 | 0;
       if ($12) {
        break label$4;
       }
       break label$2;
      }
      cftfsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($6 << 1, $3, $10, SAFE_HEAP_LOAD_i32_4_4($10, 0), $11);
      return;
     }
     label$7: {
      if (($6 | 0) < 1) {
       break label$7;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
      $5 = $6 & 3;
      $1 = 0;
      if ($6 - 1 >>> 0 >= 3) {
       $4 = $6 & -4;
       while (1) {
        $2 = $1 << 3;
        SAFE_HEAP_STORE_f64_8_8($2 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0));
        $8 = $2 | 8;
        SAFE_HEAP_STORE_f64_8_8($8 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $8 | 0, 0));
        $8 = $2 | 16;
        SAFE_HEAP_STORE_f64_8_8($8 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $8 | 0, 0));
        $2 = $2 | 24;
        SAFE_HEAP_STORE_f64_8_8($2 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0));
        $1 = $1 + 4 | 0;
        $4 = $4 - 4 | 0;
        if ($4) {
         continue;
        }
        break;
       }
      }
      if (!$5) {
       break label$7;
      }
      while (1) {
       $2 = $1 << 3;
       SAFE_HEAP_STORE_f64_8_8($2 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0));
       $1 = $1 + 1 | 0;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue;
       }
       break;
      }
     }
     rdft_28int_2c_20int_2c_20double__2c_20int__2c_20double__29($6, 1, $3, $10, $11);
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     SAFE_HEAP_STORE_i64_8_8($7, 8, 0, 0);
     SAFE_HEAP_STORE_f64_8_8($7, 0, $9);
     $8 = ($6 | 0) / 2 | 0;
     label$11: {
      if (($6 | 0) < 4) {
       break label$11;
      }
      $0 = 1;
      $1 = (($8 | 0) > 2 ? $8 : 2) - 1 | 0;
      $10 = $1 & 1;
      if (($6 | 0) >= 6) {
       $2 = $1 & -2;
       while (1) {
        $1 = $0 << 4;
        $5 = $7 + $1 | 0;
        $4 = $1 + $3 | 0;
        SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
        SAFE_HEAP_STORE_f64_8_8($5, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
        $1 = $1 + 16 | 0;
        $5 = $7 + $1 | 0;
        SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
        SAFE_HEAP_STORE_f64_8_8($5, 8, -SAFE_HEAP_LOAD_f64_8_8($4 + 24 | 0, 0));
        $0 = $0 + 2 | 0;
        $2 = $2 - 2 | 0;
        if ($2) {
         continue;
        }
        break;
       }
      }
      if (!$10) {
       break label$11;
      }
      $1 = $0 << 4;
      $0 = $7 + $1 | 0;
      SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
      SAFE_HEAP_STORE_f64_8_8($0, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
     }
     $9 = SAFE_HEAP_LOAD_f64_8_8($3, 8);
     $3 = ($8 << 4) + $7 | 0;
     SAFE_HEAP_STORE_i64_8_8($3, 8, 0, 0);
     SAFE_HEAP_STORE_f64_8_8($3, 0, $9);
     return;
    }
    $5 = $6 & -2;
    while (1) {
     $0 = $2 << 4;
     $4 = $0 + $1 | 0;
     SAFE_HEAP_STORE_f64_8_8($3 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 8));
     $4 = $0 | 16;
     $13 = $4 + $3 | 0;
     $4 = $1 + $4 | 0;
     SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
     SAFE_HEAP_STORE_f64_8_8(($0 | 24) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 8));
     $2 = $2 + 2 | 0;
     $5 = $5 - 2 | 0;
     if ($5) {
      continue;
     }
     break;
    }
    break label$2;
   }
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
   $10 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
   label$15: {
    label$16: {
     label$17: {
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
      if ($7) {
       if (($6 | 0) < 1) {
        break label$16;
       }
       $8 = $6 & 1;
       $12 = $6 - 1 | 0;
       if ($12) {
        break label$17;
       }
       break label$15;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
      SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
      $2 = ($6 | 0) / 2 | 0;
      SAFE_HEAP_STORE_f64_8_8($3, 8, SAFE_HEAP_LOAD_f64_8_8(($2 << 4) + $1 | 0, 0));
      label$19: {
       if (($6 | 0) < 4) {
        break label$19;
       }
       $7 = 1;
       $2 = (($2 | 0) > 2 ? $2 : 2) - 1 | 0;
       $12 = $2 & 1;
       if (($6 | 0) >= 6) {
        $5 = $2 & -2;
        while (1) {
         $2 = $7 << 4;
         $4 = $2 + $3 | 0;
         $8 = $1 + $2 | 0;
         SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0));
         SAFE_HEAP_STORE_f64_8_8(($2 | 8) + $3 | 0, 0, -SAFE_HEAP_LOAD_f64_8_8($8, 8));
         $2 = $2 + 16 | 0;
         $8 = $2 + $3 | 0;
         $2 = $1 + $2 | 0;
         SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($2, 0));
         SAFE_HEAP_STORE_f64_8_8($4 + 24 | 0, 0, -SAFE_HEAP_LOAD_f64_8_8($2, 8));
         $7 = $7 + 2 | 0;
         $5 = $5 - 2 | 0;
         if ($5) {
          continue;
         }
         break;
        }
       }
       if (!$12) {
        break label$19;
       }
       $2 = $7 << 4;
       $1 = $1 + $2 | 0;
       SAFE_HEAP_STORE_f64_8_8($2 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
       SAFE_HEAP_STORE_f64_8_8(($2 | 8) + $3 | 0, 0, -SAFE_HEAP_LOAD_f64_8_8($1, 8));
      }
      rdft_28int_2c_20int_2c_20double__2c_20int__2c_20double__29($6, -1, $3, $10, $11);
      if (($6 | 0) < 1) {
       break label$1;
      }
      $7 = $6 & 3;
      $1 = 0;
      if ($6 - 1 >>> 0 >= 3) {
       $5 = $6 & -4;
       while (1) {
        $2 = $1 << 3;
        $4 = $2 + $0 | 0;
        $9 = SAFE_HEAP_LOAD_f64_8_8($3 + $2 | 0, 0);
        SAFE_HEAP_STORE_f64_8_8($4, 0, $9 + $9);
        $4 = $2 | 8;
        $6 = $4 + $0 | 0;
        $9 = SAFE_HEAP_LOAD_f64_8_8($3 + $4 | 0, 0);
        SAFE_HEAP_STORE_f64_8_8($6, 0, $9 + $9);
        $4 = $2 | 16;
        $6 = $4 + $0 | 0;
        $9 = SAFE_HEAP_LOAD_f64_8_8($3 + $4 | 0, 0);
        SAFE_HEAP_STORE_f64_8_8($6, 0, $9 + $9);
        $2 = $2 | 24;
        $4 = $2 + $0 | 0;
        $9 = SAFE_HEAP_LOAD_f64_8_8($3 + $2 | 0, 0);
        SAFE_HEAP_STORE_f64_8_8($4, 0, $9 + $9);
        $1 = $1 + 4 | 0;
        $5 = $5 - 4 | 0;
        if ($5) {
         continue;
        }
        break;
       }
      }
      if (!$7) {
       break label$1;
      }
      while (1) {
       $2 = $1 << 3;
       $4 = $2 + $0 | 0;
       $9 = SAFE_HEAP_LOAD_f64_8_8($3 + $2 | 0, 0);
       SAFE_HEAP_STORE_f64_8_8($4, 0, $9 + $9);
       $1 = $1 + 1 | 0;
       $7 = $7 - 1 | 0;
       if ($7) {
        continue;
       }
       break;
      }
      break label$1;
     }
     $5 = $6 & -2;
     while (1) {
      $0 = $2 << 4;
      $4 = $0 + $1 | 0;
      SAFE_HEAP_STORE_f64_8_8($3 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
      SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 8));
      $4 = $0 | 16;
      $13 = $4 + $3 | 0;
      $4 = $1 + $4 | 0;
      SAFE_HEAP_STORE_f64_8_8($13, 0, SAFE_HEAP_LOAD_f64_8_8($4, 0));
      SAFE_HEAP_STORE_f64_8_8(($0 | 24) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4, 8));
      $2 = $2 + 2 | 0;
      $5 = $5 - 2 | 0;
      if ($5) {
       continue;
      }
      break;
     }
     break label$15;
    }
    cftbsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($6 << 1, $3, $10, SAFE_HEAP_LOAD_i32_4_4($10, 0), $11);
    break label$1;
   }
   if ($8) {
    $0 = $2 << 4;
    $1 = $0 + $1 | 0;
    SAFE_HEAP_STORE_f64_8_8($3 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
    SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 8));
   }
   cftbsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($6 << 1, $3, $10, SAFE_HEAP_LOAD_i32_4_4($10, 0), $11);
   $8 = $6 & 1;
   label$27: {
    if (!$12) {
     $0 = 0;
     break label$27;
    }
    $2 = $6 & -2;
    $0 = 0;
    while (1) {
     $1 = $0 << 4;
     $5 = $7 + $1 | 0;
     SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8($5, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
     $5 = $1 | 16;
     $4 = $7 + $5 | 0;
     SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3 + $5 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8($4, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 24) + $3 | 0, 0));
     $0 = $0 + 2 | 0;
     $2 = $2 - 2 | 0;
     if ($2) {
      continue;
     }
     break;
    }
   }
   if (!$8) {
    break label$1;
   }
   $1 = $0 << 4;
   $0 = $7 + $1 | 0;
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
   SAFE_HEAP_STORE_f64_8_8($0, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
   return;
  }
  if ($8) {
   $0 = $2 << 4;
   $1 = $0 + $1 | 0;
   SAFE_HEAP_STORE_f64_8_8($3 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
   SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 8));
  }
  cftfsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($6 << 1, $3, $10, SAFE_HEAP_LOAD_i32_4_4($10, 0), $11);
  $8 = $6 & 1;
  label$31: {
   if (!$12) {
    $0 = 0;
    break label$31;
   }
   $2 = $6 & -2;
   $0 = 0;
   while (1) {
    $1 = $0 << 4;
    $5 = $7 + $1 | 0;
    SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8($5, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
    $5 = $1 | 16;
    $4 = $7 + $5 | 0;
    SAFE_HEAP_STORE_f64_8_8($4, 0, SAFE_HEAP_LOAD_f64_8_8($3 + $5 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8($4, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 24) + $3 | 0, 0));
    $0 = $0 + 2 | 0;
    $2 = $2 - 2 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$1;
  }
  $1 = $0 << 4;
  $0 = $7 + $1 | 0;
  SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0));
  SAFE_HEAP_STORE_f64_8_8($0, 8, -SAFE_HEAP_LOAD_f64_8_8(($1 | 8) + $3 | 0, 0));
 }
}

function WorldJSWrapper__GetInformationVal_28emscripten__val_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $6 = _emval_new_cstring(1313) | 0;
 $10 = _emval_get_property($3 | 0, $6 | 0) | 0;
 _emval_decref($6 | 0);
 $8 = +_emval_as($10 | 0, 20676, $2 + 208 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 208) | 0);
 $3 = $2 + 48 | 0;
 if (Math_abs($8) < 2147483648) {
  $6 = ~~$8;
 } else {
  $6 = -2147483648;
 }
 std____2__to_string_28int_29($3, $6);
 $3 = $2 + 72 | 0;
 $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__29($2 + 48 | 0, 0, 2941);
 $5 = $6 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 64, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($6, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
 $3 = $2 + 88 | 0;
 $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 - -64 | 0, 2919);
 $5 = $6 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 80, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($6, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $5 = _emval_new_cstring(1256) | 0;
 $6 = _emval_get_property($3 | 0, $5 | 0) | 0;
 _emval_decref($5 | 0);
 $8 = +_emval_as($6 | 0, 20676, $2 + 208 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 208) | 0);
 $3 = $2 + 32 | 0;
 if (Math_abs($8) < 2147483648) {
  $5 = ~~$8;
 } else {
  $5 = -2147483648;
 }
 std____2__to_string_28int_29($3, $5);
 $3 = $2 + 104 | 0;
 $7 = $2 + 80 | 0;
 $9 = SAFE_HEAP_LOAD_i32_4_4($2, 32);
 $11 = $2 + 32 | 0;
 $5 = SAFE_HEAP_LOAD_i32_1_U_1($2, 43);
 $4 = $5 << 24 >> 24 < 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($7, $4 ? $9 : $11, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 36), 
 wasm2js_i32$1 = $5, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $4 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 96, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $3 = $2 + 120 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 + 96 | 0, 1261);
 $4 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 112, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $3 = $2 + 136 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 + 112 | 0, 2929);
 $4 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 128, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $4 = _emval_new_cstring(1640) | 0;
 $5 = _emval_get_property($3 | 0, $4 | 0) | 0;
 _emval_decref($4 | 0);
 $8 = +_emval_as($5 | 0, 20676, $2 + 208 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 208) | 0);
 $3 = $2 + 16 | 0;
 if (Math_abs($8) < 2147483648) {
  $4 = ~~$8;
 } else {
  $4 = -2147483648;
 }
 std____2__to_string_28int_29($3, $4);
 $7 = $2 + 152 | 0;
 $9 = $2 + 128 | 0;
 $11 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
 $12 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 27);
 $3 = $4 << 24 >> 24 < 0;
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($9, $3 ? $11 : $12, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 20), 
 wasm2js_i32$1 = $4, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $3 = $4 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 144, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 $7 = $2 + 168 | 0;
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 + 144 | 0, 1969);
 $3 = $4 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 160, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 $7 = $2 + 184 | 0;
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 + 160 | 0, 2929);
 $3 = $4 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 176, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $3 = _emval_new_cstring(1640) | 0;
 $4 = _emval_get_property($4 | 0, $3 | 0) | 0;
 _emval_decref($3 | 0);
 $8 = +_emval_as($4 | 0, 20676, $2 + 208 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 208) | 0);
 $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $3 = _emval_new_cstring(1313) | 0;
 $1 = _emval_get_property($1 | 0, $3 | 0) | 0;
 _emval_decref($3 | 0);
 $13 = +_emval_as($1 | 0, 20676, $2 + 208 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 208) | 0);
 $7 = $2;
 if (Math_abs($8) < 2147483648) {
  $3 = ~~$8;
 } else {
  $3 = -2147483648;
 }
 $8 = +($3 | 0);
 if (Math_abs($13) < 2147483648) {
  $3 = ~~$13;
 } else {
  $3 = -2147483648;
 }
 std____2__to_string_28double_29($7, $8 / +($3 | 0));
 $9 = $2 + 200 | 0;
 $11 = $2 + 176 | 0;
 $12 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
 $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 11);
 $7 = $3 << 24 >> 24 < 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($11, $7 ? $12 : $2, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 4), 
 wasm2js_i32$1 = $3, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $7 = $3 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 192, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
 $9 = $2 + 216 | 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($2 + 192 | 0, 1978);
 $7 = $3 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0));
 SAFE_HEAP_STORE_i64_8_8($2, 208, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 203) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 192));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 0));
 }
 _emval_decref($1 | 0);
 _emval_decref($4 | 0);
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 187) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 176));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 171) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 160));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 155) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 144));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 16));
 }
 _emval_decref($5 | 0);
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 139) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 128));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 123) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 112));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 107) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 96));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 43) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 32));
 }
 _emval_decref($6 | 0);
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 91) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 80));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 75) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 64));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($2, 59) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 48));
 }
 _emval_decref($10 | 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 212);
 $1 = SAFE_HEAP_LOAD_i32_1_U_1($2, 219);
 $6 = $1 << 24 >> 24;
 $5 = ($6 | 0) < 0;
 $1 = $5 ? $3 : $1;
 $10 = dlmalloc($1 + 4 | 0);
 SAFE_HEAP_STORE_i32_4_4($10, 0, $1);
 $3 = $10 + 4 | 0;
 $4 = SAFE_HEAP_LOAD_i32_4_4($2, 208);
 memcpy($3, $5 ? $4 : $2 + 208 | 0, $1);
 SAFE_HEAP_STORE_i32_4_4($2, 192, $10);
 SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(3244, $2 + 192 | 0) | 0);
 if (($6 | 0) <= -1) {
  operator_20delete_28void__29($4);
 }
 __stack_pointer = $2 + 224 | 0;
}

function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1: {
  label$2: {
   if (!$0) {
    break label$2;
   }
   $3 = $0 - 8 | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0);
   $0 = $1 & -8;
   $5 = $3 + $0 | 0;
   label$3: {
    if ($1 & 1) {
     break label$3;
    }
    if (!($1 & 3)) {
     break label$2;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    $3 = $3 - $1 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 31332);
    if ($3 >>> 0 < $4 >>> 0) {
     break label$2;
    }
    $0 = $0 + $1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
      $6 = $1 >>> 3 | 0;
      $1 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
      if (($4 | 0) == ($1 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $6));
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
      SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
      break label$3;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
     label$7: {
      if (($2 | 0) != ($3 | 0)) {
       $1 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
       SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
       SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
       break label$7;
      }
      label$9: {
       $1 = $3 + 20 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if ($4) {
        break label$9;
       }
       $1 = $3 + 16 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if ($4) {
        break label$9;
       }
       $2 = 0;
       break label$7;
      }
      while (1) {
       $6 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
       if ($4) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
     }
     if (!$7) {
      break label$3;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
     $1 = ($4 << 2) + 31620 | 0;
     label$11: {
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($3 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
       if ($2) {
        break label$11;
       }
       SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $4));
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($3 | 0) ? 16 : 20) + $7 | 0, 0, $2);
      if (!$2) {
       break label$3;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 24, $7);
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
     if ($1) {
      SAFE_HEAP_STORE_i32_4_4($2, 16, $1);
      SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
     if (!$1) {
      break label$3;
     }
     SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $1);
     SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
     break label$3;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
    if (($1 & 3) != 3) {
     break label$3;
    }
    SAFE_HEAP_STORE_i32_4_4(0, 31324, $0);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $1 & -2);
    break label$1;
   }
   if ($3 >>> 0 >= $5 >>> 0) {
    break label$2;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
   if (!($1 & 1)) {
    break label$2;
   }
   label$14: {
    if (!($1 & 2)) {
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 31340) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 31340, $3);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31328) + $0 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 31328, $0);
      SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
      if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) != ($3 | 0)) {
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4(0, 31324, 0);
      SAFE_HEAP_STORE_i32_4_4(0, 31336, 0);
      return;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 31336, $3);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 31324) + $0 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 31324, $0);
      break label$1;
     }
     $0 = ($1 & -8) + $0 | 0;
     label$18: {
      if ($1 >>> 0 <= 255) {
       $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
       $6 = $1 >>> 3 | 0;
       $1 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
       if (($4 | 0) == ($1 | 0)) {
        SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $6));
        break label$18;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
       SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
       break label$18;
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
      label$21: {
       if (($5 | 0) != ($2 | 0)) {
        SAFE_HEAP_LOAD_i32_4_4(0, 31332);
        $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
        SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
        SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
        break label$21;
       }
       label$23: {
        $1 = $5 + 20 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
        if ($4) {
         break label$23;
        }
        $1 = $5 + 16 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
        if ($4) {
         break label$23;
        }
        $2 = 0;
        break label$21;
       }
       while (1) {
        $6 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
        if ($4) {
         continue;
        }
        break;
       }
       SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
      }
      if (!$7) {
       break label$18;
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
      $1 = ($4 << 2) + 31620 | 0;
      label$25: {
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($5 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
        if ($2) {
         break label$25;
        }
        SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $4));
        break label$18;
       }
       SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($5 | 0) ? 16 : 20) + $7 | 0, 0, $2);
       if (!$2) {
        break label$18;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($2, 24, $7);
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
      if ($1) {
       SAFE_HEAP_STORE_i32_4_4($2, 16, $1);
       SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
      if (!$1) {
       break label$18;
      }
      SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $1);
      SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
     SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) != ($3 | 0)) {
      break label$14;
     }
     SAFE_HEAP_STORE_i32_4_4(0, 31324, $0);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($5, 4, $1 & -2);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3 | 0;
    $0 = ($1 << 3) + 31356 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
    $1 = 1 << $1;
    label$29: {
     if (!($4 & $1)) {
      SAFE_HEAP_STORE_i32_4_4(0, 31316, $1 | $4);
      $1 = $0;
      break label$29;
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
    SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $0);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
    return;
   }
   $1 = 31;
   if ($0 >>> 0 <= 16777215) {
    $1 = $0 >>> 8 | 0;
    $2 = $1;
    $1 = $1 + 1048320 >>> 16 & 8;
    $4 = $2 << $1;
    $2 = $4;
    $4 = $4 + 520192 >>> 16 & 4;
    $2 = $2 << $4;
    $6 = $2;
    $2 = $2 + 245760 >>> 16 & 2;
    $1 = ($6 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   SAFE_HEAP_STORE_i64_8_4($3, 16, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3 + 28 | 0, 0, $1);
   $4 = ($1 << 2) + 31620 | 0;
   label$32: {
    label$33: {
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
     $5 = 1 << $1;
     label$34: {
      if (!($2 & $5)) {
       SAFE_HEAP_STORE_i32_4_4(0, 31320, $2 | $5);
       SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
       break label$34;
      }
      $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      while (1) {
       $4 = $2;
       if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) & -8) == ($0 | 0)) {
        break label$33;
       }
       $2 = $1 >>> 29 | 0;
       $1 = $1 << 1;
       $5 = (($2 & 4) + $4 | 0) + 16 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       if ($2) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
     }
     SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, $4);
     SAFE_HEAP_STORE_i32_4_4($3, 12, $3);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $3);
     break label$32;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
    SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $4);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31348) - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4(0, 31348, $3 ? $3 : -1);
  }
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
 SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
}

function pow($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $3 = 1;
 wasm2js_scratch_store_f64(+$1);
 $10 = wasm2js_scratch_load_i32(1) | 0;
 $11 = wasm2js_scratch_load_i32(0) | 0;
 $8 = $10;
 $2 = $8;
 label$1: {
  label$2: {
   label$3: {
    $13 = $2;
    $4 = $2 & 2147483647;
    $6 = $11;
    if (!($4 | $6)) {
     break label$3;
    }
    wasm2js_scratch_store_f64(+$0);
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $17 = wasm2js_scratch_load_i32(0) | 0;
    $19 = $2;
    $21 = $2;
    $10 = $17;
    $5 = $10;
    if ($5 ? 0 : ($2 | 0) == 1072693248) {
     break label$3;
    }
    $14 = $21 & 2147483647;
    if (!$6 | ($4 | 0) != 2146435072 ? $14 >>> 0 > 2146435072 | ($14 | 0) == 2146435072 & ($5 | 0) != 0 | $4 >>> 0 > 2146435072 : 1) {
     return $0 + $1;
    }
    label$5: {
     label$6: {
      label$7: {
       label$8: {
        $9 = $19;
        if (($9 | 0) > -1) {
         break label$8;
        }
        $9 = 2;
        if ($4 >>> 0 > 1128267775) {
         break label$7;
        }
        if ($4 >>> 0 < 1072693248) {
         break label$8;
        }
        $2 = $4 >>> 20 | 0;
        if ($4 >>> 0 >= 1094713344) {
         $2 = 1075 - $2 | 0;
         $10 = $6 >>> $2 | 0;
         $9 = 0;
         if ($10 << $2 != ($6 | 0)) {
          break label$7;
         }
         $9 = 2 - ($10 & 1) | 0;
         break label$7;
        }
        $9 = 0;
        if ($6) {
         break label$5;
        }
        $6 = 1043 - $2 | 0;
        $2 = $4 >>> $6 | 0;
        if ($2 << $6 != ($4 | 0)) {
         break label$6;
        }
        $9 = 2 - ($2 & 1) | 0;
        break label$6;
       }
       $9 = 0;
      }
      if ($6) {
       break label$5;
      }
     }
     if (($4 | 0) == 2146435072) {
      if (!($14 - 1072693248 | $5)) {
       break label$3;
      }
      if ($14 >>> 0 >= 1072693248) {
       $2 = $8;
       return ($2 | 0) > -1 ? $1 : 0;
      }
      return ($8 | 0) > -1 ? 0 : -$1;
     }
     if (($4 | 0) == 1072693248) {
      if (($8 | 0) > -1) {
       return $0;
      }
      return 1 / $0;
     }
     if (($13 | 0) == 1073741824) {
      return $0 * $0;
     }
     if (($13 | 0) != 1071644672 | ($19 | 0) < 0) {
      break label$5;
     }
     $3 = sqrt($0);
     break label$3;
    }
    $3 = fabs($0);
    if (($14 ? ($21 & 1073741823) != 1072693248 : 0) | $5) {
     break label$1;
    }
    $2 = $8;
    $3 = ($2 | 0) < 0 ? 1 / $3 : $3;
    $2 = $19;
    if (($2 | 0) > -1) {
     break label$3;
    }
    if ($14 - 1072693248 | $9) {
     break label$2;
    }
    $1 = $3 - $3;
    return $1 / $1;
   }
   return $3;
  }
  return ($9 | 0) == 1 ? -$3 : $3;
 }
 $15 = 1;
 $10 = $19;
 label$15: {
  if (($10 | 0) > -1) {
   break label$15;
  }
  label$16: {
   switch ($9 | 0) {
   case 0:
    $1 = $0 - $0;
    return $1 / $1;

   case 1:
    break label$16;

   default:
    break label$15;
   }
  }
  $15 = -1;
 }
 label$18: {
  if ($4 >>> 0 >= 1105199105) {
   if ($4 >>> 0 >= 1139802113) {
    if ($14 >>> 0 <= 1072693247) {
     return ($8 | 0) < 0 ? infinity : 0;
    }
    return ($13 | 0) > 0 ? infinity : 0;
   }
   if ($14 >>> 0 <= 1072693246) {
    $2 = $8;
    return ($2 | 0) < 0 ? $15 * 1e300 * 1e300 : $15 * 1e-300 * 1e-300;
   }
   if ($14 >>> 0 >= 1072693249) {
    return ($13 | 0) > 0 ? $15 * 1e300 * 1e300 : $15 * 1e-300 * 1e-300;
   }
   $0 = $3 + -1;
   $3 = $0 * 1.9259629911266175e-8 + $0 * $0 * (.5 - $0 * ($0 * -.25 + .3333333333333333)) * -1.4426950408889634;
   $7 = $0 * 1.4426950216293335;
   wasm2js_scratch_store_f64(+($3 + $7));
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $7 = $3 - ($0 - $7);
   break label$18;
  }
  $0 = $3 * 9007199254740992;
  $4 = $14 >>> 0 < 1048576;
  $3 = $4 ? $0 : $3;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $13 = $4 ? $2 : $14;
  $6 = $13 & 1048575;
  $5 = $6 | 1072693248;
  $13 = ($13 >> 20) + ($4 ? -1076 : -1023) | 0;
  $4 = 0;
  label$24: {
   if ($6 >>> 0 < 235663) {
    break label$24;
   }
   if ($6 >>> 0 < 767610) {
    $4 = 1;
    break label$24;
   }
   $5 = $6 | 1071644672;
   $13 = $13 + 1 | 0;
  }
  $6 = $4 << 3;
  $22 = SAFE_HEAP_LOAD_f64_8_8($6 + 4784 | 0, 0);
  $0 = SAFE_HEAP_LOAD_f64_8_8($6 + 4768 | 0, 0);
  wasm2js_scratch_store_f64(+$3);
  wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  $17 = $2;
  $2 = 0;
  $10 = $5 | $2;
  $9 = 0;
  $2 = $17;
  wasm2js_scratch_store_i32(0, $9 | $2);
  wasm2js_scratch_store_i32(1, $10 | 0);
  $12 = +wasm2js_scratch_load_f64();
  $3 = 1 / ($0 + $12);
  $16 = $3;
  $7 = $12 - $0;
  $20 = $7;
  $2 = (($5 >>> 1 | 536870912) + ($4 << 18) | 0) + 524288 | 0;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $18 = +wasm2js_scratch_load_f64();
  $7 = $7 * $3;
  wasm2js_scratch_store_f64(+$7);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $3 = +wasm2js_scratch_load_f64();
  $0 = $16 * ($20 - $18 * $3 - ($12 - ($18 - $0)) * $3);
  $16 = $0;
  $12 = $3 * $3;
  $20 = $0 * ($7 + $3);
  $0 = $7 * $7;
  $18 = $20 + $0 * $0 * ($0 * ($0 * ($0 * ($0 * ($0 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
  wasm2js_scratch_store_f64(+($12 + 3 + $18));
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $7 = $16 * $0 + $7 * ($18 - ($0 + -3 - $12));
  $3 = $3 * $0;
  wasm2js_scratch_store_f64(+($7 + $3));
  $10 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $2 = $10;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $3 = $22 + (($7 - ($0 - $3)) * .9617966939259756 + $0 * -7.028461650952758e-9);
  $16 = $3;
  $7 = SAFE_HEAP_LOAD_f64_8_8($6 + 4800 | 0, 0);
  $12 = $0 * .9617967009544373;
  $0 = $7 + ($3 + $12);
  $3 = +($13 | 0);
  wasm2js_scratch_store_f64(+($0 + $3));
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $7 = $16 - ($0 - $3 - $7 - $12);
 }
 label$26: {
  label$27: {
   label$28: {
    $2 = $8;
    wasm2js_scratch_store_i32(0, 0);
    wasm2js_scratch_store_i32(1, $2 | 0);
    $12 = +wasm2js_scratch_load_f64();
    $3 = $0 * $12;
    $1 = $7 * $1 + ($1 - $12) * $0;
    $0 = $3 + $1;
    wasm2js_scratch_store_f64(+$0);
    $10 = wasm2js_scratch_load_i32(1) | 0;
    $11 = wasm2js_scratch_load_i32(0) | 0;
    $4 = $11;
    $8 = $10;
    $5 = $8;
    if (($5 | 0) >= 1083179008) {
     if ($5 - 1083179008 | $4) {
      break label$27;
     }
     if (!($1 + 8.008566259537294e-17 > $0 - $3)) {
      break label$28;
     }
     break label$27;
    }
    if (($5 & 2147482624) >>> 0 < 1083231232) {
     break label$28;
    }
    if ($5 + 1064252416 | $4) {
     break label$26;
    }
    if (!($0 - $3 >= $1)) {
     break label$28;
    }
    break label$26;
   }
   $4 = 0;
   $6 = $5 & 2147483647;
   if ($6 >>> 0 >= 1071644673) {
    $5 = (1048576 >>> ($6 >>> 20 | 0) - 1022 | 0) + $5 | 0;
    $6 = $5 >>> 20 & 2047;
    $4 = ($5 & 1048575 | 1048576) >>> 1043 - $6 | 0;
    $4 = ($8 | 0) < 0 ? 0 - $4 | 0 : $4;
    $9 = -1048576 >> $6 - 1023 & $5;
    $2 = $9;
    wasm2js_scratch_store_i32(0, 0);
    wasm2js_scratch_store_i32(1, $2 | 0);
    $3 = $3 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($1 + $3));
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $11 = wasm2js_scratch_load_i32(0) | 0;
    $8 = $2;
   }
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $8 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $7 = $0 * .6931471824645996;
   $3 = ($1 - ($0 - $3)) * .6931471805599453 + $0 * -1.904654299957768e-9;
   $1 = $7 + $3;
   $0 = $1 * $1;
   $0 = $1 - $0 * ($0 * ($0 * ($0 * ($0 * 4.1381367970572385e-8 + -16533902205465252e-22) + 6613756321437934e-20) + -.0027777777777015593) + .16666666666666602);
   $16 = $1 * $0 / ($0 + -2);
   $0 = $3 - ($1 - $7);
   $1 = $1 - ($16 - ($0 + $1 * $0)) + 1;
   wasm2js_scratch_store_f64(+$1);
   $9 = wasm2js_scratch_load_i32(1) | 0;
   $11 = wasm2js_scratch_load_i32(0) | 0;
   $8 = $9;
   $5 = $8 + ($4 << 20) | 0;
   label$30: {
    if (($5 | 0) <= 1048575) {
     $1 = scalbn($1, $4);
     break label$30;
    }
    $2 = 0;
    $10 = $5 | $2;
    $2 = 0;
    wasm2js_scratch_store_i32(0, $2 | $11);
    wasm2js_scratch_store_i32(1, $10 | 0);
    $1 = +wasm2js_scratch_load_f64();
   }
   return $15 * $1;
  }
  return $15 * 1e300 * 1e300;
 }
 return $15 * 1e-300 * 1e-300;
}

function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + $1 | 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 label$1: {
  label$2: {
   if ($2 & 1) {
    break label$2;
   }
   if (!($2 & 3)) {
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $1 = $2 + $1 | 0;
   label$3: {
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31336);
    $0 = $0 - $2 | 0;
    if (($3 | 0) != ($0 | 0)) {
     if ($2 >>> 0 <= 255) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      $6 = $2 >>> 3 | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
      if (($4 | 0) != ($2 | 0)) {
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $6));
      break label$2;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
     label$6: {
      if (($3 | 0) != ($0 | 0)) {
       SAFE_HEAP_LOAD_i32_4_4(0, 31332);
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
       SAFE_HEAP_STORE_i32_4_4($2, 12, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
       break label$6;
      }
      label$8: {
       $2 = $0 + 20 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       if ($4) {
        break label$8;
       }
       $2 = $0 + 16 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       if ($4) {
        break label$8;
       }
       $3 = 0;
       break label$6;
      }
      while (1) {
       $6 = $2;
       $3 = $4;
       $2 = $3 + 20 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       if ($4) {
        continue;
       }
       $2 = $3 + 16 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
       if ($4) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
     }
     if (!$7) {
      break label$2;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
     $2 = ($4 << 2) + 31620 | 0;
     label$10: {
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($0 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
       if ($3) {
        break label$10;
       }
       SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $4));
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($0 | 0) ? 16 : 20) + $7 | 0, 0, $3);
      if (!$3) {
       break label$2;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($3, 24, $7);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     if ($2) {
      SAFE_HEAP_STORE_i32_4_4($3, 16, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 24, $3);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
     if (!$2) {
      break label$2;
     }
     SAFE_HEAP_STORE_i32_4_4($3 + 20 | 0, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($2, 24, $3);
     break label$2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
    if (($2 & 3) != 3) {
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4(0, 31324, $1);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $2 & -2);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $1);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
  label$13: {
   if (!($2 & 2)) {
    if ((SAFE_HEAP_LOAD_i32_4_4(0, 31340) | 0) == ($5 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(0, 31340, $0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 31328) + $1 | 0;
     SAFE_HEAP_STORE_i32_4_4(0, 31328, $1);
     SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) != ($0 | 0)) {
      break label$1;
     }
     SAFE_HEAP_STORE_i32_4_4(0, 31324, 0);
     SAFE_HEAP_STORE_i32_4_4(0, 31336, 0);
     return;
    }
    if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) == ($5 | 0)) {
     SAFE_HEAP_STORE_i32_4_4(0, 31336, $0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 31324) + $1 | 0;
     SAFE_HEAP_STORE_i32_4_4(0, 31324, $1);
     SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
     SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
     return;
    }
    $1 = ($2 & -8) + $1 | 0;
    label$17: {
     if ($2 >>> 0 <= 255) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
      $6 = $2 >>> 3 | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
      if (($4 | 0) == ($2 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $6));
       break label$17;
      }
      SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
      break label$17;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
     label$20: {
      if (($5 | 0) != ($3 | 0)) {
       SAFE_HEAP_LOAD_i32_4_4(0, 31332);
       $2 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
       SAFE_HEAP_STORE_i32_4_4($2, 12, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
       break label$20;
      }
      label$22: {
       $4 = $5 + 20 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        break label$22;
       }
       $4 = $5 + 16 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        break label$22;
       }
       $3 = 0;
       break label$20;
      }
      while (1) {
       $6 = $4;
       $3 = $2;
       $4 = $2 + 20 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        continue;
       }
       $4 = $3 + 16 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
       if ($2) {
        continue;
       }
       break;
      }
      SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
     }
     if (!$7) {
      break label$17;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
     $2 = ($4 << 2) + 31620 | 0;
     label$24: {
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($5 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
       if ($3) {
        break label$24;
       }
       SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $4));
       break label$17;
      }
      SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($5 | 0) ? 16 : 20) + $7 | 0, 0, $3);
      if (!$3) {
       break label$17;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($3, 24, $7);
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
     if ($2) {
      SAFE_HEAP_STORE_i32_4_4($3, 16, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 24, $3);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
     if (!$2) {
      break label$17;
     }
     SAFE_HEAP_STORE_i32_4_4($3 + 20 | 0, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($2, 24, $3);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
    if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) != ($0 | 0)) {
     break label$13;
    }
    SAFE_HEAP_STORE_i32_4_4(0, 31324, $1);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($5, 4, $2 & -2);
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
   SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
  }
  if ($1 >>> 0 <= 255) {
   $2 = $1 >>> 3 | 0;
   $1 = ($2 << 3) + 31356 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 31316);
   $2 = 1 << $2;
   label$28: {
    if (!($4 & $2)) {
     SAFE_HEAP_STORE_i32_4_4(0, 31316, $2 | $4);
     $2 = $1;
     break label$28;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
   SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
   return;
  }
  $2 = 31;
  if ($1 >>> 0 <= 16777215) {
   $2 = $1 >>> 8 | 0;
   $3 = $2;
   $2 = $2 + 1048320 >>> 16 & 8;
   $4 = $3 << $2;
   $3 = $4;
   $4 = $4 + 520192 >>> 16 & 4;
   $3 = $3 << $4;
   $6 = $3;
   $3 = $3 + 245760 >>> 16 & 2;
   $2 = ($6 << $3 >>> 15 | 0) - ($2 | $4 | $3) | 0;
   $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
  }
  SAFE_HEAP_STORE_i64_8_4($0, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0 + 28 | 0, 0, $2);
  $4 = ($2 << 2) + 31620 | 0;
  label$31: {
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 31320);
   $5 = 1 << $2;
   label$32: {
    if (!($3 & $5)) {
     SAFE_HEAP_STORE_i32_4_4(0, 31320, $3 | $5);
     SAFE_HEAP_STORE_i32_4_4($4, 0, $0);
     break label$32;
    }
    $2 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    while (1) {
     $4 = $3;
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 4) & -8) == ($1 | 0)) {
      break label$31;
     }
     $3 = $2 >>> 29 | 0;
     $2 = $2 << 1;
     $5 = (($3 & 4) + $4 | 0) + 16 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if ($3) {
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_4_4($5, 0, $0);
   }
   SAFE_HEAP_STORE_i32_4_4($0 + 24 | 0, 0, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 12, $0);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $0);
   return;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
  SAFE_HEAP_STORE_i32_4_4($4, 8, $0);
  SAFE_HEAP_STORE_i32_4_4($0 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
 }
}

function void_20std____2____sort_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1: while (1) {
  $8 = $1 - 8 | 0;
  label$2: while (1) {
   $3 = $0;
   while (1) {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             $0 = $1 - $3 | 0;
             $4 = $0 >> 3;
             switch ($4 | 0) {
             case 5:
              break label$10;

             case 4:
              break label$11;

             case 2:
              break label$12;

             case 0:
             case 1:
              break label$4;

             case 3:
              break label$8;

             default:
              break label$9;
             }
            }
            $0 = $1 - 8 | 0;
            if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $0, $3)) {
             break label$4;
            }
            std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($3, $0);
            return;
           }
           unsigned_20int_20std____2____sort4_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $3 + 8 | 0, $3 + 16 | 0, $1 - 8 | 0, $2);
           return;
          }
          unsigned_20int_20std____2____sort5_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $3 + 8 | 0, $3 + 16 | 0, $3 + 24 | 0, $1 - 8 | 0, $2);
          return;
         }
         if (($0 | 0) <= 247) {
          void_20std____2____insertion_sort_3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $1, $2);
          return;
         }
         $5 = (($4 | 0) / 2 << 3) + $3 | 0;
         label$14: {
          if (($0 | 0) >= 7993) {
           $0 = ($4 | 0) / 4 << 3;
           $7 = unsigned_20int_20std____2____sort5_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $3 + $0 | 0, $5, $0 + $5 | 0, $8, $2);
           break label$14;
          }
          $7 = unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $5, $8, $2);
         }
         $0 = $8;
         if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $5)) {
          while (1) {
           $0 = $0 - 8 | 0;
           if (($3 | 0) == ($0 | 0)) {
            $4 = $3 + 8 | 0;
            if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $8)) {
             break label$6;
            }
            while (1) {
             if (($4 | 0) == ($8 | 0)) {
              break label$4;
             }
             if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $4)) {
              std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($4, $8);
              $4 = $4 + 8 | 0;
              break label$6;
             } else {
              $4 = $4 + 8 | 0;
              continue;
             }
            }
           }
           if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $0, $5)) {
            continue;
           }
           break;
          }
          std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($3, $0);
          $7 = $7 + 1 | 0;
         }
         $6 = $3 + 8 | 0;
         if ($6 >>> 0 >= $0 >>> 0) {
          break label$7;
         }
         while (1) {
          $4 = $6;
          $6 = $4 + 8 | 0;
          if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $4, $5)) {
           continue;
          }
          while (1) {
           $0 = $0 - 8 | 0;
           if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $0, $5)) {
            continue;
           }
           break;
          }
          if ($0 >>> 0 < $4 >>> 0) {
           $6 = $4;
           break label$7;
          }
          std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($4, $0);
          $5 = ($4 | 0) == ($5 | 0) ? $0 : $5;
          $7 = $7 + 1 | 0;
          continue;
         }
        }
        unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $3 + 8 | 0, $1 - 8 | 0, $2);
        break label$4;
       }
       label$26: {
        if (($5 | 0) == ($6 | 0)) {
         break label$26;
        }
        if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $5, $6)) {
         break label$26;
        }
        std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($6, $5);
        $7 = $7 + 1 | 0;
       }
       if (!$7) {
        $4 = bool_20std____2____insertion_sort_incomplete_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $6, $2);
        $0 = $6 + 8 | 0;
        if (bool_20std____2____insertion_sort_incomplete_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2)) {
         $1 = $6;
         $0 = $3;
         if (!$4) {
          continue label$1;
         }
         break label$4;
        }
        $5 = 2;
        if ($4) {
         break label$5;
        }
       }
       if (($6 - $3 | 0) < ($1 - $6 | 0)) {
        void_20std____2____sort_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($3, $6, $2);
        $0 = $6 + 8 | 0;
        continue label$2;
       }
       void_20std____2____sort_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($6 + 8 | 0, $1, $2);
       $1 = $6;
       $0 = $3;
       continue label$1;
      }
      $5 = $8;
      if (($5 | 0) == ($4 | 0)) {
       break label$4;
      }
      while (1) {
       $0 = $4;
       $4 = $0 + 8 | 0;
       if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $0)) {
        continue;
       }
       while (1) {
        $5 = $5 - 8 | 0;
        if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $5)) {
         continue;
        }
        break;
       }
       if ($0 >>> 0 >= $5 >>> 0) {
        $5 = 4;
        break label$5;
       }
       std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $5);
       continue;
      }
     }
     $3 = $0;
     switch ($5 - 2 | 0) {
     case 0:
      continue label$2;

     case 2:
      continue;

     default:
      break label$4;
     }
    }
    break;
   }
   break;
  }
  break;
 }
}

function WorldNativeIO__GetInformation_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = __stack_pointer - 224 | 0;
 __stack_pointer = $4;
 std____2__to_string_28int_29($4 + 48 | 0, $1);
 $7 = $4 + 72 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__29($4 + 48 | 0, 0, 2941);
 $6 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 64, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
 $7 = $4 + 88 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 - -64 | 0, 2919);
 $6 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 80, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
 std____2__to_string_28int_29($4 + 32 | 0, $2);
 $6 = $4 + 104 | 0;
 $7 = $4 + 80 | 0;
 $8 = SAFE_HEAP_LOAD_i32_4_4($4, 32);
 $9 = $4 + 32 | 0;
 $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 43);
 $2 = $5 << 24 >> 24 < 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($7, $2 ? $8 : $9, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 36), 
 wasm2js_i32$1 = $5, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 96, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $6 = $4 + 120 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 + 96 | 0, 1261);
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 112, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $6 = $4 + 136 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 + 112 | 0, 2929);
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 128, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 std____2__to_string_28int_29($4 + 16 | 0, $3);
 $6 = $4 + 152 | 0;
 $7 = $4 + 128 | 0;
 $8 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
 $9 = $4 + 16 | 0;
 $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 27);
 $2 = $5 << 24 >> 24 < 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($7, $2 ? $8 : $9, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 20), 
 wasm2js_i32$1 = $5, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 144, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $6 = $4 + 168 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 + 144 | 0, 1969);
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 160, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $6 = $4 + 184 | 0;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 + 160 | 0, 2929);
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 176, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 std____2__to_string_28double_29($4, +($3 | 0) / +($1 | 0));
 $2 = $4 + 200 | 0;
 $5 = $4 + 176 | 0;
 $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 11);
 $1 = $3 << 24 >> 24 < 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($5, $1 ? $6 : $4, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 4), 
 wasm2js_i32$1 = $3, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 $1 = $3 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 192, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $2 = $4 + 216 | 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($4 + 192 | 0, 1978);
 $1 = $3 + 8 | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i64_8_8($4, 208, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 203) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 192));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 11) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 0));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 187) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 176));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 171) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 160));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 155) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 144));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 27) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 16));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 139) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 128));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 123) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 112));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 107) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 96));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 43) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 32));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 91) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 80));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 75) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 64));
 }
 if ((SAFE_HEAP_LOAD_i32_1_1($4, 59) | 0) <= -1) {
  operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 48));
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($4, 212);
 $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 219);
 $5 = $3 << 24 >> 24;
 $2 = ($5 | 0) < 0;
 $3 = $2 ? $1 : $3;
 $1 = dlmalloc($3 + 4 | 0);
 SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
 $7 = $1 + 4 | 0;
 $6 = SAFE_HEAP_LOAD_i32_4_4($4, 208);
 memcpy($7, $2 ? $6 : $4 + 208 | 0, $3);
 SAFE_HEAP_STORE_i32_4_4($4, 192, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(3244, $4 + 192 | 0) | 0);
 if (($5 | 0) <= -1) {
  operator_20delete_28void__29($6);
 }
 __stack_pointer = $4 + 224 | 0;
}

function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $14 = __stack_pointer - 128 | 0;
 __stack_pointer = $14;
 label$1: {
  label$2: {
   $11 = $6;
   $12 = $8;
   label$3: {
    if (!__letf2($5, $11, $7, $12, 0, 0, 0, 0)) {
     break label$3;
    }
    $10 = $6;
    $9 = $8;
    if (!__fpclassifyl($5, $10, $7, $9)) {
     break label$3;
    }
    $9 = $4;
    $21 = $9 >>> 16 | 0;
    $16 = $21 & 32767;
    if (($16 | 0) != 32767) {
     break label$2;
    }
   }
   $10 = $2;
   $12 = $4;
   $9 = $6;
   $11 = $8;
   __multf3($14 + 16 | 0, $1, $10, $3, $12, $5, $9, $7, $11);
   $11 = SAFE_HEAP_LOAD_i64_8_8($14, 16);
   $7 = $11;
   $9 = i64toi32_i32$HIGH_BITS;
   $8 = $9;
   $9 = SAFE_HEAP_LOAD_i64_8_8($14 + 24 | 0, 0);
   $5 = $9;
   $11 = i64toi32_i32$HIGH_BITS;
   $6 = $11;
   $11 = $8;
   $9 = $6;
   $10 = $9;
   __divtf3($14, $7, $11, $5, $10, $7, $11, $5, $10);
   $10 = SAFE_HEAP_LOAD_i64_8_8($14 + 8 | 0, 0);
   $3 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $4 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($14, 0);
   $7 = $12;
   $10 = i64toi32_i32$HIGH_BITS;
   $8 = $10;
   break label$1;
  }
  $10 = $4;
  $12 = $10 & 65535;
  $10 = $16;
  $9 = $10 << 16;
  $10 = $9;
  $9 = $12;
  $10 = $9 | $10;
  $18 = $10;
  $11 = 0;
  $12 = $3;
  $17 = $11 | $12;
  $10 = $8;
  $12 = $10 & 65535;
  $8 = $12;
  $9 = $7;
  $15 = 0 | $9;
  $19 = $10 >>> 16 & 32767;
  $12 = $19;
  $10 = $12 << 16;
  $12 = $10;
  $10 = $8;
  $12 = $12 | $10;
  $13 = $12;
  $12 = $2;
  $9 = $18;
  $10 = $6;
  $11 = $13;
  if ((__letf2($1, $12, $17, $9, $5, $10, $15, $11) | 0) <= 0) {
   $11 = $2;
   $10 = $18;
   $9 = $6;
   $12 = $13;
   if (__letf2($1, $11, $17, $10, $5, $9, $15, $12)) {
    $7 = $1;
    $12 = $2;
    $8 = $12;
    break label$1;
   }
   $12 = $2;
   $9 = $4;
   __multf3($14 + 112 | 0, $1, $12, $3, $9, 0, 0, 0, 0);
   $11 = SAFE_HEAP_LOAD_i64_8_8($14 + 120 | 0, 0);
   $3 = $11;
   $10 = i64toi32_i32$HIGH_BITS;
   $4 = $10;
   $10 = SAFE_HEAP_LOAD_i64_8_8($14, 112);
   $7 = $10;
   $11 = i64toi32_i32$HIGH_BITS;
   $8 = $11;
   break label$1;
  }
  if ($16) {
   $7 = $1;
   $11 = $2;
   $10 = $11;
  } else {
   $11 = $2;
   $10 = $18;
   __multf3($14 + 96 | 0, $1, $11, $17, $10, 0, 0, 0, 1081540608);
   $12 = SAFE_HEAP_LOAD_i64_8_8($14 + 104 | 0, 0);
   $17 = $12;
   $9 = i64toi32_i32$HIGH_BITS;
   $18 = $9;
   $16 = ($9 >>> 16 | 0) - 120 | 0;
   $12 = SAFE_HEAP_LOAD_i64_8_8($14, 96);
   $7 = $12;
   $10 = i64toi32_i32$HIGH_BITS;
  }
  $8 = $10;
  if (!$19) {
   $10 = $6;
   $12 = $13;
   __multf3($14 + 80 | 0, $5, $10, $15, $12, 0, 0, 0, 1081540608);
   $11 = SAFE_HEAP_LOAD_i64_8_8($14 + 88 | 0, 0);
   $15 = $11;
   $9 = i64toi32_i32$HIGH_BITS;
   $13 = $9;
   $19 = ($9 >>> 16 | 0) - 120 | 0;
   $11 = SAFE_HEAP_LOAD_i64_8_8($14, 80);
   $5 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $6 = $12;
  }
  $12 = $13;
  $11 = $12 & 65535;
  $9 = $15;
  $22 = $9;
  $9 = $11 | 65536;
  $20 = $9;
  $9 = $18;
  $12 = $9 & 65535;
  $11 = $17;
  $9 = $11;
  $17 = $9;
  $11 = $12 | 65536;
  $18 = $11;
  if (($16 | 0) > ($19 | 0)) {
   while (1) {
    $12 = $17;
    $10 = $22;
    $13 = $12 - $10 | 0;
    $11 = $18;
    $9 = $20;
    $23 = $11 - ($9 + ($10 >>> 0 > $12 >>> 0) | 0) | 0;
    $12 = $8;
    $11 = $5;
    $10 = $7;
    $12 = ($12 | 0) == ($6 | 0) & $11 >>> 0 > $10 >>> 0 | $6 >>> 0 > $12 >>> 0;
    $10 = $13;
    $9 = $10 - $12 | 0;
    $15 = $9;
    $11 = $23;
    $13 = $10 >>> 0 < $12 >>> 0;
    $13 = $11 - $13 | 0;
    label$11: {
     if (($13 | 0) > 0 ? 1 : ($13 | 0) >= 0) {
      $12 = $7;
      $10 = $5;
      $7 = $12 - $10 | 0;
      $11 = $8;
      $9 = $6 + ($10 >>> 0 > $12 >>> 0) | 0;
      $9 = $11 - $9 | 0;
      $8 = $9;
      $12 = $9;
      $9 = $13;
      $12 = $12 | $9;
      $11 = $15;
      $10 = $7;
      if (!($12 | ($11 | $10))) {
       $12 = $2;
       $11 = $4;
       __multf3($14 + 32 | 0, $1, $12, $3, $11, 0, 0, 0, 0);
       $10 = SAFE_HEAP_LOAD_i64_8_8($14 + 40 | 0, 0);
       $3 = $10;
       $9 = i64toi32_i32$HIGH_BITS;
       $4 = $9;
       $9 = SAFE_HEAP_LOAD_i64_8_8($14, 32);
       $7 = $9;
       $10 = i64toi32_i32$HIGH_BITS;
       $8 = $10;
       break label$1;
      }
      $10 = $13;
      $9 = $10 << 1 | $11 >>> 31;
      $13 = $9;
      $11 = 0;
      $10 = $11;
      $9 = $8;
      $12 = $9 >>> 31 | 0;
      $9 = $15 << 1;
      $17 = $12 | $9;
      $11 = $13;
      $10 = $11 | $10;
      $13 = 31;
      break label$11;
     }
     $11 = $17;
     $15 = $11 << 1;
     $10 = $18;
     $9 = $10 << 1 | $11 >>> 31;
     $13 = $9;
     $11 = 0;
     $10 = $11;
     $9 = $8;
     $12 = $9 >>> 31 | 0;
     $9 = $15;
     $17 = $12 | $9;
     $11 = $13;
     $10 = $11 | $10;
     $13 = 31;
    }
    $18 = $10;
    $11 = $7;
    $7 = $11 << 1;
    $10 = $8;
    $9 = $10 << 1 | $11 >>> 31;
    $8 = $9;
    $16 = $16 - 1 | 0;
    if (($19 | 0) < ($16 | 0)) {
     continue;
    }
    break;
   }
   $16 = $19;
  }
  $10 = $17;
  $12 = $22;
  $13 = $10 - $12 | 0;
  $9 = $18;
  $11 = $20;
  $20 = $9 - ($11 + ($12 >>> 0 > $10 >>> 0) | 0) | 0;
  $10 = $8;
  $12 = $7;
  $9 = $5;
  $10 = ($10 | 0) == ($6 | 0) & $12 >>> 0 < $9 >>> 0 | $6 >>> 0 > $10 >>> 0;
  $12 = $13;
  $11 = $12 - $10 | 0;
  $15 = $11;
  $9 = $20;
  $13 = $10 >>> 0 > $12 >>> 0;
  $13 = $9 - $13 | 0;
  label$14: {
   if (($13 | 0) < 0) {
    $15 = $17;
    $9 = $18;
    $13 = $9;
    break label$14;
   }
   $10 = $7;
   $12 = $5;
   $7 = $10 - $12 | 0;
   $9 = $8;
   $11 = $6 + ($12 >>> 0 > $10 >>> 0) | 0;
   $11 = $9 - $11 | 0;
   $8 = $11;
   $11 = $13;
   $10 = $8;
   $10 = $11 | $10;
   $12 = $7;
   $9 = $15;
   $11 = $12 | $9;
   if ($11 | $10) {
    break label$14;
   }
   $11 = $2;
   $10 = $4;
   __multf3($14 + 48 | 0, $1, $11, $3, $10, 0, 0, 0, 0);
   $9 = SAFE_HEAP_LOAD_i64_8_8($14 + 56 | 0, 0);
   $3 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $4 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($14, 48);
   $7 = $12;
   $9 = i64toi32_i32$HIGH_BITS;
   $8 = $9;
   break label$1;
  }
  $9 = $13;
  if (($9 | 0) == 65535 | $9 >>> 0 < 65535) {
   while (1) {
    $11 = $7;
    $10 = $8;
    $5 = $10 >>> 31 | 0;
    $9 = 0;
    $6 = $9;
    $16 = $16 - 1 | 0;
    $10 = $11;
    $7 = $10 << 1;
    $9 = $8;
    $11 = $9 << 1 | $10 >>> 31;
    $8 = $11;
    $9 = $15;
    $12 = $9 << 1;
    $11 = $13;
    $10 = $11 << 1 | $9 >>> 31;
    $9 = $10;
    $10 = $6;
    $9 = $9 | $10;
    $13 = $9;
    $11 = $5;
    $15 = $11 | $12;
    if ($9 >>> 0 < 65536) {
     continue;
    }
    break;
   }
  }
  $19 = $21 & 32768;
  if (($16 | 0) <= 0) {
   $10 = $13;
   $9 = $10 & 65535;
   $10 = $16 + 120 | $19;
   $12 = $10 << 16;
   $10 = $12;
   $10 = $9 | $10;
   $1 = $10;
   $10 = $8;
   $11 = 0;
   $9 = $15;
   $2 = $11 | $9;
   $9 = $1;
   __multf3($14 - -64 | 0, $7, $10, $2, $9, 0, 0, 0, 1065811968);
   $11 = SAFE_HEAP_LOAD_i64_8_8($14 + 72 | 0, 0);
   $3 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $4 = $12;
   $12 = SAFE_HEAP_LOAD_i64_8_8($14, 64);
   $7 = $12;
   $11 = i64toi32_i32$HIGH_BITS;
   $8 = $11;
   break label$1;
  }
  $11 = $13;
  $12 = $11 & 65535;
  $9 = $15;
  $10 = 0;
  $3 = $9 | $10;
  $11 = $16 | $19;
  $9 = $11 << 16;
  $11 = $9;
  $9 = $12;
  $11 = $11 | $9;
  $4 = $11;
 }
 $11 = $8;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $7, $11);
 $11 = $4;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $11);
 __stack_pointer = $14 + 128 | 0;
}

function mbsrtowcs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             if (!$3) {
              break label$12;
             }
             $6 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
             if (!$6) {
              break label$12;
             }
             if (!$0) {
              $3 = $2;
              break label$10;
             }
             SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
             $3 = $2;
             break label$11;
            }
            label$14: {
             if (!SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(__pthread_self(), 172), 0)) {
              if (!$0) {
               break label$14;
              }
              if (!$2) {
               break label$1;
              }
              $6 = $2;
              while (1) {
               $3 = SAFE_HEAP_LOAD_i32_1_1($4, 0);
               if ($3) {
                SAFE_HEAP_STORE_i32_4_4($0, 0, $3 & 57343);
                $0 = $0 + 4 | 0;
                $4 = $4 + 1 | 0;
                $6 = $6 - 1 | 0;
                if ($6) {
                 continue;
                }
                break label$1;
               }
               break;
              }
              SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
              SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
              return $2 - $6 | 0;
             }
             $3 = $2;
             if (!$0) {
              break label$9;
             }
             break label$7;
            }
            return strlen($4);
           }
           $5 = 1;
           break label$7;
          }
          $5 = 0;
          break label$8;
         }
         $5 = 1;
        }
        while (1) {
         if (!$5) {
          $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0) >>> 3 | 0;
          if (($5 - 16 | ($6 >> 26) + $5) >>> 0 > 7) {
           break label$6;
          }
          $5 = $4 + 1 | 0;
          $7 = $5;
          label$20: {
           if (!($6 & 33554432)) {
            break label$20;
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 192) != 128) {
            $4 = $4 - 1 | 0;
            break label$4;
           }
           $5 = $4 + 2 | 0;
           $7 = $5;
           if (!($6 & 524288)) {
            break label$20;
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 192) != 128) {
            $4 = $4 - 1 | 0;
            break label$4;
           }
           $7 = $4 + 3 | 0;
          }
          $4 = $7;
          $3 = $3 - 1 | 0;
          $5 = 1;
          continue;
         }
         while (1) {
          $5 = $4 & 3;
          $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
          label$24: {
           if ($5 | $6 - 1 >>> 0 > 126) {
            break label$24;
           }
           $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
           if (($6 | $6 - 16843009) & -2139062144) {
            break label$24;
           }
           while (1) {
            $3 = $3 - 4 | 0;
            $6 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
            $5 = $4 + 4 | 0;
            $4 = $5;
            if (!(($6 - 16843009 | $6) & -2139062144)) {
             continue;
            }
            break;
           }
           $4 = $5;
          }
          $5 = $6 & 255;
          if ($5 - 1 >>> 0 <= 126) {
           $3 = $3 - 1 | 0;
           $4 = $4 + 1 | 0;
           continue;
          }
          break;
         }
         $5 = $5 - 194 | 0;
         if ($5 >>> 0 > 50) {
          break label$5;
         }
         $4 = $4 + 1 | 0;
         $6 = SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + 8688 | 0, 0);
         $5 = 0;
         continue;
        }
       }
       while (1) {
        if (!$5) {
         if (!$3) {
          break label$1;
         }
         while (1) {
          label$30: {
           $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
           $7 = $5 - 1 | 0;
           label$31: {
            label$32: {
             if ($7 >>> 0 > 126) {
              $6 = $5;
              break label$32;
             }
             if ($4 & 3 | $3 >>> 0 < 5) {
              break label$31;
             }
             label$34: {
              while (1) {
               $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
               if (($6 | $6 - 16843009) & -2139062144) {
                break label$34;
               }
               SAFE_HEAP_STORE_i32_4_4($0, 0, $6 & 255);
               SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_1_U_1($4, 1));
               SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_1_U_1($4, 2));
               SAFE_HEAP_STORE_i32_4_4($0, 12, SAFE_HEAP_LOAD_i32_1_U_1($4, 3));
               $0 = $0 + 16 | 0;
               $4 = $4 + 4 | 0;
               $3 = $3 - 4 | 0;
               if ($3 >>> 0 > 4) {
                continue;
               }
               break;
              }
              $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
             }
             $5 = $6 & 255;
             $7 = $5 - 1 | 0;
            }
            if ($7 >>> 0 > 126) {
             break label$30;
            }
           }
           SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
           $0 = $0 + 4 | 0;
           $4 = $4 + 1 | 0;
           $3 = $3 - 1 | 0;
           if ($3) {
            continue;
           }
           break label$1;
          }
          break;
         }
         $5 = $5 - 194 | 0;
         if ($5 >>> 0 > 50) {
          break label$5;
         }
         $4 = $4 + 1 | 0;
         $6 = SAFE_HEAP_LOAD_i32_4_4(($5 << 2) + 8688 | 0, 0);
         $5 = 1;
         continue;
        }
        $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
        $5 = $7 >>> 3 | 0;
        if (($5 - 16 | ($6 >> 26) + $5) >>> 0 > 7) {
         break label$6;
        }
        label$36: {
         label$37: {
          $8 = $4 + 1 | 0;
          $5 = $7 - 128 | $6 << 6;
          $7 = $8;
          label$38: {
           if (($5 | 0) > -1) {
            break label$38;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0) - 128 | 0;
           if ($7 >>> 0 > 63) {
            break label$37;
           }
           $8 = $4 + 2 | 0;
           $5 = $5 << 6 | $7;
           $7 = $8;
           if (($5 | 0) > -1) {
            break label$38;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0) - 128 | 0;
           if ($7 >>> 0 > 63) {
            break label$37;
           }
           $5 = $5 << 6 | $7;
           $7 = $4 + 3 | 0;
          }
          $4 = $7;
          SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
          $3 = $3 - 1 | 0;
          $0 = $0 + 4 | 0;
          break label$36;
         }
         SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 25);
         $4 = $4 - 1 | 0;
         break label$3;
        }
        $5 = 0;
        continue;
       }
      }
      $4 = $4 - 1 | 0;
      if ($6) {
       break label$4;
      }
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
     }
     if ($6 & 255) {
      break label$4;
     }
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
     }
     return $2 - $3 | 0;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 25);
    if (!$0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
  }
  return -1;
 }
 SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
 return $2;
}

function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $21 = __stack_pointer - 16 | 0;
 __stack_pointer = $21;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 $23 = $3 & 512;
 while (1) {
  if (($22 | 0) == 4) {
   if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1) {
    SAFE_HEAP_STORE_i32_4_4($21, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($13));
    SAFE_HEAP_STORE_i32_4_4($2, 0, wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2____wrap_iter_wchar_t_20const____operator__28long_29_20const($21 + 8 | 0, 1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($13), SAFE_HEAP_LOAD_i32_4_4($2, 0)));
   }
   $15 = $3 & 176;
   if (($15 | 0) != 16) {
    if (($15 | 0) == 32) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
   }
   __stack_pointer = $21 + 16 | 0;
   return;
  }
  label$7: {
   label$8: {
    switch (SAFE_HEAP_LOAD_i32_1_1($8 + $22 | 0, 0) | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
     break label$7;

    case 1:
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
     $15 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 32);
     $16 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $16 + 4 | 0);
     SAFE_HEAP_STORE_i32_4_4($16, 0, $15);
     break label$7;

    case 3:
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($13)) {
      break label$7;
     }
     $15 = SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0), 0);
     $16 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $16 + 4 | 0);
     SAFE_HEAP_STORE_i32_4_4($16, 0, $15);
     break label$7;

    case 2:
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($12) | !$23) {
      break label$7;
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($12), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($12), SAFE_HEAP_LOAD_i32_4_4($2, 0)));
     break label$7;

    case 4:
     break label$8;

    default:
     break label$7;
    }
   }
   $24 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   $4 = $7 ? $4 + 4 | 0 : $4;
   $15 = $4;
   while (1) {
    label$14: {
     if ($5 >>> 0 <= $15 >>> 0) {
      break label$14;
     }
     if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($6, 2048, SAFE_HEAP_LOAD_i32_4_4($15, 0))) {
      break label$14;
     }
     $15 = $15 + 4 | 0;
     continue;
    }
    break;
   }
   $16 = $14;
   if (($16 | 0) >= 1) {
    while (1) {
     if (!(($16 | 0) < 1 | $4 >>> 0 >= $15 >>> 0)) {
      $15 = $15 - 4 | 0;
      $17 = SAFE_HEAP_LOAD_i32_4_4($15, 0);
      $18 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, $18 + 4 | 0);
      SAFE_HEAP_STORE_i32_4_4($18, 0, $17);
      $16 = $16 - 1 | 0;
      continue;
     }
     break;
    }
    if (($16 | 0) < 1) {
     $19 = 0;
    } else {
     $19 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48);
    }
    $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    while (1) {
     label$21: {
      $18 = $17 + 4 | 0;
      if (($16 | 0) < 1) {
       break label$21;
      }
      SAFE_HEAP_STORE_i32_4_4($17, 0, $19);
      $16 = $16 - 1 | 0;
      $17 = $18;
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, $18);
    SAFE_HEAP_STORE_i32_4_4($17, 0, $9);
   }
   label$22: {
    if (($4 | 0) == ($15 | 0)) {
     $16 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48);
     $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     $15 = $17 + 4 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, $15);
     SAFE_HEAP_STORE_i32_4_4($17, 0, $16);
     break label$22;
    }
    label$24: {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11)) {
      $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
      break label$24;
     }
     $19 = SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0), 0);
    }
    $16 = 0;
    $20 = 0;
    while (1) {
     if (($4 | 0) != ($15 | 0)) {
      label$28: {
       if (($16 | 0) != ($19 | 0)) {
        $18 = $16;
        break label$28;
       }
       $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       SAFE_HEAP_STORE_i32_4_4($2, 0, $17 + 4 | 0);
       SAFE_HEAP_STORE_i32_4_4($17, 0, $10);
       $18 = 0;
       $20 = $20 + 1 | 0;
       if ($20 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
        $19 = $16;
        break label$28;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $20), 0) | 0) == (std____2__numeric_limits_char___max_28_29() & 255)) {
        $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
        break label$28;
       }
       $19 = SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $20), 0);
      }
      $15 = $15 - 4 | 0;
      $16 = SAFE_HEAP_LOAD_i32_4_4($15, 0);
      $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, $17 + 4 | 0);
      SAFE_HEAP_STORE_i32_4_4($17, 0, $16);
      $16 = $18 + 1 | 0;
      continue;
     }
     break;
    }
    $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   }
   void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($24, $15);
  }
  $22 = $22 + 1 | 0;
  continue;
 }
}

function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = __stack_pointer - 1072 | 0;
 __stack_pointer = $9;
 SAFE_HEAP_STORE_i64_8_8($9, 16, $5, $6);
 SAFE_HEAP_STORE_i64_8_8($9, 24, $7, $8);
 SAFE_HEAP_STORE_i32_4_4($9, 956, $9 + 960 | 0);
 $10 = snprintf($9 + 960 | 0, 100, 1745, $9 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 544, 41);
 $13 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 536 | 0, 0, $9 + 544 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 544, 41);
 $11 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 528 | 0, 0, $9 + 544 | 0);
 $12 = $9 + 544 | 0;
 label$1: {
  if ($10 >>> 0 >= 100) {
   $10 = std____2____cloc_28_29();
   SAFE_HEAP_STORE_i64_8_8($9, 0, $5, $6);
   SAFE_HEAP_STORE_i64_8_8($9, 8, $7, $8);
   $10 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9 + 956 | 0, $10, 1745, $9);
   if (($10 | 0) == -1) {
    break label$1;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($13, SAFE_HEAP_LOAD_i32_4_4($9, 956));
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($11, dlmalloc($10 << 2));
   if (bool_20std____2__operator___wchar_t_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($11, 0)) {
    break label$1;
   }
   $12 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($11);
  }
  std____2__ios_base__getloc_28_29_20const($9 + 520 | 0, $3);
  $14 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($9 + 520 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($9, 956);
  std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($14, $5, $10 + $5 | 0, $12);
  if (($10 | 0) >= 1) {
   $15 = (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($9, 956), 0) | 0) == 45;
  }
  $0 = $9 + 520 | 0;
  $8 = $9 + 512 | 0;
  $16 = $9 + 508 | 0;
  $17 = $9 + 504 | 0;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($9 + 488 | 0);
  $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($9 + 472 | 0);
  $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($9 + 456 | 0);
  std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $15, $0, $8, $16, $17, $7, $5, $6, $9 + 452 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 48, 41);
  $8 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 40 | 0, 0, $9 + 48 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($9, 452);
  label$5: {
   if (($10 | 0) > ($2 | 0)) {
    $0 = ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) + ($10 - $2 << 1 | 1) | 0) + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) | 0) + SAFE_HEAP_LOAD_i32_4_4($9, 452) | 0;
    break label$5;
   }
   $0 = ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) | 0) + SAFE_HEAP_LOAD_i32_4_4($9, 452) | 0) + 2 | 0;
  }
  $2 = $9 + 48 | 0;
  if ($0 >>> 0 >= 101) {
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($8, dlmalloc($0 << 2));
   $2 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($8);
   if (!$2) {
    break label$1;
   }
  }
  std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($2, $9 + 36 | 0, $9 + 32 | 0, std____2__ios_base__flags_28_29_20const($3), $12, ($10 << 2) + $12 | 0, $14, $15, $9 + 512 | 0, SAFE_HEAP_LOAD_i32_4_4($9, 508), SAFE_HEAP_LOAD_i32_4_4($9, 504), $7, $5, $6, SAFE_HEAP_LOAD_i32_4_4($9, 452));
  $10 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, SAFE_HEAP_LOAD_i32_4_4($9, 36), SAFE_HEAP_LOAD_i32_4_4($9, 32), $3, $4);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($6);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($5);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
  std____2__locale___locale_28_29($9 + 520 | 0);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
  __stack_pointer = $9 + 1072 | 0;
  return $10 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $21 = __stack_pointer - 16 | 0;
 __stack_pointer = $21;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 $23 = $3 & 512;
 while (1) {
  if (($22 | 0) == 4) {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1) {
    SAFE_HEAP_STORE_i32_4_4($21, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($13));
    SAFE_HEAP_STORE_i32_4_4($2, 0, char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2____wrap_iter_char_20const____operator__28long_29_20const($21 + 8 | 0, 1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($13), SAFE_HEAP_LOAD_i32_4_4($2, 0)));
   }
   $16 = $3 & 176;
   if (($16 | 0) != 16) {
    if (($16 | 0) == 32) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
   }
   __stack_pointer = $21 + 16 | 0;
   return;
  }
  label$7: {
   label$8: {
    switch (SAFE_HEAP_LOAD_i32_1_1($8 + $22 | 0, 0) | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
     break label$7;

    case 1:
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
     $16 = std____2__ctype_char___widen_28char_29_20const($6, 32);
     $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $15 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($15, 0, $16);
     break label$7;

    case 3:
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($13)) {
      break label$7;
     }
     $16 = SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0), 0);
     $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $15 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($15, 0, $16);
     break label$7;

    case 2:
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($12) | !$23) {
      break label$7;
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($12), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($12), SAFE_HEAP_LOAD_i32_4_4($2, 0)));
     break label$7;

    case 4:
     break label$8;

    default:
     break label$7;
    }
   }
   $24 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   $4 = $7 ? $4 + 1 | 0 : $4;
   $16 = $4;
   while (1) {
    label$14: {
     if ($5 >>> 0 <= $16 >>> 0) {
      break label$14;
     }
     if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($6, 2048, SAFE_HEAP_LOAD_i32_1_1($16, 0))) {
      break label$14;
     }
     $16 = $16 + 1 | 0;
     continue;
    }
    break;
   }
   $15 = $14;
   if (($15 | 0) >= 1) {
    while (1) {
     if (!(($15 | 0) < 1 | $4 >>> 0 >= $16 >>> 0)) {
      $16 = $16 - 1 | 0;
      $17 = SAFE_HEAP_LOAD_i32_1_U_1($16, 0);
      $18 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, $18 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($18, 0, $17);
      $15 = $15 - 1 | 0;
      continue;
     }
     break;
    }
    if (($15 | 0) < 1) {
     $18 = 0;
    } else {
     $18 = std____2__ctype_char___widen_28char_29_20const($6, 48);
    }
    while (1) {
     label$21: {
      $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, $17 + 1 | 0);
      if (($15 | 0) < 1) {
       break label$21;
      }
      SAFE_HEAP_STORE_i32_1_1($17, 0, $18);
      $15 = $15 - 1 | 0;
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_1_1($17, 0, $9);
   }
   label$22: {
    if (($4 | 0) == ($16 | 0)) {
     $16 = std____2__ctype_char___widen_28char_29_20const($6, 48);
     $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $15 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($15, 0, $16);
     break label$22;
    }
    label$24: {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11)) {
      $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
      break label$24;
     }
     $19 = SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0), 0);
    }
    $15 = 0;
    $20 = 0;
    while (1) {
     if (($4 | 0) == ($16 | 0)) {
      break label$22;
     }
     label$27: {
      if (($15 | 0) != ($19 | 0)) {
       $18 = $15;
       break label$27;
      }
      $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, $17 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($17, 0, $10);
      $18 = 0;
      $20 = $20 + 1 | 0;
      if ($20 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
       $19 = $15;
       break label$27;
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $20), 0) | 0) == (std____2__numeric_limits_char___max_28_29() & 255)) {
       $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
       break label$27;
      }
      $19 = SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $20), 0);
     }
     $16 = $16 - 1 | 0;
     $15 = SAFE_HEAP_LOAD_i32_1_U_1($16, 0);
     $17 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $17 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($17, 0, $15);
     $15 = $18 + 1 | 0;
     continue;
    }
   }
   void_20std____2__reverse_char___28char__2c_20char__29($24, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  }
  $22 = $22 + 1 | 0;
  continue;
 }
}

function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = __stack_pointer - 464 | 0;
 __stack_pointer = $9;
 SAFE_HEAP_STORE_i64_8_8($9, 16, $5, $6);
 SAFE_HEAP_STORE_i64_8_8($9, 24, $7, $8);
 SAFE_HEAP_STORE_i32_4_4($9, 348, $9 + 352 | 0);
 $10 = snprintf($9 + 352 | 0, 100, 1745, $9 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 240, 41);
 $13 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 232 | 0, 0, $9 + 240 | 0);
 SAFE_HEAP_STORE_i32_4_4($9, 240, 41);
 $11 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 224 | 0, 0, $9 + 240 | 0);
 $12 = $9 + 240 | 0;
 label$1: {
  if ($10 >>> 0 >= 100) {
   $10 = std____2____cloc_28_29();
   SAFE_HEAP_STORE_i64_8_8($9, 0, $5, $6);
   SAFE_HEAP_STORE_i64_8_8($9, 8, $7, $8);
   $10 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($9 + 348 | 0, $10, 1745, $9);
   if (($10 | 0) == -1) {
    break label$1;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($13, SAFE_HEAP_LOAD_i32_4_4($9, 348));
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($11, dlmalloc($10));
   if (bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($11, 0)) {
    break label$1;
   }
   $12 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($11);
  }
  std____2__ios_base__getloc_28_29_20const($9 + 216 | 0, $3);
  $14 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($9 + 216 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($9, 348);
  std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($14, $5, $10 + $5 | 0, $12);
  if (($10 | 0) >= 1) {
   $15 = (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($9, 348), 0) | 0) == 45;
  }
  $0 = $9 + 216 | 0;
  $8 = $9 + 208 | 0;
  $16 = $9 + 207 | 0;
  $17 = $9 + 206 | 0;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($9 + 192 | 0);
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($9 + 176 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($9 + 160 | 0);
  std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $15, $0, $8, $16, $17, $7, $5, $6, $9 + 156 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 48, 41);
  $8 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 40 | 0, 0, $9 + 48 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($9, 156);
  label$5: {
   if (($10 | 0) > ($2 | 0)) {
    $0 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + ($10 - $2 << 1 | 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) + SAFE_HEAP_LOAD_i32_4_4($9, 156) | 0;
    break label$5;
   }
   $0 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) + SAFE_HEAP_LOAD_i32_4_4($9, 156) | 0) + 2 | 0;
  }
  $2 = $9 + 48 | 0;
  if ($0 >>> 0 >= 101) {
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($8, dlmalloc($0));
   $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8);
   if (!$2) {
    break label$1;
   }
  }
  std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($2, $9 + 36 | 0, $9 + 32 | 0, std____2__ios_base__flags_28_29_20const($3), $12, $10 + $12 | 0, $14, $15, $9 + 208 | 0, SAFE_HEAP_LOAD_i32_1_1($9, 207), SAFE_HEAP_LOAD_i32_1_1($9, 206), $7, $5, $6, SAFE_HEAP_LOAD_i32_4_4($9, 156));
  $10 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, SAFE_HEAP_LOAD_i32_4_4($9, 36), SAFE_HEAP_LOAD_i32_4_4($9, 32), $3, $4);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
  std____2__locale___locale_28_29($9 + 216 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
  __stack_pointer = $9 + 464 | 0;
  return $10 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function WorldJSWrapper__DisplayInformationVal_28emscripten__val_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $1 = $3 + 8 | 0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 1479, 16);
 std____2__ios_base__getloc_28_29_20const($1, $2 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0) - 12 | 0, 0) | 0);
 $5 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 26316);
 $5 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 0), 28) | 0]($5, 10) | 0;
 std____2__locale___locale_28_29($3 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $5);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2961, 11);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $1 = _emval_new_cstring(1313) | 0;
 $5 = _emval_get_property($4 | 0, $1 | 0) | 0;
 _emval_decref($1 | 0);
 $6 = +_emval_as($5 | 0, 20676, $3 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
 if (Math_abs($6) < 2147483648) {
  $1 = ~~$6;
 } else {
  $1 = -2147483648;
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($2, $1), 2919, 4);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $4 = _emval_new_cstring(1256) | 0;
 $1 = _emval_get_property($1 | 0, $4 | 0) | 0;
 _emval_decref($4 | 0);
 $6 = +_emval_as($1 | 0, 20676, $3 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
 $8 = $3 + 8 | 0;
 if (Math_abs($6) < 2147483648) {
  $4 = ~~$6;
 } else {
  $4 = -2147483648;
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($2, $4), 1261, 4);
 std____2__ios_base__getloc_28_29_20const($8, $2 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0) - 12 | 0, 0) | 0);
 $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 26316);
 $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 0), 28) | 0]($4, 10) | 0;
 std____2__locale___locale_28_29($3 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 _emval_decref($1 | 0);
 _emval_decref($5 | 0);
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2933, 7);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $1 = _emval_new_cstring(1640) | 0;
 $5 = _emval_get_property($4 | 0, $1 | 0) | 0;
 _emval_decref($1 | 0);
 $6 = +_emval_as($5 | 0, 20676, $3 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
 $4 = $3 + 8 | 0;
 if (Math_abs($6) < 2147483648) {
  $1 = ~~$6;
 } else {
  $1 = -2147483648;
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($2, $1), 1969, 8);
 std____2__ios_base__getloc_28_29_20const($4, $2 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0) - 12 | 0, 0) | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 26316);
 $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($1, 10) | 0;
 std____2__locale___locale_28_29($3 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 _emval_decref($5 | 0);
 $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2933, 7);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $5 = _emval_new_cstring(1640) | 0;
 $2 = _emval_get_property($2 | 0, $5 | 0) | 0;
 _emval_decref($5 | 0);
 $6 = +_emval_as($2 | 0, 20676, $3 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $0 = _emval_new_cstring(1313) | 0;
 $5 = _emval_get_property($4 | 0, $0 | 0) | 0;
 _emval_decref($0 | 0);
 $7 = +_emval_as($5 | 0, 20676, $3 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
 $4 = $3 + 8 | 0;
 if (Math_abs($6) < 2147483648) {
  $0 = ~~$6;
 } else {
  $0 = -2147483648;
 }
 $6 = +($0 | 0);
 if (Math_abs($7) < 2147483648) {
  $0 = ~~$7;
 } else {
  $0 = -2147483648;
 }
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28double_29($1, $6 / +($0 | 0)), 1978, 6);
 std____2__ios_base__getloc_28_29_20const($4, $0 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 26316);
 $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($1, 10) | 0;
 std____2__locale___locale_28_29($3 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 _emval_decref($5 | 0);
 _emval_decref($2 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function __floatscan($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 label$1: {
  if ($2 >>> 0 <= 2) {
   $5 = $1 + 4 | 0;
   $2 = $2 << 2;
   $12 = SAFE_HEAP_LOAD_i32_4_4($2 + 8396 | 0, 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($2 + 8384 | 0, 0);
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    label$4: {
     if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      break label$4;
     }
     $2 = __shgetc($1);
    }
    if (isspace($2)) {
     continue;
    }
    break;
   }
   $8 = 1;
   label$6: {
    label$7: {
     switch ($2 - 43 | 0) {
     case 0:
     case 2:
      break label$7;

     default:
      break label$6;
     }
    }
    $8 = ($2 | 0) == 45 ? -1 : 1;
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
     break label$6;
    }
    $2 = __shgetc($1);
   }
   label$9: {
    label$10: {
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_1_1($4 + 1024 | 0, 0) | 0) == ($2 | 32)) {
       label$13: {
        if ($4 >>> 0 > 6) {
         break label$13;
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
        if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
         $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
         break label$13;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 8) {
        continue;
       }
       break label$10;
      }
      break;
     }
     if (($4 | 0) != 3) {
      if (($4 | 0) == 8) {
       break label$10;
      }
      if (!$3 | $4 >>> 0 < 4) {
       break label$9;
      }
      if (($4 | 0) == 8) {
       break label$10;
      }
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($1, 104);
     if ($1) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
     }
     if (!$3 | $4 >>> 0 < 4) {
      break label$10;
     }
     while (1) {
      if ($1) {
       SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
      }
      $4 = $4 - 1 | 0;
      if ($4 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    __extendsftf2($6, Math_fround(Math_fround($8 | 0) * Math_fround(infinity)));
    $9 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0);
    $7 = i64toi32_i32$HIGH_BITS;
    $10 = SAFE_HEAP_LOAD_i64_8_8($6, 0);
    $11 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   label$19: {
    label$20: {
     label$21: {
      if ($4) {
       break label$21;
      }
      $4 = 0;
      while (1) {
       if ((SAFE_HEAP_LOAD_i32_1_1($4 + 1534 | 0, 0) | 0) != ($2 | 32)) {
        break label$21;
       }
       label$23: {
        if ($4 >>> 0 > 1) {
         break label$23;
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
        if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
         SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
         $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
         break label$23;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$20;
     }
     label$25: {
      switch ($4 | 0) {
      case 0:
       label$27: {
        if (($2 | 0) != 48) {
         break label$27;
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
        label$28: {
         if ($4 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
          SAFE_HEAP_STORE_i32_4_4($5, 0, $4 + 1 | 0);
          $4 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
          break label$28;
         }
         $4 = __shgetc($1);
        }
        if (($4 & -33) == 88) {
         hexfloat($6 + 16 | 0, $1, $7, $12, $8, $3);
         $9 = SAFE_HEAP_LOAD_i64_8_8($6, 24);
         $7 = i64toi32_i32$HIGH_BITS;
         $10 = SAFE_HEAP_LOAD_i64_8_8($6, 16);
         $11 = i64toi32_i32$HIGH_BITS;
         break label$1;
        }
        if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
         break label$27;
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
       }
       decfloat($6 + 32 | 0, $1, $2, $7, $12, $8, $3);
       $9 = SAFE_HEAP_LOAD_i64_8_8($6, 40);
       $7 = i64toi32_i32$HIGH_BITS;
       $10 = SAFE_HEAP_LOAD_i64_8_8($6, 32);
       $11 = i64toi32_i32$HIGH_BITS;
       break label$1;

      case 3:
       break label$20;

      default:
       break label$25;
      }
     }
     if (SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
     }
     break label$19;
    }
    label$32: {
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     label$33: {
      if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
       SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
       break label$33;
      }
      $2 = __shgetc($1);
     }
     if (($2 | 0) == 40) {
      $4 = 1;
      break label$32;
     }
     $7 = 2147450880;
     if (!SAFE_HEAP_LOAD_i32_4_4($1, 104)) {
      break label$1;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
     break label$1;
    }
    while (1) {
     label$37: {
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      label$39: {
       if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 104) >>> 0) {
        SAFE_HEAP_STORE_i32_4_4($5, 0, $2 + 1 | 0);
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        break label$39;
       }
       $2 = __shgetc($1);
      }
      $8 = $2 - 65 | 0;
      label$38: {
       if ($2 - 48 >>> 0 < 10 | $8 >>> 0 < 26) {
        break label$38;
       }
       $8 = $2 - 97 | 0;
       if (($2 | 0) == 95) {
        break label$38;
       }
       if ($8 >>> 0 >= 26) {
        break label$37;
       }
      }
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    $7 = 2147450880;
    if (($2 | 0) == 41) {
     break label$1;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 104);
    if ($2) {
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    if ($3) {
     if (!$4) {
      break label$1;
     }
     while (1) {
      $4 = $4 - 1 | 0;
      if ($2) {
       SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
      }
      if ($4) {
       continue;
      }
      break;
     }
     break label$1;
    }
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
   __shlim($1, 0, 0);
  }
  $7 = 0;
 }
 SAFE_HEAP_STORE_i64_8_8($0, 0, $10, $11);
 SAFE_HEAP_STORE_i64_8_8($0, 8, $9, $7);
 __stack_pointer = $6 + 48 | 0;
}

function cftmdl2_28int_2c_20double__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 $23 = $0 >> 3;
 $18 = $23 << 5;
 $24 = ($18 | 8) + $1 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $12 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $25 = $1 + $18 | 0;
 $21 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
 $5 = $12 + $21;
 $3 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
 $4 = ($23 << 4) + $1 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
 $14 = Math_imul($23, 48);
 $8 = ($14 | 8) + $1 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
 $9 = $13 - $6;
 $18 = $23 << 1;
 $37 = ($18 | 1) << 3;
 $15 = $37 + $1 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
 $14 = $1 + $14 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
 $16 = $10 + $11;
 $19 = $3 * ($9 + $16);
 SAFE_HEAP_STORE_f64_8_8($1, 8, $5 + $19);
 $20 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $17 = $20 - $7;
 $9 = $3 * ($9 - $16);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $17 + $9);
 SAFE_HEAP_STORE_f64_8_8($4, 0, $17 - $9);
 SAFE_HEAP_STORE_f64_8_8($15, 0, $5 - $19);
 $7 = $20 + $7;
 $5 = $13 + $6;
 $13 = $10 - $11;
 $6 = $3 * ($5 + $13);
 SAFE_HEAP_STORE_f64_8_8($25, 0, $7 - $6);
 $12 = $12 - $21;
 $3 = $3 * ($5 - $13);
 SAFE_HEAP_STORE_f64_8_8($24, 0, $12 + $3);
 SAFE_HEAP_STORE_f64_8_8($14, 0, $7 + $6);
 SAFE_HEAP_STORE_f64_8_8($8, 0, $12 - $3);
 if (($0 | 0) >= 24) {
  $0 = 2;
  $24 = $23 << 2;
  $25 = 0;
  while (1) {
   $4 = ($24 << 3) + $2 | 0;
   $3 = SAFE_HEAP_LOAD_f64_8_8($4 - 8 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f64_8_8($4 - 16 | 0, 0);
   $14 = ($25 << 3) + $2 | 0;
   $12 = SAFE_HEAP_LOAD_f64_8_8($14 + 48 | 0, 0);
   $21 = SAFE_HEAP_LOAD_f64_8_8($14 + 56 | 0, 0);
   $8 = $0 << 3;
   $15 = $8 + $1 | 0;
   $36 = $15;
   $25 = $25 + 4 | 0;
   $5 = SAFE_HEAP_LOAD_f64_8_8(($25 << 3) + $2 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
   $15 = $0 + $18 | 0;
   $22 = $15 + $18 | 0;
   $29 = $22 << 3;
   $30 = ($29 | 8) + $1 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($30, 0);
   $16 = $10 - $11;
   $6 = $5 * $16;
   $13 = SAFE_HEAP_LOAD_f64_8_8($14 + 40 | 0, 0);
   $14 = ($8 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $8 = $1 + $29 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
   $17 = $19 + $20;
   $26 = $6 - $13 * $17;
   $6 = SAFE_HEAP_LOAD_f64_8_8($4 - 24 | 0, 0);
   $4 = $15 << 3;
   $15 = $4 + $1 | 0;
   $27 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
   $22 = $18 + $22 << 3;
   $29 = ($22 | 8) + $1 | 0;
   $31 = SAFE_HEAP_LOAD_f64_8_8($29, 0);
   $32 = $27 - $31;
   $28 = $6 * $32;
   $24 = $24 - 4 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8(($24 << 3) + $2 | 0, 0);
   $4 = ($4 | 8) + $1 | 0;
   $33 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $22 = $1 + $22 | 0;
   $34 = SAFE_HEAP_LOAD_f64_8_8($22, 0);
   $35 = $33 + $34;
   $28 = $28 - $9 * $35;
   SAFE_HEAP_STORE_f64_8_8($36, 0, $26 + $28);
   $16 = $13 * $16 + $5 * $17;
   $17 = $9 * $32 + $6 * $35;
   SAFE_HEAP_STORE_f64_8_8($14, 0, $16 + $17);
   SAFE_HEAP_STORE_f64_8_8($15, 0, $26 - $28);
   SAFE_HEAP_STORE_f64_8_8($4, 0, $16 - $17);
   $10 = $10 + $11;
   $11 = $19 - $20;
   $16 = $12 * $10 + $21 * $11;
   $19 = $27 + $31;
   $20 = $33 - $34;
   $17 = $3 * $19 + $7 * $20;
   SAFE_HEAP_STORE_f64_8_8($8, 0, $16 + $17);
   $10 = $12 * $11 - $21 * $10;
   $11 = $3 * $20 - $7 * $19;
   SAFE_HEAP_STORE_f64_8_8($30, 0, $10 + $11);
   SAFE_HEAP_STORE_f64_8_8($22, 0, $16 - $17);
   SAFE_HEAP_STORE_f64_8_8($29, 0, $10 - $11);
   $4 = $18 - $0 | 0;
   $14 = $4 << 3;
   $8 = $14 + $1 | 0;
   $36 = $8;
   $10 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
   $4 = $4 + $18 | 0;
   $8 = $18 + $4 | 0;
   $15 = $8 << 3;
   $22 = ($15 | 8) + $1 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($22, 0);
   $16 = $10 - $11;
   $26 = $9 * $16;
   $14 = ($14 | 8) + $1 | 0;
   $19 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   $15 = $1 + $15 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($15, 0);
   $17 = $19 + $20;
   $26 = $26 - $6 * $17;
   $4 = $4 << 3;
   $29 = $4 + $1 | 0;
   $27 = SAFE_HEAP_LOAD_f64_8_8($29, 0);
   $8 = $18 + $8 << 3;
   $30 = ($8 | 8) + $1 | 0;
   $31 = SAFE_HEAP_LOAD_f64_8_8($30, 0);
   $32 = $27 - $31;
   $28 = $13 * $32;
   $4 = ($4 | 8) + $1 | 0;
   $33 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $8 = $1 + $8 | 0;
   $34 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
   $35 = $33 + $34;
   $28 = $28 - $5 * $35;
   SAFE_HEAP_STORE_f64_8_8($36, 0, $26 + $28);
   $6 = $6 * $16 + $9 * $17;
   $5 = $5 * $32 + $13 * $35;
   SAFE_HEAP_STORE_f64_8_8($14, 0, $6 + $5);
   SAFE_HEAP_STORE_f64_8_8($29, 0, $26 - $28);
   SAFE_HEAP_STORE_f64_8_8($4, 0, $6 - $5);
   $5 = $10 + $11;
   $13 = $19 - $20;
   $6 = $7 * $5 + $3 * $13;
   $9 = $27 + $31;
   $10 = $33 - $34;
   $11 = $21 * $9 + $12 * $10;
   SAFE_HEAP_STORE_f64_8_8($15, 0, $6 + $11);
   $3 = $7 * $13 - $3 * $5;
   $7 = $21 * $10 - $12 * $9;
   SAFE_HEAP_STORE_f64_8_8($22, 0, $3 + $7);
   SAFE_HEAP_STORE_f64_8_8($8, 0, $6 - $11);
   SAFE_HEAP_STORE_f64_8_8($30, 0, $3 - $7);
   $0 = $0 + 2 | 0;
   if (($23 | 0) > ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = ($23 << 3) + $1 | 0;
 $8 = $0;
 $3 = SAFE_HEAP_LOAD_f64_8_8(($18 << 3) + $2 | 0, 0);
 $12 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $18 = Math_imul($23, 40) + $1 | 0;
 $24 = $18 + 8 | 0;
 $21 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
 $5 = $12 - $21;
 $10 = $3 * $5;
 $7 = SAFE_HEAP_LOAD_f64_8_8($2 + $37 | 0, 0);
 $2 = $0 + 8 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
 $6 = SAFE_HEAP_LOAD_f64_8_8($18, 0);
 $9 = $13 + $6;
 $10 = $10 - $7 * $9;
 $0 = Math_imul($23, 24) + $1 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $1 = Math_imul($23, 56) + $1 | 0;
 $25 = $1 + 8 | 0;
 $16 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
 $19 = $11 - $16;
 $27 = $7 * $19;
 $4 = $0 + 8 | 0;
 $20 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
 $17 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $26 = $20 + $17;
 $27 = $27 - $3 * $26;
 SAFE_HEAP_STORE_f64_8_8($8, 0, $10 + $27);
 $5 = $7 * $5 + $3 * $9;
 $9 = $3 * $19 + $7 * $26;
 SAFE_HEAP_STORE_f64_8_8($2, 0, $5 + $9);
 SAFE_HEAP_STORE_f64_8_8($4, 0, $5 - $9);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $10 - $27);
 $12 = $12 + $21;
 $21 = $13 - $6;
 $5 = $3 * $12 + $7 * $21;
 $13 = $11 + $16;
 $6 = $20 - $17;
 $9 = $7 * $13 + $3 * $6;
 SAFE_HEAP_STORE_f64_8_8($24, 0, $5 - $9);
 $12 = $7 * $12 - $3 * $21;
 $3 = $3 * $13 - $7 * $6;
 SAFE_HEAP_STORE_f64_8_8($18, 0, $12 - $3);
 SAFE_HEAP_STORE_f64_8_8($25, 0, $5 + $9);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $12 + $3);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $8 = __stack_pointer - 128 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i32_4_4($8, 120, $1);
 $10 = std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2__distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($2, $3);
 SAFE_HEAP_STORE_i32_4_4($8, 16, 41);
 $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 8 | 0, 0, $8 + 16 | 0);
 $9 = $8 + 16 | 0;
 label$1: {
  if ($10 >>> 0 >= 101) {
   $9 = dlmalloc($10);
   if (!$9) {
    break label$1;
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($15, $9);
  }
  $7 = $9;
  $1 = $2;
  while (1) {
   if (($1 | 0) == ($3 | 0)) {
    label$5: while (1) {
     label$6: {
      if (!(wasm2js_i32$0 = bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $8 + 120 | 0), 
      wasm2js_i32$1 = 0, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
       if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $8 + 120 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
       }
       break label$6;
      }
      $12 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
      if (!$6) {
       $12 = std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($4, $12);
      }
      $13 = $16 + 1 | 0;
      $17 = 0;
      $7 = $9;
      $1 = $2;
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        $16 = $13;
        if (!$17) {
         continue label$5;
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        $7 = $9;
        $1 = $2;
        if ($10 + $11 >>> 0 < 2) {
         continue label$5;
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label$5;
         }
         label$14: {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 2) {
           break label$14;
          }
          if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) | 0) == ($13 | 0)) {
           break label$14;
          }
          SAFE_HEAP_STORE_i32_1_1($7, 0, 0);
          $11 = $11 - 1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        }
       }
       label$15: {
        if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 1) {
         break label$15;
        }
        $14 = SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16), 0);
        if (!$6) {
         $14 = std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($4, $14);
        }
        label$16: {
         if (($12 | 0) == ($14 | 0)) {
          $17 = 1;
          if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) | 0) != ($13 | 0)) {
           break label$15;
          }
          SAFE_HEAP_STORE_i32_1_1($7, 0, 2);
          $11 = $11 + 1 | 0;
          break label$16;
         }
         SAFE_HEAP_STORE_i32_1_1($7, 0, 0);
        }
        $10 = $10 - 1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     }
     break;
    }
    label$20: {
     label$21: {
      while (1) {
       if (($2 | 0) == ($3 | 0)) {
        break label$21;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) != 2) {
        $9 = $9 + 1 | 0;
        $2 = $2 + 12 | 0;
        continue;
       }
       break;
      }
      $3 = $2;
      break label$20;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    __stack_pointer = $8 + 128 | 0;
    return $3;
   }
   label$24: {
    if (!std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($1)) {
     SAFE_HEAP_STORE_i32_1_1($7, 0, 1);
     break label$24;
    }
    SAFE_HEAP_STORE_i32_1_1($7, 0, 2);
    $11 = $11 + 1 | 0;
    $10 = $10 - 1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function decimate($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $7 = $1 + 18 | 0;
 $4 = ($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3;
 $5 = operator_20new_5b_5d_28unsigned_20long_29($4);
 $10 = operator_20new_5b_5d_28unsigned_20long_29($4);
 $6 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $6 = $6 + $6;
 SAFE_HEAP_STORE_f64_8_8($5, 0, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 72));
 SAFE_HEAP_STORE_f64_8_8($5, 8, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 64));
 SAFE_HEAP_STORE_f64_8_8($5, 16, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 56));
 SAFE_HEAP_STORE_f64_8_8($5, 24, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 48));
 SAFE_HEAP_STORE_f64_8_8($5, 32, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 40));
 SAFE_HEAP_STORE_f64_8_8($5, 40, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 32));
 SAFE_HEAP_STORE_f64_8_8($5, 48, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 24));
 SAFE_HEAP_STORE_f64_8_8($5, 56, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 16));
 SAFE_HEAP_STORE_f64_8_8($5, 64, $6 - SAFE_HEAP_LOAD_f64_8_8($0, 8));
 $16 = $1 + 9 | 0;
 if (($1 | 0) >= 1) {
  memcpy($5 + 72 | 0, $0, ((($16 | 0) > 10 ? $16 : 10) << 3) - 72 | 0);
 }
 $9 = ($1 + $16 | 0) - 2 | 0;
 $24 = $1 - 1 | 0;
 $6 = SAFE_HEAP_LOAD_f64_8_8(($24 << 3) + $0 | 0, 0);
 $6 = $6 + $6;
 $4 = $16;
 while (1) {
  SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $5 | 0, 0, $6 - SAFE_HEAP_LOAD_f64_8_8(($9 - $4 << 3) + $0 | 0, 0));
  $4 = $4 + 1 | 0;
  if (($7 | 0) > ($4 | 0)) {
   continue;
  }
  break;
 }
 $4 = $2 - 2 | 0;
 if ($4 >>> 0 <= 10) {
  $4 = $4 << 3;
  $18 = SAFE_HEAP_LOAD_f64_8_8($4 + 3904 | 0, 0);
  $13 = SAFE_HEAP_LOAD_f64_8_8($4 + 3816 | 0, 0);
  $14 = SAFE_HEAP_LOAD_f64_8_8($4 + 3728 | 0, 0);
  $19 = SAFE_HEAP_LOAD_f64_8_8($4 + 3640 | 0, 0);
  $20 = SAFE_HEAP_LOAD_f64_8_8($4 + 3552 | 0, 0);
 }
 label$4: {
  if (($1 | 0) < -17) {
   break label$4;
  }
  $4 = 0;
  $6 = 0;
  while (1) {
   $0 = $4 << 3;
   $8 = $10 + $0 | 0;
   $21 = $13 * $15;
   $22 = $14 * $6;
   $23 = $14 * $11;
   $17 = $18 * $15 + ($20 * $6 + ($19 * $11 + SAFE_HEAP_LOAD_f64_8_8($0 + $5 | 0, 0)));
   SAFE_HEAP_STORE_f64_8_8($8, 0, $21 + ($22 + ($23 + $13 * $17)));
   $15 = $6;
   $6 = $11;
   $11 = $17;
   $4 = $4 + 1 | 0;
   if (($7 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
  if (($1 | 0) < -17) {
   break label$4;
  }
  $0 = ($7 | 0) > 1 ? $7 : 1;
  $8 = $0 & 3;
  $4 = 0;
  if ($0 - 1 >>> 0 >= 3) {
   $12 = $0 & 2147483644;
   while (1) {
    $0 = $4 << 3;
    SAFE_HEAP_STORE_f64_8_8($5 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 ^ -1) + $7 << 3) + $10 | 0, 0));
    $9 = ($7 - $4 << 3) + $10 | 0;
    SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 16 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8(($0 | 16) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 24 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8(($0 | 24) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 32 | 0, 0));
    $4 = $4 + 4 | 0;
    $12 = $12 - 4 | 0;
    if ($12) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$4;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 ^ -1) + $7 << 3) + $10 | 0, 0));
   $4 = $4 + 1 | 0;
   $8 = $8 - 1 | 0;
   if ($8) {
    continue;
   }
   break;
  }
 }
 $15 = 0;
 $20 = 0;
 $19 = 0;
 $14 = 0;
 $13 = 0;
 $18 = 0;
 $4 = $2 - 2 | 0;
 if ($4 >>> 0 <= 10) {
  $4 = $4 << 3;
  $18 = SAFE_HEAP_LOAD_f64_8_8($4 + 3904 | 0, 0);
  $13 = SAFE_HEAP_LOAD_f64_8_8($4 + 3816 | 0, 0);
  $14 = SAFE_HEAP_LOAD_f64_8_8($4 + 3728 | 0, 0);
  $19 = SAFE_HEAP_LOAD_f64_8_8($4 + 3640 | 0, 0);
  $20 = SAFE_HEAP_LOAD_f64_8_8($4 + 3552 | 0, 0);
 }
 label$10: {
  if (($1 | 0) < -17) {
   break label$10;
  }
  $4 = 0;
  $6 = 0;
  $11 = 0;
  while (1) {
   $0 = $4 << 3;
   $8 = $10 + $0 | 0;
   $21 = $13 * $15;
   $22 = $14 * $6;
   $23 = $14 * $11;
   $17 = $18 * $15 + ($20 * $6 + ($19 * $11 + SAFE_HEAP_LOAD_f64_8_8($0 + $5 | 0, 0)));
   SAFE_HEAP_STORE_f64_8_8($8, 0, $21 + ($22 + ($23 + $13 * $17)));
   $15 = $6;
   $6 = $11;
   $11 = $17;
   $4 = $4 + 1 | 0;
   if (($7 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
  if (($1 | 0) < -17) {
   break label$10;
  }
  $0 = ($7 | 0) > 1 ? $7 : 1;
  $8 = $0 & 3;
  $4 = 0;
  if ($0 - 1 >>> 0 >= 3) {
   $12 = $0 & 2147483644;
   while (1) {
    $0 = $4 << 3;
    SAFE_HEAP_STORE_f64_8_8($5 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 ^ -1) + $7 << 3) + $10 | 0, 0));
    $9 = ($7 - $4 << 3) + $10 | 0;
    SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 16 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8(($0 | 16) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 24 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8(($0 | 24) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9 - 32 | 0, 0));
    $4 = $4 + 4 | 0;
    $12 = $12 - 4 | 0;
    if ($12) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$10;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $5 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 ^ -1) + $7 << 3) + $10 | 0, 0));
   $4 = $4 + 1 | 0;
   $8 = $8 - 1 | 0;
   if ($8) {
    continue;
   }
   break;
  }
 }
 $7 = ($24 | 0) / ($2 | 0) | 0;
 $4 = ($1 + $2 | 0) + Math_imul($7 ^ -1, $2) | 0;
 label$15: {
  if (($16 | 0) <= ($4 | 0)) {
   break label$15;
  }
  $0 = (Math_imul($2, $7) + 8 >>> 0) / ($2 >>> 0) | 0;
  $8 = $0 + 1 | 0;
  $9 = $8 & 3;
  $7 = 0;
  if ($0 >>> 0 >= 3) {
   $8 = $8 & -4;
   while (1) {
    $0 = $7 << 3;
    SAFE_HEAP_STORE_f64_8_8($3 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 << 3) + $5 | 0) - -64 | 0, 0));
    $4 = $2 + $4 | 0;
    SAFE_HEAP_STORE_f64_8_8(($0 | 8) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 << 3) + $5 | 0) - -64 | 0, 0));
    $4 = $2 + $4 | 0;
    SAFE_HEAP_STORE_f64_8_8(($0 | 16) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 << 3) + $5 | 0) - -64 | 0, 0));
    $4 = $2 + $4 | 0;
    SAFE_HEAP_STORE_f64_8_8(($0 | 24) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 << 3) + $5 | 0) - -64 | 0, 0));
    $7 = $7 + 4 | 0;
    $4 = $2 + $4 | 0;
    $8 = $8 - 4 | 0;
    if ($8) {
     continue;
    }
    break;
   }
  }
  if (!$9) {
   break label$15;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($7 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((($4 << 3) + $5 | 0) - -64 | 0, 0));
   $4 = $2 + $4 | 0;
   $7 = $7 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($5);
 operator_20delete_5b_5d_28void__29($10);
}

function cftf162_28double__2c_20double__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 $18 = SAFE_HEAP_LOAD_f64_8_8($0, 136);
 $19 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $20 = SAFE_HEAP_LOAD_f64_8_8($0, 8);
 $5 = SAFE_HEAP_LOAD_f64_8_8($0, 128);
 $11 = $20 - $5;
 $9 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $12 = SAFE_HEAP_LOAD_f64_8_8($0, 64);
 $21 = SAFE_HEAP_LOAD_f64_8_8($0, 200);
 $22 = $12 + $21;
 $13 = SAFE_HEAP_LOAD_f64_8_8($0, 72);
 $14 = SAFE_HEAP_LOAD_f64_8_8($0, 192);
 $10 = $13 - $14;
 $31 = $9 * ($22 - $10);
 $23 = $11 + $31;
 $7 = SAFE_HEAP_LOAD_f64_8_8($1, 64);
 $24 = SAFE_HEAP_LOAD_f64_8_8($0, 32);
 $15 = SAFE_HEAP_LOAD_f64_8_8($0, 168);
 $25 = $24 + $15;
 $2 = $7 * $25;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 72);
 $32 = SAFE_HEAP_LOAD_f64_8_8($0, 40);
 $26 = SAFE_HEAP_LOAD_f64_8_8($0, 160);
 $27 = $32 - $26;
 $51 = $2 + $3 * $27;
 $33 = SAFE_HEAP_LOAD_f64_8_8($0, 96);
 $34 = SAFE_HEAP_LOAD_f64_8_8($0, 232);
 $16 = $33 + $34;
 $2 = $3 * $16;
 $35 = SAFE_HEAP_LOAD_f64_8_8($0, 104);
 $36 = SAFE_HEAP_LOAD_f64_8_8($0, 224);
 $17 = $35 - $36;
 $52 = $2 + $7 * $17;
 $37 = $51 - $52;
 $38 = $23 - $37;
 $8 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
 $39 = SAFE_HEAP_LOAD_f64_8_8($0, 16);
 $40 = SAFE_HEAP_LOAD_f64_8_8($0, 152);
 $41 = $39 + $40;
 $2 = $8 * $41;
 $4 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
 $42 = SAFE_HEAP_LOAD_f64_8_8($0, 24);
 $43 = SAFE_HEAP_LOAD_f64_8_8($0, 144);
 $44 = $42 - $43;
 $53 = $2 + $4 * $44;
 $6 = SAFE_HEAP_LOAD_f64_8_8($1, 32);
 $45 = SAFE_HEAP_LOAD_f64_8_8($0, 80);
 $46 = SAFE_HEAP_LOAD_f64_8_8($0, 216);
 $28 = $45 + $46;
 $29 = $6 * $28;
 $2 = SAFE_HEAP_LOAD_f64_8_8($1, 40);
 $47 = SAFE_HEAP_LOAD_f64_8_8($0, 88);
 $54 = SAFE_HEAP_LOAD_f64_8_8($0, 208);
 $48 = $47 - $54;
 $55 = $29 + $2 * $48;
 $56 = $53 - $55;
 $57 = SAFE_HEAP_LOAD_f64_8_8($0, 48);
 $58 = SAFE_HEAP_LOAD_f64_8_8($0, 184);
 $29 = $57 + $58;
 $30 = $2 * $29;
 $59 = SAFE_HEAP_LOAD_f64_8_8($0, 56);
 $60 = SAFE_HEAP_LOAD_f64_8_8($0, 176);
 $49 = $59 - $60;
 $61 = $30 + $6 * $49;
 $62 = SAFE_HEAP_LOAD_f64_8_8($0, 112);
 $63 = SAFE_HEAP_LOAD_f64_8_8($0, 248);
 $30 = $62 + $63;
 $64 = -$4;
 $50 = $30 * $64;
 $65 = SAFE_HEAP_LOAD_f64_8_8($0, 120);
 $66 = SAFE_HEAP_LOAD_f64_8_8($0, 240);
 $67 = $65 - $66;
 $50 = $50 - $8 * $67;
 $68 = $61 + $50;
 $69 = $56 + $68;
 SAFE_HEAP_STORE_f64_8_8($0, 184, $38 - $69);
 $70 = $19 + $18;
 $22 = $9 * ($22 + $10);
 $10 = $70 - $22;
 $25 = $3 * $25 - $7 * $27;
 $27 = $7 * $16 - $3 * $17;
 $16 = $25 - $27;
 $17 = $10 - $16;
 $41 = $8 * $44 - $4 * $41;
 $44 = $6 * $48 - $2 * $28;
 $28 = $41 - $44;
 $48 = $2 * $49 - $6 * $29;
 $29 = $8 * $30 - $4 * $67;
 $49 = $48 + $29;
 $30 = $28 + $49;
 SAFE_HEAP_STORE_f64_8_8($0, 176, $17 + $30);
 SAFE_HEAP_STORE_f64_8_8($0, 168, $38 + $69);
 SAFE_HEAP_STORE_f64_8_8($0, 160, $17 - $30);
 $23 = $23 + $37;
 $17 = $28 - $49;
 SAFE_HEAP_STORE_f64_8_8($0, 152, $23 - $17);
 $10 = $10 + $16;
 $16 = $56 - $68;
 SAFE_HEAP_STORE_f64_8_8($0, 144, $10 - $16);
 SAFE_HEAP_STORE_f64_8_8($0, 136, $23 + $17);
 SAFE_HEAP_STORE_f64_8_8($0, 128, $10 + $16);
 $20 = $20 + $5;
 $5 = $12 - $21;
 $12 = $13 + $14;
 $21 = $9 * ($5 + $12);
 $13 = $20 + $21;
 $14 = $24 - $15;
 $10 = $32 + $26;
 $23 = $3 * $14 + $7 * $10;
 $24 = $33 - $34;
 $15 = $35 + $36;
 $32 = $7 * $24 + $3 * $15;
 $26 = $23 + $32;
 $33 = $13 - $26;
 $34 = $39 - $40;
 $16 = $42 + $43;
 $35 = $6 * $34 - $2 * $16;
 $36 = $45 - $46;
 $17 = $47 + $54;
 $37 = $36 * $64 - $8 * $17;
 $38 = $35 + $37;
 $39 = $57 - $58;
 $40 = $59 + $60;
 $42 = $8 * $39 + $4 * $40;
 $43 = $62 - $63;
 $45 = $65 + $66;
 $46 = $2 * $43 - $6 * $45;
 $28 = $42 + $46;
 $47 = $38 - $28;
 SAFE_HEAP_STORE_f64_8_8($0, 56, $33 - $47);
 $18 = $19 - $18;
 $19 = $9 * ($5 - $12);
 $5 = $18 + $19;
 $12 = $7 * $14 - $3 * $10;
 $7 = $3 * $24 - $7 * $15;
 $3 = $12 + $7;
 $14 = $5 - $3;
 $10 = $2 * $34 + $6 * $16;
 $24 = $8 * $36 - $4 * $17;
 $15 = $10 + $24;
 $8 = $8 * $40 - $4 * $39;
 $6 = $6 * $43 + $2 * $45;
 $2 = $8 + $6;
 $4 = $15 - $2;
 SAFE_HEAP_STORE_f64_8_8($0, 48, $14 + $4);
 SAFE_HEAP_STORE_f64_8_8($0, 40, $33 + $47);
 SAFE_HEAP_STORE_f64_8_8($0, 32, $14 - $4);
 $4 = $13 + $26;
 $2 = $15 + $2;
 SAFE_HEAP_STORE_f64_8_8($0, 24, $4 - $2);
 $3 = $5 + $3;
 $5 = $38 + $28;
 SAFE_HEAP_STORE_f64_8_8($0, 16, $3 - $5);
 SAFE_HEAP_STORE_f64_8_8($0, 8, $4 + $2);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $3 + $5);
 $3 = $11 - $31;
 $2 = $25 + $27;
 $4 = $3 - $2;
 $5 = $53 + $55;
 $11 = $48 - $29;
 $13 = $5 - $11;
 $14 = $41 + $44;
 $31 = $61 - $50;
 $15 = $14 + $31;
 $25 = $9 * ($13 - $15);
 SAFE_HEAP_STORE_f64_8_8($0, 248, $4 - $25);
 $22 = $70 + $22;
 $26 = $51 + $52;
 $27 = $22 + $26;
 $13 = $9 * ($15 + $13);
 SAFE_HEAP_STORE_f64_8_8($0, 240, $27 + $13);
 SAFE_HEAP_STORE_f64_8_8($0, 232, $4 + $25);
 SAFE_HEAP_STORE_f64_8_8($0, 224, $27 - $13);
 $3 = $3 + $2;
 $2 = $14 - $31;
 $4 = $5 + $11;
 $5 = $9 * ($2 + $4);
 SAFE_HEAP_STORE_f64_8_8($0, 216, $3 - $5);
 $11 = $22 - $26;
 $2 = $9 * ($4 - $2);
 SAFE_HEAP_STORE_f64_8_8($0, 208, $11 - $2);
 SAFE_HEAP_STORE_f64_8_8($0, 200, $3 + $5);
 SAFE_HEAP_STORE_f64_8_8($0, 192, $11 + $2);
 $3 = $20 - $21;
 $7 = $12 - $7;
 $2 = $3 - $7;
 $4 = $35 - $37;
 $8 = $8 - $6;
 $6 = $4 + $8;
 $20 = $10 - $24;
 $5 = $42 - $46;
 $11 = $20 - $5;
 $12 = $9 * ($6 - $11);
 SAFE_HEAP_STORE_f64_8_8($0, 120, $2 - $12);
 $18 = $18 - $19;
 $19 = $23 - $32;
 $21 = $18 + $19;
 $6 = $9 * ($11 + $6);
 SAFE_HEAP_STORE_f64_8_8($0, 112, $21 + $6);
 SAFE_HEAP_STORE_f64_8_8($0, 104, $2 + $12);
 SAFE_HEAP_STORE_f64_8_8($0, 96, $21 - $6);
 $7 = $3 + $7;
 $3 = $20 + $5;
 $8 = $4 - $8;
 $6 = $9 * ($3 + $8);
 SAFE_HEAP_STORE_f64_8_8($0, 88, $7 - $6);
 $2 = $18 - $19;
 $9 = $9 * ($8 - $3);
 SAFE_HEAP_STORE_f64_8_8($0, 80, $2 - $9);
 SAFE_HEAP_STORE_f64_8_8($0, 72, $7 + $6);
 SAFE_HEAP_STORE_f64_8_8($0, 64, $2 + $9);
}

function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $6 = __stack_pointer - 496 | 0;
 __stack_pointer = $6;
 std____2__ios_base__getloc_28_29_20const($6 + 488 | 0, $3);
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6 + 488 | 0);
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5)) {
  $12 = (SAFE_HEAP_LOAD_i32_4_4(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0), 0) | 0) == (std____2__ctype_wchar_t___widen_28char_29_20const($11, 45) | 0);
 }
 $0 = $6 + 488 | 0;
 $7 = $6 + 480 | 0;
 $13 = $6 + 476 | 0;
 $14 = $6 + 472 | 0;
 $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 456 | 0);
 $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($6 + 440 | 0);
 $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($6 + 424 | 0);
 std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $12, $0, $7, $13, $14, $10, $8, $9, $6 + 420 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 16, 41);
 $7 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($6 + 8 | 0, 0, $6 + 16 | 0);
 label$3: {
  if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) | 0) > (SAFE_HEAP_LOAD_i32_4_4($6, 420) | 0)) {
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5);
   $0 = SAFE_HEAP_LOAD_i32_4_4($6, 420);
   $0 = (((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($9) + ($2 - $0 << 1) | 0) + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($8) | 0) + SAFE_HEAP_LOAD_i32_4_4($6, 420) | 0) + 1 | 0;
   break label$3;
  }
  $0 = ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($9) + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($8) | 0) + SAFE_HEAP_LOAD_i32_4_4($6, 420) | 0) + 2 | 0;
 }
 $2 = $6 + 16 | 0;
 label$5: {
  if ($0 >>> 0 < 101) {
   break label$5;
  }
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($7, dlmalloc($0 << 2));
  $2 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  if ($2) {
   break label$5;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($2, $6 + 4 | 0, $6, std____2__ios_base__flags_28_29_20const($3), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($5), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($5) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) << 2) | 0, $11, $12, $6 + 480 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 476), SAFE_HEAP_LOAD_i32_4_4($6, 472), $10, $8, $9, SAFE_HEAP_LOAD_i32_4_4($6, 420));
 $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, SAFE_HEAP_LOAD_i32_4_4($6, 4), SAFE_HEAP_LOAD_i32_4_4($6, 0), $3, $4);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($9);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($8);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 std____2__locale___locale_28_29($6 + 488 | 0);
 __stack_pointer = $6 + 496 | 0;
 return $5 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $8 = __stack_pointer - 128 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i32_4_4($8, 120, $1);
 $10 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $3);
 SAFE_HEAP_STORE_i32_4_4($8, 16, 41);
 $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 8 | 0, 0, $8 + 16 | 0);
 $9 = $8 + 16 | 0;
 label$1: {
  if ($10 >>> 0 >= 101) {
   $9 = dlmalloc($10);
   if (!$9) {
    break label$1;
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($15, $9);
  }
  $7 = $9;
  $1 = $2;
  while (1) {
   if (($1 | 0) == ($3 | 0)) {
    label$5: while (1) {
     label$6: {
      if (!(wasm2js_i32$0 = bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $8 + 120 | 0), 
      wasm2js_i32$1 = 0, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
       if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $8 + 120 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
       }
       break label$6;
      }
      $12 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
      if (!$6) {
       $12 = std____2__ctype_char___toupper_28char_29_20const($4, $12);
      }
      $13 = $16 + 1 | 0;
      $17 = 0;
      $7 = $9;
      $1 = $2;
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        $16 = $13;
        if (!$17) {
         continue label$5;
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        $7 = $9;
        $1 = $2;
        if ($10 + $11 >>> 0 < 2) {
         continue label$5;
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label$5;
         }
         label$14: {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 2) {
           break label$14;
          }
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) == ($13 | 0)) {
           break label$14;
          }
          SAFE_HEAP_STORE_i32_1_1($7, 0, 0);
          $11 = $11 - 1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        }
       }
       label$15: {
        if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 1) {
         break label$15;
        }
        $14 = SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16), 0);
        if (!$6) {
         $14 = std____2__ctype_char___toupper_28char_29_20const($4, $14 << 24 >> 24);
        }
        label$16: {
         if (($12 & 255) == ($14 & 255)) {
          $17 = 1;
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) != ($13 | 0)) {
           break label$15;
          }
          SAFE_HEAP_STORE_i32_1_1($7, 0, 2);
          $11 = $11 + 1 | 0;
          break label$16;
         }
         SAFE_HEAP_STORE_i32_1_1($7, 0, 0);
        }
        $10 = $10 - 1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     }
     break;
    }
    label$20: {
     label$21: {
      while (1) {
       if (($2 | 0) == ($3 | 0)) {
        break label$21;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) != 2) {
        $9 = $9 + 1 | 0;
        $2 = $2 + 12 | 0;
        continue;
       }
       break;
      }
      $3 = $2;
      break label$20;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 4);
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    __stack_pointer = $8 + 128 | 0;
    return $3;
   }
   label$24: {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($1)) {
     SAFE_HEAP_STORE_i32_1_1($7, 0, 1);
     break label$24;
    }
    SAFE_HEAP_STORE_i32_1_1($7, 0, 2);
    $11 = $11 + 1 | 0;
    $10 = $10 - 1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function cftbsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 label$1: {
  if (($0 | 0) >= 9) {
   if (($0 | 0) >= 33) {
    cftb1st_28int_2c_20double__2c_20double__29($0, $1, ($3 - ($0 >>> 2 | 0) << 3) + $4 | 0);
    if (($0 | 0) >= 513) {
     cftrec4_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $3, $4);
     break label$1;
    }
    if (($0 | 0) >= 129) {
     cftleaf_28int_2c_20int_2c_20double__2c_20int_2c_20double__29($0, 1, $1, $3, $4);
     break label$1;
    }
    cftfx41_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $3, $4);
    break label$1;
   }
   if (($0 | 0) == 32) {
    cftf161_28double__2c_20double__29($1, (($3 << 3) + $4 | 0) + -64 | 0);
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 240);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 248);
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 112);
    $8 = SAFE_HEAP_LOAD_f64_8_8($1, 120);
    $9 = SAFE_HEAP_LOAD_f64_8_8($1, 176);
    $10 = SAFE_HEAP_LOAD_f64_8_8($1, 184);
    $11 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
    $12 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
    $13 = SAFE_HEAP_LOAD_f64_8_8($1, 208);
    $14 = SAFE_HEAP_LOAD_f64_8_8($1, 216);
    $15 = SAFE_HEAP_LOAD_f64_8_8($1, 80);
    $16 = SAFE_HEAP_LOAD_f64_8_8($1, 88);
    $17 = SAFE_HEAP_LOAD_f64_8_8($1, 144);
    $18 = SAFE_HEAP_LOAD_f64_8_8($1, 152);
    $19 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    $20 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    $21 = SAFE_HEAP_LOAD_f64_8_8($1, 224);
    $22 = SAFE_HEAP_LOAD_f64_8_8($1, 232);
    $23 = SAFE_HEAP_LOAD_f64_8_8($1, 96);
    $24 = SAFE_HEAP_LOAD_f64_8_8($1, 104);
    $25 = SAFE_HEAP_LOAD_f64_8_8($1, 160);
    $26 = SAFE_HEAP_LOAD_f64_8_8($1, 168);
    $27 = SAFE_HEAP_LOAD_f64_8_8($1, 32);
    $28 = SAFE_HEAP_LOAD_f64_8_8($1, 40);
    $29 = SAFE_HEAP_LOAD_f64_8_8($1, 192);
    $30 = SAFE_HEAP_LOAD_f64_8_8($1, 200);
    $31 = SAFE_HEAP_LOAD_f64_8_8($1, 64);
    $32 = SAFE_HEAP_LOAD_f64_8_8($1, 72);
    $33 = SAFE_HEAP_LOAD_f64_8_8($1, 128);
    SAFE_HEAP_STORE_f64_8_8($1, 248, SAFE_HEAP_LOAD_f64_8_8($1, 136));
    SAFE_HEAP_STORE_f64_8_8($1, 240, $33);
    SAFE_HEAP_STORE_f64_8_8($1, 232, $32);
    SAFE_HEAP_STORE_f64_8_8($1, 224, $31);
    SAFE_HEAP_STORE_f64_8_8($1, 216, $30);
    SAFE_HEAP_STORE_f64_8_8($1, 208, $29);
    SAFE_HEAP_STORE_f64_8_8($1, 200, $28);
    SAFE_HEAP_STORE_f64_8_8($1, 192, $27);
    SAFE_HEAP_STORE_f64_8_8($1, 184, $26);
    SAFE_HEAP_STORE_f64_8_8($1, 176, $25);
    SAFE_HEAP_STORE_f64_8_8($1, 168, $24);
    SAFE_HEAP_STORE_f64_8_8($1, 160, $23);
    SAFE_HEAP_STORE_f64_8_8($1, 152, $22);
    SAFE_HEAP_STORE_f64_8_8($1, 144, $21);
    SAFE_HEAP_STORE_f64_8_8($1, 136, $20);
    SAFE_HEAP_STORE_f64_8_8($1, 128, $19);
    SAFE_HEAP_STORE_f64_8_8($1, 120, $18);
    SAFE_HEAP_STORE_f64_8_8($1, 112, $17);
    SAFE_HEAP_STORE_f64_8_8($1, 104, $16);
    SAFE_HEAP_STORE_f64_8_8($1, 96, $15);
    SAFE_HEAP_STORE_f64_8_8($1, 88, $14);
    SAFE_HEAP_STORE_f64_8_8($1, 80, $13);
    SAFE_HEAP_STORE_f64_8_8($1, 72, $12);
    SAFE_HEAP_STORE_f64_8_8($1, 64, $11);
    SAFE_HEAP_STORE_f64_8_8($1, 56, $10);
    SAFE_HEAP_STORE_f64_8_8($1, 48, $9);
    SAFE_HEAP_STORE_f64_8_8($1, 40, $8);
    SAFE_HEAP_STORE_f64_8_8($1, 32, $5);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $7);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $6);
    return;
   }
   cftf081_28double__2c_20double__29($1, $4);
   $6 = SAFE_HEAP_LOAD_f64_8_8($1, 120);
   SAFE_HEAP_STORE_f64_8_8($1, 120, SAFE_HEAP_LOAD_f64_8_8($1, 72));
   $7 = SAFE_HEAP_LOAD_f64_8_8($1, 112);
   SAFE_HEAP_STORE_f64_8_8($1, 112, SAFE_HEAP_LOAD_f64_8_8($1, 64));
   $5 = SAFE_HEAP_LOAD_f64_8_8($1, 104);
   SAFE_HEAP_STORE_f64_8_8($1, 104, SAFE_HEAP_LOAD_f64_8_8($1, 40));
   $8 = SAFE_HEAP_LOAD_f64_8_8($1, 96);
   SAFE_HEAP_STORE_f64_8_8($1, 96, SAFE_HEAP_LOAD_f64_8_8($1, 32));
   $9 = SAFE_HEAP_LOAD_f64_8_8($1, 88);
   SAFE_HEAP_STORE_f64_8_8($1, 88, $5);
   $5 = SAFE_HEAP_LOAD_f64_8_8($1, 80);
   SAFE_HEAP_STORE_f64_8_8($1, 80, $8);
   SAFE_HEAP_STORE_f64_8_8($1, 72, SAFE_HEAP_LOAD_f64_8_8($1, 24));
   SAFE_HEAP_STORE_f64_8_8($1, 64, SAFE_HEAP_LOAD_f64_8_8($1, 16));
   $8 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
   SAFE_HEAP_STORE_f64_8_8($1, 56, $9);
   $9 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
   SAFE_HEAP_STORE_f64_8_8($1, 48, $5);
   SAFE_HEAP_STORE_f64_8_8($1, 40, $8);
   SAFE_HEAP_STORE_f64_8_8($1, 32, $9);
   SAFE_HEAP_STORE_f64_8_8($1, 24, $6);
   SAFE_HEAP_STORE_f64_8_8($1, 16, $7);
   return;
  }
  label$7: {
   switch ($0 - 4 | 0) {
   case 4:
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 40);
    $8 = $7 - $5;
    $9 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    $10 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
    $11 = $9 - $10;
    SAFE_HEAP_STORE_f64_8_8($1, 56, $8 + $11);
    $12 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $13 = SAFE_HEAP_LOAD_f64_8_8($1, 32);
    $14 = $12 - $13;
    $15 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    $16 = $15 - $6;
    SAFE_HEAP_STORE_f64_8_8($1, 48, $14 - $16);
    $7 = $7 + $5;
    $6 = $15 + $6;
    SAFE_HEAP_STORE_f64_8_8($1, 40, $7 - $6);
    $5 = $12 + $13;
    $9 = $9 + $10;
    SAFE_HEAP_STORE_f64_8_8($1, 32, $5 - $9);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $8 - $11);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $14 + $16);
    SAFE_HEAP_STORE_f64_8_8($1, 8, $7 + $6);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $5 + $9);
    return;

   case 0:
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $6 - $7);
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $8 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $5 - $8);
    SAFE_HEAP_STORE_f64_8_8($1, 8, $6 + $7);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $5 + $8);
    break;

   default:
    break label$7;
   }
  }
  return;
 }
 bitrv2conj_28int_2c_20int__2c_20double__29($0, $2, $1);
}

function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $6 = __stack_pointer - 192 | 0;
 __stack_pointer = $6;
 std____2__ios_base__getloc_28_29_20const($6 + 184 | 0, $3);
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6 + 184 | 0);
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5)) {
  $12 = (SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0), 0) | 0) == (std____2__ctype_char___widen_28char_29_20const($11, 45) & 255);
 }
 $0 = $6 + 184 | 0;
 $7 = $6 + 176 | 0;
 $13 = $6 + 175 | 0;
 $14 = $6 + 174 | 0;
 $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 160 | 0);
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 144 | 0);
 $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 128 | 0);
 std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $12, $0, $7, $13, $14, $10, $8, $9, $6 + 124 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 16, 41);
 $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($6 + 8 | 0, 0, $6 + 16 | 0);
 label$3: {
  if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) > (SAFE_HEAP_LOAD_i32_4_4($6, 124) | 0)) {
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
   $0 = SAFE_HEAP_LOAD_i32_4_4($6, 124);
   $0 = (((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($9) + ($2 - $0 << 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) | 0) + SAFE_HEAP_LOAD_i32_4_4($6, 124) | 0) + 1 | 0;
   break label$3;
  }
  $0 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($9) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) | 0) + SAFE_HEAP_LOAD_i32_4_4($6, 124) | 0) + 2 | 0;
 }
 $2 = $6 + 16 | 0;
 label$5: {
  if ($0 >>> 0 < 101) {
   break label$5;
  }
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc($0));
  $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  if ($2) {
   break label$5;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($2, $6 + 4 | 0, $6, std____2__ios_base__flags_28_29_20const($3), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($5), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($5) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0, $11, $12, $6 + 176 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 175), SAFE_HEAP_LOAD_i32_1_1($6, 174), $10, $8, $9, SAFE_HEAP_LOAD_i32_4_4($6, 124));
 $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, SAFE_HEAP_LOAD_i32_4_4($6, 4), SAFE_HEAP_LOAD_i32_4_4($6, 0), $3, $4);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 std____2__locale___locale_28_29($6 + 184 | 0);
 __stack_pointer = $6 + 192 | 0;
 return $5 | 0;
}

function $28anonymous_20namespace_29__GetCentroid_28double_20const__2c_20int_2c_20int_2c_20double_2c_20int_2c_20double_2c_20ForwardRealFFT_20const__2c_20double__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $11 = __stack_pointer - 80 | 0;
 __stack_pointer = $11;
 if (($4 | 0) >= 1) {
  memset(SAFE_HEAP_LOAD_i32_4_4($6, 4), 0, $4 << 3);
 }
 $28anonymous_20namespace_29__GetWindowedWaveform_28double_20const__2c_20int_2c_20int_2c_20double_2c_20double_2c_20int_2c_20double_2c_20double__29($0, $1, $2, $3, $5, 2, 4, SAFE_HEAP_LOAD_i32_4_4($6, 4));
 $5 = 0;
 $14 = +($2 | 0);
 $3 = ($14 + $14) / $3;
 if ((matlab_round($3) | 0) > -1) {
  $2 = 0;
  while (1) {
   $14 = SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4($6, 4) + ($2 << 3) | 0, 0);
   $5 = $5 + $14 * $14;
   $0 = matlab_round($3) << 1 > ($2 | 0);
   $2 = $2 + 1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
 }
 $2 = 0;
 if ((matlab_round($3) | 0) >= 0) {
  $5 = Math_sqrt($5);
  while (1) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($6, 4) + ($2 << 3) | 0;
   SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) / $5);
   $0 = matlab_round($3) << 1 > ($2 | 0);
   $2 = $2 + 1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i64_8_8($11 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6 + 44 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6 + 36 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6 + 28 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6 + 20 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11, 40, SAFE_HEAP_LOAD_i64_8_4($6, 12), i64toi32_i32$HIGH_BITS);
 fft_execute($11 + 40 | 0);
 $16 = ($4 | 0) / 2 | 0;
 $10 = $16 + 1 | 0;
 $2 = ($10 & 536870911) != ($10 | 0) ? -1 : $10 << 3;
 $1 = operator_20new_5b_5d_28unsigned_20long_29($2);
 $12 = operator_20new_5b_5d_28unsigned_20long_29($2);
 label$6: {
  if (($4 | 0) < -1) {
   break label$6;
  }
  $13 = $10 & 1;
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
  $2 = 0;
  if ($4 + 1 >>> 0 >= 3) {
   $10 = $10 & -2;
   while (1) {
    $9 = $2 << 3;
    $8 = ($2 << 4) + $0 | 0;
    SAFE_HEAP_STORE_f64_8_8($9 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0));
    SAFE_HEAP_STORE_f64_8_8($9 + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($8, 8));
    $9 = $2 | 1;
    $8 = $9 << 3;
    $9 = ($9 << 4) + $0 | 0;
    SAFE_HEAP_STORE_f64_8_8($8 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0));
    SAFE_HEAP_STORE_f64_8_8($8 + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9, 8));
    $2 = $2 + 2 | 0;
    $10 = $10 - 2 | 0;
    if ($10) {
     continue;
    }
    break;
   }
  }
  if (!$13) {
   break label$6;
  }
  $10 = $2 << 3;
  $2 = ($2 << 4) + $0 | 0;
  SAFE_HEAP_STORE_f64_8_8($10 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2, 0));
  SAFE_HEAP_STORE_f64_8_8($10 + $12 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2, 8));
 }
 $13 = $6 + 12 | 0;
 label$9: {
  if (($4 | 0) < 1) {
   break label$9;
  }
  $10 = $4 & 3;
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
  $2 = 0;
  if ($4 - 1 >>> 0 >= 3) {
   $9 = $4 & -4;
   while (1) {
    $8 = ($2 << 3) + $0 | 0;
    $15 = $8;
    $3 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
    $8 = $2 | 1;
    SAFE_HEAP_STORE_f64_8_8($15, 0, $3 * +($8 | 0));
    $8 = ($8 << 3) + $0 | 0;
    $15 = $8;
    $3 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
    $8 = $2 | 2;
    SAFE_HEAP_STORE_f64_8_8($15, 0, $3 * +($8 | 0));
    $8 = ($8 << 3) + $0 | 0;
    $15 = $8;
    $5 = SAFE_HEAP_LOAD_f64_8_8($8, 0);
    $8 = $2 | 3;
    $3 = +($8 | 0);
    SAFE_HEAP_STORE_f64_8_8($15, 0, $5 * $3);
    $8 = ($8 << 3) + $0 | 0;
    SAFE_HEAP_STORE_f64_8_8($8, 0, ($3 + 1) * SAFE_HEAP_LOAD_f64_8_8($8, 0));
    $2 = $2 + 4 | 0;
    $9 = $9 - 4 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  if (!$10) {
   break label$9;
  }
  while (1) {
   $9 = ($2 << 3) + $0 | 0;
   SAFE_HEAP_STORE_f64_8_8($9, 0, (+($2 | 0) + 1) * SAFE_HEAP_LOAD_f64_8_8($9, 0));
   $2 = $2 + 1 | 0;
   $10 = $10 - 1 | 0;
   if ($10) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i64_8_8($11 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($13 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($13 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($13 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($13 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($11, 0, SAFE_HEAP_LOAD_i64_8_4($13, 0), i64toi32_i32$HIGH_BITS);
 fft_execute($11);
 label$13: {
  if (($4 | 0) < -1) {
   break label$13;
  }
  $0 = $16 + 1 | 0;
  $8 = $0 & 1;
  $6 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
  $2 = 0;
  if ($4 + 1 >>> 0 >= 3) {
   $10 = $0 & -2;
   while (1) {
    $0 = $2 << 3;
    $9 = ($2 << 4) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($7 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) * SAFE_HEAP_LOAD_f64_8_8($0 + $1 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($0 + $12 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9, 8));
    $9 = $2 | 1;
    $0 = $9 << 3;
    $9 = ($9 << 4) + $6 | 0;
    SAFE_HEAP_STORE_f64_8_8($7 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) * SAFE_HEAP_LOAD_f64_8_8($0 + $1 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($0 + $12 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9, 8));
    $2 = $2 + 2 | 0;
    $10 = $10 - 2 | 0;
    if ($10) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$13;
  }
  $0 = $2 << 3;
  $2 = ($2 << 4) + $6 | 0;
  SAFE_HEAP_STORE_f64_8_8($7 + $0 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2, 0) * SAFE_HEAP_LOAD_f64_8_8($0 + $1 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($0 + $12 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($2, 8));
 }
 operator_20delete_5b_5d_28void__29($1);
 operator_20delete_5b_5d_28void__29($12);
 __stack_pointer = $11 + 80 | 0;
}

function LinearSmoothing($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $16 = ($3 | 0) / 2 | 0;
 $12 = +($3 | 0);
 $15 = +($2 | 0);
 $6 = $12 * $1 / $15;
 label$1: {
  if (Math_abs($6) < 2147483648) {
   $9 = ~~$6;
   break label$1;
  }
  $9 = -2147483648;
 }
 $2 = 0;
 $7 = $9 + 1 | 0;
 $21 = $7 << 1;
 $13 = $21 + $16 | 0;
 $18 = $13 + 1 | 0;
 $11 = ($18 & 536870911) != ($18 | 0) ? -1 : $18 << 3;
 $14 = operator_20new_5b_5d_28unsigned_20long_29($11);
 $17 = operator_20new_5b_5d_28unsigned_20long_29($11);
 $19 = $16 + 1 | 0;
 $20 = ($19 & 536870911) != ($19 | 0) ? -1 : $19 << 3;
 $11 = operator_20new_5b_5d_28unsigned_20long_29($20);
 label$3: {
  if (($9 | 0) < 0) {
   break label$3;
  }
  $5 = $7 & 3;
  if ($9 >>> 0 >= 3) {
   $8 = $7 & -4;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($7 - $2 << 3) + $0 | 0, 0));
    $10 = $2 | 1;
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($7 - $10 << 3) + $0 | 0, 0));
    $10 = $2 | 2;
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($7 - $10 << 3) + $0 | 0, 0));
    $10 = $2 | 3;
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($7 - $10 << 3) + $0 | 0, 0));
    $2 = $2 + 4 | 0;
    $8 = $8 - 4 | 0;
    if ($8) {
     continue;
    }
    break;
   }
  }
  if (!$5) {
   break label$3;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($7 - $2 << 3) + $0 | 0, 0));
   $2 = $2 + 1 | 0;
   $5 = $5 - 1 | 0;
   if ($5) {
    continue;
   }
   break;
  }
 }
 if (($3 | 0) >= 2) {
  $2 = ($9 + $16 | 0) + 1 | 0;
  $5 = $9 + 2 | 0;
  memcpy((($9 << 3) + $14 | 0) + 8 | 0, $0, ($9 ^ -1) + (($2 | 0) > ($5 | 0) ? $2 : $5) << 3);
 }
 if (($9 | 0) < ($21 | 0)) {
  $2 = $7 + $16 | 0;
  $8 = $16 + $2 | 0;
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $14 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($8 - $2 << 3) + $0 | 0, 0));
   $5 = ($2 | 0) < ($13 | 0);
   $2 = $2 + 1 | 0;
   if ($5) {
    continue;
   }
   break;
  }
 }
 $6 = SAFE_HEAP_LOAD_f64_8_8($14, 0) * $15 / $12;
 SAFE_HEAP_STORE_f64_8_8($17, 0, $6);
 $2 = 1;
 label$10: {
  if (($13 | 0) < 1) {
   break label$10;
  }
  $8 = $13 & 1;
  if (($13 | 0) != 1) {
   $5 = $13 & -2;
   while (1) {
    $0 = $2 << 3;
    $9 = $17 + $0 | 0;
    $6 = $6 + SAFE_HEAP_LOAD_f64_8_8($0 + $14 | 0, 0) * $15 / $12;
    SAFE_HEAP_STORE_f64_8_8($9, 0, $6);
    $0 = $0 + 8 | 0;
    $9 = $17 + $0 | 0;
    $6 = $6 + SAFE_HEAP_LOAD_f64_8_8($0 + $14 | 0, 0) * $15 / $12;
    SAFE_HEAP_STORE_f64_8_8($9, 0, $6);
    $2 = $2 + 2 | 0;
    $5 = $5 - 2 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$10;
  }
  $2 = $2 << 3;
  SAFE_HEAP_STORE_f64_8_8($17 + $2 | 0, 0, $6 + SAFE_HEAP_LOAD_f64_8_8($2 + $14 | 0, 0) * $15 / $12);
 }
 $8 = ($3 | 0) < -1;
 label$13: {
  if ($8) {
   break label$13;
  }
  $6 = $1 * .5;
  $0 = $16 + 1 | 0;
  $10 = $0 & 1;
  $2 = 0;
  if ($3 + 1 >>> 0 >= 3) {
   $0 = $0 & -2;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $11 | 0, 0, +($2 | 0) / $12 * $15 - $6);
    $5 = $2 | 1;
    SAFE_HEAP_STORE_f64_8_8(($5 << 3) + $11 | 0, 0, +($5 | 0) / $12 * $15 - $6);
    $2 = $2 + 2 | 0;
    $0 = $0 - 2 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  if (!$10) {
   break label$13;
  }
  SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $11 | 0, 0, +($2 | 0) / $12 * $15 - $6);
 }
 $10 = operator_20new_5b_5d_28unsigned_20long_29($20);
 $13 = operator_20new_5b_5d_28unsigned_20long_29($20);
 $6 = $15 * -(+($7 | 0) + -.5) / $12;
 $12 = $15 / $12;
 interp1Q($6, $12, $17, $18, $11, $19, $10);
 label$16: {
  if (!$8) {
   $9 = $16 + 1 | 0;
   $7 = $9 & 3;
   $2 = 0;
   if ($16 >>> 0 >= 3) {
    $5 = $9 & -4;
    while (1) {
     $0 = $2 << 3;
     $8 = $11 + $0 | 0;
     SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) + $1);
     $8 = ($0 | 8) + $11 | 0;
     SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) + $1);
     $8 = ($0 | 16) + $11 | 0;
     SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) + $1);
     $0 = ($0 | 24) + $11 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) + $1);
     $2 = $2 + 4 | 0;
     $5 = $5 - 4 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   if ($7) {
    while (1) {
     $0 = ($2 << 3) + $11 | 0;
     SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($0, 0) + $1);
     $2 = $2 + 1 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   interp1Q($6, $12, $17, $18, $11, $19, $13);
   if (($3 | 0) < -1) {
    break label$16;
   }
   $5 = $9 & 1;
   $0 = 0;
   if ($3 + 1 >>> 0 >= 3) {
    $7 = $9 & -2;
    while (1) {
     $2 = $0 << 3;
     SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, (SAFE_HEAP_LOAD_f64_8_8($2 + $13 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0)) / $1);
     $2 = $2 | 8;
     SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, (SAFE_HEAP_LOAD_f64_8_8($2 + $13 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0)) / $1);
     $0 = $0 + 2 | 0;
     $7 = $7 - 2 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   if (!$5) {
    break label$16;
   }
   $2 = $0 << 3;
   SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, (SAFE_HEAP_LOAD_f64_8_8($2 + $13 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0)) / $1);
   break label$16;
  }
  interp1Q($6, $12, $17, $18, $11, $19, $13);
 }
 operator_20delete_5b_5d_28void__29($14);
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($11);
 operator_20delete_5b_5d_28void__29($10);
 operator_20delete_5b_5d_28void__29($13);
}

function std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 label$1: {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($10, $0);
   SAFE_HEAP_STORE_i32_4_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
   std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   SAFE_HEAP_STORE_i32_4_4($3, 0, std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0));
   SAFE_HEAP_STORE_i32_4_4($4, 0, std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0));
   std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0);
   break label$1;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($1);
  std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($10, $0);
  SAFE_HEAP_STORE_i32_4_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
  std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  SAFE_HEAP_STORE_i32_4_4($3, 0, std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0));
  SAFE_HEAP_STORE_i32_4_4($4, 0, std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0));
  std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0);
 }
 SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 384 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 368, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 376, $1);
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 216 | 0, $3, $0 + 240 | 0, $0 + 236 | 0, $0 + 232 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 200 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 196, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 28, $0 + 32 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 23, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 22, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 376 | 0, $0 + 368 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 196) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 196, $2 + $1 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 376 | 0), $0 + 23 | 0, $0 + 22 | 0, $1, $0 + 196 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 236), SAFE_HEAP_LOAD_i32_4_4($0, 232), $0 + 216 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 240 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 376 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 216 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 23) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
  if (($2 - ($0 + 32 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 28, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 24));
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 196), $4);
 SAFE_HEAP_STORE_i64_8_8($5, 0, SAFE_HEAP_LOAD_i64_8_8($0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_8($0, 8), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 216 | 0, $0 + 32 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 28), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 376 | 0, $0 + 368 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 376);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 216 | 0);
 __stack_pointer = $0 + 384 | 0;
 return $1;
}

function cftf161_28double__2c_20double__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($0, 128);
 $16 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $11 = SAFE_HEAP_LOAD_f64_8_8($0, 200);
 $17 = SAFE_HEAP_LOAD_f64_8_8($0, 72);
 $18 = SAFE_HEAP_LOAD_f64_8_8($0, 8);
 $12 = SAFE_HEAP_LOAD_f64_8_8($0, 136);
 $5 = $18 - $12;
 $13 = SAFE_HEAP_LOAD_f64_8_8($0, 64);
 $19 = SAFE_HEAP_LOAD_f64_8_8($0, 192);
 $7 = $13 - $19;
 $8 = $5 - $7;
 $6 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $25 = SAFE_HEAP_LOAD_f64_8_8($0, 40);
 $26 = SAFE_HEAP_LOAD_f64_8_8($0, 168);
 $14 = $25 - $26;
 $27 = SAFE_HEAP_LOAD_f64_8_8($0, 96);
 $28 = SAFE_HEAP_LOAD_f64_8_8($0, 224);
 $20 = $27 - $28;
 $4 = $14 - $20;
 $29 = SAFE_HEAP_LOAD_f64_8_8($0, 32);
 $30 = SAFE_HEAP_LOAD_f64_8_8($0, 160);
 $21 = $29 - $30;
 $31 = SAFE_HEAP_LOAD_f64_8_8($0, 104);
 $38 = SAFE_HEAP_LOAD_f64_8_8($0, 232);
 $22 = $31 - $38;
 $9 = $21 + $22;
 $15 = $6 * ($4 - $9);
 $23 = $8 + $15;
 $2 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
 $32 = SAFE_HEAP_LOAD_f64_8_8($0, 16);
 $39 = SAFE_HEAP_LOAD_f64_8_8($0, 144);
 $33 = $32 - $39;
 $40 = SAFE_HEAP_LOAD_f64_8_8($0, 88);
 $41 = SAFE_HEAP_LOAD_f64_8_8($0, 216);
 $34 = $40 - $41;
 $35 = $33 + $34;
 $24 = $2 * $35;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
 $42 = SAFE_HEAP_LOAD_f64_8_8($0, 24);
 $43 = SAFE_HEAP_LOAD_f64_8_8($0, 152);
 $44 = $42 - $43;
 $45 = SAFE_HEAP_LOAD_f64_8_8($0, 80);
 $46 = SAFE_HEAP_LOAD_f64_8_8($0, 208);
 $47 = $45 - $46;
 $36 = $44 - $47;
 $48 = $24 - $3 * $36;
 $49 = SAFE_HEAP_LOAD_f64_8_8($0, 48);
 $50 = SAFE_HEAP_LOAD_f64_8_8($0, 176);
 $51 = $49 - $50;
 $52 = SAFE_HEAP_LOAD_f64_8_8($0, 120);
 $53 = SAFE_HEAP_LOAD_f64_8_8($0, 248);
 $54 = $52 - $53;
 $24 = $51 + $54;
 $37 = $3 * $24;
 $55 = SAFE_HEAP_LOAD_f64_8_8($0, 56);
 $56 = SAFE_HEAP_LOAD_f64_8_8($0, 184);
 $57 = $55 - $56;
 $58 = SAFE_HEAP_LOAD_f64_8_8($0, 112);
 $59 = SAFE_HEAP_LOAD_f64_8_8($0, 240);
 $60 = $58 - $59;
 $61 = $57 - $60;
 $37 = $37 - $2 * $61;
 $62 = $48 + $37;
 SAFE_HEAP_STORE_f64_8_8($0, 248, $23 - $62);
 $63 = $16 - $10;
 $64 = $17 - $11;
 $65 = $63 + $64;
 $4 = $6 * ($4 + $9);
 $9 = $65 + $4;
 $35 = $2 * $36 + $3 * $35;
 $36 = $3 * $61 + $2 * $24;
 $24 = $35 + $36;
 SAFE_HEAP_STORE_f64_8_8($0, 240, $9 + $24);
 SAFE_HEAP_STORE_f64_8_8($0, 232, $23 + $62);
 SAFE_HEAP_STORE_f64_8_8($0, 224, $9 - $24);
 $8 = $8 - $15;
 $9 = $35 - $36;
 SAFE_HEAP_STORE_f64_8_8($0, 216, $8 - $9);
 $4 = $65 - $4;
 $15 = $48 - $37;
 SAFE_HEAP_STORE_f64_8_8($0, 208, $4 - $15);
 SAFE_HEAP_STORE_f64_8_8($0, 200, $8 + $9);
 SAFE_HEAP_STORE_f64_8_8($0, 192, $4 + $15);
 $5 = $5 + $7;
 $7 = $14 + $20;
 $8 = $21 - $22;
 $14 = $6 * ($7 + $8);
 $20 = $5 - $14;
 $4 = $33 - $34;
 $21 = $44 + $47;
 $22 = $3 * $4 - $2 * $21;
 $9 = $51 - $54;
 $15 = $57 + $60;
 $23 = $2 * $9 - $3 * $15;
 $33 = $22 - $23;
 SAFE_HEAP_STORE_f64_8_8($0, 184, $20 - $33);
 $34 = $63 - $64;
 $7 = $6 * ($8 - $7);
 $8 = $34 - $7;
 $4 = $3 * $21 + $2 * $4;
 $2 = $2 * $15 + $3 * $9;
 $3 = $4 - $2;
 SAFE_HEAP_STORE_f64_8_8($0, 176, $8 + $3);
 SAFE_HEAP_STORE_f64_8_8($0, 168, $20 + $33);
 SAFE_HEAP_STORE_f64_8_8($0, 160, $8 - $3);
 $3 = $5 + $14;
 $2 = $4 + $2;
 SAFE_HEAP_STORE_f64_8_8($0, 152, $3 - $2);
 $5 = $34 + $7;
 $7 = $22 + $23;
 SAFE_HEAP_STORE_f64_8_8($0, 144, $5 - $7);
 SAFE_HEAP_STORE_f64_8_8($0, 136, $3 + $2);
 SAFE_HEAP_STORE_f64_8_8($0, 128, $5 + $7);
 $2 = $18 + $12;
 $3 = $17 + $11;
 $11 = $2 - $3;
 $17 = $29 + $30;
 $18 = $27 + $28;
 $12 = $17 - $18;
 $5 = $11 - $12;
 $7 = $32 + $39;
 $8 = $45 + $46;
 $14 = $7 - $8;
 $27 = $55 + $56;
 $28 = $52 + $53;
 $20 = $27 - $28;
 $4 = $14 + $20;
 $29 = $42 + $43;
 $30 = $40 + $41;
 $21 = $29 - $30;
 $22 = $49 + $50;
 $9 = $58 + $59;
 $15 = $22 - $9;
 $23 = $21 - $15;
 $32 = $6 * ($4 - $23);
 SAFE_HEAP_STORE_f64_8_8($0, 120, $5 - $32);
 $10 = $16 + $10;
 $16 = $13 + $19;
 $13 = $10 - $16;
 $19 = $25 + $26;
 $25 = $31 + $38;
 $26 = $19 - $25;
 $31 = $13 + $26;
 $4 = $6 * ($23 + $4);
 SAFE_HEAP_STORE_f64_8_8($0, 112, $31 + $4);
 SAFE_HEAP_STORE_f64_8_8($0, 104, $5 + $32);
 SAFE_HEAP_STORE_f64_8_8($0, 96, $31 - $4);
 $11 = $11 + $12;
 $12 = $21 + $15;
 $5 = $14 - $20;
 $14 = $6 * ($12 + $5);
 SAFE_HEAP_STORE_f64_8_8($0, 88, $11 - $14);
 $13 = $13 - $26;
 $6 = $6 * ($5 - $12);
 SAFE_HEAP_STORE_f64_8_8($0, 80, $13 - $6);
 SAFE_HEAP_STORE_f64_8_8($0, 72, $11 + $14);
 SAFE_HEAP_STORE_f64_8_8($0, 64, $13 + $6);
 $6 = $2 + $3;
 $2 = $19 + $25;
 $3 = $6 - $2;
 $11 = $7 + $8;
 $12 = $22 + $9;
 $5 = $11 - $12;
 SAFE_HEAP_STORE_f64_8_8($0, 56, $3 - $5);
 $10 = $10 + $16;
 $16 = $17 + $18;
 $17 = $10 - $16;
 $18 = $29 + $30;
 $13 = $27 + $28;
 $19 = $18 - $13;
 SAFE_HEAP_STORE_f64_8_8($0, 48, $17 + $19);
 SAFE_HEAP_STORE_f64_8_8($0, 40, $3 + $5);
 SAFE_HEAP_STORE_f64_8_8($0, 32, $17 - $19);
 $6 = $6 + $2;
 $2 = $18 + $13;
 SAFE_HEAP_STORE_f64_8_8($0, 24, $6 - $2);
 $3 = $10 + $16;
 $10 = $11 + $12;
 SAFE_HEAP_STORE_f64_8_8($0, 16, $3 - $10);
 SAFE_HEAP_STORE_f64_8_8($0, 8, $6 + $2);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $3 + $10);
}

function cftmdl1_28int_2c_20double__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 $21 = $0 >> 3;
 $16 = $21 << 5;
 $17 = ($16 | 8) + $1 | 0;
 $9 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
 $3 = Math_imul($21, 48);
 $6 = ($3 | 8) + $1 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
 $12 = $21 << 4;
 $18 = ($12 | 8) + $1 | 0;
 $5 = SAFE_HEAP_LOAD_f64_8_8($18, 0);
 $11 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $16 = $1 + $16 | 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
 $4 = $11 + $7;
 $12 = $1 + $12 | 0;
 $8 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
 $3 = $1 + $3 | 0;
 $13 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
 $14 = $8 + $13;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $4 + $14);
 $15 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $19 = $9 + $15;
 $20 = $5 + $10;
 SAFE_HEAP_STORE_f64_8_8($1, 8, $19 + $20);
 SAFE_HEAP_STORE_f64_8_8($12, 0, $4 - $14);
 SAFE_HEAP_STORE_f64_8_8($18, 0, $19 - $20);
 $11 = $11 - $7;
 $10 = $5 - $10;
 SAFE_HEAP_STORE_f64_8_8($16, 0, $11 - $10);
 $9 = $15 - $9;
 $5 = $8 - $13;
 SAFE_HEAP_STORE_f64_8_8($17, 0, $9 + $5);
 SAFE_HEAP_STORE_f64_8_8($3, 0, $11 + $10);
 SAFE_HEAP_STORE_f64_8_8($6, 0, $9 - $5);
 $30 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
 if (($0 | 0) >= 24) {
  $0 = $21 << 1;
  $17 = 0;
  $16 = 2;
  while (1) {
   $3 = ($17 << 3) + $2 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($3 + 48 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f64_8_8($3 + 56 | 0, 0);
   $17 = $17 + 4 | 0;
   $5 = SAFE_HEAP_LOAD_f64_8_8(($17 << 3) + $2 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f64_8_8($3 + 40 | 0, 0);
   $3 = $0 + $16 | 0;
   $6 = $3 << 3;
   $12 = ($6 | 8) + $1 | 0;
   $7 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $3 = $0 + $3 | 0;
   $18 = $3 + $0 << 3;
   $23 = ($18 | 8) + $1 | 0;
   $4 = SAFE_HEAP_LOAD_f64_8_8($23, 0);
   $22 = $16 << 3;
   $24 = ($22 | 8) + $1 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
   $3 = $3 << 3;
   $25 = ($3 | 8) + $1 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $22 = $1 + $22 | 0;
   $14 = SAFE_HEAP_LOAD_f64_8_8($22, 0);
   $3 = $1 + $3 | 0;
   $15 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
   $19 = $14 + $15;
   $6 = $1 + $6 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
   $18 = $1 + $18 | 0;
   $26 = SAFE_HEAP_LOAD_f64_8_8($18, 0);
   $27 = $20 + $26;
   SAFE_HEAP_STORE_f64_8_8($22, 0, $19 + $27);
   $28 = $8 + $13;
   $29 = $7 + $4;
   SAFE_HEAP_STORE_f64_8_8($24, 0, $28 + $29);
   SAFE_HEAP_STORE_f64_8_8($6, 0, $19 - $27);
   SAFE_HEAP_STORE_f64_8_8($12, 0, $28 - $29);
   $14 = $14 - $15;
   $7 = $7 - $4;
   $4 = $14 - $7;
   $8 = $8 - $13;
   $13 = $20 - $26;
   $15 = $8 + $13;
   SAFE_HEAP_STORE_f64_8_8($3, 0, $5 * $4 - $11 * $15);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $5 * $15 + $11 * $4);
   $4 = $8 - $13;
   $7 = $14 + $7;
   SAFE_HEAP_STORE_f64_8_8($18, 0, $10 * $4 + $9 * $7);
   SAFE_HEAP_STORE_f64_8_8($23, 0, $9 * $4 - $10 * $7);
   $3 = $0 - $16 | 0;
   $6 = $3 + $0 | 0;
   $12 = $6 + $0 | 0;
   $18 = $12 << 3;
   $23 = ($18 | 8) + $1 | 0;
   $7 = SAFE_HEAP_LOAD_f64_8_8($23, 0);
   $3 = $3 << 3;
   $22 = ($3 | 8) + $1 | 0;
   $4 = SAFE_HEAP_LOAD_f64_8_8($22, 0);
   $12 = $0 + $12 << 3;
   $24 = ($12 | 8) + $1 | 0;
   $8 = SAFE_HEAP_LOAD_f64_8_8($24, 0);
   $6 = $6 << 3;
   $25 = ($6 | 8) + $1 | 0;
   $13 = SAFE_HEAP_LOAD_f64_8_8($25, 0);
   $3 = $1 + $3 | 0;
   $31 = $3;
   $14 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
   $3 = $1 + $18 | 0;
   $15 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
   $19 = $14 + $15;
   $6 = $1 + $6 | 0;
   $20 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
   $12 = $1 + $12 | 0;
   $26 = SAFE_HEAP_LOAD_f64_8_8($12, 0);
   $27 = $20 + $26;
   SAFE_HEAP_STORE_f64_8_8($31, 0, $19 + $27);
   $28 = $4 + $7;
   $29 = $13 + $8;
   SAFE_HEAP_STORE_f64_8_8($22, 0, $28 + $29);
   SAFE_HEAP_STORE_f64_8_8($6, 0, $19 - $27);
   SAFE_HEAP_STORE_f64_8_8($25, 0, $28 - $29);
   $14 = $14 - $15;
   $8 = $13 - $8;
   $13 = $14 - $8;
   $7 = $4 - $7;
   $4 = $20 - $26;
   $15 = $7 + $4;
   SAFE_HEAP_STORE_f64_8_8($3, 0, $11 * $13 - $5 * $15);
   SAFE_HEAP_STORE_f64_8_8($23, 0, $11 * $15 + $5 * $13);
   $5 = $7 - $4;
   $11 = $14 + $8;
   SAFE_HEAP_STORE_f64_8_8($12, 0, $9 * $5 + $10 * $11);
   SAFE_HEAP_STORE_f64_8_8($24, 0, $10 * $5 - $9 * $11);
   $16 = $16 + 2 | 0;
   if (($21 | 0) > ($16 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = Math_imul($21, 40) + $1 | 0;
 $3 = $0 + 8 | 0;
 $9 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
 $16 = Math_imul($21, 56) + $1 | 0;
 $2 = $16 + 8 | 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
 $17 = Math_imul($21, 24) + $1 | 0;
 $6 = $17 + 8 | 0;
 $5 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
 $1 = ($21 << 3) + $1 | 0;
 $11 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $7 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $4 = $11 + $7;
 $8 = SAFE_HEAP_LOAD_f64_8_8($17, 0);
 $13 = SAFE_HEAP_LOAD_f64_8_8($16, 0);
 $14 = $8 + $13;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $4 + $14);
 $1 = $1 + 8 | 0;
 $15 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
 $19 = $9 + $15;
 $20 = $5 + $10;
 SAFE_HEAP_STORE_f64_8_8($1, 0, $19 + $20);
 SAFE_HEAP_STORE_f64_8_8($6, 0, $19 - $20);
 SAFE_HEAP_STORE_f64_8_8($17, 0, $4 - $14);
 $9 = $15 - $9;
 $4 = $8 - $13;
 $8 = $9 + $4;
 $11 = $11 - $7;
 $10 = $5 - $10;
 $5 = $11 - $10;
 SAFE_HEAP_STORE_f64_8_8($3, 0, $30 * ($8 + $5));
 SAFE_HEAP_STORE_f64_8_8($0, 0, $30 * ($5 - $8));
 $9 = $9 - $4;
 $10 = $11 + $10;
 $5 = -$30;
 SAFE_HEAP_STORE_f64_8_8($2, 0, ($9 - $10) * $5);
 SAFE_HEAP_STORE_f64_8_8($16, 0, ($9 + $10) * $5);
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 288 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 272, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 280, $1);
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 224 | 0, $3, $0 + 240 | 0, $0 + 239 | 0, $0 + 238 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 204, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 28, $0 + 32 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 23, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 22, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 280 | 0, $0 + 272 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 204) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 204, $2 + $1 | 0);
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 280 | 0), $0 + 23 | 0, $0 + 22 | 0, $1, $0 + 204 | 0, SAFE_HEAP_LOAD_i32_1_1($0, 239), SAFE_HEAP_LOAD_i32_1_1($0, 238), $0 + 224 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 240 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 280 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 224 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 23) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
  if (($2 - ($0 + 32 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 28, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 24));
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 204), $4);
 SAFE_HEAP_STORE_i64_8_8($5, 0, SAFE_HEAP_LOAD_i64_8_8($0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_8($0, 8), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 224 | 0, $0 + 32 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 28), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 280 | 0, $0 + 272 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 280);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 224 | 0);
 __stack_pointer = $0 + 288 | 0;
 return $1;
}

function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 label$1: {
  label$2: {
   wasm2js_scratch_store_f64(+$0);
   $4 = wasm2js_scratch_load_i32(1) | 0;
   $8 = wasm2js_scratch_load_i32(0) | 0;
   $3 = $4;
   $7 = $4 & 2147483647;
   label$3: {
    if ($7 >>> 0 <= 1074752122) {
     if (($3 & 1048575) == 598523) {
      break label$3;
     }
     if ($7 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6.077100506506192e-11;
       SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
       SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + -6.077100506506192e-11);
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6.077100506506192e-11;
      SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
      SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + 6.077100506506192e-11);
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
      SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + -1.2154201013012384e-10);
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
     SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + 1.2154201013012384e-10);
     $3 = -2;
     break label$1;
    }
    if ($7 >>> 0 <= 1075594811) {
     if ($7 >>> 0 <= 1075183036) {
      if (($7 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
       SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + -1.8231301519518578e-10);
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
      SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + 1.8231301519518578e-10);
      $3 = -3;
      break label$1;
     }
     if (($7 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
      SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + -2.430840202602477e-10);
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
     SAFE_HEAP_STORE_f64_8_8($1, 8, $0 - $2 + 2.430840202602477e-10);
     $3 = -4;
     break label$1;
    }
    if ($7 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $2 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $9 = $0 + $2 * -1.5707963267341256;
   $11 = $2 * 6.077100506506192e-11;
   $0 = $9 - $11;
   SAFE_HEAP_STORE_f64_8_8($1, 0, $0);
   $10 = $7 >>> 20 | 0;
   wasm2js_scratch_store_f64(+$0);
   $5 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $5 = ($10 - ($5 >>> 20 & 2047) | 0) < 17;
   if (Math_abs($2) < 2147483648) {
    $3 = ~~$2;
   } else {
    $3 = -2147483648;
   }
   label$14: {
    if ($5) {
     break label$14;
    }
    $0 = $2 * 6.077100506303966e-11;
    $12 = $9 - $0;
    $11 = $2 * 2.0222662487959506e-21 - ($9 - $12 - $0);
    $0 = $12 - $11;
    SAFE_HEAP_STORE_f64_8_8($1, 0, $0);
    wasm2js_scratch_store_f64(+$0);
    $5 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($10 - ($5 >>> 20 & 2047) | 0) < 50) {
     $9 = $12;
     break label$14;
    }
    $0 = $2 * 2.0222662487111665e-21;
    $9 = $12 - $0;
    $11 = $2 * 8.4784276603689e-32 - ($12 - $9 - $0);
    $0 = $9 - $11;
    SAFE_HEAP_STORE_f64_8_8($1, 0, $0);
   }
   SAFE_HEAP_STORE_f64_8_8($1, 8, $9 - $0 - $11);
   break label$1;
  }
  if ($7 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   SAFE_HEAP_STORE_f64_8_8($1, 0, $0);
   SAFE_HEAP_STORE_f64_8_8($1, 8, $0);
   $3 = 0;
   break label$1;
  }
  $5 = $4 & 1048575;
  $5 = $5 | 1096810496;
  wasm2js_scratch_store_i32(0, $8 | 0);
  wasm2js_scratch_store_i32(1, $5 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $3 = 0;
  $5 = 1;
  while (1) {
   $3 = ($6 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $10 = ~~$0;
   } else {
    $10 = -2147483648;
   }
   $2 = +($10 | 0);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $2);
   $0 = ($0 - $2) * 16777216;
   $3 = 1;
   $10 = $5 & 1;
   $5 = 0;
   if ($10) {
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_f64_8_8($6, 32, $0);
  label$20: {
   if ($0 != 0) {
    $3 = 2;
    break label$20;
   }
   $5 = 1;
   while (1) {
    $3 = $5;
    $5 = $3 - 1 | 0;
    if (SAFE_HEAP_LOAD_f64_8_8(($6 + 16 | 0) + ($3 << 3) | 0, 0) == 0) {
     continue;
    }
    break;
   }
  }
  $3 = __rem_pio2_large($6 + 16 | 0, $6, ($7 >>> 20 | 0) - 1046 | 0, $3 + 1 | 0, 1);
  $0 = SAFE_HEAP_LOAD_f64_8_8($6, 0);
  if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1) {
   SAFE_HEAP_STORE_f64_8_8($1, 0, -$0);
   SAFE_HEAP_STORE_f64_8_8($1, 8, -SAFE_HEAP_LOAD_f64_8_8($6, 8));
   $3 = 0 - $3 | 0;
   break label$1;
  }
  SAFE_HEAP_STORE_f64_8_8($1, 0, $0);
  SAFE_HEAP_STORE_f64_8_8($1, 8, SAFE_HEAP_LOAD_f64_8_8($6, 8));
 }
 __stack_pointer = $6 + 48 | 0;
 return $3;
}

function std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 label$1: {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
   SAFE_HEAP_STORE_i32_4_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
   std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   SAFE_HEAP_STORE_i32_1_1($3, 0, std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0));
   SAFE_HEAP_STORE_i32_1_1($4, 0, std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0));
   std____2__moneypunct_char_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
   break label$1;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($1);
  std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($10, $0);
  SAFE_HEAP_STORE_i32_4_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
  std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  SAFE_HEAP_STORE_i32_1_1($3, 0, std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0));
  SAFE_HEAP_STORE_i32_1_1($4, 0, std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0));
  std____2__moneypunct_char_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0);
 }
 SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i64_8_8($5, 0, unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 368 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 352, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 360, $1);
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 200 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 180, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 7, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 6, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 360 | 0, $0 + 352 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 180) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 180, $2 + $1 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 360 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 180 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 220), SAFE_HEAP_LOAD_i32_4_4($0, 216), $0 + 200 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 360 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 200 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 7) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 }
 SAFE_HEAP_STORE_f64_8_8($5, 0, double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, SAFE_HEAP_LOAD_i32_4_4($0, 180), $4));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 200 | 0, $0 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 360 | 0, $0 + 352 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 200 | 0);
 __stack_pointer = $0 + 368 | 0;
 return $1;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 368 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 352, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 360, $1);
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 200 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 180, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 7, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 6, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 360 | 0, $0 + 352 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 180) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 180, $2 + $1 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 360 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 180 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 220), SAFE_HEAP_LOAD_i32_4_4($0, 216), $0 + 200 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 360 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 200 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 7) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 }
 SAFE_HEAP_STORE_f32_4_4($5, 0, float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, SAFE_HEAP_LOAD_i32_4_4($0, 180), $4));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 200 | 0, $0 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 360 | 0, $0 + 352 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 200 | 0);
 __stack_pointer = $0 + 368 | 0;
 return $1;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_2_2($5, 0, unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i64_8_8($5, 0, long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i64_8_8($5, 0, unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 344, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 332), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 352 | 0;
 return $0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 272 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 264, $1);
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 208 | 0, $3, $0 + 224 | 0, $0 + 223 | 0, $0 + 222 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 188, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 7, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 6, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 188, $2 + $1 | 0);
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 188 | 0, SAFE_HEAP_LOAD_i32_1_1($0, 223), SAFE_HEAP_LOAD_i32_1_1($0, 222), $0 + 208 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 208 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 7) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 }
 SAFE_HEAP_STORE_f64_8_8($5, 0, double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, SAFE_HEAP_LOAD_i32_4_4($0, 188), $4));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 208 | 0);
 __stack_pointer = $0 + 272 | 0;
 return $1;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = __stack_pointer - 272 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 264, $1);
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 208 | 0, $3, $0 + 224 | 0, $0 + 223 | 0, $0 + 222 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 188, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 SAFE_HEAP_STORE_i32_1_1($0, 7, 1);
 SAFE_HEAP_STORE_i32_1_1($0, 6, 69);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 188, $2 + $1 | 0);
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 188 | 0, SAFE_HEAP_LOAD_i32_1_1($0, 223), SAFE_HEAP_LOAD_i32_1_1($0, 222), $0 + 208 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 208 | 0)) {
   break label$4;
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 7) & 255)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 }
 SAFE_HEAP_STORE_f32_4_4($5, 0, float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, SAFE_HEAP_LOAD_i32_4_4($0, 188), $4));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 208 | 0);
 __stack_pointer = $0 + 272 | 0;
 return $1;
}

function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $13 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__numpunct_wchar_t___grouping_28_29_20const($10, $13);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  label$2: {
   $8 = $0;
   $6 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0);
   switch ($6 - 43 | 0) {
   case 0:
   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $6 << 24 >> 24);
  $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, $6);
  $8 = $0 + 1 | 0;
 }
 label$3: {
  label$4: {
   $6 = $8;
   if (($2 - $6 | 0) <= 1) {
    break label$4;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 0) | 0) != 48) {
    break label$4;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 1) | 32) != 120) {
    break label$4;
   }
   $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, 48);
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($7, 0, $6);
   $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($8, 1));
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($7, 0, $6);
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$3;
    }
    if (!__isxdigit_l(SAFE_HEAP_LOAD_i32_1_1($6, 0), std____2____cloc_28_29())) {
     break label$3;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($2 >>> 0 <= $6 >>> 0) {
    break label$3;
   }
   if (!__isdigit_l(SAFE_HEAP_LOAD_i32_1_1($6, 0), std____2____cloc_28_29())) {
    break label$3;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 label$7: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $8, $6, SAFE_HEAP_LOAD_i32_4_4($5, 0));
   SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($6 - $8 << 2) | 0);
   break label$7;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $15 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($13);
  $7 = $8;
  while (1) {
   if ($6 >>> 0 <= $7 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($8 - $0 << 2) + $3 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
    break label$7;
   }
   label$11: {
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12), 0) | 0) < 1) {
     break label$11;
    }
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12), 0) | 0) != ($9 | 0)) {
     break label$11;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $9 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $15);
    $12 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) - 1 >>> 0 > $12 >>> 0) + $12 | 0;
    $9 = 0;
   }
   $16 = std____2__ctype_wchar_t___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($7, 0));
   $14 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $14 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($14, 0, $16);
   $7 = $7 + 1 | 0;
   $9 = $9 + 1 | 0;
   continue;
  }
 }
 label$12: {
  label$13: {
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$13;
    }
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
    if (($7 | 0) != 46) {
     $7 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $7 << 24 >> 24);
     $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $9 + 4 | 0);
     SAFE_HEAP_STORE_i32_4_4($9, 0, $7);
     $6 = $6 + 1 | 0;
     continue;
    }
    break;
   }
   $9 = std____2__numpunct_wchar_t___decimal_point_28_29_20const($13);
   $12 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   $7 = $12 + 4 | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($12, 0, $9);
   $6 = $6 + 1 | 0;
   break label$12;
  }
  $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
 }
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $6, $2, $7);
 $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($2 - $6 << 2) | 0;
 SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
 SAFE_HEAP_STORE_i32_4_4($4, 0, ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_2_2($5, 0, unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i64_8_8($5, 0, long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1), i64toi32_i32$HIGH_BITS);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 label$1: {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($2);
   label$3: {
    if ($1) {
     std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($10, $0);
     SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
     std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$3;
    }
    std____2__moneypunct_wchar_t_2c_20true___pos_format_28_29_20const($10, $0);
    SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($10, $0);
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   SAFE_HEAP_STORE_i32_4_4($4, 0, std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0));
   SAFE_HEAP_STORE_i32_4_4($5, 0, std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0));
   std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0);
   break label$1;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($2);
  label$5: {
   if ($1) {
    std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($10, $0);
    SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($10, $0);
    break label$5;
   }
   std____2__moneypunct_wchar_t_2c_20false___pos_format_28_29_20const($10, $0);
   SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
   std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($10, $0);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  SAFE_HEAP_STORE_i32_4_4($4, 0, std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0));
  SAFE_HEAP_STORE_i32_4_4($5, 0, std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0));
  std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0);
 }
 SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 264, $1);
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 188, $0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 188, $7 + $0 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, SAFE_HEAP_LOAD_i32_1_1($6, 255), $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$4;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$4;
  }
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($6, 8));
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($6, 188), $4, $1));
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($6, 12), $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 __stack_pointer = $6 + 272 | 0;
 return $0;
}

function $28anonymous_20namespace_29__GetWindowedWaveform_28double_20const__2c_20int_2c_20int_2c_20double_2c_20double_2c_20int_2c_20double_2c_20double__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $18 = +($2 | 0);
 $8 = matlab_round($18 * $6 / $3 * .5);
 $11 = $8 << 1;
 $2 = $11 | 1;
 $10 = ($2 & 1073741823) != ($2 | 0) ? -1 : $2 << 2;
 $12 = operator_20new_5b_5d_28unsigned_20long_29($10);
 $17 = operator_20new_5b_5d_28unsigned_20long_29($10);
 $10 = operator_20new_5b_5d_28unsigned_20long_29(($2 & 536870911) != ($2 | 0) ? -1 : $2 << 3);
 $13 = ($8 | 0) < 0;
 label$1: {
  if ($13) {
   break label$1;
  }
  $2 = 0 - $8 | 0;
  $14 = $8 << 1;
  $9 = $14 & 2 | 1;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($2 + $8 << 2) + $12 | 0, 0, $2);
   $2 = $2 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
  if ($14 >>> 0 <= 2) {
   break label$1;
  }
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($2 + $8 << 2) + $12 | 0, 0, $2);
   $9 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4(($9 + $8 << 2) + $12 | 0, 0, $9);
   $9 = $2 + 2 | 0;
   SAFE_HEAP_STORE_i32_4_4(($9 + $8 << 2) + $12 | 0, 0, $9);
   $9 = $2 + 3 | 0;
   SAFE_HEAP_STORE_i32_4_4(($9 + $8 << 2) + $12 | 0, 0, $9);
   $2 = $2 + 4 | 0;
   if (($8 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
 }
 $14 = matlab_round($18 * $4 + .001);
 label$4: {
  if ($13) {
   break label$4;
  }
  $13 = $1 - 1 | 0;
  $2 = 0;
  $19 = ($11 | 0) > 0 ? $11 : 0;
  $8 = 0;
  if (($11 | 0) >= 1) {
   $15 = $19;
   while (1) {
    $9 = $8 << 2;
    $20 = $17 + $9 | 0;
    $16 = SAFE_HEAP_LOAD_i32_4_4($9 + $12 | 0, 0) + $14 | 0;
    $16 = ($16 | 0) > 0 ? $16 : 0;
    SAFE_HEAP_STORE_i32_4_4($20, 0, ($1 | 0) > ($16 | 0) ? $16 : $13);
    $9 = $9 | 4;
    $16 = $17 + $9 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($9 + $12 | 0, 0) + $14 | 0;
    $9 = ($9 | 0) > 0 ? $9 : 0;
    SAFE_HEAP_STORE_i32_4_4($16, 0, ($1 | 0) > ($9 | 0) ? $9 : $13);
    $8 = $8 + 2 | 0;
    $15 = $15 - 2 | 0;
    if ($15) {
     continue;
    }
    break;
   }
  }
  $9 = $19 | 1;
  $8 = $8 << 2;
  $15 = $17 + $8 | 0;
  $8 = SAFE_HEAP_LOAD_i32_4_4($8 + $12 | 0, 0) + $14 | 0;
  $8 = ($8 | 0) > 0 ? $8 : 0;
  SAFE_HEAP_STORE_i32_4_4($15, 0, ($1 | 0) > ($8 | 0) ? $8 : $13);
  if (($5 | 0) == 1) {
   while (1) {
    $1 = ($2 << 3) + $10 | 0;
    $4 = +(SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $12 | 0, 0) | 0);
    SAFE_HEAP_STORE_f64_8_8($1, 0, cos(($4 + $4) / $6 / $18 * 3.141592653589793 * $3) * .5 + .5);
    $2 = $2 + 1 | 0;
    if (($9 | 0) != ($2 | 0)) {
     continue;
    }
    break label$4;
   }
  }
  while (1) {
   $4 = +(SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $12 | 0, 0) | 0);
   $4 = ($4 + $4) / $6 / $18 * 3.141592653589793 * $3;
   $21 = cos($4 + $4);
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $10 | 0, 0, cos($4) * .5 + .42 + $21 * .08);
   $2 = $2 + 1 | 0;
   if (($9 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = 0;
 label$10: {
  if (($11 | 0) < 0) {
   break label$10;
  }
  $9 = $11 | 1;
  while (1) {
   $8 = $2 << 3;
   SAFE_HEAP_STORE_f64_8_8($8 + $7 | 0, 0, SAFE_HEAP_LOAD_f64_8_8((SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $17 | 0, 0) << 3) + $0 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0) + randn() * 1e-12);
   $2 = $2 + 1 | 0;
   if (($9 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  $2 = 0;
  if (($11 | 0) < 0) {
   break label$10;
  }
  $4 = 0;
  $3 = 0;
  if ($11 >>> 0 >= 3) {
   $1 = $11 & -4;
   while (1) {
    $8 = $2 << 3;
    $4 = $4 + SAFE_HEAP_LOAD_f64_8_8($10 + $8 | 0, 0);
    $14 = $8 | 8;
    $4 = $4 + SAFE_HEAP_LOAD_f64_8_8($14 + $10 | 0, 0);
    $13 = $8 | 16;
    $4 = $4 + SAFE_HEAP_LOAD_f64_8_8($13 + $10 | 0, 0);
    $15 = $8 | 24;
    $4 = $4 + SAFE_HEAP_LOAD_f64_8_8($15 + $10 | 0, 0);
    $3 = $3 + SAFE_HEAP_LOAD_f64_8_8($7 + $8 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($7 + $14 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($7 + $13 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($7 + $15 | 0, 0);
    $2 = $2 + 4 | 0;
    $1 = $1 - 4 | 0;
    if ($1) {
     continue;
    }
    break;
   }
  }
  $8 = $9 & 3;
  while (1) {
   $9 = $2 << 3;
   $4 = $4 + SAFE_HEAP_LOAD_f64_8_8($10 + $9 | 0, 0);
   $3 = $3 + SAFE_HEAP_LOAD_f64_8_8($7 + $9 | 0, 0);
   $2 = $2 + 1 | 0;
   $8 = $8 - 1 | 0;
   if ($8) {
    continue;
   }
   break;
  }
  $2 = 0;
  if (($11 | 0) < 0) {
   break label$10;
  }
  $4 = $3 / $4;
  if ($11) {
   while (1) {
    $8 = $2 << 3;
    $9 = $8 + $7 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $4 * SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0));
    $8 = $8 | 8;
    $9 = $8 + $7 | 0;
    SAFE_HEAP_STORE_f64_8_8($9, 0, SAFE_HEAP_LOAD_f64_8_8($9, 0) - $4 * SAFE_HEAP_LOAD_f64_8_8($8 + $10 | 0, 0));
    $2 = $2 + 2 | 0;
    $11 = $11 - 2 | 0;
    if ($11) {
     continue;
    }
    break;
   }
  }
  $2 = $2 << 3;
  $8 = $7 + $2 | 0;
  SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) - $4 * SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0));
 }
 operator_20delete_5b_5d_28void__29($12);
 operator_20delete_5b_5d_28void__29($17);
 operator_20delete_5b_5d_28void__29($10);
}

function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $13 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 std____2__numpunct_char___grouping_28_29_20const($10, $13);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  label$2: {
   $8 = $0;
   $6 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0);
   switch ($6 - 43 | 0) {
   case 0:
   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  $6 = std____2__ctype_char___widen_28char_29_20const($11, $6 << 24 >> 24);
  $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
  SAFE_HEAP_STORE_i32_1_1($7, 0, $6);
  $8 = $0 + 1 | 0;
 }
 label$3: {
  label$4: {
   $6 = $8;
   if (($2 - $6 | 0) <= 1) {
    break label$4;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 0) | 0) != 48) {
    break label$4;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 1) | 32) != 120) {
    break label$4;
   }
   $6 = std____2__ctype_char___widen_28char_29_20const($11, 48);
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($7, 0, $6);
   $6 = std____2__ctype_char___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($8, 1));
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($7, 0, $6);
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$3;
    }
    if (!__isxdigit_l(SAFE_HEAP_LOAD_i32_1_1($6, 0), std____2____cloc_28_29())) {
     break label$3;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($2 >>> 0 <= $6 >>> 0) {
    break label$3;
   }
   if (!__isdigit_l(SAFE_HEAP_LOAD_i32_1_1($6, 0), std____2____cloc_28_29())) {
    break label$3;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 label$7: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($11, $8, $6, SAFE_HEAP_LOAD_i32_4_4($5, 0));
   SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($6 - $8 | 0) | 0);
   break label$7;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $15 = std____2__numpunct_char___thousands_sep_28_29_20const($13);
  $7 = $8;
  while (1) {
   if ($6 >>> 0 <= $7 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($8 - $0 | 0) + $3 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
    break label$7;
   }
   label$11: {
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12), 0) | 0) < 1) {
     break label$11;
    }
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12), 0) | 0) != ($9 | 0)) {
     break label$11;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $9 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($9, 0, $15);
    $12 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) - 1 >>> 0 > $12 >>> 0) + $12 | 0;
    $9 = 0;
   }
   $16 = std____2__ctype_char___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($7, 0));
   $14 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $14 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($14, 0, $16);
   $7 = $7 + 1 | 0;
   $9 = $9 + 1 | 0;
   continue;
  }
 }
 while (1) {
  label$13: {
   $8 = $11;
   if ($2 >>> 0 > $6 >>> 0) {
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
    if (($7 | 0) != 46) {
     break label$13;
    }
    $7 = std____2__numpunct_char___decimal_point_28_29_20const($13);
    $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $9 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($9, 0, $7);
    $6 = $6 + 1 | 0;
   }
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($8, $6, $2, SAFE_HEAP_LOAD_i32_4_4($5, 0));
   $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($2 - $6 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
   SAFE_HEAP_STORE_i32_4_4($4, 0, ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   __stack_pointer = $10 + 16 | 0;
   return;
  }
  $7 = std____2__ctype_char___widen_28char_29_20const($11, $7 << 24 >> 24);
  $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 0, $9 + 1 | 0);
  SAFE_HEAP_STORE_i32_1_1($9, 0, $7);
  $6 = $6 + 1 | 0;
  continue;
 }
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = __stack_pointer - 352 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 336, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 344, $1);
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0), 13008, 13034, $0 + 224 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 188, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 344 | 0, $0 + 336 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 188, $6 + $1 | 0);
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 344 | 0), 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $2, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 344 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, SAFE_HEAP_LOAD_i32_4_4($0, 188) - $1 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
 $6 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $6, 1410, $0) | 0) != 1) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 344 | 0, $0 + 336 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 __stack_pointer = $0 + 352 | 0;
 return $1 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
 $8 = __stack_pointer - 32 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
 SAFE_HEAP_STORE_i32_4_4($8, 24, $1);
 std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($8 + 8 | 0);
 std____2__locale___locale_28_29($8 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $2 = 0;
 label$1: {
  while (1) {
   if (($6 | 0) == ($7 | 0) | $2) {
    break label$1;
   }
   label$3: {
    if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
     break label$3;
    }
    label$4: {
     if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_4_4($6, 0), 0) | 0) == 37) {
      $2 = $6 + 4 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$3;
      }
      $10 = 0;
      $9 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_4_4($2, 0), 0);
      label$6: {
       if (!(($9 | 0) == 69 | ($9 & 255) == 48)) {
        $11 = $9;
        $2 = $6;
        break label$6;
       }
       $6 = $6 + 8 | 0;
       if (($7 | 0) == ($6 | 0)) {
        break label$3;
       }
       $11 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_4_4($6, 0), 0);
       $10 = $9;
      }
      SAFE_HEAP_STORE_i32_4_4($8, 24, (wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4($8, 24), 
      wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 16), wasm2js_i32$4 = $3, wasm2js_i32$5 = $4, 
      wasm2js_i32$6 = $5, wasm2js_i32$7 = $11, wasm2js_i32$8 = $10, wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0, 
      FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$6 | 0, wasm2js_i32$7 | 0, wasm2js_i32$8 | 0) | 0));
      $6 = $2 + 8 | 0;
      break label$4;
     }
     if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, SAFE_HEAP_LOAD_i32_4_4($6, 0))) {
      while (1) {
       label$10: {
        $6 = $6 + 4 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$10;
        }
        if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, SAFE_HEAP_LOAD_i32_4_4($6, 0))) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
        break label$4;
       }
       if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0))) {
        break label$4;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
       continue;
      }
     }
     if ((std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($1, SAFE_HEAP_LOAD_i32_4_4($6, 0)) | 0)) {
      $6 = $6 + 4 | 0;
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
      break label$4;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $6 = SAFE_HEAP_LOAD_i32_4_4($8, 24);
 __stack_pointer = $8 + 32 | 0;
 return $6;
}

function WorldNativeIO__DisplayInformation_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = $4 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 1479, 16);
 std____2__ios_base__getloc_28_29_20const($5, $3 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 0) - 12 | 0, 0) | 0);
 $5 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 26316);
 $5 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 0), 28) | 0]($5, 10) | 0;
 std____2__locale___locale_28_29($4 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $5);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $5 = $4 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2961, 11), $0), 2919, 4), $1), 1261, 4);
 std____2__ios_base__getloc_28_29_20const($5, $3 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 0) - 12 | 0, 0) | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 26316);
 $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($1, 10) | 0;
 std____2__locale___locale_28_29($4 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $1 = $4 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2933, 7), $2), 1969, 8);
 std____2__ios_base__getloc_28_29_20const($1, $3 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 0) - 12 | 0, 0) | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 26316);
 $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($1, 10) | 0;
 std____2__locale___locale_28_29($4 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $1 = $4 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28double_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(30368, 2933, 7), +($2 | 0) / +($0 | 0)), 1978, 6);
 std____2__ios_base__getloc_28_29_20const($1, $3 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 0) - 12 | 0, 0) | 0);
 $2 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 26316);
 $2 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0), 28) | 0]($2, 10) | 0;
 std____2__locale___locale_28_29($4 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $2);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 __stack_pointer = $4 + 16 | 0;
}

function try_realloc_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $2 = $6 & -8;
 label$1: {
  if (!($6 & 3)) {
   if ($1 >>> 0 < 256) {
    return 0;
   }
   if ($1 + 4 >>> 0 <= $2 >>> 0) {
    $3 = $0;
    if ($2 - $1 >>> 0 <= SAFE_HEAP_LOAD_i32_4_4(0, 31796) << 1 >>> 0) {
     break label$1;
    }
   }
   return 0;
  }
  $5 = $0 + $2 | 0;
  label$5: {
   if ($1 >>> 0 <= $2 >>> 0) {
    $2 = $2 - $1 | 0;
    if ($2 >>> 0 < 16) {
     break label$5;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $1 | 2);
    $1 = $0 + $1 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 4, $2 | 3);
    SAFE_HEAP_STORE_i32_4_4($5, 4, SAFE_HEAP_LOAD_i32_4_4($5, 4) | 1);
    dispose_chunk($1, $2);
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4(0, 31340) | 0) == ($5 | 0)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31328) + $2 | 0;
    if ($2 >>> 0 <= $1 >>> 0) {
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $1 | 2);
    $6 = $0 + $1 | 0;
    $1 = $2 - $1 | 0;
    SAFE_HEAP_STORE_i32_4_4($6, 4, $1 | 1);
    SAFE_HEAP_STORE_i32_4_4(0, 31328, $1);
    SAFE_HEAP_STORE_i32_4_4(0, 31340, $6);
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4(0, 31336) | 0) == ($5 | 0)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 31324) + $2 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     break label$1;
    }
    $3 = $2 - $1 | 0;
    label$9: {
     if ($3 >>> 0 >= 16) {
      SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $1 | 2);
      $1 = $0 + $1 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 4, $3 | 1);
      $2 = $0 + $2 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
      SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) & -2);
      break label$9;
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $2 | 2);
     $1 = $0 + $2 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) | 1);
     $3 = 0;
     $1 = 0;
    }
    SAFE_HEAP_STORE_i32_4_4(0, 31336, $1);
    SAFE_HEAP_STORE_i32_4_4(0, 31324, $3);
    break label$5;
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
   if ($4 & 2) {
    break label$1;
   }
   $7 = ($4 & -8) + $2 | 0;
   if ($7 >>> 0 < $1 >>> 0) {
    break label$1;
   }
   $10 = $7 - $1 | 0;
   label$11: {
    if ($4 >>> 0 <= 255) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
     $8 = $4 >>> 3 | 0;
     $4 = ($8 << 3) + 31356 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
     if (($3 | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 31316, SAFE_HEAP_LOAD_i32_4_4(0, 31316) & __wasm_rotl_i32(-2, $8));
      break label$11;
     }
     SAFE_HEAP_STORE_i32_4_4($2, 12, $3);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
     break label$11;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
    $4 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
    label$14: {
     if (($5 | 0) != ($4 | 0)) {
      SAFE_HEAP_LOAD_i32_4_4(0, 31332);
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
      SAFE_HEAP_STORE_i32_4_4($2, 12, $4);
      SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
      break label$14;
     }
     label$16: {
      $2 = $5 + 20 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      if ($3) {
       break label$16;
      }
      $2 = $5 + 16 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      if ($3) {
       break label$16;
      }
      $4 = 0;
      break label$14;
     }
     while (1) {
      $8 = $2;
      $4 = $3;
      $2 = $4 + 20 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      if ($3) {
       continue;
      }
      $2 = $4 + 16 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
      if ($3) {
       continue;
      }
      break;
     }
     SAFE_HEAP_STORE_i32_4_4($8, 0, 0);
    }
    if (!$9) {
     break label$11;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
    $2 = ($3 << 2) + 31620 | 0;
    label$18: {
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
      if ($4) {
       break label$18;
      }
      SAFE_HEAP_STORE_i32_4_4(0, 31320, SAFE_HEAP_LOAD_i32_4_4(0, 31320) & __wasm_rotl_i32(-2, $3));
      break label$11;
     }
     SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0) == ($5 | 0) ? 16 : 20) + $9 | 0, 0, $4);
     if (!$4) {
      break label$11;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($4, 24, $9);
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
    if ($2) {
     SAFE_HEAP_STORE_i32_4_4($4, 16, $2);
     SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
    if (!$2) {
     break label$11;
    }
    SAFE_HEAP_STORE_i32_4_4($4 + 20 | 0, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
   }
   if ($10 >>> 0 <= 15) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $7 | 2);
    $1 = $0 + $7 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) | 1);
    break label$5;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $6 & 1 | $1 | 2);
   $1 = $0 + $1 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 4, $10 | 3);
   $2 = $0 + $7 | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
   dispose_chunk($1, $10);
  }
  $3 = $0;
 }
 return $3;
}

function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 label$1: {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($2);
   label$3: {
    if ($1) {
     std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
     SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
     std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$3;
    }
    std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
    SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($10, $0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   SAFE_HEAP_STORE_i32_1_1($4, 0, std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0));
   SAFE_HEAP_STORE_i32_1_1($5, 0, std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0));
   std____2__moneypunct_char_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
   break label$1;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($2);
  label$5: {
   if ($1) {
    std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($10, $0);
    SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($10, $0);
    break label$5;
   }
   std____2__moneypunct_char_2c_20false___pos_format_28_29_20const($10, $0);
   SAFE_HEAP_STORE_i32_4_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
   std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($10, $0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  SAFE_HEAP_STORE_i32_1_1($4, 0, std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0));
  SAFE_HEAP_STORE_i32_1_1($5, 0, std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0));
  std____2__moneypunct_char_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0);
 }
 SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
 __stack_pointer = $10 + 16 | 0;
}

function cftfsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 label$1: {
  if (($0 | 0) >= 9) {
   if (($0 | 0) >= 33) {
    cftf1st_28int_2c_20double__2c_20double__29($0, $1, ($3 - ($0 >>> 2 | 0) << 3) + $4 | 0);
    if (($0 | 0) >= 513) {
     cftrec4_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $3, $4);
     break label$1;
    }
    if (($0 | 0) >= 129) {
     cftleaf_28int_2c_20int_2c_20double__2c_20int_2c_20double__29($0, 1, $1, $3, $4);
     break label$1;
    }
    cftfx41_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $3, $4);
    break label$1;
   }
   if (($0 | 0) == 32) {
    cftf161_28double__2c_20double__29($1, (($3 << 3) + $4 | 0) + -64 | 0);
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 128);
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 136);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 64);
    $8 = SAFE_HEAP_LOAD_f64_8_8($1, 72);
    $9 = SAFE_HEAP_LOAD_f64_8_8($1, 192);
    $10 = SAFE_HEAP_LOAD_f64_8_8($1, 200);
    $11 = SAFE_HEAP_LOAD_f64_8_8($1, 32);
    $12 = SAFE_HEAP_LOAD_f64_8_8($1, 40);
    $13 = SAFE_HEAP_LOAD_f64_8_8($1, 160);
    $14 = SAFE_HEAP_LOAD_f64_8_8($1, 168);
    $15 = SAFE_HEAP_LOAD_f64_8_8($1, 224);
    $16 = SAFE_HEAP_LOAD_f64_8_8($1, 232);
    $17 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    $18 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    $19 = SAFE_HEAP_LOAD_f64_8_8($1, 80);
    $20 = SAFE_HEAP_LOAD_f64_8_8($1, 88);
    $21 = SAFE_HEAP_LOAD_f64_8_8($1, 208);
    $22 = SAFE_HEAP_LOAD_f64_8_8($1, 216);
    $23 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
    $24 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
    $25 = SAFE_HEAP_LOAD_f64_8_8($1, 176);
    $26 = SAFE_HEAP_LOAD_f64_8_8($1, 184);
    $27 = SAFE_HEAP_LOAD_f64_8_8($1, 112);
    SAFE_HEAP_STORE_f64_8_8($1, 232, SAFE_HEAP_LOAD_f64_8_8($1, 120));
    SAFE_HEAP_STORE_f64_8_8($1, 224, $27);
    SAFE_HEAP_STORE_f64_8_8($1, 216, $26);
    SAFE_HEAP_STORE_f64_8_8($1, 208, $25);
    SAFE_HEAP_STORE_f64_8_8($1, 200, $24);
    SAFE_HEAP_STORE_f64_8_8($1, 192, $23);
    SAFE_HEAP_STORE_f64_8_8($1, 184, $22);
    SAFE_HEAP_STORE_f64_8_8($1, 176, $21);
    SAFE_HEAP_STORE_f64_8_8($1, 168, $20);
    SAFE_HEAP_STORE_f64_8_8($1, 160, $19);
    SAFE_HEAP_STORE_f64_8_8($1, 136, $18);
    SAFE_HEAP_STORE_f64_8_8($1, 128, $17);
    SAFE_HEAP_STORE_f64_8_8($1, 120, $16);
    SAFE_HEAP_STORE_f64_8_8($1, 112, $15);
    SAFE_HEAP_STORE_f64_8_8($1, 88, $14);
    SAFE_HEAP_STORE_f64_8_8($1, 80, $13);
    SAFE_HEAP_STORE_f64_8_8($1, 72, $12);
    SAFE_HEAP_STORE_f64_8_8($1, 64, $11);
    SAFE_HEAP_STORE_f64_8_8($1, 56, $10);
    SAFE_HEAP_STORE_f64_8_8($1, 48, $9);
    SAFE_HEAP_STORE_f64_8_8($1, 40, $8);
    SAFE_HEAP_STORE_f64_8_8($1, 32, $7);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $6);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $5);
    return;
   }
   cftf081_28double__2c_20double__29($1, $4);
   $5 = SAFE_HEAP_LOAD_f64_8_8($1, 104);
   SAFE_HEAP_STORE_f64_8_8($1, 104, SAFE_HEAP_LOAD_f64_8_8($1, 56));
   $6 = SAFE_HEAP_LOAD_f64_8_8($1, 96);
   SAFE_HEAP_STORE_f64_8_8($1, 96, SAFE_HEAP_LOAD_f64_8_8($1, 48));
   $7 = SAFE_HEAP_LOAD_f64_8_8($1, 72);
   SAFE_HEAP_STORE_f64_8_8($1, 72, SAFE_HEAP_LOAD_f64_8_8($1, 24));
   $8 = SAFE_HEAP_LOAD_f64_8_8($1, 64);
   SAFE_HEAP_STORE_f64_8_8($1, 64, SAFE_HEAP_LOAD_f64_8_8($1, 16));
   SAFE_HEAP_STORE_f64_8_8($1, 56, $5);
   SAFE_HEAP_STORE_f64_8_8($1, 48, $6);
   SAFE_HEAP_STORE_f64_8_8($1, 24, $7);
   SAFE_HEAP_STORE_f64_8_8($1, 16, $8);
   return;
  }
  label$7: {
   switch ($0 - 4 | 0) {
   case 4:
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 56);
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 40);
    $8 = $6 - $7;
    $9 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    $10 = SAFE_HEAP_LOAD_f64_8_8($1, 48);
    $11 = $9 - $10;
    SAFE_HEAP_STORE_f64_8_8($1, 56, $8 - $11);
    $12 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $13 = SAFE_HEAP_LOAD_f64_8_8($1, 32);
    $14 = $12 - $13;
    $15 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    $16 = $15 - $5;
    SAFE_HEAP_STORE_f64_8_8($1, 48, $14 + $16);
    $6 = $6 + $7;
    $5 = $15 + $5;
    SAFE_HEAP_STORE_f64_8_8($1, 40, $6 - $5);
    $7 = $12 + $13;
    $9 = $9 + $10;
    SAFE_HEAP_STORE_f64_8_8($1, 32, $7 - $9);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $8 + $11);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $14 - $16);
    SAFE_HEAP_STORE_f64_8_8($1, 8, $6 + $5);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $7 + $9);
    return;

   case 0:
    $5 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
    SAFE_HEAP_STORE_f64_8_8($1, 24, $5 - $6);
    $7 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $8 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
    SAFE_HEAP_STORE_f64_8_8($1, 16, $7 - $8);
    SAFE_HEAP_STORE_f64_8_8($1, 8, $5 + $6);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $7 + $8);
    break;

   default:
    break label$7;
   }
  }
  return;
 }
 bitrv2_28int_2c_20int__2c_20double__29($0, $2, $1);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = __stack_pointer - 272 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 256, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 264, $1);
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0), 13008, 13034, $0 + 224 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 188, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $0 + 16 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 188) | 0) == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 188, $6 + $1 | 0);
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $2, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, SAFE_HEAP_LOAD_i32_4_4($0, 188) - $1 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
 $6 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $6, 1410, $0) | 0) != 1) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 264);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 __stack_pointer = $0 + 272 | 0;
 return $1 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
 $8 = __stack_pointer - 32 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
 SAFE_HEAP_STORE_i32_4_4($8, 24, $1);
 std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($8 + 8 | 0);
 std____2__locale___locale_28_29($8 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $2 = 0;
 label$1: {
  while (1) {
   if (($6 | 0) == ($7 | 0) | $2) {
    break label$1;
   }
   label$3: {
    if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
     break label$3;
    }
    label$4: {
     if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_1_1($6, 0), 0) | 0) == 37) {
      $2 = $6 + 1 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$3;
      }
      $10 = 0;
      $9 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_1_1($2, 0), 0);
      label$6: {
       if (!(($9 | 0) == 69 | ($9 & 255) == 48)) {
        $11 = $9;
        $2 = $6;
        break label$6;
       }
       $6 = $6 + 2 | 0;
       if (($7 | 0) == ($6 | 0)) {
        break label$3;
       }
       $11 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, SAFE_HEAP_LOAD_i32_1_1($6, 0), 0);
       $10 = $9;
      }
      SAFE_HEAP_STORE_i32_4_4($8, 24, (wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4($8, 24), 
      wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 16), wasm2js_i32$4 = $3, wasm2js_i32$5 = $4, 
      wasm2js_i32$6 = $5, wasm2js_i32$7 = $11, wasm2js_i32$8 = $10, wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0, 
      FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$6 | 0, wasm2js_i32$7 | 0, wasm2js_i32$8 | 0) | 0));
      $6 = $2 + 2 | 0;
      break label$4;
     }
     if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, SAFE_HEAP_LOAD_i32_1_1($6, 0))) {
      while (1) {
       label$10: {
        $6 = $6 + 1 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$10;
        }
        if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, SAFE_HEAP_LOAD_i32_1_1($6, 0))) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
        break label$4;
       }
       if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0))) {
        break label$4;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
       continue;
      }
     }
     if ((std____2__ctype_char___toupper_28char_29_20const($1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_char___toupper_28char_29_20const($1, SAFE_HEAP_LOAD_i32_1_1($6, 0)) | 0)) {
      $6 = $6 + 1 | 0;
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
      break label$4;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 2);
 }
 $6 = SAFE_HEAP_LOAD_i32_4_4($8, 24);
 __stack_pointer = $8 + 32 | 0;
 return $6;
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = __stack_pointer - 624 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 608, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 616, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 16, 42);
 $1 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 192 | 0, $4);
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 192 | 0);
 SAFE_HEAP_STORE_i32_1_1($0, 191, 0);
 label$1: {
  if (!std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 616 | 0, $2, $3, $0 + 192 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 191 | 0, $7, $1, $0 + 196 | 0, $0 + 608 | 0)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_1($0, 183, SAFE_HEAP_LOAD_i32_4_1(0, 2684));
  SAFE_HEAP_STORE_i64_8_8($0, 176, SAFE_HEAP_LOAD_i64_8_1(0, 2677), i64toi32_i32$HIGH_BITS);
  std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($7, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 16, 41);
  $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$2: {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 196) - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) >= 393) {
    std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc((SAFE_HEAP_LOAD_i32_4_4($0, 196) - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1) >> 2) + 2 | 0));
    if (!std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7)) {
     break label$2;
    }
    $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 191)) {
    SAFE_HEAP_STORE_i32_1_1($2, 0, 45);
    $2 = $2 + 1 | 0;
   }
   $4 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1);
   while (1) {
    label$6: {
     if (SAFE_HEAP_LOAD_i32_4_4($0, 196) >>> 0 <= $4 >>> 0) {
      SAFE_HEAP_STORE_i32_1_1($2, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($0, 0, $6);
      if ((sscanf($0 + 16 | 0, 1751, $0) | 0) != 1) {
       break label$6;
      }
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
      break label$1;
     }
     SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1(($0 + 176 | 0) + (wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($0 + 128 | 0, wchar_t__20std____2__end_wchar_t_2c_2010ul__28wchar_t_20_28__29_20_5b10ul_5d_29($0 + 128 | 0), $4) - ($0 + 128 | 0) >> 2) | 0, 0));
     $2 = $2 + 1 | 0;
     $4 = $4 + 4 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29($0);
   abort();
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 616 | 0, $0 + 608 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 616);
 std____2__locale___locale_28_29($0 + 192 | 0);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
 __stack_pointer = $0 + 624 | 0;
 return $4 | 0;
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = __stack_pointer - 288 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 272, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 280, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 16, 42);
 $1 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 144 | 0, $4);
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 144 | 0);
 SAFE_HEAP_STORE_i32_1_1($0, 143, 0);
 label$1: {
  if (!std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 280 | 0, $2, $3, $0 + 144 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 143 | 0, $7, $1, $0 + 148 | 0, $0 + 260 | 0)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_1($0, 135, SAFE_HEAP_LOAD_i32_4_1(0, 2684));
  SAFE_HEAP_STORE_i64_8_8($0, 128, SAFE_HEAP_LOAD_i64_8_1(0, 2677), i64toi32_i32$HIGH_BITS);
  std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($7, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 16, 41);
  $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$2: {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 148) - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) >= 99) {
    std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc((SAFE_HEAP_LOAD_i32_4_4($0, 148) - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) + 2 | 0));
    if (!std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7)) {
     break label$2;
    }
    $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
    SAFE_HEAP_STORE_i32_1_1($2, 0, 45);
    $2 = $2 + 1 | 0;
   }
   $4 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1);
   while (1) {
    label$6: {
     if (SAFE_HEAP_LOAD_i32_4_4($0, 148) >>> 0 <= $4 >>> 0) {
      SAFE_HEAP_STORE_i32_1_1($2, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($0, 0, $6);
      if ((sscanf($0 + 16 | 0, 1751, $0) | 0) != 1) {
       break label$6;
      }
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
      break label$1;
     }
     SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1(((char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($0 + 118 | 0, char__20std____2__end_char_2c_2010ul__28char_20_28__29_20_5b10ul_5d_29($0 + 118 | 0), $4) - $0 | 0) + $0 | 0) + 10 | 0, 0));
     $2 = $2 + 1 | 0;
     $4 = $4 + 1 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29($0);
   abort();
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 280 | 0, $0 + 272 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 280);
 std____2__locale___locale_28_29($0 + 144 | 0);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
 __stack_pointer = $0 + 288 | 0;
 return $4 | 0;
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = __stack_pointer - 432 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i64_8_8($8, 424, 37, 0);
 $10 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($8 + 424 | 1, 2044, std____2__ios_base__flags_28_29_20const($2));
 SAFE_HEAP_STORE_i32_4_4($8, 380, $8 + 384 | 0);
 $0 = std____2____cloc_28_29();
 label$1: {
  if ($10) {
   $9 = std____2__ios_base__precision_28_29_20const($2);
   SAFE_HEAP_STORE_i64_8_8($8 + 72 | 0, 0, $6, $7);
   SAFE_HEAP_STORE_i64_8_8($8 - -64 | 0, 0, $4, $5);
   SAFE_HEAP_STORE_i32_4_4($8, 48, $9);
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 384 | 0, 30, $0, $8 + 424 | 0, $8 + 48 | 0);
   break label$1;
  }
  SAFE_HEAP_STORE_i64_8_8($8, 80, $4, $5);
  SAFE_HEAP_STORE_i64_8_8($8, 88, $6, $7);
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 384 | 0, 30, $0, $8 + 424 | 0, $8 + 80 | 0);
 }
 SAFE_HEAP_STORE_i32_4_4($8, 128, 41);
 $12 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 368 | 0, 0, $8 + 128 | 0);
 $11 = $8 + 384 | 0;
 $9 = $11;
 label$3: {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6: {
    if ($10) {
     $9 = std____2__ios_base__precision_28_29_20const($2);
     SAFE_HEAP_STORE_i64_8_8($8 + 24 | 0, 0, $6, $7);
     SAFE_HEAP_STORE_i64_8_8($8 + 16 | 0, 0, $4, $5);
     SAFE_HEAP_STORE_i32_4_4($8, 0, $9);
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 380 | 0, $0, $8 + 424 | 0, $8);
     break label$6;
    }
    SAFE_HEAP_STORE_i64_8_8($8, 32, $4, $5);
    SAFE_HEAP_STORE_i64_8_8($8, 40, $6, $7);
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 380 | 0, $0, $8 + 424 | 0, $8 + 32 | 0);
   }
   if (($0 | 0) == -1) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($12, SAFE_HEAP_LOAD_i32_4_4($8, 380));
   $9 = SAFE_HEAP_LOAD_i32_4_4($8, 380);
  }
  $10 = $0 + $9 | 0;
  $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $10, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 128, 41);
  $9 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 120 | 0, 0, $8 + 128 | 0);
  label$8: {
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 380) | 0) == ($8 + 384 | 0)) {
    $0 = $8 + 128 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 3);
   if (!$0) {
    break label$3;
   }
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($9, $0);
   $11 = SAFE_HEAP_LOAD_i32_4_4($8, 380);
  }
  std____2__ios_base__getloc_28_29_20const($8 + 104 | 0, $2);
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($11, $4, $10, $0, $8 + 116 | 0, $8 + 112 | 0, $8 + 104 | 0);
  std____2__locale___locale_28_29($8 + 104 | 0);
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0, SAFE_HEAP_LOAD_i32_4_4($8, 116), SAFE_HEAP_LOAD_i32_4_4($8, 112), $2, $3);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  __stack_pointer = $8 + 432 | 0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 0), $4)) {
   label$4: {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != ($2 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 20) | 0) != ($2 | 0)) {
      break label$4;
     }
    }
    if (($3 | 0) != 1) {
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 32, 1);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 32, $3);
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 44) | 0) != 4) {
    $5 = $0 + 16 | 0;
    $3 = $5 + (SAFE_HEAP_LOAD_i32_4_4($0, 12) << 3) | 0;
    $9 = $1;
    label$7: {
     label$8: {
      while (1) {
       label$10: {
        if ($3 >>> 0 <= $5 >>> 0) {
         break label$10;
        }
        SAFE_HEAP_STORE_i32_2_2($1, 52, 0);
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
         break label$10;
        }
        label$11: {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 53)) {
          break label$11;
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($1, 52)) {
          $6 = 1;
          if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) == 1) {
           break label$8;
          }
          $7 = 1;
          $8 = 1;
          if (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $6 = $8;
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $6 = $8;
      $5 = 4;
      if (!$7) {
       break label$7;
      }
     }
     $5 = 3;
    }
    SAFE_HEAP_STORE_i32_4_4($9, 44, $5);
    if ($6 & 1) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
   SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 1 | 0);
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
    break label$2;
   }
   SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
   return;
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  $6 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
  if (($5 | 0) < 2) {
   break label$2;
  }
  $6 = ($5 << 3) + $6 | 0;
  $5 = $0 + 24 | 0;
  label$13: {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if (!($0 & 2)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
     break label$13;
    }
   }
   while (1) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
     break label$2;
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) == 1) {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) == 1) {
     break label$2;
    }
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($6 >>> 0 > $5 >>> 0) {
    continue;
   }
   break;
  }
 }
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = __stack_pointer - 256 | 0;
 __stack_pointer = $8;
 SAFE_HEAP_STORE_i64_8_8($8, 248, 37, 0);
 $10 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($8 + 248 | 1, 2044, std____2__ios_base__flags_28_29_20const($2));
 SAFE_HEAP_STORE_i32_4_4($8, 204, $8 + 208 | 0);
 $0 = std____2____cloc_28_29();
 label$1: {
  if ($10) {
   $9 = std____2__ios_base__precision_28_29_20const($2);
   SAFE_HEAP_STORE_i64_8_8($8 + 72 | 0, 0, $6, $7);
   SAFE_HEAP_STORE_i64_8_8($8 - -64 | 0, 0, $4, $5);
   SAFE_HEAP_STORE_i32_4_4($8, 48, $9);
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 208 | 0, 30, $0, $8 + 248 | 0, $8 + 48 | 0);
   break label$1;
  }
  SAFE_HEAP_STORE_i64_8_8($8, 80, $4, $5);
  SAFE_HEAP_STORE_i64_8_8($8, 88, $6, $7);
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 208 | 0, 30, $0, $8 + 248 | 0, $8 + 80 | 0);
 }
 SAFE_HEAP_STORE_i32_4_4($8, 128, 41);
 $12 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 192 | 0, 0, $8 + 128 | 0);
 $11 = $8 + 208 | 0;
 $9 = $11;
 label$3: {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6: {
    if ($10) {
     $9 = std____2__ios_base__precision_28_29_20const($2);
     SAFE_HEAP_STORE_i64_8_8($8 + 24 | 0, 0, $6, $7);
     SAFE_HEAP_STORE_i64_8_8($8 + 16 | 0, 0, $4, $5);
     SAFE_HEAP_STORE_i32_4_4($8, 0, $9);
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 204 | 0, $0, $8 + 248 | 0, $8);
     break label$6;
    }
    SAFE_HEAP_STORE_i64_8_8($8, 32, $4, $5);
    SAFE_HEAP_STORE_i64_8_8($8, 40, $6, $7);
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 204 | 0, $0, $8 + 248 | 0, $8 + 32 | 0);
   }
   if (($0 | 0) == -1) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($12, SAFE_HEAP_LOAD_i32_4_4($8, 204));
   $9 = SAFE_HEAP_LOAD_i32_4_4($8, 204);
  }
  $10 = $0 + $9 | 0;
  $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $10, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 128, 41);
  $9 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 120 | 0, 0, $8 + 128 | 0);
  label$8: {
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 204) | 0) == ($8 + 208 | 0)) {
    $0 = $8 + 128 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 1);
   if (!$0) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($9, $0);
   $11 = SAFE_HEAP_LOAD_i32_4_4($8, 204);
  }
  std____2__ios_base__getloc_28_29_20const($8 + 104 | 0, $2);
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($11, $4, $10, $0, $8 + 116 | 0, $8 + 112 | 0, $8 + 104 | 0);
  std____2__locale___locale_28_29($8 + 104 | 0);
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0, SAFE_HEAP_LOAD_i32_4_4($8, 116), SAFE_HEAP_LOAD_i32_4_4($8, 112), $2, $3);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  __stack_pointer = $8 + 256 | 0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function WorldJSWrapper__W2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $7 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
 $1 = GetAudioLength($7);
 if (!$1) {
  emscripten_log(4, 2707, 0);
  EM_TERM_28_29();
 }
 $5 = $2 + 52 | 0;
 $6 = $2 + 48 | 0;
 $3 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3);
 wavread($7, $5, $6, $3);
 $5 = Wav2World__Wav2World_28double__2c_20int_2c_20int_29($2 + 8 | 0, $3, $1, SAFE_HEAP_LOAD_i32_4_4($2, 52));
 $6 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $6);
 SAFE_HEAP_STORE_i32_4_4($2, 60, $3);
 SAFE_HEAP_STORE_i32_4_4($2, 56, $1);
 $3 = _emval_take_value(3516, $2 + 56 | 0) | 0;
 $0 = _emval_new_cstring(1165) | 0;
 _emval_set_property($6 | 0, $0 | 0, $3 | 0);
 _emval_decref($0 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1313) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 56, SAFE_HEAP_LOAD_i32_4_4($2, 52));
 $0 = _emval_take_value(20676, $2 + 56 | 0) | 0;
 _emval_set_property($6 | 0, $3 | 0, $0 | 0);
 _emval_decref($0 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1256) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 56, SAFE_HEAP_LOAD_i32_4_4($2, 48));
 $0 = _emval_take_value(20676, $2 + 56 | 0) | 0;
 _emval_set_property($6 | 0, $3 | 0, $0 | 0);
 _emval_decref($0 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1640) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 56, $1);
 $1 = _emval_take_value(20676, $2 + 56 | 0) | 0;
 _emval_set_property($6 | 0, $3 | 0, $1 | 0);
 _emval_decref($1 | 0);
 _emval_decref($3 | 0);
 $1 = Wav2World__GetF0_28_29_20const($5);
 $3 = Wav2World__GetF0Length_28_29_20const($5);
 SAFE_HEAP_STORE_i32_4_4($2, 60, $1);
 SAFE_HEAP_STORE_i32_4_4($2, 56, $3);
 $1 = _emval_take_value(3516, $2 + 56 | 0) | 0;
 $3 = _emval_new_cstring(2704) | 0;
 _emval_set_property($6 | 0, $3 | 0, $1 | 0);
 _emval_decref($3 | 0);
 _emval_decref($1 | 0);
 $1 = Wav2World__GetTimeAxis_28_29_20const($5);
 $3 = Wav2World__GetF0Length_28_29_20const($5);
 SAFE_HEAP_STORE_i32_4_4($2, 60, $1);
 SAFE_HEAP_STORE_i32_4_4($2, 56, $3);
 $1 = _emval_take_value(3516, $2 + 56 | 0) | 0;
 $3 = _emval_new_cstring(1293) | 0;
 _emval_set_property($6 | 0, $3 | 0, $1 | 0);
 _emval_decref($3 | 0);
 _emval_decref($1 | 0);
 $3 = Wav2World__GetFFTSize_28_29_20const($5);
 $1 = _emval_new_cstring(1758) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 56, $3);
 $3 = _emval_take_value(20676, $2 + 56 | 0) | 0;
 _emval_set_property($6 | 0, $1 | 0, $3 | 0);
 _emval_decref($3 | 0);
 _emval_decref($1 | 0);
 $3 = ((Wav2World__GetFFTSize_28_29_20const($5) | 0) / 2 | 0) + 1 | 0;
 $9 = Wav2World__GetSP_28_29_20const($5);
 $8 = Wav2World__GetF0Length_28_29_20const($5);
 $7 = _emval_new_array() | 0;
 if (($8 | 0) >= 1) {
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($2, 60, SAFE_HEAP_LOAD_i32_4_4(($4 << 2) + $9 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($2, 56, $3);
   $1 = _emval_take_value(3516, $2 + 56 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 56, $4);
   $0 = _emval_take_value(20676, $2 + 56 | 0) | 0;
   _emval_set_property($7 | 0, $0 | 0, $1 | 0);
   _emval_decref($0 | 0);
   _emval_decref($1 | 0);
   $4 = $4 + 1 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $4 = _emval_new_cstring(1576) | 0;
 _emval_set_property($6 | 0, $4 | 0, $7 | 0);
 _emval_decref($4 | 0);
 _emval_decref($7 | 0);
 $9 = Wav2World__GetAP_28_29_20const($5);
 $8 = Wav2World__GetF0Length_28_29_20const($5);
 $7 = _emval_new_array() | 0;
 if (($8 | 0) >= 1) {
  $4 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($2, 60, SAFE_HEAP_LOAD_i32_4_4(($4 << 2) + $9 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($2, 56, $3);
   $1 = _emval_take_value(3516, $2 + 56 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 56, $4);
   $0 = _emval_take_value(20676, $2 + 56 | 0) | 0;
   _emval_set_property($7 | 0, $0 | 0, $1 | 0);
   _emval_decref($0 | 0);
   _emval_decref($1 | 0);
   $4 = $4 + 1 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $4 = _emval_new_cstring(1033) | 0;
 _emval_set_property($6 | 0, $4 | 0, $7 | 0);
 _emval_decref($4 | 0);
 _emval_decref($7 | 0);
 __stack_pointer = $2 - -64 | 0;
}

function std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  if (!($7 & 4)) {
   break label$1;
  }
  $7 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  if (($1 - $7 | 0) < 3) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 239) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 1) | 0) != 187) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) != 191) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, $7 + 3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
 }
 label$2: {
  label$3: {
   label$4: {
    while (1) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     if (!($1 >>> 0 <= $0 >>> 0 | $3 >>> 0 >= $4 >>> 0)) {
      $10 = 2;
      $7 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
      if ($7 >>> 0 > $6 >>> 0) {
       break label$2;
      }
      $12 = $2;
      label$7: {
       if ($7 << 24 >> 24 >= 0) {
        SAFE_HEAP_STORE_i32_2_2($3, 0, $7);
        $7 = $0 + 1 | 0;
        break label$7;
       }
       if ($7 >>> 0 < 194) {
        break label$2;
       }
       if ($7 >>> 0 <= 223) {
        if (($1 - $0 | 0) < 2) {
         break label$3;
        }
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
        if (($8 & 192) != 128) {
         break label$4;
        }
        $7 = $8 & 63 | $7 << 6 & 1984;
        if ($7 >>> 0 > $6 >>> 0) {
         break label$4;
        }
        SAFE_HEAP_STORE_i32_2_2($3, 0, $7);
        $7 = $0 + 2 | 0;
        break label$7;
       }
       if ($7 >>> 0 <= 239) {
        if (($1 - $0 | 0) < 3) {
         break label$3;
        }
        $9 = SAFE_HEAP_LOAD_i32_1_U_1($0, 2);
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
        label$11: {
         label$12: {
          if (($7 | 0) != 237) {
           if (($7 | 0) != 224) {
            break label$12;
           }
           if (($8 & 224) == 160) {
            break label$11;
           }
           break label$4;
          }
          if (($8 & 224) == 128) {
           break label$11;
          }
          break label$4;
         }
         if (($8 & 192) != 128) {
          break label$4;
         }
        }
        if (($9 & 192) != 128) {
         break label$4;
        }
        $7 = $9 & 63 | (($8 & 63) << 6 | $7 << 12);
        if (($7 & 65535) >>> 0 > $6 >>> 0) {
         break label$4;
        }
        SAFE_HEAP_STORE_i32_2_2($3, 0, $7);
        $7 = $0 + 3 | 0;
        break label$7;
       }
       if ($7 >>> 0 > 244) {
        break label$2;
       }
       $10 = 1;
       if (($1 - $0 | 0) < 4) {
        break label$4;
       }
       $9 = SAFE_HEAP_LOAD_i32_1_U_1($0, 3);
       $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 2);
       $0 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
       label$14: {
        label$15: {
         switch ($7 - 240 | 0) {
         case 0:
          if (($0 + 112 & 255) >>> 0 >= 48) {
           break label$2;
          }
          break label$14;

         case 4:
          if (($0 & 240) != 128) {
           break label$2;
          }
          break label$14;

         default:
          break label$15;
         }
        }
        if (($0 & 192) != 128) {
         break label$2;
        }
       }
       if (($8 & 192) != 128 | ($9 & 192) != 128) {
        break label$2;
       }
       if (($4 - $3 | 0) < 4) {
        break label$4;
       }
       $10 = 2;
       $9 = $9 & 63;
       $11 = $8 << 6;
       $7 = $7 & 7;
       if (($9 | ($11 & 4032 | ($0 << 12 & 258048 | $7 << 18))) >>> 0 > $6 >>> 0) {
        break label$4;
       }
       $10 = $7 << 8;
       $7 = $0 << 2;
       SAFE_HEAP_STORE_i32_2_2($3, 0, ($8 >>> 4 & 3 | ($10 | $7 & 192 | $7 & 60)) + 16320 | 55296);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 2 | 0);
       SAFE_HEAP_STORE_i32_2_2($3, 2, $11 & 960 | $9 | 56320);
       $7 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 4 | 0;
      }
      SAFE_HEAP_STORE_i32_4_4($12, 0, $7);
      $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0) + 2 | 0;
      SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
      continue;
     }
     break;
    }
    $10 = $0 >>> 0 < $1 >>> 0;
   }
   return $10;
  }
  return 1;
 }
 return 2;
}

function fmod($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 wasm2js_scratch_store_f64(+$1);
 $5 = wasm2js_scratch_load_i32(1) | 0;
 $12 = wasm2js_scratch_load_i32(0) | 0;
 $2 = $12;
 $3 = $5 << 1 | $2 >>> 31;
 $9 = $3;
 label$1: {
  $6 = $2 << 1;
  $4 = !($3 | $6);
  $14 = $5;
  $3 = $5;
  $2 = $3 & 2147483647;
  $5 = $12;
  $3 = $5;
  if (!($4 | (($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072))) {
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   $15 = wasm2js_scratch_load_i32(0) | 0;
   $16 = $3;
   $10 = $3 >>> 20 & 2047;
   if (($10 | 0) != 2047) {
    break label$1;
   }
  }
  $1 = $0 * $1;
  return $1 / $1;
 }
 $3 = $15;
 $8 = $3 << 1;
 $2 = $16;
 $4 = $2 << 1 | $3 >>> 31;
 $11 = $4;
 $3 = $4;
 $4 = $9;
 $5 = $8;
 $2 = $6;
 if (($3 | 0) == ($4 | 0) & $5 >>> 0 <= $2 >>> 0 | $3 >>> 0 < $4 >>> 0) {
  $5 = $6;
  $3 = $8;
  $2 = $9;
  $4 = $11;
  return ($5 | 0) == ($3 | 0) & ($2 | 0) == ($4 | 0) ? $0 * 0 : $0;
 }
 $5 = $14;
 $13 = $5 >>> 20 & 2047;
 label$4: {
  if (!$10) {
   $10 = 0;
   $5 = $15;
   $6 = $5 << 12;
   $2 = $16;
   $3 = $2 << 12 | $5 >>> 20;
   $9 = $3;
   if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0) {
    while (1) {
     $10 = $10 - 1 | 0;
     $4 = $6;
     $6 = $4 << 1;
     $2 = $9;
     $3 = $2 << 1 | $4 >>> 31;
     $9 = $3;
     if (($3 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   $2 = $16;
   $5 = $15;
   $4 = 1 - $10 | 0;
   $7 = $4 & 31;
   if (($4 & 63) >>> 0 >= 32) {
    $3 = $5 << $7;
    $6 = 0;
   } else {
    $3 = (1 << $7) - 1 & $5 >>> 32 - $7 | $2 << $7;
    $6 = $5 << $7;
   }
   $2 = $3;
   break label$4;
  }
  $3 = $16;
  $5 = $3 & 1048575;
  $2 = $15;
  $6 = $2;
  $2 = $5 | 1048576;
 }
 $9 = $2;
 label$8: {
  if (!$13) {
   $13 = 0;
   $5 = $12;
   $8 = $5 << 12;
   $2 = $14;
   $3 = $2 << 12 | $5 >>> 20;
   $11 = $3;
   if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0) {
    while (1) {
     $13 = $13 - 1 | 0;
     $4 = $8;
     $8 = $4 << 1;
     $2 = $11;
     $3 = $2 << 1 | $4 >>> 31;
     $11 = $3;
     if (($3 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   $2 = $14;
   $5 = $12;
   $4 = 1 - $13 | 0;
   $7 = $4 & 31;
   if (($4 & 63) >>> 0 >= 32) {
    $3 = $5 << $7;
    $12 = 0;
   } else {
    $3 = (1 << $7) - 1 & $5 >>> 32 - $7 | $2 << $7;
    $12 = $5 << $7;
   }
   $2 = $3;
   break label$8;
  }
  $3 = $14;
  $5 = $3 & 1048575;
  $2 = $12;
  $12 = $2;
  $2 = $5 | 1048576;
 }
 $14 = $2;
 if (($10 | 0) > ($13 | 0)) {
  while (1) {
   $5 = $6;
   $4 = $12;
   $7 = $5 - $4 | 0;
   $8 = $7;
   $2 = $9;
   $3 = $14;
   $5 = $3 + ($5 >>> 0 < $4 >>> 0) | 0;
   $5 = $2 - $5 | 0;
   $11 = $5;
   label$14: {
    if (($5 | 0) < 0) {
     break label$14;
    }
    $6 = $8;
    $4 = $6;
    $2 = $11;
    $9 = $2;
    if ($4 | $2) {
     break label$14;
    }
    return $0 * 0;
   }
   $5 = $6;
   $6 = $5 << 1;
   $4 = $9;
   $2 = $4 << 1 | $5 >>> 31;
   $9 = $2;
   $10 = $10 - 1 | 0;
   if (($13 | 0) < ($10 | 0)) {
    continue;
   }
   break;
  }
  $10 = $13;
 }
 $2 = $9;
 $5 = $14;
 $7 = $5 + ($6 >>> 0 < $12 >>> 0) | 0;
 $7 = $2 - $7 | 0;
 $11 = $7;
 $4 = $6;
 $3 = $4 - $12 | 0;
 $8 = $3;
 label$15: {
  if (($7 | 0) < 0) {
   break label$15;
  }
  $6 = $8;
  $2 = $11;
  $9 = $2;
  if ($6 | $2) {
   break label$15;
  }
  return $0 * 0;
 }
 label$16: {
  if ($9 >>> 0 > 1048575) {
   $8 = $6;
   $4 = $9;
   $11 = $4;
   break label$16;
  }
  while (1) {
   $10 = $10 - 1 | 0;
   $4 = $9;
   $13 = $4 >>> 0 < 524288;
   $2 = $6;
   $8 = $2 << 1;
   $4 = $4 << 1 | $2 >>> 31;
   $11 = $4;
   $6 = $8;
   $9 = $4;
   if ($13) {
    continue;
   }
   break;
  }
 }
 $4 = $16;
 $2 = $4 & -2147483648;
 $6 = 0;
 $9 = $2;
 if (($10 | 0) >= 1) {
  $2 = $11;
  $3 = 1048576;
  $3 = $2 - $3 | 0;
  $5 = $3;
  $4 = $8;
  $3 = $4;
  $8 = $3 | 0;
  $2 = $10;
  $4 = $2 << 20;
  $2 = $4;
  $4 = $5;
  $2 = $2 | $4;
  $3 = $2;
 } else {
  $2 = $11;
  $4 = $8;
  $3 = 0;
  $5 = 1 - $10 | 0;
  $7 = $5 & 31;
  if (($5 & 63) >>> 0 >= 32) {
   $8 = $2 >>> $7 | 0;
  } else {
   $3 = $2 >>> $7 | 0;
   $8 = ((1 << $7) - 1 & $2) << 32 - $7 | $4 >>> $7;
  }
 }
 $11 = $3;
 $3 = $9;
 $4 = $11;
 $4 = $3 | $4;
 $2 = $6;
 wasm2js_scratch_store_i32(0, $2 | $8);
 wasm2js_scratch_store_i32(1, $4 | 0);
 return +wasm2js_scratch_load_f64();
}

function std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  if ($7 & 2) {
   $0 = 1;
   if (($4 - $3 | 0) < 3) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 239);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 187);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 191);
  }
  $7 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  label$3: {
   while (1) {
    if ($1 >>> 0 <= $7 >>> 0) {
     $0 = 0;
     break label$1;
    }
    $0 = 2;
    $3 = SAFE_HEAP_LOAD_i32_2_U_2($7, 0);
    if ($6 >>> 0 < $3 >>> 0) {
     break label$1;
    }
    label$6: {
     label$7: {
      if ($3 >>> 0 <= 127) {
       $0 = 1;
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       if (($4 - $7 | 0) < 1) {
        break label$1;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3);
       break label$7;
      }
      if ($3 >>> 0 <= 2047) {
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       if (($4 - $7 | 0) < 2) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 | 192);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
       break label$7;
      }
      if ($3 >>> 0 <= 55295) {
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       if (($4 - $7 | 0) < 3) {
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 12 | 224);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 & 63 | 128);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
       break label$7;
      }
      if ($3 >>> 0 <= 56319) {
       $0 = 1;
       if (($1 - $7 | 0) < 4) {
        break label$1;
       }
       $8 = SAFE_HEAP_LOAD_i32_2_U_2($7, 2);
       if (($8 & 64512) != 56320) {
        break label$6;
       }
       if (($4 - SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) < 4) {
        break label$1;
       }
       $0 = $3 & 960;
       if (($8 & 1023 | ($3 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > $6 >>> 0) {
        break label$6;
       }
       SAFE_HEAP_STORE_i32_4_4($2, 0, $7 + 2 | 0);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       $0 = ($0 >>> 6 | 0) + 1 | 0;
       SAFE_HEAP_STORE_i32_1_1($7, 0, $0 >>> 2 | 240);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $0 << 4 & 48 | $3 >>> 2 & 15 | 128);
       $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($7, 0, $8 >>> 6 & 15 | $3 << 4 & 48 | 128);
       $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($3, 0, $8 & 63 | 128);
       break label$7;
      }
      if ($3 >>> 0 < 57344) {
       break label$1;
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      if (($4 - $7 | 0) < 3) {
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 12 | 224);
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 & 63 | 128);
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 2 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, $7);
     continue;
    }
    break;
   }
   return 2;
  }
  return 1;
 }
 return $0;
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = __stack_pointer - 384 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i64_8_8($5, 376, 37, 0);
 $7 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 376 | 1, 2972, std____2__ios_base__flags_28_29_20const($2));
 SAFE_HEAP_STORE_i32_4_4($5, 332, $5 + 336 | 0);
 $0 = std____2____cloc_28_29();
 label$1: {
  if ($7) {
   $6 = std____2__ios_base__precision_28_29_20const($2);
   SAFE_HEAP_STORE_f64_8_8($5, 40, $4);
   SAFE_HEAP_STORE_i32_4_4($5, 32, $6);
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 32 | 0);
   break label$1;
  }
  SAFE_HEAP_STORE_f64_8_8($5, 48, $4);
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 48 | 0);
 }
 SAFE_HEAP_STORE_i32_4_4($5, 80, 41);
 $9 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 320 | 0, 0, $5 + 80 | 0);
 $8 = $5 + 336 | 0;
 $6 = $8;
 label$3: {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6: {
    if ($7) {
     $6 = std____2__ios_base__precision_28_29_20const($2);
     SAFE_HEAP_STORE_f64_8_8($5, 8, $4);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 332 | 0, $0, $5 + 376 | 0, $5);
     break label$6;
    }
    SAFE_HEAP_STORE_f64_8_8($5, 16, $4);
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 332 | 0, $0, $5 + 376 | 0, $5 + 16 | 0);
   }
   if (($0 | 0) == -1) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($9, SAFE_HEAP_LOAD_i32_4_4($5, 332));
   $6 = SAFE_HEAP_LOAD_i32_4_4($5, 332);
  }
  $7 = $0 + $6 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
  SAFE_HEAP_STORE_i32_4_4($5, 80, 41);
  $6 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 80 | 0);
  label$8: {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 332) | 0) == ($5 + 336 | 0)) {
    $0 = $5 + 80 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 3);
   if (!$0) {
    break label$3;
   }
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($6, $0);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 332);
  }
  std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($8, $10, $7, $0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
  std____2__locale___locale_28_29($5 + 56 | 0);
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0, SAFE_HEAP_LOAD_i32_4_4($5, 68), SAFE_HEAP_LOAD_i32_4_4($5, 64), $2, $3);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  __stack_pointer = $5 + 384 | 0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function __embind_register_native_and_builtin_types() {
 _embind_register_void(emscripten__internal__TypeID_void_2c_20void___get_28_29() | 0, 1929);
 _embind_register_bool(emscripten__internal__TypeID_bool_2c_20void___get_28_29() | 0, 1546, 1, 1, 0);
 void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29(1372);
 void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29(1365);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29(1363);
 void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29(1237);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29(1228);
 void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29(1252);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29(1243);
 void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29(1668);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29(1659);
 void_20_28anonymous_20namespace_29__register_bigint_long_20long__28char_20const__29(1285);
 void_20_28anonymous_20namespace_29__register_bigint_unsigned_20long_20long__28char_20const__29(1284);
 void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29(1274);
 void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29(1912);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() | 0, 1699);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() | 0, 2506);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() | 0, 4, 1673);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() | 0, 2, 1711);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() | 0, 4, 1726);
 _embind_register_emval(emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() | 0, 1560);
 void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29(2437);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(2539);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(2467);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(2069);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(2100);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(2140);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(2169);
 void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29(2576);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29(2606);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(2271);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(2238);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(2337);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(2303);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(2404);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(2370);
 void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29(2207);
 void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29(2645);
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i64_8_8($5, 200, 37, 0);
 $7 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 200 | 1, 2972, std____2__ios_base__flags_28_29_20const($2));
 SAFE_HEAP_STORE_i32_4_4($5, 156, $5 + 160 | 0);
 $0 = std____2____cloc_28_29();
 label$1: {
  if ($7) {
   $6 = std____2__ios_base__precision_28_29_20const($2);
   SAFE_HEAP_STORE_f64_8_8($5, 40, $4);
   SAFE_HEAP_STORE_i32_4_4($5, 32, $6);
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 32 | 0);
   break label$1;
  }
  SAFE_HEAP_STORE_f64_8_8($5, 48, $4);
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 48 | 0);
 }
 SAFE_HEAP_STORE_i32_4_4($5, 80, 41);
 $9 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 144 | 0, 0, $5 + 80 | 0);
 $8 = $5 + 160 | 0;
 $6 = $8;
 label$3: {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6: {
    if ($7) {
     $6 = std____2__ios_base__precision_28_29_20const($2);
     SAFE_HEAP_STORE_f64_8_8($5, 8, $4);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 156 | 0, $0, $5 + 200 | 0, $5);
     break label$6;
    }
    SAFE_HEAP_STORE_f64_8_8($5, 16, $4);
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 156 | 0, $0, $5 + 200 | 0, $5 + 16 | 0);
   }
   if (($0 | 0) == -1) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($9, SAFE_HEAP_LOAD_i32_4_4($5, 156));
   $6 = SAFE_HEAP_LOAD_i32_4_4($5, 156);
  }
  $7 = $0 + $6 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
  SAFE_HEAP_STORE_i32_4_4($5, 80, 41);
  $6 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 80 | 0);
  label$8: {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 156) | 0) == ($5 + 160 | 0)) {
    $0 = $5 + 80 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 1);
   if (!$0) {
    break label$3;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($6, $0);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 156);
  }
  std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($8, $10, $7, $0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
  std____2__locale___locale_28_29($5 + 56 | 0);
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0, SAFE_HEAP_LOAD_i32_4_4($5, 68), SAFE_HEAP_LOAD_i32_4_4($5, 64), $2, $3);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  __stack_pointer = $5 + 208 | 0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function std____2__init_wmonths_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 27504) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(27504)) {
   break label$1;
  }
  $0 = 27216;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 27504) {
    continue;
   }
   break;
  }
  __cxa_guard_release(27504);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27216, 18008);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27228, 18040);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27240, 18076);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27252, 18100);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27264, 18124);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27276, 18140);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27288, 18160);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27300, 18180);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27312, 18208);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27324, 18248);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27336, 18280);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27348, 18316);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27360, 18352);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27372, 18368);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27384, 18384);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27396, 18400);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27408, 18124);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27420, 18416);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27432, 18432);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27444, 18448);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27456, 18464);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27468, 18480);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27480, 18496);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27492, 18512);
}

function GetMinimumPhaseSpectrum($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $2 = ($4 | 0) / 2 | 0;
 $1 = $2 + 1 | 0;
 label$1: {
  if (($1 | 0) >= ($4 | 0)) {
   break label$1;
  }
  $7 = ($4 - $2 | 0) - 2 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = ($2 ^ -1) + $4 & 3;
  if ($2) {
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($1 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($4 - $1 << 3) + $3 | 0, 0));
    $1 = $1 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  if ($7 >>> 0 <= 2) {
   break label$1;
  }
  while (1) {
   SAFE_HEAP_STORE_f64_8_8(($1 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($4 - $1 << 3) + $3 | 0, 0));
   $2 = $1 + 1 | 0;
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($4 - $2 << 3) + $3 | 0, 0));
   $2 = $1 + 2 | 0;
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($4 - $2 << 3) + $3 | 0, 0));
   $2 = $1 + 3 | 0;
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8(($4 - $2 << 3) + $3 | 0, 0));
   $1 = $1 + 4 | 0;
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i64_8_8($5 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 48 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5, 40, SAFE_HEAP_LOAD_i64_8_4($0, 16), i64toi32_i32$HIGH_BITS);
 fft_execute($5 + 40 | 0);
 $7 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 SAFE_HEAP_STORE_f64_8_8($7, 8, -SAFE_HEAP_LOAD_f64_8_8($7, 8));
 $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $9 = ($8 | 0) / 2 | 0;
 label$5: {
  if (($8 | 0) < 4) {
   break label$5;
  }
  $3 = 1;
  $1 = (($9 | 0) > 2 ? $9 : 2) - 1 | 0;
  $12 = $1 & 1;
  if (($8 | 0) >= 6) {
   $4 = $1 & -2;
   while (1) {
    $1 = ($3 << 4) + $7 | 0;
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $6 + $6);
    SAFE_HEAP_STORE_f64_8_8($1, 8, SAFE_HEAP_LOAD_f64_8_8($1, 8) * -2);
    $2 = $1 + 24 | 0;
    SAFE_HEAP_STORE_f64_8_8($2, 0, SAFE_HEAP_LOAD_f64_8_8($2, 0) * -2);
    $1 = $1 + 16 | 0;
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    SAFE_HEAP_STORE_f64_8_8($1, 0, $6 + $6);
    $3 = $3 + 2 | 0;
    $4 = $4 - 2 | 0;
    if ($4) {
     continue;
    }
    break;
   }
  }
  if (!$12) {
   break label$5;
  }
  $1 = ($3 << 4) + $7 | 0;
  $6 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
  SAFE_HEAP_STORE_f64_8_8($1, 0, $6 + $6);
  SAFE_HEAP_STORE_f64_8_8($1, 8, SAFE_HEAP_LOAD_f64_8_8($1, 8) * -2);
 }
 $1 = ($9 << 4) + $7 | 0;
 SAFE_HEAP_STORE_f64_8_8($1, 8, -SAFE_HEAP_LOAD_f64_8_8($1, 8));
 $1 = $9 + 1 | 0;
 if (($8 | 0) > ($1 | 0)) {
  memset(($1 << 4) + $7 | 0, 0, ($9 ^ -1) + $8 << 4);
 }
 SAFE_HEAP_STORE_i64_8_8($5 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 88 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 80 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 72 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 - -64 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($5, 0, SAFE_HEAP_LOAD_i64_8_4($0, 56), i64toi32_i32$HIGH_BITS);
 fft_execute($5);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if (($1 | 0) >= -1) {
  $6 = +($1 | 0);
  $4 = ($1 | 0) / 2 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $1 = 0;
  while (1) {
   $3 = ($1 << 4) + $2 | 0;
   $10 = SAFE_HEAP_LOAD_f64_8_8($3, 8);
   $11 = exp(SAFE_HEAP_LOAD_f64_8_8($3, 0) / $6);
   $10 = $10 / $6;
   SAFE_HEAP_STORE_f64_8_8($3, 8, $11 * sin($10));
   SAFE_HEAP_STORE_f64_8_8($3, 0, $11 * cos($10));
   $3 = ($1 | 0) == ($4 | 0);
   $1 = $1 + 1 | 0;
   if (!$3) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $5 + 80 | 0;
}

function strtox($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $16 = __stack_pointer - 16 | 0;
 __stack_pointer = $16;
 label$1: {
  label$2: {
   label$3: {
    if (($2 | 0) <= 36) {
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
     if ($7) {
      break label$3;
     }
     $9 = $0;
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
    $3 = 0;
    $4 = 0;
    break label$1;
   }
   $9 = $0;
   label$5: {
    while (1) {
     if (!isspace($7 << 24 >> 24)) {
      break label$5;
     }
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($9, 1);
     $5 = $9 + 1 | 0;
     $9 = $5;
     if ($7) {
      continue;
     }
     break;
    }
    $9 = $5;
    break label$2;
   }
   label$7: {
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
    switch ($7 - 43 | 0) {
    case 0:
    case 2:
     break label$7;

    default:
     break label$2;
    }
   }
   $15 = ($7 | 0) == 45 ? -1 : 0;
   $9 = $9 + 1 | 0;
  }
  label$8: {
   label$9: {
    if ($2 & -17) {
     break label$9;
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) != 48) {
     break label$9;
    }
    $19 = 1;
    if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 1) & 223) == 88) {
     $9 = $9 + 2 | 0;
     $17 = 16;
     break label$8;
    }
    $9 = $9 + 1 | 0;
    $17 = $2 ? $2 : 8;
    break label$8;
   }
   $17 = $2 ? $2 : 10;
  }
  $6 = $17;
  $8 = $6 >> 31;
  $11 = $6;
  $12 = $8;
  $2 = 0;
  while (1) {
   label$12: {
    $7 = -48;
    $5 = SAFE_HEAP_LOAD_i32_1_1($9, 0);
    label$13: {
     if (($5 - 48 & 255) >>> 0 < 10) {
      break label$13;
     }
     $7 = -87;
     if (($5 - 97 & 255) >>> 0 < 26) {
      break label$13;
     }
     $7 = -55;
     if (($5 - 65 & 255) >>> 0 > 25) {
      break label$12;
     }
    }
    $5 = $7 + $5 | 0;
    if (($17 | 0) <= ($5 | 0)) {
     break label$12;
    }
    $8 = $12;
    __multi3($16, $11, $8, 0, 0, $13, $14, 0, 0);
    $7 = 1;
    $10 = SAFE_HEAP_LOAD_i64_8_8($16, 8);
    $6 = $10;
    label$14: {
     if ($6 | i64toi32_i32$HIGH_BITS) {
      break label$14;
     }
     $6 = $12;
     $20 = __wasm_i64_mul($11, $6, $13, $14);
     $6 = i64toi32_i32$HIGH_BITS;
     $18 = $6;
     $6 = $5 >> 31;
     $21 = $6;
     $22 = $5;
     $8 = $5;
     $10 = $8 ^ -1;
     $8 = $6 ^ -1;
     $6 = $20;
     if (($18 | 0) == ($8 | 0) & $10 >>> 0 < $6 >>> 0 | $8 >>> 0 < $18 >>> 0) {
      break label$14;
     }
     $6 = $18;
     $5 = $21 + $6 | 0;
     $8 = $22;
     $10 = $20;
     $7 = $8 + $10 | 0;
     $13 = $7;
     $5 = $8 >>> 0 > $7 >>> 0 ? $5 + 1 | 0 : $5;
     $14 = $5;
     $19 = 1;
     $7 = $2;
    }
    $9 = $9 + 1 | 0;
    $2 = $7;
    continue;
   }
   break;
  }
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 0, $19 ? $9 : $0);
  }
  label$16: {
   label$17: {
    if ($2) {
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
     $10 = 0;
     $12 = $10;
     $6 = $3;
     $11 = $6 & 1;
     $15 = !($10 | $11) ? $15 : 0;
     $13 = $6;
     $5 = $4;
     $14 = $5;
     break label$17;
    }
    $6 = $14;
    $10 = $4;
    $8 = $13;
    $5 = $3;
    if (($6 | 0) == ($10 | 0) & $8 >>> 0 < $5 >>> 0 | $10 >>> 0 > $6 >>> 0) {
     break label$16;
    }
    $8 = $3;
    $11 = $8 & 1;
    $10 = 0;
    $12 = $10;
   }
   $5 = $11;
   $10 = $12;
   if (!(($5 | 0) != 0 | ($10 | 0) != 0 | $15)) {
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
    $6 = $3;
    $3 = $6 - 1 | 0;
    $5 = $4;
    $7 = $6 >>> 0 < 1;
    $7 = $5 - $7 | 0;
    $4 = $7;
    break label$1;
   }
   $6 = $14;
   $7 = $4;
   $8 = $13;
   $5 = $3;
   if (($6 | 0) == ($7 | 0) & $8 >>> 0 <= $5 >>> 0 | $7 >>> 0 > $6 >>> 0) {
    break label$16;
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 68);
   break label$1;
  }
  $7 = $15;
  $5 = $7 >> 31;
  $12 = $5;
  $7 = $5;
  $5 = $14;
  $7 = $7 ^ $5;
  $8 = $13;
  $11 = $15;
  $6 = $11;
  $5 = $8 ^ $6;
  $10 = $5 - $6 | 0;
  $3 = $10;
  $8 = $12;
  $4 = $7 - ($8 + ($6 >>> 0 > $5 >>> 0) | 0) | 0;
 }
 __stack_pointer = $16 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $4;
 $5 = $3;
 return $5;
}

function interp1($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $7 = $2 - 1 | 0;
 $12 = operator_20new_5b_5d_28unsigned_20long_29(($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3);
 $14 = operator_20new_5b_5d_28unsigned_20long_29(($4 & 1073741823) != ($4 | 0) ? -1 : $4 << 2);
 label$1: {
  if (($2 | 0) < 2) {
   break label$1;
  }
  $8 = $7 & 3;
  $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
  if ($2 - 2 >>> 0 >= 3) {
   $11 = $7 & -4;
   while (1) {
    $7 = $6 << 3;
    $15 = $12 + $7 | 0;
    $13 = $7 | 8;
    $10 = SAFE_HEAP_LOAD_f64_8_8($13 + $0 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($15, 0, $10 - $9);
    $15 = $12 + $13 | 0;
    $13 = $7 | 16;
    $9 = SAFE_HEAP_LOAD_f64_8_8($13 + $0 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($15, 0, $9 - $10);
    $13 = $12 + $13 | 0;
    $7 = $7 | 24;
    $10 = SAFE_HEAP_LOAD_f64_8_8($7 + $0 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($13, 0, $10 - $9);
    $7 = $7 + $12 | 0;
    $6 = $6 + 4 | 0;
    $9 = SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($7, 0, $9 - $10);
    $11 = $11 - 4 | 0;
    if ($11) {
     continue;
    }
    break;
   }
  }
  if (!$8) {
   break label$1;
  }
  while (1) {
   $7 = ($6 << 3) + $12 | 0;
   $6 = $6 + 1 | 0;
   $10 = SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($7, 0, $10 - $9);
   $9 = $10;
   $8 = $8 - 1 | 0;
   if ($8) {
    continue;
   }
   break;
  }
 }
 $6 = 0;
 label$5: {
  label$6: {
   if (($4 | 0) <= 0) {
    break label$6;
   }
   $8 = memset($14, 0, $4 << 2);
   $9 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
   while (1) {
    SAFE_HEAP_STORE_i32_4_4(($6 << 2) + $8 | 0, 0, 1);
    if (SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $3 | 0, 0) >= $9) {
     break label$6;
    }
    $7 = 1;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
   $6 = $4;
   break label$5;
  }
  $7 = 1;
  if (($4 | 0) <= ($6 | 0)) {
   break label$5;
  }
  while (1) {
   $9 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $0 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $3 | 0, 0);
   SAFE_HEAP_STORE_i32_4_4(($6 << 2) + $14 | 0, 0, $7);
   $8 = !($9 > $10);
   $6 = $6 - $8 | 0;
   $7 = $7 + $8 | 0;
   if (($7 | 0) == ($2 | 0)) {
    $7 = $2;
    break label$5;
   }
   $6 = $6 + 1 | 0;
   if (($6 | 0) < ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $8 = $6 + 1 | 0;
 label$10: {
  if (($8 | 0) >= ($4 | 0)) {
   break label$10;
  }
  $7 = $7 - 1 | 0;
  $11 = ($4 - $6 | 0) - 2 | 0;
  $6 = ($6 ^ -1) + $4 & 7;
  if ($6) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $14 | 0, 0, $7);
    $8 = $8 + 1 | 0;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue;
    }
    break;
   }
  }
  if ($11 >>> 0 < 7) {
   break label$10;
  }
  while (1) {
   $6 = ($8 << 2) + $14 | 0;
   SAFE_HEAP_STORE_i32_4_4($6, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 28 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 24 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 20 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 16 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 8 | 0, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($6 + 4 | 0, 0, $7);
   $8 = $8 + 8 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($4 | 0) >= 1) {
  $6 = 0;
  while (1) {
   $8 = $6 << 3;
   $2 = $8 + $5 | 0;
   $11 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $14 | 0, 0) << 3;
   $7 = $11 - 8 | 0;
   $9 = SAFE_HEAP_LOAD_f64_8_8($7 + $1 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($2, 0, $9 + (SAFE_HEAP_LOAD_f64_8_8($3 + $8 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($0 + $7 | 0, 0)) / SAFE_HEAP_LOAD_f64_8_8($7 + $12 | 0, 0) * (SAFE_HEAP_LOAD_f64_8_8($1 + $11 | 0, 0) - $9));
   $6 = $6 + 1 | 0;
   if (($6 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($14);
 operator_20delete_5b_5d_28void__29($12);
}

function std____2__init_months_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 27200) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(27200)) {
   break label$1;
  }
  $0 = 26912;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 27200) {
    continue;
   }
   break;
  }
  __cxa_guard_release(27200);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26912, 1055);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26924, 1046);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26936, 1649);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26948, 1554);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26960, 1125);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26972, 1859);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26984, 1063);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26996, 1213);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27008, 1344);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27020, 1327);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27032, 1335);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27044, 1354);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27056, 1538);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27068, 1956);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27080, 1393);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27092, 1316);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27104, 1125);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27116, 1421);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27128, 1542);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27140, 1655);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27152, 1397);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27164, 1270);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27176, 1167);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27188, 1946);
}

function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $6 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__numpunct_wchar_t___grouping_28_29_20const($10, $6);
 label$1: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $0, $2, $3);
   $6 = ($2 - $0 << 2) + $3 | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
  label$3: {
   label$4: {
    $9 = $0;
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
    switch ($7 - 43 | 0) {
    case 0:
    case 2:
     break label$4;

    default:
     break label$3;
    }
   }
   $7 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $7 << 24 >> 24);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($8, 0, $7);
   $9 = $0 + 1 | 0;
  }
  label$5: {
   if (($2 - $9 | 0) < 2) {
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) != 48) {
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 1) | 32) != 120) {
    break label$5;
   }
   $7 = std____2__ctype_wchar_t___widen_28char_29_20const($11, 48);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($8, 0, $7);
   $7 = std____2__ctype_wchar_t___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($9, 1));
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($8, 0, $7);
   $9 = $9 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($9, $2);
  $7 = 0;
  $13 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($6);
  $8 = 0;
  $6 = $9;
  while (1) {
   if ($2 >>> 0 <= $6 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($9 - $0 << 2) + $3 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
    $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    break label$1;
   }
   label$8: {
    if (!SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $8), 0)) {
     break label$8;
    }
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $8), 0) | 0) != ($7 | 0)) {
     break label$8;
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($7, 0, $13);
    $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) - 1 >>> 0 > $8 >>> 0) + $8 | 0;
    $7 = 0;
   }
   $14 = std____2__ctype_wchar_t___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($6, 0));
   $12 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $12 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($12, 0, $14);
   $6 = $6 + 1 | 0;
   $7 = $7 + 1 | 0;
   continue;
  }
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = __stack_pointer - 448 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 432, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 440, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 20, 42);
 $7 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 SAFE_HEAP_STORE_i32_1_1($0, 15, 0);
 if (std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 440 | 0, $2, $3, $0 + 16 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 15 | 0, $1, $7, $0 + 20 | 0, $0 + 432 | 0)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($6);
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 15)) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($6, std____2__ctype_wchar_t___widen_28char_29_20const($1, 45));
  }
  $1 = std____2__ctype_wchar_t___widen_28char_29_20const($1, 48);
  $4 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $2 = $3 - 4 | 0;
  while (1) {
   label$4: {
    if ($2 >>> 0 <= $4 >>> 0) {
     break label$4;
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != ($1 | 0)) {
     break label$4;
    }
    $4 = $4 + 4 | 0;
    continue;
   }
   break;
  }
  std____2___MetaBase__28__is_cpp17_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29____EnableIfImpl_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29($6, $4, $3);
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 440 | 0, $0 + 432 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 440);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 __stack_pointer = $0 + 448 | 0;
 return $4 | 0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 $8 = $2;
 while (1) {
  label$2: {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$2;
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 0)) {
    break label$2;
   }
   $8 = $8 + 1 | 0;
   continue;
  }
  break;
 }
 SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 while (1) {
  label$5: {
   label$6: {
    label$7: {
     if (($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0)) {
      break label$7;
     }
     SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
     label$8: {
      label$9: {
       label$10: {
        $10 = std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 | 0, $6 - $5 >> 2, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8));
        label$11: {
         if (($10 | 0) == -1) {
          while (1) {
           label$14: {
            SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
            if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) == ($2 | 0)) {
             break label$14;
            }
            $6 = 1;
            label$15: {
             label$16: {
              label$17: {
               $5 = std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $8 - $2 | 0, $9 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
               switch ($5 + 2 | 0) {
               case 2:
                break label$15;

               case 1:
                break label$17;

               case 0:
                break label$9;

               default:
                break label$16;
               }
              }
              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
              break label$11;
             }
             $6 = $5;
            }
            $2 = $2 + $6 | 0;
            $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0) + 4 | 0;
            continue;
           }
           break;
          }
          SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
          break label$7;
         }
         $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0) + ($10 << 2) | 0;
         SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
         if (($5 | 0) == ($6 | 0)) {
          break label$8;
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
         if (($3 | 0) == ($8 | 0)) {
          $8 = $3;
          continue;
         }
         if (!std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8))) {
          break label$10;
         }
        }
        $8 = 2;
        break label$6;
       }
       SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 4 | 0);
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
       $8 = $2;
       while (1) {
        if (($3 | 0) == ($8 | 0)) {
         $8 = $3;
         break label$5;
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 0)) {
         break label$5;
        }
        $8 = $8 + 1 | 0;
        continue;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
      $8 = 1;
      break label$6;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    }
    $8 = ($2 | 0) != ($3 | 0);
   }
   __stack_pointer = $9 + 16 | 0;
   return $8 | 0;
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  continue;
 }
}

function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $6 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 std____2__numpunct_char___grouping_28_29_20const($10, $6);
 label$1: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($11, $0, $2, $3);
   $6 = ($2 - $0 | 0) + $3 | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, $6);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
  label$3: {
   label$4: {
    $9 = $0;
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
    switch ($7 - 43 | 0) {
    case 0:
    case 2:
     break label$4;

    default:
     break label$3;
    }
   }
   $7 = std____2__ctype_char___widen_28char_29_20const($11, $7 << 24 >> 24);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($8, 0, $7);
   $9 = $0 + 1 | 0;
  }
  label$5: {
   if (($2 - $9 | 0) < 2) {
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) != 48) {
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 1) | 32) != 120) {
    break label$5;
   }
   $7 = std____2__ctype_char___widen_28char_29_20const($11, 48);
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($8, 0, $7);
   $7 = std____2__ctype_char___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($9, 1));
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $8 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($8, 0, $7);
   $9 = $9 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($9, $2);
  $7 = 0;
  $13 = std____2__numpunct_char___thousands_sep_28_29_20const($6);
  $8 = 0;
  $6 = $9;
  while (1) {
   if ($2 >>> 0 <= $6 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($9 - $0 | 0) + $3 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
    $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    break label$1;
   }
   label$8: {
    if (!SAFE_HEAP_LOAD_i32_1_U_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $8), 0)) {
     break label$8;
    }
    if ((SAFE_HEAP_LOAD_i32_1_1(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $8), 0) | 0) != ($7 | 0)) {
     break label$8;
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($7, 0, $13);
    $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) - 1 >>> 0 > $8 >>> 0) + $8 | 0;
    $7 = 0;
   }
   $14 = std____2__ctype_char___widen_28char_29_20const($11, SAFE_HEAP_LOAD_i32_1_1($6, 0));
   $12 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $12 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($12, 0, $14);
   $6 = $6 + 1 | 0;
   $7 = $7 + 1 | 0;
   continue;
  }
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 __stack_pointer = $10 + 16 | 0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 $8 = $2;
 while (1) {
  label$2: {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$2;
   }
   if (!SAFE_HEAP_LOAD_i32_4_4($8, 0)) {
    break label$2;
   }
   $8 = $8 + 4 | 0;
   continue;
  }
  break;
 }
 SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 while (1) {
  label$5: {
   label$6: {
    if (!(($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0))) {
     SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
     $10 = 1;
     label$8: {
      label$9: {
       label$10: {
        label$11: {
         label$12: {
          $11 = std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 >> 2, $6 - $5 | 0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8));
          switch ($11 + 1 | 0) {
          case 0:
           break label$12;

          case 1:
           break label$6;

          default:
           break label$11;
          }
         }
         SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
         while (1) {
          label$14: {
           if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) == ($2 | 0)) {
            break label$14;
           }
           $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, SAFE_HEAP_LOAD_i32_4_4($2, 0), $9 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
           if (($8 | 0) == -1) {
            break label$14;
           }
           $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0) + $8 | 0;
           SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
           $2 = $2 + 4 | 0;
           continue;
          }
          break;
         }
         SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
         break label$10;
        }
        $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0) + $11 | 0;
        SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
        if (($5 | 0) == ($6 | 0)) {
         break label$8;
        }
        if (($3 | 0) == ($8 | 0)) {
         $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
         $8 = $3;
         continue;
        }
        $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($9 + 4 | 0, 0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8));
        if (($8 | 0) != -1) {
         break label$9;
        }
       }
       $10 = 2;
       break label$6;
      }
      $2 = $9 + 4 | 0;
      if ($6 - SAFE_HEAP_LOAD_i32_4_4($7, 0) >>> 0 < $8 >>> 0) {
       break label$6;
      }
      while (1) {
       if ($8) {
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        $10 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
        SAFE_HEAP_STORE_i32_4_4($7, 0, $10 + 1 | 0);
        SAFE_HEAP_STORE_i32_1_1($10, 0, $5);
        $8 = $8 - 1 | 0;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + 4 | 0;
      SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
      $8 = $2;
      while (1) {
       if (($3 | 0) == ($8 | 0)) {
        $8 = $3;
        break label$5;
       }
       if (!SAFE_HEAP_LOAD_i32_4_4($8, 0)) {
        break label$5;
       }
       $8 = $8 + 4 | 0;
       continue;
      }
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    }
    $10 = ($2 | 0) != ($3 | 0);
   }
   __stack_pointer = $9 + 16 | 0;
   return $10 | 0;
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  continue;
 }
}
function rdft_28int_2c_20int_2c_20double__2c_20int__2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $16 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
 $17 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
 if (($1 | 0) >= 0) {
  label$2: {
   if (($0 | 0) >= 5) {
    cftfsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($0, $2, $3, $17, $4);
    $3 = $0 >>> 1 | 0;
    $18 = ($16 << 1) / ($3 | 0) | 0;
    if (($0 | 0) == 5) {
     break label$2;
    }
    $13 = ($17 << 3) + $4 | 0;
    $1 = 2;
    while (1) {
     $8 = $1 << 3;
     $7 = $8 + $2 | 0;
     $4 = $7;
     $5 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $19 = $5;
     $12 = $12 + $18 | 0;
     $6 = .5 - SAFE_HEAP_LOAD_f64_8_8(($16 - $12 << 3) + $13 | 0, 0);
     $7 = ($0 - $1 << 3) + $2 | 0;
     $5 = $5 - SAFE_HEAP_LOAD_f64_8_8($7, 0);
     $11 = $6 * $5;
     $9 = SAFE_HEAP_LOAD_f64_8_8(($12 << 3) + $13 | 0, 0);
     $14 = ($8 | 8) + $2 | 0;
     $10 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
     $8 = $7 + 8 | 0;
     $15 = $10 + SAFE_HEAP_LOAD_f64_8_8($8, 0);
     $11 = $11 - $9 * $15;
     SAFE_HEAP_STORE_f64_8_8($4, 0, $19 - $11);
     $5 = $9 * $5 + $6 * $15;
     SAFE_HEAP_STORE_f64_8_8($14, 0, $10 - $5);
     SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0) + $11);
     SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) - $5);
     $1 = $1 + 2 | 0;
     if ($3 >>> 0 > $1 >>> 0) {
      continue;
     }
     break;
    }
    break label$2;
   }
   if (($0 | 0) != 4) {
    break label$2;
   }
   $5 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
   $6 = SAFE_HEAP_LOAD_f64_8_8($2, 24);
   SAFE_HEAP_STORE_f64_8_8($2, 24, $5 - $6);
   $9 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
   $10 = SAFE_HEAP_LOAD_f64_8_8($2, 16);
   SAFE_HEAP_STORE_f64_8_8($2, 16, $9 - $10);
   SAFE_HEAP_STORE_f64_8_8($2, 8, $5 + $6);
   SAFE_HEAP_STORE_f64_8_8($2, 0, $9 + $10);
  }
  $5 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
  $6 = SAFE_HEAP_LOAD_f64_8_8($2, 8);
  SAFE_HEAP_STORE_f64_8_8($2, 8, $5 - $6);
  SAFE_HEAP_STORE_f64_8_8($2, 0, $5 + $6);
  return;
 }
 $6 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
 $5 = ($6 - SAFE_HEAP_LOAD_f64_8_8($2, 8)) * .5;
 SAFE_HEAP_STORE_f64_8_8($2, 8, $5);
 $6 = $6 - $5;
 SAFE_HEAP_STORE_f64_8_8($2, 0, $6);
 if (($0 | 0) >= 5) {
  $18 = $0 >>> 1 | 0;
  $20 = ($16 << 1) / ($18 | 0) | 0;
  if (($0 | 0) != 5) {
   $13 = ($17 << 3) + $4 | 0;
   $1 = 2;
   while (1) {
    $8 = $1 << 3;
    $7 = $8 + $2 | 0;
    $21 = $7;
    $5 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
    $19 = $5;
    $12 = $12 + $20 | 0;
    $6 = .5 - SAFE_HEAP_LOAD_f64_8_8(($16 - $12 << 3) + $13 | 0, 0);
    $7 = ($0 - $1 << 3) + $2 | 0;
    $5 = $5 - SAFE_HEAP_LOAD_f64_8_8($7, 0);
    $11 = $6 * $5;
    $9 = SAFE_HEAP_LOAD_f64_8_8(($12 << 3) + $13 | 0, 0);
    $14 = ($8 | 8) + $2 | 0;
    $10 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
    $8 = $7 + 8 | 0;
    $15 = $10 + SAFE_HEAP_LOAD_f64_8_8($8, 0);
    $11 = $11 + $9 * $15;
    SAFE_HEAP_STORE_f64_8_8($21, 0, $19 - $11);
    $5 = $6 * $15 - $9 * $5;
    SAFE_HEAP_STORE_f64_8_8($14, 0, $10 - $5);
    SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8($7, 0) + $11);
    SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8($8, 0) - $5);
    $1 = $1 + 2 | 0;
    if ($18 >>> 0 > $1 >>> 0) {
     continue;
    }
    break;
   }
  }
  cftbsub_28int_2c_20double__2c_20int__2c_20int_2c_20double__29($0, $2, $3, $17, $4);
  return;
 }
 if (($0 | 0) == 4) {
  $9 = SAFE_HEAP_LOAD_f64_8_8($2, 24);
  SAFE_HEAP_STORE_f64_8_8($2, 24, $5 - $9);
  $10 = SAFE_HEAP_LOAD_f64_8_8($2, 16);
  SAFE_HEAP_STORE_f64_8_8($2, 16, $6 - $10);
  SAFE_HEAP_STORE_f64_8_8($2, 8, $5 + $9);
  SAFE_HEAP_STORE_f64_8_8($2, 0, $6 + $10);
 }
}

function std____2__DoIOSInit__DoIOSInit_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(0, 19496);
 std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29(30876, $1, 30932);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(30192, 30876);
 std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29(30940, $1, 30996);
 std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(30280, 30940);
 $1 = SAFE_HEAP_LOAD_i32_4_4(0, 19500);
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(31004, $1, 31052);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(30368, 31004);
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(31060, $1, 31108);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(30452, 31060);
 $1 = SAFE_HEAP_LOAD_i32_4_4(0, 19504);
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(31116, $1, 31164);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(30536, 31116);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(30704, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30536) - 12 | 0, 0) + 30536 | 0));
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(31172, $1, 31220);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(30620, 31172);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(30788, std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30620) - 12 | 0, 0) + 30620 | 0));
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30192) - 12 | 0, 0) + 30192 | 0, 30368);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30280) - 12 | 0, 0) + 30280 | 0, 30452);
 std____2__unitbuf_28std____2__ios_base__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30536) - 12 | 0, 0) + 30536 | 0);
 std____2__unitbuf_28std____2__ios_base__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30620) - 12 | 0, 0) + 30620 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30536) - 12 | 0, 0) + 30536 | 0, 30368);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 30620) - 12 | 0, 0) + 30620 | 0, 30452);
 return $0;
}

function std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  if (!($7 & 4)) {
   break label$1;
  }
  $7 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  if (($1 - $7 | 0) < 3) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 0) | 0) != 239) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 1) | 0) != 187) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) != 191) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, $7 + 3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
 }
 label$2: {
  label$3: {
   while (1) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if (!($1 >>> 0 <= $0 >>> 0 | $3 >>> 0 >= $4 >>> 0)) {
     $9 = SAFE_HEAP_LOAD_i32_1_1($0, 0);
     $7 = $9 & 255;
     label$6: {
      if (($9 | 0) >= 0) {
       if ($6 >>> 0 >= $7 >>> 0) {
        $9 = 1;
        break label$6;
       }
       return 2;
      }
      $11 = 2;
      if ($7 >>> 0 < 194) {
       break label$3;
      }
      if ($7 >>> 0 <= 223) {
       if (($1 - $0 | 0) < 2) {
        break label$2;
       }
       $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
       if (($8 & 192) != 128) {
        break label$3;
       }
       $9 = 2;
       $7 = $8 & 63 | $7 << 6 & 1984;
       if ($7 >>> 0 <= $6 >>> 0) {
        break label$6;
       }
       break label$3;
      }
      if ($7 >>> 0 <= 239) {
       if (($1 - $0 | 0) < 3) {
        break label$2;
       }
       $10 = SAFE_HEAP_LOAD_i32_1_U_1($0, 2);
       $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
       label$11: {
        label$12: {
         if (($7 | 0) != 237) {
          if (($7 | 0) != 224) {
           break label$12;
          }
          if (($8 & 224) == 160) {
           break label$11;
          }
          break label$3;
         }
         if (($8 & 224) == 128) {
          break label$11;
         }
         break label$3;
        }
        if (($8 & 192) != 128) {
         break label$3;
        }
       }
       if (($10 & 192) != 128) {
        break label$3;
       }
       $9 = 3;
       $7 = $10 & 63 | ($7 << 12 & 61440 | ($8 & 63) << 6);
       if ($7 >>> 0 <= $6 >>> 0) {
        break label$6;
       }
       break label$3;
      }
      if ($7 >>> 0 > 244) {
       break label$3;
      }
      if (($1 - $0 | 0) < 4) {
       break label$2;
      }
      $12 = SAFE_HEAP_LOAD_i32_1_U_1($0, 3);
      $10 = SAFE_HEAP_LOAD_i32_1_U_1($0, 2);
      $8 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
      label$14: {
       label$15: {
        switch ($7 - 240 | 0) {
        case 0:
         if (($8 + 112 & 255) >>> 0 < 48) {
          break label$14;
         }
         break label$3;

        case 4:
         if (($8 & 240) == 128) {
          break label$14;
         }
         break label$3;

        default:
         break label$15;
        }
       }
       if (($8 & 192) != 128) {
        break label$3;
       }
      }
      if (($10 & 192) != 128 | ($12 & 192) != 128) {
       break label$3;
      }
      $9 = 4;
      $7 = $12 & 63 | ($10 << 6 & 4032 | ($7 << 18 & 1835008 | ($8 & 63) << 12));
      if ($7 >>> 0 > $6 >>> 0) {
       break label$3;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($3, 0, $7);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $0 + $9 | 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0) + 4 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
     continue;
    }
    break;
   }
   $11 = $0 >>> 0 < $1 >>> 0;
  }
  return $11;
 }
 return 1;
}

function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 16 | 0;
 __stack_pointer = $12;
 SAFE_HEAP_STORE_i32_4_4($12, 12, $0);
 label$1: {
  label$2: {
   if (($0 | 0) == ($5 | 0)) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$2;
    }
    $0 = 0;
    SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    $11 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 0, $11 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($11, 0, 46);
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$1;
    }
    $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($11 - $8 | 0) > 159) {
     break label$1;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $11 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($11, 0, $5);
    break label$1;
   }
   label$4: {
    if (($0 | 0) != ($6 | 0)) {
     break label$4;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$4;
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$2;
    }
    $0 = 0;
    $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($11 - $8 | 0) > 159) {
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $11 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($11, 0, $0);
    $0 = 0;
    SAFE_HEAP_STORE_i32_4_4($10, 0, 0);
    break label$1;
   }
   $0 = -1;
   $11 = wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($11, $11 + 128 | 0, $12 + 12 | 0) - $11 | 0;
   if (($11 | 0) > 124) {
    break label$1;
   }
   $5 = SAFE_HEAP_LOAD_i32_1_U_1(($11 >> 2) + 13008 | 0, 0);
   label$5: {
    label$6: {
     switch (__wasm_rotl_i32($11 - 88 | 0, 30) | 0) {
     case 2:
     case 3:
      $11 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      if (($11 | 0) != ($3 | 0)) {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($11 - 1 | 0, 0) & 95) != (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 127)) {
        break label$1;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, $11 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($11, 0, $5);
      $0 = 0;
      break label$1;

     case 0:
     case 1:
      SAFE_HEAP_STORE_i32_1_1($2, 0, 80);
      break label$5;

     default:
      break label$6;
     }
    }
    $0 = SAFE_HEAP_LOAD_i32_1_1($2, 0);
    if (($0 | 0) != ($5 & 95)) {
     break label$5;
    }
    SAFE_HEAP_STORE_i32_1_1($2, 0, $0 | 128);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$5;
    }
    SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$5;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($0 - $8 | 0) > 159) {
     break label$5;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $0 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $0 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 0, $5);
   $0 = 0;
   if (($11 | 0) > 84) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) + 1 | 0);
   break label$1;
  }
  $0 = -1;
 }
 __stack_pointer = $12 + 16 | 0;
 return $0;
}

function makewt_28int_2c_20int__2c_20double__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 SAFE_HEAP_STORE_i32_4_4($1, 4, 1);
 SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 label$1: {
  if (($0 | 0) < 3) {
   break label$1;
  }
  SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 1072693248);
  $9 = $0 >>> 1 | 0;
  $4 = +($9 | 0);
  $7 = .7853981633974483 / $4;
  $14 = cos($7 * $4);
  SAFE_HEAP_STORE_f64_8_8($2, 8, $14);
  label$2: {
   if (($9 | 0) == 4) {
    $4 = $7 + $7;
    SAFE_HEAP_STORE_f64_8_8($2, 24, sin($4));
    SAFE_HEAP_STORE_f64_8_8($2, 16, cos($4));
    break label$2;
   }
   if (($0 | 0) < 10) {
    break label$2;
   }
   SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 16);
   if (($0 | 0) >= 33) {
    $5 = 2;
    $13 = $0;
    while (1) {
     $8 = $5 << 1;
     if (($8 | 0) > ($5 | 0)) {
      $10 = $5 << 4;
      $3 = $5;
      while (1) {
       $11 = ($3 + $5 << 2) + $1 | 0;
       $6 = SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + $1 | 0, 0) << 2;
       SAFE_HEAP_STORE_i32_4_4($11, 0, $6);
       SAFE_HEAP_STORE_i32_4_4(($3 + $8 << 2) + $1 | 0, 0, $6 + $10 | 0);
       $6 = $3 | 1;
       $15 = ($6 + $5 << 2) + $1 | 0;
       $11 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $1 | 0, 0) << 2;
       SAFE_HEAP_STORE_i32_4_4($15, 0, $11);
       SAFE_HEAP_STORE_i32_4_4(($8 + $6 << 2) + $1 | 0, 0, $10 + $11 | 0);
       $3 = $3 + 2 | 0;
       if (($8 | 0) != ($3 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = ($13 | 0) > 131;
     $13 = $13 >> 2;
     $5 = $8;
     if ($3) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_f64_8_8($2, 24, .5 / cos($7 * 6));
   SAFE_HEAP_STORE_f64_8_8($2, 16, .5 / cos($7 + $7));
   if ($0 >>> 0 < 10) {
    break label$2;
   }
   $16 = $7 * 3;
   $1 = 4;
   while (1) {
    $3 = $1 << 3;
    $4 = +($1 | 0);
    $12 = $7 * $4;
    SAFE_HEAP_STORE_f64_8_8($3 + $2 | 0, 0, cos($12));
    SAFE_HEAP_STORE_f64_8_8(($3 | 8) + $2 | 0, 0, sin($12));
    $4 = $16 * $4;
    SAFE_HEAP_STORE_f64_8_8(($3 | 16) + $2 | 0, 0, cos($4));
    SAFE_HEAP_STORE_f64_8_8(($3 | 24) + $2 | 0, 0, -sin($4));
    $1 = $1 + 4 | 0;
    if ($9 >>> 0 > $1 >>> 0) {
     continue;
    }
    break;
   }
  }
  if ($0 >>> 0 < 6) {
   break label$1;
  }
  $6 = 0;
  while (1) {
   $10 = $9;
   $5 = $6;
   $6 = $9 + $5 | 0;
   $1 = ($6 << 3) + $2 | 0;
   SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 1072693248);
   SAFE_HEAP_STORE_f64_8_8($1 + 8 | 0, 0, $14);
   $9 = $9 >>> 1 | 0;
   label$10: {
    if (($9 | 0) == 4) {
     $3 = ($5 << 3) + $2 | 0;
     $4 = SAFE_HEAP_LOAD_f64_8_8($3 + 32 | 0, 0);
     SAFE_HEAP_STORE_f64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($3 + 40 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8($1 + 16 | 0, 0, $4);
     break label$10;
    }
    if ($10 >>> 0 < 10) {
     break label$10;
    }
    $3 = ($5 << 3) + $2 | 0;
    $4 = SAFE_HEAP_LOAD_f64_8_8($3 + 32 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($1 + 24 | 0, 0, .5 / SAFE_HEAP_LOAD_f64_8_8($3 + 48 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8($1 + 16 | 0, 0, .5 / $4);
    $1 = 4;
    while (1) {
     $3 = (($1 << 1) + $5 << 3) + $2 | 0;
     $4 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
     $12 = SAFE_HEAP_LOAD_f64_8_8($3 + 8 | 0, 0);
     $7 = SAFE_HEAP_LOAD_f64_8_8($3 + 16 | 0, 0);
     $8 = ($1 + $6 << 3) + $2 | 0;
     SAFE_HEAP_STORE_f64_8_8($8 + 24 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($3 + 24 | 0, 0));
     SAFE_HEAP_STORE_f64_8_8($8 + 16 | 0, 0, $7);
     SAFE_HEAP_STORE_f64_8_8($8 + 8 | 0, 0, $12);
     SAFE_HEAP_STORE_f64_8_8($8, 0, $4);
     $1 = $1 + 4 | 0;
     if ($9 >>> 0 > $1 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($10 >>> 0 > 5) {
    continue;
   }
   break;
  }
 }
}

function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, 20592, 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
   $5 = 1;
   break label$1;
  }
  if (__cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $1)) {
   $5 = 1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if (!$1) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
   break label$1;
  }
  label$4: {
   if (!$1) {
    break label$4;
   }
   $1 = __dynamic_cast($1, 20228, 20372, 0);
   if (!$1) {
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if ($3) {
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($3 & ($6 ^ -1) & 7 | ($3 ^ -1) & $6 & 96) {
    break label$1;
   }
   $5 = 1;
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), SAFE_HEAP_LOAD_i32_4_4($1, 12), 0)) {
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), 20580, 0)) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
    if (!$1) {
     break label$1;
    }
    $5 = !__dynamic_cast($1, 20228, 20424, 0);
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   if (!$3) {
    break label$4;
   }
   $5 = 0;
   $3 = __dynamic_cast($3, 20228, 20372, 0);
   if ($3) {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
     break label$1;
    }
    $5 = __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($3, SAFE_HEAP_LOAD_i32_4_4($1, 12));
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   if (!$3) {
    break label$1;
   }
   $3 = __dynamic_cast($3, 20228, 20484, 0);
   if ($3) {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
     break label$1;
    }
    $5 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($3, SAFE_HEAP_LOAD_i32_4_4($1, 12));
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   if (!$0) {
    break label$1;
   }
   $0 = __dynamic_cast($0, 20228, 20276, 0);
   if (!$0) {
    break label$1;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   if (!$1) {
    break label$1;
   }
   $1 = __dynamic_cast($1, 20228, 20276, 0);
   if (!$1) {
    break label$1;
   }
   memset($4 + 8 | 4, 0, 52);
   SAFE_HEAP_STORE_i32_4_4($4, 56, 1);
   SAFE_HEAP_STORE_i32_4_4($4, 20, -1);
   SAFE_HEAP_STORE_i32_4_4($4, 16, $0);
   SAFE_HEAP_STORE_i32_4_4($4, 8, $1);
   wasm2js_i32$1 = $1, wasm2js_i32$2 = $4 + 8 | 0, wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 0), 
   wasm2js_i32$4 = 1, wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0, 
   FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 32);
   label$9: {
    if (($1 | 0) != 1) {
     break label$9;
    }
    if (!SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
     break label$9;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($4, 24));
   }
   $5 = ($1 | 0) == 1;
   break label$1;
  }
  $5 = 0;
 }
 __stack_pointer = $4 - -64 | 0;
 return $5 | 0;
}

function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $13 = __stack_pointer - 32 | 0;
 __stack_pointer = $13;
 $5 = $3;
 $8 = $5 & 2147483647;
 $10 = $8;
 $7 = $2;
 $9 = $7;
 $5 = $7;
 $6 = $5;
 $4 = 1006698496;
 $4 = $8 - $4 | 0;
 $5 = $4;
 $4 = $8;
 $7 = $6;
 $6 = 1140785152;
 $6 = $4 - $6 | 0;
 $8 = $6;
 $6 = $5;
 $4 = $7;
 label$1: {
  if (($8 | 0) == ($6 | 0) & $4 >>> 0 > $4 >>> 0 | $6 >>> 0 < $8 >>> 0) {
   $7 = $2 << 4;
   $4 = $3;
   $6 = $4 << 4 | $2 >>> 28;
   $5 = $6;
   $2 = 0;
   $4 = $2;
   $6 = $1;
   $8 = $6 >>> 28 | 0;
   $6 = $7;
   $9 = $8 | $6;
   $2 = $5;
   $4 = $2 | $4;
   $10 = $4;
   $4 = $1;
   $6 = $4 & 268435455;
   $1 = $6;
   $4 = $0;
   if (($6 | 0) == 134217728 & $4 >>> 0 >= 1 | $6 >>> 0 > 134217728) {
    $4 = $10;
    $7 = $4 + 1073741824 | 0;
    $8 = $9;
    $5 = $8 + 1 | 0;
    $7 = $5 >>> 0 < 1 ? $7 + 1 | 0 : $7;
    $12 = $5;
    $11 = $7;
    break label$1;
   }
   $4 = $9;
   $12 = $4;
   $7 = $10;
   $5 = -1073741824;
   $5 = $7 - $5 | 0;
   $11 = $5;
   $5 = $1;
   $4 = $5 ^ 134217728;
   $7 = $0;
   $5 = $7;
   if ($5 | $4) {
    break label$1;
   }
   $5 = $12;
   $2 = $9;
   $7 = $2 & 1;
   $8 = $5 + $7 | 0;
   $4 = 0;
   $2 = $4;
   $4 = $11;
   $6 = $2 + $4 | 0;
   $12 = $8;
   $6 = $7 >>> 0 > $8 >>> 0 ? $6 + 1 | 0 : $6;
   $11 = $6;
   break label$1;
  }
  $6 = $1;
  $8 = !($6 | $0);
  $6 = $10;
  $5 = $6 >>> 0 < 2147418112;
  $4 = $10;
  $7 = $9;
  if (!(!$7 & ($4 | 0) == 2147418112 ? $8 : $5)) {
   $5 = $2;
   $0 = $5 << 4;
   $7 = $3;
   $4 = $7 << 4 | $5 >>> 28;
   $5 = 0;
   $7 = $5;
   $7 = $4 | $7;
   $4 = $1;
   $6 = $4 >>> 28 | 0;
   $4 = $0;
   $5 = $6 | $4;
   $4 = $7 & 524287;
   $12 = $5;
   $5 = $4 | 2146959360;
   $11 = $5;
   break label$1;
  }
  $11 = 2146435072;
  $5 = $10;
  if ($5 >>> 0 > 1140785151) {
   break label$1;
  }
  $11 = 0;
  $4 = $10;
  $7 = $4 >>> 16 | 0;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $5 = $3;
  $6 = $5 & 65535;
  $4 = $2;
  $9 = $4;
  $4 = $6 | 65536;
  $10 = $4;
  $4 = $1;
  $5 = $10;
  __ashlti3($13 + 16 | 0, $0, $4, $9, $5, $7 - 15233 | 0);
  $5 = $4;
  $4 = $10;
  __lshrti3($13, $0, $5, $9, $4, 15361 - $7 | 0);
  $4 = SAFE_HEAP_LOAD_i64_8_8($13, 0);
  $9 = $4;
  $5 = i64toi32_i32$HIGH_BITS;
  $10 = $5;
  $1 = $5 >>> 28 | 0;
  $4 = 0;
  $0 = $4;
  $4 = SAFE_HEAP_LOAD_i64_8_8($13 + 8 | 0, 0);
  $5 = $4;
  $6 = i64toi32_i32$HIGH_BITS;
  $4 = $6 << 4 | $4 >>> 28;
  $7 = $5 << 4;
  $6 = $1;
  $12 = $7 | $6;
  $5 = $4;
  $4 = $0;
  $5 = $5 | $4;
  $11 = $5;
  $5 = SAFE_HEAP_LOAD_i64_8_8($13, 16);
  $4 = $5;
  $6 = i64toi32_i32$HIGH_BITS;
  $0 = $6;
  $6 = SAFE_HEAP_LOAD_i64_8_8($13 + 24 | 0, 0);
  $7 = $6;
  $5 = i64toi32_i32$HIGH_BITS;
  $6 = $5;
  $5 = $0;
  $6 = $5 | $6;
  $5 = $7 | $4;
  $0 = ($5 | 0) != 0 | ($6 | 0) != 0;
  $5 = $10;
  $6 = $5 & 268435455;
  $5 = $0;
  $7 = $9;
  $4 = $7;
  $9 = $5 | $4;
  $7 = $6;
  $10 = $6;
  $6 = $9;
  if (($7 | 0) == 134217728 & $6 >>> 0 >= 1 | $7 >>> 0 > 134217728) {
   $6 = $11;
   $4 = $12;
   $2 = $4 + 1 | 0;
   $8 = $2 >>> 0 < 1 ? $6 + 1 | 0 : $6;
   $12 = $2;
   $11 = $8;
   break label$1;
  }
  $8 = $10;
  $4 = $8 ^ 134217728;
  $8 = $9;
  if ($8 | $4) {
   break label$1;
  }
  $5 = $12;
  $8 = $5 & 1;
  $6 = $5;
  $7 = $8 + $6 | 0;
  $5 = $11;
  $4 = 0;
  $2 = $5 + $4 | 0;
  $12 = $7;
  $2 = $6 >>> 0 > $7 >>> 0 ? $2 + 1 | 0 : $2;
  $11 = $2;
 }
 __stack_pointer = $13 + 32 | 0;
 $2 = $3;
 $8 = $2 & -2147483648;
 $4 = $8;
 $8 = $11;
 $4 = $8 | $4;
 $2 = $12;
 $6 = 0;
 wasm2js_scratch_store_i32(0, $2 | $6);
 wasm2js_scratch_store_i32(1, $4 | 0);
 return +wasm2js_scratch_load_f64();
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = __stack_pointer - 160 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 144, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 152, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 20, 42);
 $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 SAFE_HEAP_STORE_i32_1_1($0, 15, 0);
 if (std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 152 | 0, $2, $3, $0 + 16 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 15 | 0, $1, $7, $0 + 20 | 0, $0 + 132 | 0)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($6);
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 15)) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, std____2__ctype_char___widen_28char_29_20const($1, 45));
  }
  $1 = std____2__ctype_char___widen_28char_29_20const($1, 48);
  $4 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $2 = $3 - 1 | 0;
  $1 = $1 & 255;
  while (1) {
   label$4: {
    if ($2 >>> 0 <= $4 >>> 0) {
     break label$4;
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != ($1 | 0)) {
     break label$4;
    }
    $4 = $4 + 1 | 0;
    continue;
   }
   break;
  }
  std____2___MetaBase__28__is_cpp17_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29____EnableIfImpl_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29($6, $4, $3);
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 152 | 0, $0 + 144 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 152);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 __stack_pointer = $0 + 160 | 0;
 return $4 | 0;
}

function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 16 | 0;
 __stack_pointer = $12;
 SAFE_HEAP_STORE_i32_1_1($12, 15, $0);
 label$1: {
  label$2: {
   if (($0 | 0) == ($5 | 0)) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$2;
    }
    $0 = 0;
    SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    $11 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 0, $11 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($11, 0, 46);
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$1;
    }
    $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($11 - $8 | 0) > 159) {
     break label$1;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $11 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($11, 0, $5);
    break label$1;
   }
   label$4: {
    if (($0 | 0) != ($6 | 0)) {
     break label$4;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$4;
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$2;
    }
    $0 = 0;
    $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($11 - $8 | 0) > 159) {
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $11 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($11, 0, $0);
    $0 = 0;
    SAFE_HEAP_STORE_i32_4_4($10, 0, 0);
    break label$1;
   }
   $0 = -1;
   $11 = char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($11, $11 + 32 | 0, $12 + 15 | 0) - $11 | 0;
   if (($11 | 0) > 31) {
    break label$1;
   }
   $5 = SAFE_HEAP_LOAD_i32_1_U_1($11 + 13008 | 0, 0);
   label$5: {
    label$6: {
     switch ($11 - 22 | 0) {
     case 2:
     case 3:
      $11 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      if (($11 | 0) != ($3 | 0)) {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($11 - 1 | 0, 0) & 95) != (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 127)) {
        break label$1;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, $11 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($11, 0, $5);
      $0 = 0;
      break label$1;

     case 0:
     case 1:
      SAFE_HEAP_STORE_i32_1_1($2, 0, 80);
      break label$5;

     default:
      break label$6;
     }
    }
    $0 = SAFE_HEAP_LOAD_i32_1_1($2, 0);
    if (($0 | 0) != ($5 & 95)) {
     break label$5;
    }
    SAFE_HEAP_STORE_i32_1_1($2, 0, $0 | 128);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$5;
    }
    SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$5;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    if (($0 - $8 | 0) > 159) {
     break label$5;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $0 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $0 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 0, $5);
   $0 = 0;
   if (($11 | 0) > 21) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) + 1 | 0);
   break label$1;
  }
  $0 = -1;
 }
 __stack_pointer = $12 + 16 | 0;
 return $0;
}

function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$11: {
           $5 = $1;
           if ($5) {
            $7 = $2;
            if (!$7) {
             break label$11;
            }
            $4 = $3;
            if (!$4) {
             break label$9;
            }
            $5 = Math_clz32($4) - Math_clz32($5) | 0;
            if ($5 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $4 = $3;
           if (($4 | 0) == 1 | $4 >>> 0 > 1) {
            break label$2;
           }
           $5 = $0;
           $7 = $2;
           $5 = ($5 >>> 0) / ($7 >>> 0) | 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $5;
          }
          $7 = $3;
          if (!$0) {
           break label$7;
          }
          if (!$7) {
           break label$6;
          }
          $4 = $7 - 1 | 0;
          if ($4 & $7) {
           break label$6;
          }
          $9 = $5 >>> __wasm_ctz_i32($7) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $9;
         }
         if (!($7 - 1 & $7)) {
          break label$5;
         }
         $5 = (Math_clz32($7) + 33 | 0) - Math_clz32($5) | 0;
         $7 = 0 - $5 | 0;
         break label$3;
        }
        $7 = 63 - $5 | 0;
        $5 = $5 + 1 | 0;
        break label$3;
       }
       $4 = ($5 >>> 0) / ($7 >>> 0) | 0;
       i64toi32_i32$HIGH_BITS = 0;
       return $4;
      }
      $5 = Math_clz32($7) - Math_clz32($5) | 0;
      if ($5 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     if (($7 | 0) == 1) {
      break label$1;
     }
     $4 = $1;
     $9 = $0;
     $10 = 0;
     $8 = __wasm_ctz_i32($7);
     $6 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $9 = $4 >>> $6 | 0;
     } else {
      $10 = $4 >>> $6 | 0;
      $9 = ((1 << $6) - 1 & $4) << 32 - $6 | $9 >>> $6;
     }
     i64toi32_i32$HIGH_BITS = $10;
     return $9;
    }
    $7 = 63 - $5 | 0;
    $5 = $5 + 1 | 0;
   }
   $9 = $1;
   $4 = $0;
   $10 = 0;
   $8 = $5 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $12 = $9 >>> $6 | 0;
   } else {
    $10 = $9 >>> $6 | 0;
    $12 = ((1 << $6) - 1 & $9) << 32 - $6 | $4 >>> $6;
   }
   $13 = $10;
   $10 = $1;
   $9 = $0;
   $8 = $7 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $4 = $9 << $6;
    $0 = 0;
   } else {
    $4 = (1 << $6) - 1 & $9 >>> 32 - $6 | $10 << $6;
    $0 = $9 << $6;
   }
   $1 = $4;
   if ($5) {
    $4 = $3 - 1 | 0;
    $6 = $2 - 1 | 0;
    $4 = ($6 | 0) != -1 ? $4 + 1 | 0 : $4;
    $7 = $6;
    $9 = $4;
    while (1) {
     $4 = $12;
     $8 = $4 << 1;
     $4 = $13 << 1 | $4 >>> 31;
     $12 = $8 | $1 >>> 31;
     $11 = $12;
     $10 = $4;
     $4 = $7;
     $8 = $11;
     $6 = $9 - (($4 >>> 0 < $8 >>> 0) + $10 | 0) | 0;
     $13 = $3 & $6 >> 31;
     $4 = $8;
     $11 = $6 >> 31;
     $8 = $11 & $2;
     $12 = $4 - $8 | 0;
     $13 = $10 - (($4 >>> 0 < $8 >>> 0) + $13 | 0) | 0;
     $4 = $1 << 1 | $0 >>> 31;
     $0 = $0 << 1 | $14;
     $1 = $4 | $16;
     $15 = 0;
     $11 = $11 & 1;
     $14 = $11;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   i64toi32_i32$HIGH_BITS = $15 | ($1 << 1 | $0 >>> 31);
   return $0 << 1 | $11;
  }
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0);
 if ($8 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
  $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0);
  label$2: {
   if (($8 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
    SAFE_HEAP_STORE_i32_4_4($9, 8, $1 << 1);
    SAFE_HEAP_STORE_i32_4_4($9, 12, $1 + $2 | 0);
    $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($9 + 12 | 0, $9 + 8 | 0), 0));
    break label$2;
   }
   $2 = $8 - 1 | 0;
  }
  $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
  $11 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($8, $11);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2), wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($10), $4);
  }
  if ($6) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2) + ($4 << 2) | 0, $7, $6);
  }
  $8 = $3 - ($4 + $5 | 0) | 0;
  if ($8) {
   $7 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2);
   $3 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($7 + $3 | 0) + ($6 << 2) | 0, (wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($10) + $3 | 0) + ($5 << 2) | 0, $8);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 2) {
   std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), $10, $1);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $2);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $11);
  $4 = ($4 + $6 | 0) + $8 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $4);
  SAFE_HEAP_STORE_i32_4_4($9, 4, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($4 << 2) + $2 | 0, $9 + 4 | 0);
  __stack_pointer = $9 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29_1($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $9 = $1 - 1 | 0;
 $13 = ($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2;
 $10 = operator_20new_5b_5d_28unsigned_20long_29($13);
 label$1: {
  if (($1 | 0) < 2) {
   break label$1;
  }
  if (($1 | 0) != 2) {
   $7 = $9 & -2;
   while (1) {
    $6 = $5 | 1;
    $8 = 0;
    label$4: {
     if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) > 0)) {
      break label$4;
     }
     if (!(SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0) <= 0)) {
      break label$4;
     }
     $8 = $6;
    }
    SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $10 | 0, 0, $8);
    $5 = $5 + 2 | 0;
    $8 = 0;
    label$5: {
     if (!(SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0) > 0)) {
      break label$5;
     }
     if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) <= 0)) {
      break label$5;
     }
     $8 = $5;
    }
    SAFE_HEAP_STORE_i32_4_4(($6 << 2) + $10 | 0, 0, $8);
    $7 = $7 - 2 | 0;
    if ($7) {
     continue;
    }
    break;
   }
  }
  if (!($9 & 1)) {
   break label$1;
  }
  $6 = 0;
  label$6: {
   if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) > 0)) {
    break label$6;
   }
   $8 = $5 + 1 | 0;
   if (!(SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $0 | 0, 0) <= 0)) {
    break label$6;
   }
   $6 = $8;
  }
  SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $10 | 0, 0, $6);
 }
 $7 = 0;
 SAFE_HEAP_STORE_i32_4_4(($9 << 2) + $10 | 0, 0, 0);
 $8 = operator_20new_5b_5d_28unsigned_20long_29($13);
 label$7: {
  if (($1 | 0) < 1) {
   break label$7;
  }
  $13 = $1 & 1;
  label$8: {
   if (!$9) {
    $6 = 0;
    $5 = 0;
    break label$8;
   }
   $7 = $1 & -2;
   $6 = 0;
   $5 = 0;
   while (1) {
    $1 = $6 << 2;
    $9 = SAFE_HEAP_LOAD_i32_4_4($10 + $1 | 0, 0);
    if (($9 | 0) >= 1) {
     SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $9);
     $5 = $5 + 1 | 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(($1 | 4) + $10 | 0, 0);
    if (($1 | 0) > 0) {
     SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $1);
     $5 = $5 + 1 | 0;
    }
    $6 = $6 + 2 | 0;
    $7 = $7 - 2 | 0;
    if ($7) {
     continue;
    }
    break;
   }
  }
  label$13: {
   if (!$13) {
    break label$13;
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $10 | 0, 0);
   if (($6 | 0) < 1) {
    break label$13;
   }
   SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $6);
   $5 = $5 + 1 | 0;
  }
  $7 = 0;
  if (($5 | 0) < 2) {
   break label$7;
  }
  $6 = 0;
  $1 = operator_20new_5b_5d_28unsigned_20long_29(($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3);
  while (1) {
   $9 = ($6 << 3) + $1 | 0;
   $7 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $8 | 0, 0);
   $12 = +($7 | 0);
   $7 = ($7 << 3) + $0 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($9, 0, $12 - $11 / (SAFE_HEAP_LOAD_f64_8_8($7, 0) - $11));
   $6 = $6 + 1 | 0;
   if (($6 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
  $7 = $5 - 1 | 0;
  if (($5 | 0) >= 2) {
   $11 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
   $5 = 0;
   while (1) {
    $6 = $5 << 3;
    $0 = $6 + $4 | 0;
    $5 = $5 + 1 | 0;
    $12 = SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $1 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($0, 0, $2 / ($12 - $11));
    SAFE_HEAP_STORE_f64_8_8($3 + $6 | 0, 0, ($12 + $11) * .5 / $2);
    $11 = $12;
    if (($5 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  operator_20delete_5b_5d_28void__29($1);
 }
 operator_20delete_5b_5d_28void__29($8);
 operator_20delete_5b_5d_28void__29($10);
 return $7;
}

function $28anonymous_20namespace_29__ZeroCrossingEngine_28double_20const__2c_20int_2c_20double_2c_20double__2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $9 = $1 - 1 | 0;
 $13 = ($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2;
 $10 = operator_20new_5b_5d_28unsigned_20long_29($13);
 label$1: {
  if (($1 | 0) < 2) {
   break label$1;
  }
  if (($1 | 0) != 2) {
   $7 = $9 & -2;
   while (1) {
    $6 = $5 | 1;
    $8 = 0;
    label$4: {
     if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) > 0)) {
      break label$4;
     }
     if (!(SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0) <= 0)) {
      break label$4;
     }
     $8 = $6;
    }
    SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $10 | 0, 0, $8);
    $5 = $5 + 2 | 0;
    $8 = 0;
    label$5: {
     if (!(SAFE_HEAP_LOAD_f64_8_8(($6 << 3) + $0 | 0, 0) > 0)) {
      break label$5;
     }
     if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) <= 0)) {
      break label$5;
     }
     $8 = $5;
    }
    SAFE_HEAP_STORE_i32_4_4(($6 << 2) + $10 | 0, 0, $8);
    $7 = $7 - 2 | 0;
    if ($7) {
     continue;
    }
    break;
   }
  }
  if (!($9 & 1)) {
   break label$1;
  }
  $6 = 0;
  label$6: {
   if (!(SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $0 | 0, 0) > 0)) {
    break label$6;
   }
   $8 = $5 + 1 | 0;
   if (!(SAFE_HEAP_LOAD_f64_8_8(($8 << 3) + $0 | 0, 0) <= 0)) {
    break label$6;
   }
   $6 = $8;
  }
  SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $10 | 0, 0, $6);
 }
 $7 = 0;
 SAFE_HEAP_STORE_i32_4_4(($9 << 2) + $10 | 0, 0, 0);
 $8 = operator_20new_5b_5d_28unsigned_20long_29($13);
 label$7: {
  if (($1 | 0) < 1) {
   break label$7;
  }
  $13 = $1 & 1;
  label$8: {
   if (!$9) {
    $6 = 0;
    $5 = 0;
    break label$8;
   }
   $7 = $1 & -2;
   $6 = 0;
   $5 = 0;
   while (1) {
    $1 = $6 << 2;
    $9 = SAFE_HEAP_LOAD_i32_4_4($10 + $1 | 0, 0);
    if (($9 | 0) >= 1) {
     SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $9);
     $5 = $5 + 1 | 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(($1 | 4) + $10 | 0, 0);
    if (($1 | 0) > 0) {
     SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $1);
     $5 = $5 + 1 | 0;
    }
    $6 = $6 + 2 | 0;
    $7 = $7 - 2 | 0;
    if ($7) {
     continue;
    }
    break;
   }
  }
  label$13: {
   if (!$13) {
    break label$13;
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $10 | 0, 0);
   if (($6 | 0) < 1) {
    break label$13;
   }
   SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $8 | 0, 0, $6);
   $5 = $5 + 1 | 0;
  }
  $7 = 0;
  if (($5 | 0) < 2) {
   break label$7;
  }
  $6 = 0;
  $1 = operator_20new_5b_5d_28unsigned_20long_29(($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3);
  while (1) {
   $9 = ($6 << 3) + $1 | 0;
   $7 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $8 | 0, 0);
   $12 = +($7 | 0);
   $7 = ($7 << 3) + $0 | 0;
   $11 = SAFE_HEAP_LOAD_f64_8_8($7 - 8 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($9, 0, $12 - $11 / (SAFE_HEAP_LOAD_f64_8_8($7, 0) - $11));
   $6 = $6 + 1 | 0;
   if (($6 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
  $7 = $5 - 1 | 0;
  if (($5 | 0) >= 2) {
   $11 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
   $5 = 0;
   while (1) {
    $6 = $5 << 3;
    $0 = $6 + $4 | 0;
    $5 = $5 + 1 | 0;
    $12 = SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $1 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($0, 0, $2 / ($12 - $11));
    SAFE_HEAP_STORE_f64_8_8($3 + $6 | 0, 0, ($12 + $11) * .5 / $2);
    $11 = $12;
    if (($5 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  operator_20delete_5b_5d_28void__29($1);
 }
 operator_20delete_5b_5d_28void__29($8);
 operator_20delete_5b_5d_28void__29($10);
 return $7;
}

function scanexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1: {
  label$2: {
   label$3: {
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    label$4: {
     if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
      SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      break label$4;
     }
     $2 = __shgetc($0);
    }
    switch ($2 - 43 | 0) {
    case 0:
    case 2:
     break label$2;

    default:
     break label$3;
    }
   }
   $4 = $2 - 48 | 0;
   break label$1;
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$6: {
   if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
    break label$6;
   }
   $3 = __shgetc($0);
  }
  $6 = ($2 | 0) == 45;
  $4 = $3 - 48 | 0;
  label$8: {
   if (!$1 | $4 >>> 0 < 10) {
    break label$8;
   }
   if (!SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
    break label$8;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
  }
  $2 = $3;
 }
 label$9: {
  if ($4 >>> 0 < 10) {
   $3 = 0;
   while (1) {
    $3 = Math_imul($3, 10) + $2 | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    label$12: {
     if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
      SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      break label$12;
     }
     $2 = __shgetc($0);
    }
    $4 = $2 - 48 | 0;
    $3 = $3 - 48 | 0;
    if (($3 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
     continue;
    }
    break;
   }
   $5 = $3;
   $3 = $3 >> 31;
   $1 = $3;
   label$14: {
    if ($4 >>> 0 >= 10) {
     break label$14;
    }
    while (1) {
     $3 = $1;
     $4 = __wasm_i64_mul($5, $3, 10, 0);
     $3 = i64toi32_i32$HIGH_BITS;
     $1 = $3;
     $2 = $2 + $4 | 0;
     $5 = $2;
     $1 = $2 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$16: {
      if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
       SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
       $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
       break label$16;
      }
      $4 = __shgetc($0);
     }
     $3 = $5;
     $5 = $3 - 48 | 0;
     $2 = $3 >>> 0 < 48;
     $2 = $1 - $2 | 0;
     $1 = $2;
     $2 = $4;
     $4 = $2 - 48 | 0;
     if ($4 >>> 0 > 9) {
      break label$14;
     }
     if (($1 | 0) < 21474836 ? 1 : ($1 | 0) <= 21474836 ? $5 >>> 0 < 2061584302 : 0) {
      continue;
     }
     break;
    }
   }
   if ($4 >>> 0 < 10) {
    while (1) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$20: {
      if ($2 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 104) >>> 0) {
       SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
       break label$20;
      }
      $2 = __shgetc($0);
     }
     if ($2 - 48 >>> 0 < 10) {
      continue;
     }
     break;
    }
   }
   if (SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
   }
   $0 = 0 - ($1 + (($5 | 0) != 0) | 0) | 0;
   $2 = $6;
   $3 = $2 ? 0 - $5 | 0 : $5;
   $5 = $3;
   $1 = $2 ? $0 : $1;
   break label$9;
  }
  $1 = -2147483648;
  if (!SAFE_HEAP_LOAD_i32_4_4($0, 104)) {
   break label$9;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $5;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 $6 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
 label$1: {
  if (!$6) {
   break label$1;
  }
  if (bool_20std____2____ptr_in_range_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29(wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0)) {
   $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t__2c_20void__28wchar_t__2c_20wchar_t__2c_20std____2__allocator_wchar_t__20const__29($5, $1, $2, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0));
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1));
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($1);
   break label$1;
  }
  if ($3 - $4 >>> 0 < $6 >>> 0) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, ($4 + $6 | 0) - $3 | 0, $4, $4, 0, 0);
  }
  $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + ($4 << 2) | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $1 = $1 + 4 | 0;
    $3 = $3 + 4 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $5);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $4 + $6 | 0);
 }
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
 if ($8 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
  $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  label$2: {
   if (($8 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
    SAFE_HEAP_STORE_i32_4_4($9, 8, $1 << 1);
    SAFE_HEAP_STORE_i32_4_4($9, 12, $1 + $2 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($9 + 12 | 0, $9 + 8 | 0), 0));
    break label$2;
   }
   $2 = $8 - 1 | 0;
  }
  $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
  $11 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($8, $11);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($10), $4);
  }
  if ($6) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2) + $4 | 0, $7, $6);
  }
  $8 = $3 - ($4 + $5 | 0) | 0;
  if ($8) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($10) + $4 | 0) + $5 | 0, $8);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 11) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $10, $1);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $11);
  $4 = ($4 + $6 | 0) + $8 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
  SAFE_HEAP_STORE_i32_1_1($9, 7, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0, $9 + 7 | 0);
  __stack_pointer = $9 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function interp1Q($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $13 = operator_20new_5b_5d_28unsigned_20long_29(($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3);
 $12 = operator_20new_5b_5d_28unsigned_20long_29(($3 & 536870911) != ($3 | 0) ? -1 : $3 << 3);
 $14 = operator_20new_5b_5d_28unsigned_20long_29(($5 & 1073741823) != ($5 | 0) ? -1 : $5 << 2);
 if (($5 | 0) > 0) {
  while (1) {
   $9 = ($7 << 2) + $14 | 0;
   $10 = $7 << 3;
   $11 = (SAFE_HEAP_LOAD_f64_8_8($10 + $4 | 0, 0) - $0) / $1;
   label$3: {
    if (Math_abs($11) < 2147483648) {
     $8 = ~~$11;
     break label$3;
    }
    $8 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($9, 0, $8);
   SAFE_HEAP_STORE_f64_8_8($10 + $13 | 0, 0, $11 - +($8 | 0));
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $15 = $3 - 1 | 0;
 label$5: {
  if (($3 | 0) < 2) {
   break label$5;
  }
  $8 = $3 - 1 | 0;
  $9 = $8 & 3;
  $11 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
  $7 = 0;
  if ($3 - 2 >>> 0 >= 3) {
   $10 = $8 & -4;
   while (1) {
    $8 = $7 << 3;
    $3 = $12 + $8 | 0;
    $4 = $8 | 8;
    $0 = SAFE_HEAP_LOAD_f64_8_8($4 + $2 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $0 - $11);
    $3 = $4 + $12 | 0;
    $4 = $8 | 16;
    $11 = SAFE_HEAP_LOAD_f64_8_8($4 + $2 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $11 - $0);
    $3 = $4 + $12 | 0;
    $8 = $8 | 24;
    $0 = SAFE_HEAP_LOAD_f64_8_8($8 + $2 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $0 - $11);
    $3 = $8 + $12 | 0;
    $7 = $7 + 4 | 0;
    $11 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $2 | 0, 0);
    SAFE_HEAP_STORE_f64_8_8($3, 0, $11 - $0);
    $10 = $10 - 4 | 0;
    if ($10) {
     continue;
    }
    break;
   }
  }
  if (!$9) {
   break label$5;
  }
  while (1) {
   $3 = ($7 << 3) + $12 | 0;
   $7 = $7 + 1 | 0;
   $0 = SAFE_HEAP_LOAD_f64_8_8(($7 << 3) + $2 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($3, 0, $0 - $11);
   $11 = $0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i64_8_8(($15 << 3) + $12 | 0, 0, 0, 0);
 label$9: {
  if (($5 | 0) < 1) {
   break label$9;
  }
  $4 = $5 & 1;
  $7 = 0;
  if (($5 | 0) != 1) {
   $8 = $5 & -2;
   while (1) {
    $9 = $7 << 3;
    $3 = $9 + $6 | 0;
    $10 = SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $14 | 0, 0) << 3;
    SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($10 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($12 + $10 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($9 + $13 | 0, 0));
    $9 = $7 | 1;
    $10 = $9 << 3;
    $3 = $10 + $6 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4(($9 << 2) + $14 | 0, 0) << 3;
    SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($9 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($12 + $9 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($10 + $13 | 0, 0));
    $7 = $7 + 2 | 0;
    $8 = $8 - 2 | 0;
    if ($8) {
     continue;
    }
    break;
   }
  }
  if (!$4) {
   break label$9;
  }
  $8 = $7 << 3;
  $3 = $8 + $6 | 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $14 | 0, 0) << 3;
  SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8($7 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($7 + $12 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8($8 + $13 | 0, 0));
 }
 operator_20delete_5b_5d_28void__29($13);
 operator_20delete_5b_5d_28void__29($14);
 operator_20delete_5b_5d_28void__29($12);
}

function WorldNativeFun__CheapTrick_JS_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 $7 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $7);
 SAFE_HEAP_STORE_i32_4_4($5, 40, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 $0 = 0;
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $8 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($5 + 40 | 0, $5 + 52 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 40) | 0);
 if (!SAFE_HEAP_LOAD_i32_4_4($5, 52)) {
  emscripten_log(4, 2707, 0);
  EM_TERM_28_29();
 }
 SAFE_HEAP_STORE_i32_4_4($5, 32, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $9 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($5 + 32 | 0, $5 + 48 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 32) | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 $10 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($5 + 24 | 0, 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 24) | 0);
 $1 = $5 + 16 | 0;
 SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
 $2 = $5 + 8 | 0;
 SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
 InitializeCheapTrickOption($4, $5);
 SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 1079099392);
 SAFE_HEAP_STORE_i32_4_4($1, 0, GetFFTSizeForCheapTrick($4, $5));
 $2 = _emval_new_cstring(1758) | 0;
 SAFE_HEAP_STORE_i32_4_4($5, 56, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 $3 = _emval_take_value(20676, $5 + 56 | 0) | 0;
 _emval_set_property($7 | 0, $2 | 0, $3 | 0);
 _emval_decref($3 | 0);
 _emval_decref($2 | 0);
 $2 = SAFE_HEAP_LOAD_i32_4_4($5, 48);
 $3 = operator_20new_5b_5d_28unsigned_20long_29(($2 & 1073741823) != ($2 | 0) ? -1 : $2 << 2);
 $6 = ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) / 2 | 0) + 1 | 0;
 if (($2 | 0) > 0) {
  $1 = ($6 & 536870911) != ($6 | 0) ? -1 : $6 << 3;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($0 << 2) + $3 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($1));
   $0 = $0 + 1 | 0;
   if (($2 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 CheapTrick($8, SAFE_HEAP_LOAD_i32_4_4($5, 52), $4, $10, $9, $2, $5, $3);
 $11 = SAFE_HEAP_LOAD_i32_4_4($5, 48);
 $4 = _emval_new_array() | 0;
 if (($11 | 0) >= 1) {
  $0 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($5, 60, SAFE_HEAP_LOAD_i32_4_4(($0 << 2) + $3 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($5, 56, $6);
   $2 = _emval_take_value(3516, $5 + 56 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 56, $0);
   $1 = _emval_take_value(20676, $5 + 56 | 0) | 0;
   _emval_set_property($4 | 0, $1 | 0, $2 | 0);
   _emval_decref($1 | 0);
   _emval_decref($2 | 0);
   $0 = $0 + 1 | 0;
   if (($11 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = _emval_new_cstring(1576) | 0;
 _emval_set_property($7 | 0, $0 | 0, $4 | 0);
 _emval_decref($0 | 0);
 _emval_decref($4 | 0);
 if ($8) {
  operator_20delete_5b_5d_28void__29($8);
 }
 if ($9) {
  operator_20delete_5b_5d_28void__29($9);
 }
 if ($10) {
  operator_20delete_5b_5d_28void__29($10);
 }
 operator_20delete_5b_5d_28void__29($3);
 __stack_pointer = $5 - -64 | 0;
}

function $28anonymous_20namespace_29__ExtendF0_28double_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20double_20const__20const__2c_20int_2c_20double_2c_20double__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $1 = $1 - $0 | 0;
 $15 = $1;
 $1 = $1 >> 31;
 $14 = $1 ^ $1 + $15;
 $6 = $14 + 1 | 0;
 $10 = $6 & 3;
 $11 = SAFE_HEAP_LOAD_f64_8_8(($0 << 3) + $5 | 0, 0);
 $1 = 0;
 $8 = operator_20new_5b_5d_28unsigned_20long_29(($6 & 1073741823) != ($6 | 0) ? -1 : $6 << 2);
 if ($14 >>> 0 >= 3) {
  $6 = $6 & -4;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($1 << 2) + $8 | 0, 0, Math_imul($1, $2) + $0 | 0);
   $7 = $1 | 1;
   SAFE_HEAP_STORE_i32_4_4(($7 << 2) + $8 | 0, 0, Math_imul($2, $7) + $0 | 0);
   $7 = $1 | 2;
   SAFE_HEAP_STORE_i32_4_4(($7 << 2) + $8 | 0, 0, Math_imul($2, $7) + $0 | 0);
   $7 = $1 | 3;
   SAFE_HEAP_STORE_i32_4_4(($7 << 2) + $8 | 0, 0, Math_imul($2, $7) + $0 | 0);
   $1 = $1 + 4 | 0;
   $6 = $6 - 4 | 0;
   if ($6) {
    continue;
   }
   break;
  }
 }
 if ($10) {
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($1 << 2) + $8 | 0, 0, Math_imul($1, $2) + $0 | 0);
   $1 = $1 + 1 | 0;
   $10 = $10 - 1 | 0;
   if ($10) {
    continue;
   }
   break;
  }
 }
 label$5: {
  if (($4 | 0) >= 1) {
   $15 = $4 & -2;
   $22 = $4 & 1;
   while (1) {
    $17 = SAFE_HEAP_LOAD_i32_4_4(($16 << 2) + $8 | 0, 0) + $2 | 0;
    $10 = SAFE_HEAP_LOAD_i32_4_4(($17 << 2) + $3 | 0, 0);
    $13 = .18;
    $1 = 0;
    $9 = 0;
    $6 = $15;
    if (($4 | 0) != 1) {
     while (1) {
      $7 = $1 << 3;
      $12 = SAFE_HEAP_LOAD_f64_8_8($10 + $7 | 0, 0);
      $18 = $12;
      $12 = Math_abs($11 - $12) / $11;
      $19 = $12 > $13;
      $18 = $19 ? $9 : $18;
      $9 = SAFE_HEAP_LOAD_f64_8_8(($7 | 8) + $10 | 0, 0);
      $20 = Math_abs($11 - $9) / $11;
      $13 = $19 ? $13 : $12;
      $7 = $20 > $13;
      $9 = $7 ? $18 : $9;
      $13 = $7 ? $13 : $20;
      $1 = $1 + 2 | 0;
      $6 = $6 - 2 | 0;
      if ($6) {
       continue;
      }
      break;
     }
    }
    $6 = ($17 << 3) + $5 | 0;
    if ($22) {
     $12 = SAFE_HEAP_LOAD_f64_8_8(($1 << 3) + $10 | 0, 0);
     $9 = Math_abs($11 - $12) / $11 > $13 ? $9 : $12;
    }
    SAFE_HEAP_STORE_f64_8_8($6, 0, $9);
    $1 = $9 == 0;
    $0 = $1 ? $0 : $17;
    $21 = $1 ? $21 + 1 | 0 : 0;
    if (($21 | 0) == 4) {
     break label$5;
    }
    $11 = $1 ? $11 : $9;
    $1 = ($14 | 0) == ($16 | 0);
    $16 = $16 + 1 | 0;
    if (!$1) {
     continue;
    }
    break;
   }
   break label$5;
  }
  SAFE_HEAP_STORE_i64_8_8((SAFE_HEAP_LOAD_i32_4_4($8, 0) + $2 << 3) + $5 | 0, 0, 0, 0);
  $1 = $14 >>> 0 < 3 ? $14 : 3;
  if (!$1) {
   break label$5;
  }
  SAFE_HEAP_STORE_i64_8_8((SAFE_HEAP_LOAD_i32_4_4($8, 4) + $2 << 3) + $5 | 0, 0, 0, 0);
  if (($1 | 0) == 1) {
   break label$5;
  }
  SAFE_HEAP_STORE_i64_8_8((SAFE_HEAP_LOAD_i32_4_4($8, 8) + $2 << 3) + $5 | 0, 0, 0, 0);
  if (($1 | 0) == 2) {
   break label$5;
  }
  SAFE_HEAP_STORE_i64_8_8((SAFE_HEAP_LOAD_i32_4_4($8, 12) + $2 << 3) + $5 | 0, 0, 0, 0);
 }
 operator_20delete_5b_5d_28void__29($8);
 return $0;
}

function bool_20std____2____insertion_sort_incomplete_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 $7 = 1;
 label$1: {
  label$2: {
   switch ($1 - $0 >> 3) {
   case 2:
    $3 = $1 - 8 | 0;
    if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $0)) {
     break label$1;
    }
    std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $3);
    break label$1;

   case 3:
    unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $0 + 8 | 0, $1 - 8 | 0, $2);
    break label$1;

   case 4:
    unsigned_20int_20std____2____sort4_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $0 + 8 | 0, $0 + 16 | 0, $1 - 8 | 0, $2);
    break label$1;

   case 5:
    unsigned_20int_20std____2____sort5_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $0 + 8 | 0, $0 + 16 | 0, $0 + 24 | 0, $1 - 8 | 0, $2);
    break label$1;

   case 0:
   case 1:
    break label$1;

   default:
    break label$2;
   }
  }
  $5 = $0 + 16 | 0;
  unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $0 + 8 | 0, $5, $2);
  $4 = $0 + 24 | 0;
  while (1) {
   if (($1 | 0) == ($4 | 0)) {
    break label$1;
   }
   label$8: {
    if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $4, $5)) {
     SAFE_HEAP_STORE_f64_8_8($6, 8, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($4), 0));
     $8 = $4;
     while (1) {
      label$11: {
       $3 = $5;
       SAFE_HEAP_STORE_f64_8_8($8, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($3), 0));
       if (($0 | 0) == ($3 | 0)) {
        $3 = $0;
        break label$11;
       }
       $8 = $3;
       $5 = $3 - 8 | 0;
       if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $6 + 8 | 0, $5)) {
        continue;
       }
      }
      break;
     }
     SAFE_HEAP_STORE_f64_8_8($3, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($6 + 8 | 0), 0));
     $9 = $9 + 1 | 0;
     if (($9 | 0) == 8) {
      break label$8;
     }
    }
    $5 = $4;
    $4 = $4 + 8 | 0;
    continue;
   }
   break;
  }
  $7 = ($4 + 8 | 0) == ($1 | 0);
 }
 __stack_pointer = $6 + 16 | 0;
 return $7;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 $6 = std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($1, $2);
 label$1: {
  if (!$6) {
   break label$1;
  }
  if (bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29(char__20std____2__addressof_char__28char__29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0)) {
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__2c_20std____2__allocator_char__20const__29($5 + 16 | 0, $1, $2, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0));
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1));
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
   break label$1;
  }
  if ($3 - $4 >>> 0 < $6 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, ($4 + $6 | 0) - $3 | 0, $4, $4, 0, 0);
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_1_1($5, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $5 + 15 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $4 + $6 | 0);
 }
 __stack_pointer = $5 + 32 | 0;
 return $0;
}

function WorldModule__F0EstimationDio_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 $3 = $5 + 40 | 0;
 SAFE_HEAP_STORE_i64_8_8($3, 0, 0, 0);
 $4 = $5 + 32 | 0;
 SAFE_HEAP_STORE_i64_8_8($4, 0, 0, 0);
 $2 = $5 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($5 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($5 + 8 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
 InitializeDioOption($5);
 $10 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 1);
 SAFE_HEAP_STORE_f64_8_8($2, 0, $10);
 SAFE_HEAP_STORE_i64_8_8($3, 0, -1717986918, 1069128089);
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 1078198272);
 $4 = $1 + 28 | 0;
 $2 = $1 + 16 | 0;
 $3 = GetSamplesForDIO(SAFE_HEAP_LOAD_i32_4_4($2, 0), SAFE_HEAP_LOAD_i32_4_4($1, 4), $10);
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
 $6 = $1 + 20 | 0;
 $3 = ($3 & 536870911) != ($3 | 0) ? -1 : $3 << 3;
 $9 = operator_20new_5b_5d_28unsigned_20long_29($3);
 SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
 $7 = $1 + 24 | 0;
 $8 = operator_20new_5b_5d_28unsigned_20long_29($3);
 SAFE_HEAP_STORE_i32_4_4($7, 0, $8);
 $3 = operator_20new_5b_5d_28unsigned_20long_29($3);
 Dio(SAFE_HEAP_LOAD_i32_4_4($1, 0), SAFE_HEAP_LOAD_i32_4_4($1, 4), SAFE_HEAP_LOAD_i32_4_4($2, 0), $5, $8, $9);
 StoneMask(SAFE_HEAP_LOAD_i32_4_4($1, 0), SAFE_HEAP_LOAD_i32_4_4($1, 4), SAFE_HEAP_LOAD_i32_4_4($2, 0), SAFE_HEAP_LOAD_i32_4_4($7, 0), SAFE_HEAP_LOAD_i32_4_4($6, 0), SAFE_HEAP_LOAD_i32_4_4($4, 0), $3);
 $8 = $1 + 8 | 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 label$1: {
  if (($2 | 0) < 1) {
   break label$1;
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $6 = $2 & 3;
  $1 = 0;
  if ($2 - 1 >>> 0 >= 3) {
   $9 = $2 & -4;
   while (1) {
    $2 = $1 << 3;
    SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2 + $3 | 0, 0));
    $7 = $2 | 8;
    SAFE_HEAP_STORE_f64_8_8($7 + $4 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($3 + $7 | 0, 0));
    $7 = $2 | 16;
    SAFE_HEAP_STORE_f64_8_8($7 + $4 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($3 + $7 | 0, 0));
    $2 = $2 | 24;
    SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2 + $3 | 0, 0));
    $1 = $1 + 4 | 0;
    $9 = $9 - 4 | 0;
    if ($9) {
     continue;
    }
    break;
   }
  }
  if (!$6) {
   break label$1;
  }
  while (1) {
   $2 = $1 << 3;
   SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($2 + $3 | 0, 0));
   $1 = $1 + 1 | 0;
   $6 = $6 - 1 | 0;
   if ($6) {
    continue;
   }
   break;
  }
 }
 operator_20delete_5b_5d_28void__29($3);
 SAFE_HEAP_STORE_i64_8_8($0 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $5 + 48 | 0;
}

function double___20GetPtrFrom2XArray_double__28emscripten__val_20const__2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 if (!$1) {
  $1 = operator_20new_5b_5d_28unsigned_20long_29(4);
 }
 if (!$2) {
  $2 = operator_20new_5b_5d_28unsigned_20long_29(4);
 }
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $3 = _emval_new_cstring(1642) | 0;
 $6 = _emval_get_property($5 | 0, $3 | 0) | 0;
 _emval_decref($3 | 0);
 $8 = +_emval_as($6 | 0, 20676, $4 + 24 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0);
 $5 = $1;
 if (Math_abs($8) < 2147483648) {
  $3 = ~~$8;
 } else {
  $3 = -2147483648;
 }
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 _emval_decref($6 | 0);
 $10 = _emval_get_global(1864) | 0;
 label$5: {
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) >= 1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $6 = 0;
   SAFE_HEAP_STORE_i32_4_4($4, 24, 0);
   $7 = _emval_take_value(20676, $4 + 24 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $7 | 0) | 0;
   _emval_decref($7 | 0);
   $5 = _emval_new_cstring(1642) | 0;
   $7 = _emval_get_property($3 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $8 = +_emval_as($7 | 0, 20676, $4 + 24 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0);
   $9 = $2;
   if (Math_abs($8) < 2147483648) {
    $5 = ~~$8;
   } else {
    $5 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($9, 0, $5);
   _emval_decref($7 | 0);
   _emval_decref($3 | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $9 = operator_20new_5b_5d_28unsigned_20long_29(($3 & 1073741823) != ($3 | 0) ? -1 : $3 << 2);
   if (($3 | 0) < 1) {
    break label$5;
   }
   while (1) {
    $5 = ($6 << 2) + $9 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    $7 = operator_20new_5b_5d_28unsigned_20long_29(($3 & 536870911) != ($3 | 0) ? -1 : $3 << 3);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $7);
    $5 = _emval_new_cstring(2696) | 0;
    $3 = _emval_get_property($10 | 0, $5 | 0) | 0;
    _emval_decref($5 | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 24, $6);
    $11 = _emval_take_value(20676, $4 + 24 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 8, _emval_get_property($5 | 0, $11 | 0) | 0);
    _emval_decref($11 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 24, $7 >>> 3 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 0, _emval_take_value(20676, $4 + 24 | 0) | 0);
    emscripten__internal__MethodCaller_emscripten__val_2c_20emscripten__val_2c_20emscripten__val___call_28emscripten__internal___EM_VAL__2c_20char_20const__2c_20emscripten__val___2c_20emscripten__val___29($4 + 16 | 0, $3, 1266, $4 + 8 | 0, $4);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 16) | 0);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
    _emval_decref($3 | 0);
    $6 = $6 + 1 | 0;
    if (($6 | 0) < (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0)) {
     continue;
    }
    break;
   }
   break label$5;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 }
 _emval_decref($10 | 0);
 __stack_pointer = $4 + 32 | 0;
 return $9;
}

function std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 label$1: {
  if ($7 & 2) {
   $7 = 1;
   if (($4 - $3 | 0) < 3) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 239);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 187);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, 191);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  while (1) {
   if ($1 >>> 0 <= $3 >>> 0) {
    $7 = 0;
    break label$1;
   }
   $7 = 2;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   if (($3 & -2048) == 55296 | $3 >>> 0 > $6 >>> 0) {
    break label$1;
   }
   label$5: {
    label$6: {
     if ($3 >>> 0 <= 127) {
      $7 = 1;
      $0 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      if (($4 - $0 | 0) < 1) {
       break label$1;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, $0 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($0, 0, $3);
      break label$6;
     }
     if ($3 >>> 0 <= 2047) {
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      if (($4 - $7 | 0) < 2) {
       break label$5;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 | 192);
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
      break label$6;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     $0 = $4 - $7 | 0;
     if ($3 >>> 0 <= 65535) {
      if (($0 | 0) < 3) {
       break label$5;
      }
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 12 | 224);
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 & 63 | 128);
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
      break label$6;
     }
     if (($0 | 0) < 4) {
      break label$5;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 18 | 240);
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 12 & 63 | 128);
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($7, 0, $3 >>> 6 & 63 | 128);
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $7 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($7, 0, $3 & 63 | 128);
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 4 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
    continue;
   }
   break;
  }
  return 1;
 }
 return $7;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
 label$1: {
  if (!(std____2__ios_base__flags_28_29_20const($3) & 1)) {
   SAFE_HEAP_STORE_i32_4_4($6, 0, -1);
   $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0, $1, $2, $3, $4, $6) | 0;
   SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
   label$3: {
    switch (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_1_1($5, 0, 0);
     break label$1;

    case 1:
     SAFE_HEAP_STORE_i32_1_1($5, 0, 1);
     break label$1;

    default:
     break label$3;
    }
   }
   SAFE_HEAP_STORE_i32_1_1($5, 0, 1);
   SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
   break label$1;
  }
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $3 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__numpunct_wchar_t___truename_28_29_20const($6, $3);
  std____2__numpunct_wchar_t___falsename_28_29_20const($6 | 12, $3);
  $3 = $6 + 24 | 0;
  SAFE_HEAP_STORE_i32_1_1($5, 0, (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0));
  $1 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
  while (1) {
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($3 - 12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 32 | 0;
 return $1 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0);
 if ($8 - $1 >>> 0 >= $2 >>> 0) {
  $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0);
  label$2: {
   if (($8 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
    SAFE_HEAP_STORE_i32_4_4($7, 8, $1 << 1);
    SAFE_HEAP_STORE_i32_4_4($7, 12, $1 + $2 | 0);
    $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0), 0));
    break label$2;
   }
   $2 = $8 - 1 | 0;
  }
  $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
  $8 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($10, $8);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2), wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($9), $4);
  }
  $3 = $3 - ($4 + $5 | 0) | 0;
  if ($3) {
   $10 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2);
   $4 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($10 + $4 | 0) + ($6 << 2) | 0, (wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($9) + $4 | 0) + ($5 << 2) | 0, $3);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 2) {
   std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), $9, $1);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $2);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $8);
  __stack_pointer = $7 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function cftleaf_28int_2c_20int_2c_20double__2c_20int_2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 if (($0 | 0) == 512) {
  $0 = ($3 << 3) + $4 | 0;
  $5 = $0 - 512 | 0;
  cftmdl1_28int_2c_20double__2c_20double__29(128, $2, $5);
  $3 = $0 + -64 | 0;
  cftf161_28double__2c_20double__29($2, $3);
  $4 = $0 - 256 | 0;
  cftf162_28double__2c_20double__29($2 + 256 | 0, $4);
  cftf161_28double__2c_20double__29($2 + 512 | 0, $3);
  cftf161_28double__2c_20double__29($2 + 768 | 0, $3);
  $6 = $2 + 1024 | 0;
  $7 = $0 - 1024 | 0;
  cftmdl2_28int_2c_20double__2c_20double__29(128, $6, $7);
  cftf161_28double__2c_20double__29($6, $3);
  cftf162_28double__2c_20double__29($2 + 1280 | 0, $4);
  cftf161_28double__2c_20double__29($2 + 1536 | 0, $3);
  cftf162_28double__2c_20double__29($2 + 1792 | 0, $4);
  $0 = $2 + 2048 | 0;
  cftmdl1_28int_2c_20double__2c_20double__29(128, $0, $5);
  cftf161_28double__2c_20double__29($0, $3);
  cftf162_28double__2c_20double__29($2 + 2304 | 0, $4);
  cftf161_28double__2c_20double__29($2 + 2560 | 0, $3);
  cftf161_28double__2c_20double__29($2 + 2816 | 0, $3);
  $0 = $2 + 3072 | 0;
  label$2: {
   if ($1) {
    cftmdl1_28int_2c_20double__2c_20double__29(128, $0, $5);
    cftf161_28double__2c_20double__29($2 + 3840 | 0, $3);
    break label$2;
   }
   cftmdl2_28int_2c_20double__2c_20double__29(128, $0, $7);
   cftf162_28double__2c_20double__29($2 + 3840 | 0, $4);
  }
  cftf161_28double__2c_20double__29($2 + 3072 | 0, $3);
  cftf162_28double__2c_20double__29($2 + 3328 | 0, $4);
  cftf161_28double__2c_20double__29($2 + 3584 | 0, $3);
  return;
 }
 $4 = ($3 << 3) + $4 | 0;
 $0 = $4 - 256 | 0;
 cftmdl1_28int_2c_20double__2c_20double__29(64, $2, $0);
 $3 = $4 + -64 | 0;
 cftf081_28double__2c_20double__29($2, $3);
 cftf082_28double__2c_20double__29($2 + 128 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 256 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 384 | 0, $3);
 $5 = $2 + 512 | 0;
 $6 = $4 - 512 | 0;
 cftmdl2_28int_2c_20double__2c_20double__29(64, $5, $6);
 cftf081_28double__2c_20double__29($5, $3);
 cftf082_28double__2c_20double__29($2 + 640 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 768 | 0, $3);
 cftf082_28double__2c_20double__29($2 + 896 | 0, $3);
 $4 = $2 + 1024 | 0;
 cftmdl1_28int_2c_20double__2c_20double__29(64, $4, $0);
 cftf081_28double__2c_20double__29($4, $3);
 cftf082_28double__2c_20double__29($2 + 1152 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 1280 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 1408 | 0, $3);
 $4 = $2 + 1536 | 0;
 label$4: {
  if ($1) {
   cftmdl1_28int_2c_20double__2c_20double__29(64, $4, $0);
   cftf081_28double__2c_20double__29($2 + 1920 | 0, $3);
   break label$4;
  }
  cftmdl2_28int_2c_20double__2c_20double__29(64, $4, $6);
  cftf082_28double__2c_20double__29($2 + 1920 | 0, $3);
 }
 cftf081_28double__2c_20double__29($2 + 1536 | 0, $3);
 cftf082_28double__2c_20double__29($2 + 1664 | 0, $3);
 cftf081_28double__2c_20double__29($2 + 1792 | 0, $3);
}

function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 52)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
   if (!$1) {
    break label$1;
   }
   $5 = std____2__char_traits_wchar_t___eof_28_29();
   SAFE_HEAP_STORE_i32_1_1($0, 52, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 48, $5);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 24, 1);
  $4 = SAFE_HEAP_LOAD_i32_4_4(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2 + 24 | 0, $0 + 44 | 0), 0);
  $6 = ($4 | 0) > 0 ? $4 : 0;
  label$3: {
   while (1) {
    if (($3 | 0) != ($6 | 0)) {
     $5 = getc(SAFE_HEAP_LOAD_i32_4_4($0, 32));
     if (($5 | 0) == -1) {
      break label$3;
     }
     SAFE_HEAP_STORE_i32_1_1(($2 + 24 | 0) + $3 | 0, 0, $5);
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   label$6: {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 53)) {
     SAFE_HEAP_STORE_i32_4_4($2, 20, SAFE_HEAP_LOAD_i32_1_1($2, 24));
     break label$6;
    }
    $6 = $2 + 24 | 0;
    while (1) {
     label$9: {
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
      $7 = SAFE_HEAP_LOAD_i64_8_4($3, 0);
      $8 = i64toi32_i32$HIGH_BITS;
      label$10: {
       $9 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
       $5 = ($2 + 24 | 0) + $4 | 0;
       switch (std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($9, $3, $2 + 24 | 0, $5, $2 + 16 | 0, $2 + 20 | 0, $6, $2 + 12 | 0) - 1 | 0) {
       case 0:
        break label$10;

       case 1:
        break label$3;

       case 2:
        break label$9;

       default:
        break label$6;
       }
      }
      SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 40), 0, $7, $8);
      if (($4 | 0) == 8) {
       break label$3;
      }
      $3 = getc(SAFE_HEAP_LOAD_i32_4_4($0, 32));
      if (($3 | 0) == -1) {
       break label$3;
      }
      SAFE_HEAP_STORE_i32_1_1($5, 0, $3);
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 20, SAFE_HEAP_LOAD_i32_1_1($2, 24));
   }
   label$11: {
    if (!$1) {
     while (1) {
      if (($4 | 0) < 1) {
       break label$11;
      }
      $4 = $4 - 1 | 0;
      if ((ungetc(std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_1_1($4 + ($2 + 24 | 0) | 0, 0)), SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != -1) {
       continue;
      }
      break label$3;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($0, 48, std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($2, 20)));
   }
   $3 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($2, 20));
   break label$1;
  }
  $3 = std____2__char_traits_wchar_t___eof_28_29();
 }
 __stack_pointer = $2 + 32 | 0;
 return $3;
}

function std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = $0;
 label$1: {
  if (!($4 & 4) | ($1 - $5 | 0) < 3) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 239) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) != 187) {
   break label$1;
  }
  $5 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 2) | 0) == 191 ? $0 + 3 | 0 : $0;
 }
 while (1) {
  label$3: {
   if ($1 >>> 0 <= $5 >>> 0 | $2 >>> 0 <= $9 >>> 0) {
    break label$3;
   }
   $7 = SAFE_HEAP_LOAD_i32_1_1($5, 0);
   $4 = $7 & 255;
   label$4: {
    if (($7 | 0) >= 0) {
     $7 = 1;
     if ($3 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     break label$3;
    }
    if ($4 >>> 0 < 194) {
     break label$3;
    }
    if ($4 >>> 0 <= 223) {
     if (($1 - $5 | 0) < 2) {
      break label$3;
     }
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
     if (($6 & 192) != 128) {
      break label$3;
     }
     $7 = 2;
     if (($6 & 63 | $4 << 6 & 1984) >>> 0 <= $3 >>> 0) {
      break label$4;
     }
     break label$3;
    }
    label$7: {
     label$8: {
      if ($4 >>> 0 <= 239) {
       if (($1 - $5 | 0) < 3) {
        break label$3;
       }
       $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 2);
       $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
       if (($4 | 0) == 237) {
        break label$8;
       }
       if (($4 | 0) == 224) {
        if (($6 & 224) == 160) {
         break label$7;
        }
        break label$3;
       }
       if (($6 & 192) != 128) {
        break label$3;
       }
       break label$7;
      }
      if (($1 - $5 | 0) < 4 | $4 >>> 0 > 244) {
       break label$3;
      }
      $10 = SAFE_HEAP_LOAD_i32_1_U_1($5, 3);
      $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 2);
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
      label$11: {
       label$12: {
        switch ($4 - 240 | 0) {
        case 0:
         if (($6 + 112 & 255) >>> 0 < 48) {
          break label$11;
         }
         break label$3;

        case 4:
         if (($6 & 240) == 128) {
          break label$11;
         }
         break label$3;

        default:
         break label$12;
        }
       }
       if (($6 & 192) != 128) {
        break label$3;
       }
      }
      if (($8 & 192) != 128 | ($10 & 192) != 128) {
       break label$3;
      }
      $7 = 4;
      if (($10 & 63 | ($8 << 6 & 4032 | ($4 << 18 & 1835008 | ($6 & 63) << 12))) >>> 0 > $3 >>> 0) {
       break label$3;
      }
      break label$4;
     }
     if (($6 & 224) != 128) {
      break label$3;
     }
    }
    if (($8 & 192) != 128) {
     break label$3;
    }
    $7 = 3;
    if (($8 & 63 | ($4 << 12 & 61440 | ($6 & 63) << 6)) >>> 0 > $3 >>> 0) {
     break label$3;
    }
   }
   $9 = $9 + 1 | 0;
   $5 = $5 + $7 | 0;
   continue;
  }
  break;
 }
 return $5 - $0 | 0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
 label$1: {
  if (!(std____2__ios_base__flags_28_29_20const($3) & 1)) {
   SAFE_HEAP_STORE_i32_4_4($6, 0, -1);
   $1 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0, $1, $2, $3, $4, $6) | 0;
   SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
   label$3: {
    switch (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_1_1($5, 0, 0);
     break label$1;

    case 1:
     SAFE_HEAP_STORE_i32_1_1($5, 0, 1);
     break label$1;

    default:
     break label$3;
    }
   }
   SAFE_HEAP_STORE_i32_1_1($5, 0, 1);
   SAFE_HEAP_STORE_i32_4_4($4, 0, 4);
   break label$1;
  }
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $3 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__numpunct_char___truename_28_29_20const($6, $3);
  std____2__numpunct_char___falsename_28_29_20const($6 | 12, $3);
  $3 = $6 + 24 | 0;
  SAFE_HEAP_STORE_i32_1_1($5, 0, (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0));
  $1 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
  while (1) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 - 12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 32 | 0;
 return $1 | 0;
}

function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 52)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
   if (!$1) {
    break label$1;
   }
   $5 = std____2__char_traits_char___eof_28_29();
   SAFE_HEAP_STORE_i32_1_1($0, 52, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 48, $5);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 24, 1);
  $4 = SAFE_HEAP_LOAD_i32_4_4(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2 + 24 | 0, $0 + 44 | 0), 0);
  $6 = ($4 | 0) > 0 ? $4 : 0;
  label$3: {
   while (1) {
    if (($3 | 0) != ($6 | 0)) {
     $5 = getc(SAFE_HEAP_LOAD_i32_4_4($0, 32));
     if (($5 | 0) == -1) {
      break label$3;
     }
     SAFE_HEAP_STORE_i32_1_1(($2 + 24 | 0) + $3 | 0, 0, $5);
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   label$6: {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 53)) {
     SAFE_HEAP_STORE_i32_1_1($2, 23, SAFE_HEAP_LOAD_i32_1_U_1($2, 24));
     break label$6;
    }
    $6 = $2 + 24 | 0;
    while (1) {
     label$9: {
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
      $7 = SAFE_HEAP_LOAD_i64_8_4($3, 0);
      $8 = i64toi32_i32$HIGH_BITS;
      label$10: {
       $9 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
       $5 = ($2 + 24 | 0) + $4 | 0;
       switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($9, $3, $2 + 24 | 0, $5, $2 + 16 | 0, $2 + 23 | 0, $6, $2 + 12 | 0) - 1 | 0) {
       case 0:
        break label$10;

       case 1:
        break label$3;

       case 2:
        break label$9;

       default:
        break label$6;
       }
      }
      SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 40), 0, $7, $8);
      if (($4 | 0) == 8) {
       break label$3;
      }
      $3 = getc(SAFE_HEAP_LOAD_i32_4_4($0, 32));
      if (($3 | 0) == -1) {
       break label$3;
      }
      SAFE_HEAP_STORE_i32_1_1($5, 0, $3);
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    SAFE_HEAP_STORE_i32_1_1($2, 23, SAFE_HEAP_LOAD_i32_1_U_1($2, 24));
   }
   label$11: {
    if (!$1) {
     while (1) {
      if (($4 | 0) < 1) {
       break label$11;
      }
      $4 = $4 - 1 | 0;
      if ((ungetc(std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($4 + ($2 + 24 | 0) | 0, 0)), SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != -1) {
       continue;
      }
      break label$3;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($0, 48, std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($2, 23)));
   }
   $3 = std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($2, 23));
   break label$1;
  }
  $3 = std____2__char_traits_char___eof_28_29();
 }
 __stack_pointer = $2 + 32 | 0;
 return $3;
}

function std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = $0;
 label$1: {
  if (!($4 & 4) | ($1 - $5 | 0) < 3) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 239) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) != 187) {
   break label$1;
  }
  $5 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 2) | 0) == 191 ? $0 + 3 | 0 : $0;
 }
 while (1) {
  label$3: {
   if ($1 >>> 0 <= $5 >>> 0 | $2 >>> 0 <= $7 >>> 0) {
    break label$3;
   }
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
   if ($4 >>> 0 > $3 >>> 0) {
    break label$3;
   }
   $6 = $5 + 1 | 0;
   label$4: {
    if ($4 << 24 >> 24 >= 0) {
     break label$4;
    }
    if ($4 >>> 0 < 194) {
     break label$3;
    }
    if ($4 >>> 0 <= 223) {
     if (($1 - $5 | 0) < 2) {
      break label$3;
     }
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
     if (($6 & 192) != 128 | ($6 & 63 | $4 << 6 & 1984) >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $6 = $5 + 2 | 0;
     break label$4;
    }
    label$6: {
     label$7: {
      if ($4 >>> 0 <= 239) {
       if (($1 - $5 | 0) < 3) {
        break label$3;
       }
       $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 2);
       $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
       if (($4 | 0) == 237) {
        break label$7;
       }
       if (($4 | 0) == 224) {
        if (($6 & 224) == 160) {
         break label$6;
        }
        break label$3;
       }
       if (($6 & 192) != 128) {
        break label$3;
       }
       break label$6;
      }
      if (($1 - $5 | 0) < 4 | $4 >>> 0 > 244 | $2 - $7 >>> 0 < 2) {
       break label$3;
      }
      $9 = SAFE_HEAP_LOAD_i32_1_U_1($5, 3);
      $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 2);
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
      label$10: {
       label$11: {
        switch ($4 - 240 | 0) {
        case 0:
         if (($6 + 112 & 255) >>> 0 < 48) {
          break label$10;
         }
         break label$3;

        case 4:
         if (($6 & 240) == 128) {
          break label$10;
         }
         break label$3;

        default:
         break label$11;
        }
       }
       if (($6 & 192) != 128) {
        break label$3;
       }
      }
      if (($8 & 192) != 128 | ($9 & 192) != 128 | ($9 & 63 | ($8 << 6 & 4032 | ($4 << 18 & 1835008 | ($6 & 63) << 12))) >>> 0 > $3 >>> 0) {
       break label$3;
      }
      $7 = $7 + 1 | 0;
      $6 = $5 + 4 | 0;
      break label$4;
     }
     if (($6 & 224) != 128) {
      break label$3;
     }
    }
    if (($8 & 192) != 128 | ($8 & 63 | ($4 << 12 & 61440 | ($6 & 63) << 6)) >>> 0 > $3 >>> 0) {
     break label$3;
    }
    $6 = $5 + 3 | 0;
   }
   $5 = $6;
   $7 = $7 + 1 | 0;
   continue;
  }
  break;
 }
 return $5 - $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
 if ($8 - $1 >>> 0 >= $2 >>> 0) {
  $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  label$2: {
   if (($8 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
    SAFE_HEAP_STORE_i32_4_4($7, 8, $1 << 1);
    SAFE_HEAP_STORE_i32_4_4($7, 12, $1 + $2 | 0);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0), 0));
    break label$2;
   }
   $2 = $8 - 1 | 0;
  }
  $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
  $8 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($10, $8);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($9), $4);
  }
  $3 = $3 - ($4 + $5 | 0) | 0;
  if ($3) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($9) + $4 | 0) + $5 | 0, $3);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 11) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $9, $1);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $8);
  __stack_pointer = $7 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function __trunctfsf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $12 = __stack_pointer - 32 | 0;
 __stack_pointer = $12;
 $4 = $3 & 2147483647;
 $10 = $4;
 $8 = $2;
 $5 = $8;
 $6 = 1065418752;
 $6 = $4 - $6 | 0;
 $7 = $6;
 $6 = $4;
 $5 = 1082064896;
 $5 = $6 - $5 | 0;
 $4 = $5;
 $5 = $7;
 $7 = $8;
 $6 = $7;
 label$1: {
  if (($4 | 0) == ($5 | 0) & $6 >>> 0 > $6 >>> 0 | $4 >>> 0 > $5 >>> 0) {
   $6 = $3;
   $7 = $2;
   $11 = ($6 & 33554431) << 7 | $7 >>> 25;
   $7 = 0;
   $10 = $7;
   $5 = $1;
   $9 = !($5 | $0);
   $6 = $2;
   $8 = $6 & 33554431;
   $5 = $8;
   $6 = !$7 & $5 >>> 0 < 16777216;
   $5 = $7;
   $4 = $8;
   if (!(!$5 & ($4 | 0) == 16777216 ? $9 : $6)) {
    $9 = $11 + 1073741825 | 0;
    break label$1;
   }
   $9 = $11 + 1073741824 | 0;
   $6 = $8;
   $7 = $6 ^ 16777216;
   $5 = $1;
   $4 = $10;
   $6 = $5 | $4;
   $4 = $0;
   $5 = $7 | $4;
   if ($5 | $6) {
    break label$1;
   }
   $9 = ($11 & 1) + $9 | 0;
   break label$1;
  }
  $5 = $1;
  $6 = !($5 | $0);
  $5 = $10;
  $5 = $5 >>> 0 < 2147418112;
  $7 = $10;
  $4 = $8;
  if (!(!$4 & ($7 | 0) == 2147418112 ? $6 : $5)) {
   $4 = $3;
   $6 = $2;
   $9 = (($4 & 33554431) << 7 | $6 >>> 25) & 4194303 | 2143289344;
   break label$1;
  }
  $9 = 2139095040;
  if ($10 >>> 0 > 1082064895) {
   break label$1;
  }
  $9 = 0;
  $4 = $10;
  $11 = $4 >>> 16 | 0;
  if ($11 >>> 0 < 16145) {
   break label$1;
  }
  $7 = $3;
  $5 = $7 & 65535;
  $4 = $2;
  $8 = $4;
  $4 = $5 | 65536;
  $10 = $4;
  $4 = $1;
  $7 = $10;
  __ashlti3($12 + 16 | 0, $0, $4, $8, $7, $11 - 16129 | 0);
  $7 = $4;
  $4 = $10;
  __lshrti3($12, $0, $7, $8, $4, 16257 - $11 | 0);
  $4 = SAFE_HEAP_LOAD_i64_8_8($12 + 8 | 0, 0);
  $8 = $4;
  $7 = i64toi32_i32$HIGH_BITS;
  $10 = $7;
  $5 = $8;
  $9 = ($7 & 33554431) << 7 | $5 >>> 25;
  $4 = SAFE_HEAP_LOAD_i64_8_8($12, 0);
  $0 = $4;
  $5 = i64toi32_i32$HIGH_BITS;
  $1 = $5;
  $5 = SAFE_HEAP_LOAD_i64_8_8($12, 16);
  $7 = $5;
  $4 = i64toi32_i32$HIGH_BITS;
  $6 = $4;
  $4 = SAFE_HEAP_LOAD_i64_8_8($12 + 24 | 0, 0);
  $11 = $4;
  $5 = i64toi32_i32$HIGH_BITS;
  $4 = $5;
  $5 = $6;
  $4 = $4 | $5;
  $6 = $11;
  $5 = $7 | $6;
  $7 = ($5 | 0) != 0 | ($4 | 0) != 0;
  $5 = $1;
  $4 = $5;
  $1 = $4;
  $6 = $0;
  $0 = $7 | $6;
  $11 = !($4 | $0);
  $5 = $8;
  $8 = $5 & 33554431;
  $6 = 0;
  $10 = $6;
  $4 = $8;
  $5 = !$6 & $4 >>> 0 < 16777216;
  $4 = $6;
  $7 = $8;
  if (!(!$4 & ($7 | 0) == 16777216 ? $11 : $5)) {
   $9 = $9 + 1 | 0;
   break label$1;
  }
  $5 = $8;
  $6 = $5 ^ 16777216;
  $4 = $1;
  $5 = $10;
  $5 = $4 | $5;
  $7 = $0;
  $4 = $6 | $7;
  if ($4 | $5) {
   break label$1;
  }
  $9 = ($9 & 1) + $9 | 0;
 }
 __stack_pointer = $12 + 32 | 0;
 $4 = $3;
 return wasm2js_scratch_store_i32(2, $4 & -2147483648 | $9), wasm2js_scratch_load_f32();
}

function WorldNativeFun__D4C_JS_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 $11 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $11);
 SAFE_HEAP_STORE_i32_4_4($6, 24, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 $0 = 0;
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $8 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($6 + 24 | 0, $6 + 36 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
 if (!SAFE_HEAP_LOAD_i32_4_4($6, 36)) {
  emscripten_log(4, 2707, 0);
  EM_TERM_28_29();
 }
 SAFE_HEAP_STORE_i32_4_4($6, 16, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 $9 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($6 + 16 | 0, $6 + 32 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 $10 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($6 + 8 | 0, 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
 SAFE_HEAP_STORE_i64_8_8($6, 0, 0, 0);
 InitializeD4COption($6);
 SAFE_HEAP_STORE_i64_8_8($6, 0, 858993459, 1072378675);
 $7 = (($4 | 0) / 2 | 0) + 1 | 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($6, 32);
 $3 = operator_20new_5b_5d_28unsigned_20long_29(($2 & 1073741823) != ($2 | 0) ? -1 : $2 << 2);
 if (($2 | 0) > 0) {
  $1 = ($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($0 << 2) + $3 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($1));
   $0 = $0 + 1 | 0;
   if (($2 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 D4C($8, SAFE_HEAP_LOAD_i32_4_4($6, 36), $5, $10, $9, $2, $4, $6, $3);
 $5 = SAFE_HEAP_LOAD_i32_4_4($6, 32);
 $4 = _emval_new_array() | 0;
 if (($5 | 0) >= 1) {
  $0 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($6, 44, SAFE_HEAP_LOAD_i32_4_4(($0 << 2) + $3 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($6, 40, $7);
   $2 = _emval_take_value(3516, $6 + 40 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($6, 40, $0);
   $1 = _emval_take_value(20676, $6 + 40 | 0) | 0;
   _emval_set_property($4 | 0, $1 | 0, $2 | 0);
   _emval_decref($1 | 0);
   _emval_decref($2 | 0);
   $0 = $0 + 1 | 0;
   if (($5 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = _emval_new_cstring(1033) | 0;
 _emval_set_property($11 | 0, $0 | 0, $4 | 0);
 _emval_decref($0 | 0);
 _emval_decref($4 | 0);
 if ($8) {
  operator_20delete_5b_5d_28void__29($8);
 }
 if ($9) {
  operator_20delete_5b_5d_28void__29($9);
 }
 if ($10) {
  operator_20delete_5b_5d_28void__29($10);
 }
 operator_20delete_5b_5d_28void__29($3);
 __stack_pointer = $6 + 48 | 0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_delete_28_29_20const($0);
 $3 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $2 = $1 + 4 | 0;
 void_20std____2____construct_backward_with_exception_guarantees_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_20std____2__locale__facet__2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20std____2__locale__facet___2c_20std____2__locale__facet____29($3, $4, $5, $2);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0, $2);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0 + 4 | 0, $1 + 8 | 0);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29($0), std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_28_29($1));
 SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 4));
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0));
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____invalidate_all_iterators_28_29($0);
}

function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 SAFE_HEAP_STORE_i32_1_1($10, 15, $0);
 label$1: {
  label$2: {
   label$3: {
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != ($2 | 0)) {
     break label$3;
    }
    $11 = 43;
    $13 = SAFE_HEAP_LOAD_i32_1_U_1($9, 24);
    $12 = $0 & 255;
    if (($13 | 0) != ($12 | 0)) {
     $11 = 45;
     if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 25) | 0) != ($12 | 0)) {
      break label$3;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, $2 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($2, 0, $11);
    break label$2;
   }
   if (!(!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0))) {
    $0 = 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    if (($9 - $7 | 0) > 159) {
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 0, $9 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
    break label$2;
   }
   $0 = -1;
   $9 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0) - $9 | 0;
   if (($9 | 0) > 23) {
    break label$1;
   }
   label$6: {
    label$7: {
     switch ($1 - 8 | 0) {
     case 0:
     case 2:
      if (($1 | 0) > ($9 | 0)) {
       break label$6;
      }
      break label$1;

     case 1:
      break label$6;

     default:
      break label$7;
     }
    }
    if (($1 | 0) != 16 | ($9 | 0) < 22) {
     break label$6;
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if (($6 | 0) == ($2 | 0) | ($6 - $2 | 0) > 2) {
     break label$1;
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($6 - 1 | 0, 0) | 0) != 48) {
     break label$1;
    }
    $0 = 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $6 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($6, 0, SAFE_HEAP_LOAD_i32_1_U_1($9 + 13008 | 0, 0));
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($9 + 13008 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
   $0 = 0;
   break label$1;
  }
  $0 = 0;
  SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 }
 __stack_pointer = $10 + 16 | 0;
 return $0;
}

function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 SAFE_HEAP_STORE_i32_4_4($10, 12, $0);
 label$1: {
  label$2: {
   label$3: {
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != ($2 | 0)) {
     break label$3;
    }
    $11 = 43;
    if ((SAFE_HEAP_LOAD_i32_4_4($9, 96) | 0) != ($0 | 0)) {
     $11 = 45;
     if ((SAFE_HEAP_LOAD_i32_4_4($9, 100) | 0) != ($0 | 0)) {
      break label$3;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, $2 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($2, 0, $11);
    break label$2;
   }
   if (!(!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0))) {
    $0 = 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    if (($9 - $7 | 0) > 159) {
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 0, $9 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
    break label$2;
   }
   $0 = -1;
   $9 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0) - $9 | 0;
   if (($9 | 0) > 92) {
    break label$1;
   }
   $6 = $9 >> 2;
   label$6: {
    label$7: {
     switch ($1 - 8 | 0) {
     case 0:
     case 2:
      if (($1 | 0) > ($6 | 0)) {
       break label$6;
      }
      break label$1;

     case 1:
      break label$6;

     default:
      break label$7;
     }
    }
    if (($1 | 0) != 16 | ($9 | 0) < 88) {
     break label$6;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if (($9 | 0) == ($2 | 0) | ($9 - $2 | 0) > 2) {
     break label$1;
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($9 - 1 | 0, 0) | 0) != 48) {
     break label$1;
    }
    $0 = 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $9 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1($9, 0, SAFE_HEAP_LOAD_i32_1_U_1($6 + 13008 | 0, 0));
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($6 + 13008 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
   $0 = 0;
   break label$1;
  }
  $0 = 0;
  SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 }
 __stack_pointer = $10 + 16 | 0;
 return $0;
}

function wavread($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = fopen($0, 1953);
 label$1: {
  if (!$5) {
   puts(2843);
   break label$1;
  }
  if (!$28anonymous_20namespace_29__CheckHeader_28_IO_FILE__29($5)) {
   fclose($5);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_1_1($4 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 8, 0);
  fread($4 + 4 | 0, 1, 4, $5);
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_1($4, 4));
  fseek($5, 6, 1);
  fread($4 + 4 | 0, 1, 2, $5);
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 4));
  label$4: {
   if (!fread($4 + 8 | 0, 1, 1, $5)) {
    break label$4;
   }
   $0 = $4 + 8 | 1;
   while (1) {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 8) | 0) == 100) {
     fread($0, 1, 3, $5);
     if (!memcmp($4 + 8 | 0, 1964, 5)) {
      break label$4;
     }
     fseek($5, -3, 1);
    }
    if (fread($4 + 8 | 0, 1, 1, $5)) {
     continue;
    }
    break;
   }
  }
  if (memcmp($4 + 8 | 0, 1964, 5)) {
   puts(2757);
   fclose($5);
   break label$1;
  }
  fread($4 + 4 | 0, 1, 4, $5);
  $1 = SAFE_HEAP_LOAD_i32_4_1($4, 4);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $11 = ldexp(1, $0 - 1 | 0);
  $7 = ($0 | 0) / 8 | 0;
  $9 = ($1 | 0) / ($7 | 0) | 0;
  label$8: {
   if (($9 | 0) < 1) {
    break label$8;
   }
   $8 = ($4 + $7 | 0) - 1 | 0;
   if (($0 | 0) < 8) {
    $0 = 0;
    while (1) {
     fread($4, 1, $7, $5);
     $6 = 0;
     $1 = SAFE_HEAP_LOAD_i32_1_1($8, 0);
     if (($1 | 0) <= -1) {
      $6 = ldexp(1, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 0, $1 & 127);
     }
     SAFE_HEAP_STORE_f64_8_8(($0 << 3) + $3 | 0, 0, (0 - $6) / $11);
     $0 = $0 + 1 | 0;
     if (($9 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
    break label$8;
   }
   $13 = $7 - 2 | 0;
   $14 = ($0 | 0) < 16;
   while (1) {
    fread($4, 1, $7, $5);
    $12 = 0;
    $0 = SAFE_HEAP_LOAD_i32_1_1($8, 0);
    if (($0 | 0) <= -1) {
     $12 = ldexp(1, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
     $0 = $0 & 127;
     SAFE_HEAP_STORE_i32_1_1($8, 0, $0);
    }
    $6 = +(($0 & 255) >>> 0);
    $0 = $13;
    if (!$14) {
     while (1) {
      $6 = $6 * 256 + +(SAFE_HEAP_LOAD_i32_1_U_1($0 + $4 | 0, 0) >>> 0);
      $1 = ($0 | 0) > 0;
      $0 = $0 - 1 | 0;
      if ($1) {
       continue;
      }
      break;
     }
    }
    SAFE_HEAP_STORE_f64_8_8(($10 << 3) + $3 | 0, 0, ($6 - $12) / $11);
    $10 = $10 + 1 | 0;
    if (($9 | 0) != ($10 | 0)) {
     continue;
    }
    break;
   }
  }
  fclose($5);
 }
 __stack_pointer = $4 + 16 | 0;
}

function cftf082_28double__2c_20double__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 $7 = SAFE_HEAP_LOAD_f64_8_8($0, 72);
 $12 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $13 = SAFE_HEAP_LOAD_f64_8_8($0, 8);
 $8 = SAFE_HEAP_LOAD_f64_8_8($0, 64);
 $9 = $13 - $8;
 $6 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $14 = SAFE_HEAP_LOAD_f64_8_8($0, 32);
 $15 = SAFE_HEAP_LOAD_f64_8_8($0, 104);
 $4 = $14 + $15;
 $16 = SAFE_HEAP_LOAD_f64_8_8($0, 40);
 $17 = SAFE_HEAP_LOAD_f64_8_8($0, 96);
 $5 = $16 - $17;
 $10 = $6 * ($4 - $5);
 $18 = $9 - $10;
 $2 = SAFE_HEAP_LOAD_f64_8_8($1, 24);
 $19 = SAFE_HEAP_LOAD_f64_8_8($0, 16);
 $23 = SAFE_HEAP_LOAD_f64_8_8($0, 88);
 $20 = $19 + $23;
 $11 = $2 * $20;
 $3 = SAFE_HEAP_LOAD_f64_8_8($1, 16);
 $24 = SAFE_HEAP_LOAD_f64_8_8($0, 24);
 $25 = SAFE_HEAP_LOAD_f64_8_8($0, 80);
 $21 = $24 - $25;
 $26 = $11 - $3 * $21;
 $27 = SAFE_HEAP_LOAD_f64_8_8($0, 48);
 $28 = SAFE_HEAP_LOAD_f64_8_8($0, 120);
 $11 = $27 + $28;
 $22 = $3 * $11;
 $29 = SAFE_HEAP_LOAD_f64_8_8($0, 56);
 $30 = SAFE_HEAP_LOAD_f64_8_8($0, 112);
 $31 = $29 - $30;
 $22 = $22 - $2 * $31;
 $32 = $26 + $22;
 SAFE_HEAP_STORE_f64_8_8($0, 120, $18 - $32);
 $33 = $12 + $7;
 $4 = $6 * ($4 + $5);
 $5 = $33 + $4;
 $20 = $3 * $20 + $2 * $21;
 $21 = $2 * $11 + $3 * $31;
 $11 = $20 + $21;
 SAFE_HEAP_STORE_f64_8_8($0, 112, $5 + $11);
 SAFE_HEAP_STORE_f64_8_8($0, 104, $18 + $32);
 SAFE_HEAP_STORE_f64_8_8($0, 96, $5 - $11);
 $9 = $9 + $10;
 $5 = $20 - $21;
 SAFE_HEAP_STORE_f64_8_8($0, 88, $9 - $5);
 $4 = $33 - $4;
 $10 = $26 - $22;
 SAFE_HEAP_STORE_f64_8_8($0, 80, $4 - $10);
 SAFE_HEAP_STORE_f64_8_8($0, 72, $9 + $5);
 SAFE_HEAP_STORE_f64_8_8($0, 64, $4 + $10);
 $13 = $13 + $8;
 $8 = $14 - $15;
 $9 = $16 + $17;
 $14 = $6 * ($8 + $9);
 $15 = $13 - $14;
 $4 = $19 - $23;
 $16 = $24 + $25;
 $17 = $3 * $4 - $2 * $16;
 $5 = $27 - $28;
 $10 = $29 + $30;
 $18 = $2 * $5 - $3 * $10;
 $19 = $17 - $18;
 SAFE_HEAP_STORE_f64_8_8($0, 56, $15 - $19);
 $7 = $12 - $7;
 $6 = $6 * ($8 - $9);
 $12 = $7 - $6;
 $8 = $2 * $4 + $3 * $16;
 $2 = $3 * $5 + $2 * $10;
 $3 = $8 - $2;
 SAFE_HEAP_STORE_f64_8_8($0, 48, $12 + $3);
 SAFE_HEAP_STORE_f64_8_8($0, 40, $15 + $19);
 SAFE_HEAP_STORE_f64_8_8($0, 32, $12 - $3);
 $3 = $13 + $14;
 $2 = $8 + $2;
 SAFE_HEAP_STORE_f64_8_8($0, 24, $3 - $2);
 $6 = $7 + $6;
 $7 = $17 + $18;
 SAFE_HEAP_STORE_f64_8_8($0, 16, $6 - $7);
 SAFE_HEAP_STORE_f64_8_8($0, 8, $3 + $2);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $6 + $7);
}

function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $13 = 1;
 $9 = $0;
 $10 = $1;
 $15 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $14 = $8;
 $16 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1: {
  if (!$11 & ($9 | 0) == 2147418112 ? $15 : $16) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $17 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $15 = $11;
  $10 = $6;
  $16 = $10;
  $8 = $10;
  $18 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $17 : $18) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $13 = $8;
  $10 = $15;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $16;
  $9 = $14;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $13;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0) {
   $13 = -1;
   $9 = $1;
   $8 = $5;
   $10 = $4;
   $11 = $0;
   $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $14 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 < $8 >>> 0 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $13 = -1;
  $9 = $1;
  $8 = $5;
  $10 = $4;
  $11 = $0;
  $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $14 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 > $8 >>> 0 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $13 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $13;
}

function std____2__init_wweeks_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26904) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26904)) {
   break label$1;
  }
  $0 = 26736;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26904) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26904);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26736, 17668);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26748, 17696);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26760, 17724);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26772, 17756);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26784, 17796);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26796, 17832);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26808, 17860);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26820, 17896);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26832, 17912);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26844, 17928);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26856, 17944);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26868, 17960);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26880, 17976);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26892, 17992);
}

function __getf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $18 = -1;
 $9 = $0;
 $10 = $1;
 $14 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $13 = $8;
 $15 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1: {
  if (!$11 & ($9 | 0) == 2147418112 ? $14 : $15) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $16 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $14 = $11;
  $10 = $6;
  $15 = $10;
  $8 = $10;
  $17 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $16 : $17) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $16 = $8;
  $10 = $14;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $15;
  $9 = $13;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $16;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0) {
   $9 = $1;
   $8 = $5;
   $10 = $4;
   $11 = $0;
   $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $13 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 < $8 >>> 0 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $9 = $1;
  $8 = $5;
  $10 = $4;
  $11 = $0;
  $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $13 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 > $8 >>> 0 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $18 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $18;
}

function int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 8, $1);
 $1 = 0;
 $6 = 6;
 label$1: {
  label$2: {
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$2;
   }
   $6 = 4;
   $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
   if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $7)) {
    break label$2;
   }
   $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $7, 0);
   while (1) {
    label$4: {
     std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
     $1 = $1 - 48 | 0;
     if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $5 + 8 | 0) | ($4 | 0) < 2) {
      break label$4;
     }
     $6 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
     if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $6)) {
      break label$1;
     }
     $4 = $4 - 1 | 0;
     $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $6, 0) + Math_imul($1, 10) | 0;
     continue;
    }
    break;
   }
   $6 = 2;
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) | $6);
 }
 __stack_pointer = $5 + 16 | 0;
 return $1;
}

function wcsrtombs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if ($0) {
      if ($2 >>> 0 >= 4) {
       break label$4;
      }
      $3 = $2;
      break label$3;
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     if (!$3) {
      break label$1;
     }
     while (1) {
      $5 = 1;
      if ($3 >>> 0 >= 128) {
       $6 = -1;
       $5 = wcrtomb($7 + 12 | 0, $3, 0);
       if (($5 | 0) == -1) {
        break label$1;
       }
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      $0 = $0 + 4 | 0;
      $4 = $4 + $5 | 0;
      $6 = $4;
      if ($3) {
       continue;
      }
      break;
     }
     break label$1;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $3 = $2;
    while (1) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     label$10: {
      if ($4 - 1 >>> 0 >= 127) {
       if (!$4) {
        SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
        SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
        break label$2;
       }
       $6 = -1;
       $4 = wcrtomb($0, $4, 0);
       if (($4 | 0) == -1) {
        break label$1;
       }
       $3 = $3 - $4 | 0;
       $0 = $0 + $4 | 0;
       break label$10;
      }
      SAFE_HEAP_STORE_i32_1_1($0, 0, $4);
      $3 = $3 - 1 | 0;
      $0 = $0 + 1 | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     }
     $5 = $5 + 4 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, $5);
     if ($3 >>> 0 > 3) {
      continue;
     }
     break;
    }
   }
   if ($3) {
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    while (1) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     label$15: {
      if ($4 - 1 >>> 0 >= 127) {
       if (!$4) {
        SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
        SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
        break label$2;
       }
       $6 = -1;
       $4 = wcrtomb($7 + 12 | 0, $4, 0);
       if (($4 | 0) == -1) {
        break label$1;
       }
       if ($3 >>> 0 < $4 >>> 0) {
        break label$2;
       }
       wcrtomb($0, SAFE_HEAP_LOAD_i32_4_4($5, 0), 0);
       $3 = $3 - $4 | 0;
       $0 = $0 + $4 | 0;
       break label$15;
      }
      SAFE_HEAP_STORE_i32_1_1($0, 0, $4);
      $3 = $3 - 1 | 0;
      $0 = $0 + 1 | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     }
     $5 = $5 + 4 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, $5);
     if ($3) {
      continue;
     }
     break;
    }
   }
   $6 = $2;
   break label$1;
  }
  $6 = $2 - $3 | 0;
 }
 __stack_pointer = $7 + 16 | 0;
 return $6;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
      $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0);
      $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0);
      $2 = $1 - 1 | 0;
      if (($4 | 0) == ($2 | 0)) {
       break label$4;
      }
      break label$2;
     }
     $4 = 1;
     $2 = 1;
     $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0);
     if (($1 | 0) != 1) {
      break label$3;
     }
    }
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2, 0, 0);
    $1 = $4;
    if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
     break label$2;
    }
   }
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
   break label$1;
  }
  $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
  $1 = $4;
 }
 $0 = ($1 << 2) + $2 | 0;
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $3 + 12 | 0);
 SAFE_HEAP_STORE_i32_4_4($3, 8, 0);
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0 + 4 | 0, $3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function std____2___MetaBase___is_cpp17_forward_iterator_wchar_t_20const____value____EnableIfImpl_void__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $4 = std____2__iterator_traits_wchar_t_20const____difference_type_20std____2__distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($1, $2);
 if ($4 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0) {
  label$2: {
   if ($4 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $4);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($4);
   $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $4);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 12, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $5 + 12 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 8, $1);
 $1 = 0;
 $6 = 6;
 label$1: {
  label$2: {
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$2;
   }
   $6 = 4;
   $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
   if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $7)) {
    break label$2;
   }
   $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $7, 0);
   while (1) {
    label$4: {
     std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
     $1 = $1 - 48 | 0;
     if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $5 + 8 | 0) | ($4 | 0) < 2) {
      break label$4;
     }
     $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
     if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $6)) {
      break label$1;
     }
     $4 = $4 - 1 | 0;
     $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $6, 0) + Math_imul($1, 10) | 0;
     continue;
    }
    break;
   }
   $6 = 2;
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) | $6);
 }
 __stack_pointer = $5 + 16 | 0;
 return $1;
}

function std____2__init_weeks_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26728) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26728)) {
   break label$1;
  }
  $0 = 26560;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26728) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26728);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26560, 1104);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26572, 1111);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26584, 1077);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26596, 1085);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26608, 1068);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26620, 1118);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26632, 1095);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26644, 1417);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26656, 1530);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26668, 1840);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26680, 1934);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26692, 1171);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26704, 1636);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26716, 1280);
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 40, $1);
 label$1: {
  if (!(std____2__ios_base__flags_28_29_20const($2) & 1)) {
   $2 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0, $1, $2, $3, $4) | 0;
   break label$1;
  }
  std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
  $2 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 24 | 0);
  std____2__locale___locale_28_29($5 + 24 | 0);
  label$3: {
   if ($4) {
    std____2__numpunct_wchar_t___truename_28_29_20const($5 + 24 | 0, $2);
    break label$3;
   }
   std____2__numpunct_wchar_t___falsename_28_29_20const($5 + 24 | 0, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($5, 16, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($5 + 24 | 0));
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($5, 8, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($5 + 24 | 0));
   if (!bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 40);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($5 + 24 | 0);
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t____operator__28_29_20const($5 + 16 | 0), 0);
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29(std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($5 + 40 | 0), $2);
   std____2____wrap_iter_wchar_t____operator___28_29($5 + 16 | 0);
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 40 | 0);
   continue;
  }
 }
 __stack_pointer = $5 + 48 | 0;
 return $2 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2__allocator_wchar_t__20std____2__allocator_traits_std____2__allocator_wchar_t__20___select_on_container_copy_construction_std____2__allocator_wchar_t__2c_20void_2c_20void__28std____2__allocator_wchar_t__20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29_20const($1));
 $3 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20__28std____2____default_init_tag___2c_20std____2__allocator_wchar_t____29($0, $2 + 8 | 0, $2);
 label$1: {
  if (!std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($1)) {
   $1 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($1);
   $3 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($3);
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 8 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_copy_ctor_external_28wchar_t_20const__2c_20unsigned_20long_29($0, wchar_t_20const__20std____2____to_address_wchar_t_20const__28wchar_t_20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29_20const($1)), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($1));
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_1_1($3, 15, $1);
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0);
      $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
      $2 = $1 - 1 | 0;
      if (($4 | 0) == ($2 | 0)) {
       break label$4;
      }
      break label$2;
     }
     $4 = 10;
     $2 = 10;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
     if (($1 | 0) != 10) {
      break label$3;
     }
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2, 0, 0);
    $1 = $4;
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
     break label$2;
    }
   }
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
   break label$1;
  }
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
  $1 = $4;
 }
 $0 = $1 + $2 | 0;
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $3 + 15 | 0);
 SAFE_HEAP_STORE_i32_1_1($3, 14, 0);
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + 1 | 0, $3 + 14 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function std____2___MetaBase___is_cpp17_forward_iterator_wchar_t____value____EnableIfImpl_void__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $4 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
 if ($4 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0) {
  label$2: {
   if ($4 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $4);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($4);
   $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $4);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 12, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $5 + 12 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0));
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0, $1);
 $3 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($1);
 $0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0));
 SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($1, 0);
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($1);
 SAFE_HEAP_STORE_i32_4_4($2, 12, 0);
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $2 + 12 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function __get_locale($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
   break label$1;
  }
  $1 = getenv(2039);
  if ($1) {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
    break label$1;
   }
  }
  $1 = getenv(Math_imul($0, 12) + 8992 | 0);
  if ($1) {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
    break label$1;
   }
  }
  $1 = getenv(2046);
  if ($1) {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
    break label$1;
   }
  }
  $1 = 2688;
 }
 label$5: {
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($1 + $2 | 0, 0);
   if (!(!$4 | ($4 | 0) == 47)) {
    $4 = 15;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 15) {
     continue;
    }
    break label$5;
   }
   break;
  }
  $4 = $2;
 }
 $3 = 2688;
 label$8: {
  label$9: {
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   label$10: {
    label$11: {
     label$12: {
      if (($2 | 0) == 46) {
       break label$12;
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($1 + $4 | 0, 0)) {
       break label$12;
      }
      $3 = $1;
      if (($2 | 0) != 67) {
       break label$11;
      }
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 1)) {
      break label$10;
     }
    }
    if (!strcmp($3, 2688)) {
     break label$10;
    }
    if (strcmp($3, 2006)) {
     break label$9;
    }
   }
   if (!$0) {
    $2 = 8916;
    if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 1) | 0) == 46) {
     break label$8;
    }
   }
   return 0;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 26104);
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     break label$8;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
    if ($2) {
     continue;
    }
    break;
   }
  }
  __lock(26096);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 26104);
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     __unlock(26096);
     return $2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
    if ($2) {
     continue;
    }
    break;
   }
  }
  $2 = dlmalloc(28);
  label$19: {
   if (!$2) {
    $2 = 0;
    break label$19;
   }
   SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4(0, 8916), i64toi32_i32$HIGH_BITS);
   $1 = $2 + 8 | 0;
   memcpy($1, $3, $4);
   SAFE_HEAP_STORE_i32_1_1($1 + $4 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4(0, 26104));
   SAFE_HEAP_STORE_i32_4_4(0, 26104, $2);
  }
  __unlock(26096);
  $2 = $0 | $2 ? $2 : 8916;
 }
 return $2;
}

function std____2___MetaBase___is_cpp17_forward_iterator_char_20const____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $4 = std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($1, $2);
 if ($4 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0) {
  label$2: {
   if ($4 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $4);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($4);
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_1_1($5, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $5 + 15 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 40, $1);
 label$1: {
  if (!(std____2__ios_base__flags_28_29_20const($2) & 1)) {
   $2 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0, $1, $2, $3, $4) | 0;
   break label$1;
  }
  std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
  $2 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 24 | 0);
  std____2__locale___locale_28_29($5 + 24 | 0);
  label$3: {
   if ($4) {
    std____2__numpunct_char___truename_28_29_20const($5 + 24 | 0, $2);
    break label$3;
   }
   std____2__numpunct_char___falsename_28_29_20const($5 + 24 | 0, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($5, 16, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0));
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($5, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($5 + 24 | 0));
   if (!bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 40);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_1_1(std____2____wrap_iter_char____operator__28_29_20const($5 + 16 | 0), 0);
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($5 + 40 | 0), $2);
   std____2____wrap_iter_char____operator___28_29($5 + 16 | 0);
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 40 | 0);
   continue;
  }
 }
 __stack_pointer = $5 + 48 | 0;
 return $2 | 0;
}

function WorldNativeFun__Dio_JS_28emscripten__val_2c_20int_2c_20double_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 $9 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $9);
 SAFE_HEAP_STORE_i32_4_4($4, 48, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $8 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($4 + 48 | 0, $4 + 52 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 48) | 0);
 if (!SAFE_HEAP_LOAD_i32_4_4($4, 52)) {
  emscripten_log(4, 2707, 0);
  EM_TERM_28_29();
 }
 $1 = $4 + 40 | 0;
 SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
 $0 = $4 + 32 | 0;
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 0);
 $5 = $4 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4 + 8 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4, 0, 0, 0);
 InitializeDioOption($4);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 1);
 SAFE_HEAP_STORE_f64_8_8($5, 0, $3);
 SAFE_HEAP_STORE_i64_8_8($1, 0, -1717986918, 1070176665);
 SAFE_HEAP_STORE_i64_8_8($4, 0, 0, 1079099392);
 $1 = GetSamplesForDIO($2, SAFE_HEAP_LOAD_i32_4_4($4, 52), $3);
 $7 = $1 << 3;
 $6 = ($1 & 536870911) != ($1 | 0) ? -1 : $7;
 $0 = operator_20new_5b_5d_28unsigned_20long_29($6);
 $5 = operator_20new_5b_5d_28unsigned_20long_29($6);
 $6 = operator_20new_5b_5d_28unsigned_20long_29($6);
 Dio($8, SAFE_HEAP_LOAD_i32_4_4($4, 52), $2, $4, $5, $0);
 StoneMask($8, SAFE_HEAP_LOAD_i32_4_4($4, 52), $2, $5, $0, $1, $6);
 if (($1 | 0) >= 1) {
  memcpy($0, $6, $7);
 }
 SAFE_HEAP_STORE_i32_4_4($4, 60, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 56, $1);
 $2 = _emval_take_value(3516, $4 + 56 | 0) | 0;
 $7 = _emval_new_cstring(2704) | 0;
 _emval_set_property($9 | 0, $7 | 0, $2 | 0);
 _emval_decref($7 | 0);
 _emval_decref($2 | 0);
 SAFE_HEAP_STORE_i32_4_4($4, 60, $5);
 SAFE_HEAP_STORE_i32_4_4($4, 56, $1);
 $1 = _emval_take_value(3516, $4 + 56 | 0) | 0;
 $2 = _emval_new_cstring(1293) | 0;
 _emval_set_property($9 | 0, $2 | 0, $1 | 0);
 _emval_decref($2 | 0);
 _emval_decref($1 | 0);
 operator_20delete_5b_5d_28void__29($0);
 operator_20delete_5b_5d_28void__29($5);
 if ($8) {
  operator_20delete_5b_5d_28void__29($8);
 }
 operator_20delete_5b_5d_28void__29($6);
 __stack_pointer = $4 - -64 | 0;
}

function cftf081_28double__2c_20double__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $10 = SAFE_HEAP_LOAD_f64_8_8($1, 8);
 $2 = SAFE_HEAP_LOAD_f64_8_8($0, 64);
 $11 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
 $3 = SAFE_HEAP_LOAD_f64_8_8($0, 96);
 $4 = SAFE_HEAP_LOAD_f64_8_8($0, 32);
 $5 = SAFE_HEAP_LOAD_f64_8_8($0, 88);
 $6 = SAFE_HEAP_LOAD_f64_8_8($0, 24);
 $12 = SAFE_HEAP_LOAD_f64_8_8($0, 120);
 $7 = SAFE_HEAP_LOAD_f64_8_8($0, 56);
 $13 = SAFE_HEAP_LOAD_f64_8_8($0, 8);
 $14 = SAFE_HEAP_LOAD_f64_8_8($0, 72);
 $8 = $13 + $14;
 $15 = SAFE_HEAP_LOAD_f64_8_8($0, 40);
 $18 = SAFE_HEAP_LOAD_f64_8_8($0, 104);
 $9 = $15 + $18;
 $16 = $8 - $9;
 $19 = SAFE_HEAP_LOAD_f64_8_8($0, 16);
 $20 = SAFE_HEAP_LOAD_f64_8_8($0, 80);
 $17 = $19 + $20;
 $21 = SAFE_HEAP_LOAD_f64_8_8($0, 48);
 $22 = SAFE_HEAP_LOAD_f64_8_8($0, 112);
 $23 = $21 + $22;
 $24 = $17 - $23;
 SAFE_HEAP_STORE_f64_8_8($0, 56, $16 - $24);
 $25 = $11 + $2;
 $26 = $4 + $3;
 $27 = $25 - $26;
 $28 = $6 + $5;
 $29 = $7 + $12;
 $30 = $28 - $29;
 SAFE_HEAP_STORE_f64_8_8($0, 48, $27 + $30);
 SAFE_HEAP_STORE_f64_8_8($0, 40, $16 + $24);
 SAFE_HEAP_STORE_f64_8_8($0, 32, $27 - $30);
 $8 = $8 + $9;
 $9 = $28 + $29;
 SAFE_HEAP_STORE_f64_8_8($0, 24, $8 - $9);
 $16 = $25 + $26;
 $17 = $17 + $23;
 SAFE_HEAP_STORE_f64_8_8($0, 16, $16 - $17);
 SAFE_HEAP_STORE_f64_8_8($0, 8, $8 + $9);
 SAFE_HEAP_STORE_f64_8_8($0, 0, $16 + $17);
 $13 = $13 - $14;
 $3 = $4 - $3;
 $4 = $13 - $3;
 $14 = $19 - $20;
 $12 = $7 - $12;
 $7 = $14 + $12;
 $5 = $6 - $5;
 $6 = $21 - $22;
 $8 = $5 - $6;
 $9 = $10 * ($7 - $8);
 SAFE_HEAP_STORE_f64_8_8($0, 120, $4 - $9);
 $2 = $11 - $2;
 $11 = $15 - $18;
 $15 = $2 + $11;
 $7 = $10 * ($8 + $7);
 SAFE_HEAP_STORE_f64_8_8($0, 112, $15 + $7);
 SAFE_HEAP_STORE_f64_8_8($0, 104, $4 + $9);
 SAFE_HEAP_STORE_f64_8_8($0, 96, $15 - $7);
 $3 = $13 + $3;
 $4 = $5 + $6;
 $5 = $14 - $12;
 $6 = $10 * ($4 + $5);
 SAFE_HEAP_STORE_f64_8_8($0, 88, $3 - $6);
 $2 = $2 - $11;
 $10 = $10 * ($5 - $4);
 SAFE_HEAP_STORE_f64_8_8($0, 80, $2 - $10);
 SAFE_HEAP_STORE_f64_8_8($0, 72, $3 + $6);
 SAFE_HEAP_STORE_f64_8_8($0, 64, $2 + $10);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2__allocator_char__20std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($1));
 $3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $2 + 8 | 0, $2);
 label$1: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($1)) {
   $1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($1);
   $3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($3);
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 8 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_copy_ctor_external_28char_20const__2c_20unsigned_20long_29($0, char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($1)), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($1));
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$1: {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3)) {
   break label$1;
  }
  std____2__ios_base__flags_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
  $5 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0;
  $7 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($4);
  SAFE_HEAP_STORE_i32_4_4($2, 16, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($5, SAFE_HEAP_LOAD_i32_4_4($6, 0), $4, $7, $1));
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$1;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function std____2___MetaBase___is_cpp17_forward_iterator_char____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $4 = std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($1, $2);
 if ($4 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0) {
  label$2: {
   if ($4 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $4);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($4);
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  SAFE_HEAP_STORE_i32_1_1($5, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $5 + 15 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 label$1: {
  if (!$0) {
   break label$1;
  }
  $8 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
  $9 = $2 - $1 | 0;
  if (($9 | 0) >= 1) {
   if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 48) | 0]($0, $1, $9) | 0) != ($9 | 0)) {
    break label$1;
   }
  }
  $7 = $3 - $1 | 0;
  $1 = ($8 | 0) > ($7 | 0) ? $8 - $7 | 0 : 0;
  if (($1 | 0) >= 1) {
   label$5: {
    if ($1 >>> 0 >= 11) {
     $7 = $1 + 16 & -16;
     $8 = operator_20new_28unsigned_20long_29($7);
     SAFE_HEAP_STORE_i32_4_4($6, 8, $7 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($6, 0, $8);
     SAFE_HEAP_STORE_i32_4_4($6, 4, $1);
     break label$5;
    }
    SAFE_HEAP_STORE_i32_1_1($6, 11, $1);
    $8 = $6;
   }
   $7 = 0;
   SAFE_HEAP_STORE_i32_1_1(memset($8, $5, $1) + $1 | 0, 0, 0);
   $8 = (wasm2js_i32$1 = $0, wasm2js_i32$2 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 0), 
   wasm2js_i32$4 = $6, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 11) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), 
   wasm2js_i32$3 = $1, wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 48) | 0, 
   FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($6, 11) | 0) <= -1) {
    operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($6, 0));
   }
   if (($1 | 0) != ($8 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   $7 = 0;
   if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 48) | 0]($0, $2, $1) | 0) != ($1 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($4, 12, 0);
  $7 = $0;
 }
 __stack_pointer = $6 + 16 | 0;
 return $7;
}

function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $7 = SAFE_HEAP_LOAD_i32_1_U_1($1, 53);
 $6 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 SAFE_HEAP_STORE_i32_1_1($1, 53, 0);
 $8 = SAFE_HEAP_LOAD_i32_1_U_1($1, 52);
 SAFE_HEAP_STORE_i32_1_1($1, 52, 0);
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = SAFE_HEAP_LOAD_i32_1_U_1($1, 53);
 $7 = $10 | $7;
 $11 = SAFE_HEAP_LOAD_i32_1_U_1($1, 52);
 $8 = $11 | $8;
 label$2: {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = ($6 << 3) + $9 | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
    break label$2;
   }
   label$4: {
    if ($11 & 255) {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) == 1) {
      break label$2;
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!($10 & 255)) {
     break label$4;
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_2_2($1, 52, 0);
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = SAFE_HEAP_LOAD_i32_1_U_1($1, 53);
   $7 = $10 | $7;
   $11 = SAFE_HEAP_LOAD_i32_1_U_1($1, 52);
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($9 >>> 0 > $6 >>> 0) {
    continue;
   }
   break;
  }
 }
 SAFE_HEAP_STORE_i32_1_1($1, 53, ($7 & 255) != 0);
 SAFE_HEAP_STORE_i32_1_1($1, 52, ($8 & 255) != 0);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0, $1);
 $3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($1);
 $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0));
 SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($1, 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($1);
 SAFE_HEAP_STORE_i32_1_1($2, 15, 0);
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $2 + 15 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = SAFE_HEAP_LOAD_i32_4_4(std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($0), 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0) - std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$1: {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$1;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 4;
 $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $8 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 42) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  if (($5 | 0) != 42) {
   std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 4, 41);
  $5 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  SAFE_HEAP_STORE_i32_4_4($1, 0, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($7 - $8 | 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($3 & -4) | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28double_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$1: {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3)) {
   break label$1;
  }
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
  $5 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0;
  $7 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($4);
  SAFE_HEAP_STORE_i32_4_4($2, 16, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($5, SAFE_HEAP_LOAD_i32_4_4($6, 0), $4, $7, $1));
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$1;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_4_4(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29($0), 0) - SAFE_HEAP_LOAD_i32_4_4($0, 4) >> 2 >>> 0 >= $1 >>> 0) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____construct_at_end_28unsigned_20long_29($0, $1);
   break label$1;
  }
  $2 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($3 + 8 | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) + $1 | 0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0), $2);
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______construct_at_end_28unsigned_20long_29($2, $1);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____29($0, $2);
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul________split_buffer_28_29($2);
 }
 __stack_pointer = $3 + 32 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$2: {
   if ($2 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($2);
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($3), $1, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 12, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $4 + 12 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 $2 = std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($1, std____2__char_traits_wchar_t___eof_28_29());
 $4 = SAFE_HEAP_LOAD_i32_1_U_1($0, 52);
 $5 = $0;
 label$1: {
  label$2: {
   if ($2) {
    $2 = $1;
    if ($4 & 255) {
     break label$1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
    $2 = std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($1, std____2__char_traits_wchar_t___eof_28_29()) ^ 1;
    break label$2;
   }
   if ($4 & 255) {
    SAFE_HEAP_STORE_i32_4_4($3, 16, std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 48)));
    label$5: {
     label$6: {
      switch (std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $3 + 16 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) - 1 | 0) {
      case 2:
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
       SAFE_HEAP_STORE_i32_4_4($3, 20, $3 + 25 | 0);
       SAFE_HEAP_STORE_i32_1_1($3, 24, $2);

      default:
       while (1) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
        if ($2 >>> 0 <= $3 + 24 >>> 0) {
         $4 = 1;
         break label$5;
        }
        $2 = $2 - 1 | 0;
        SAFE_HEAP_STORE_i32_4_4($3, 20, $2);
        if ((ungetc(SAFE_HEAP_LOAD_i32_1_1($2, 0), SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != -1) {
         continue;
        }
        break;
       }
       ;
       break;

      case 0:
      case 1:
       break label$6;
      }
     }
     $4 = 0;
     $2 = std____2__char_traits_wchar_t___eof_28_29();
    }
    if (!$4) {
     break label$1;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 48, $1);
   $2 = 1;
  }
  SAFE_HEAP_STORE_i32_1_1($5, 52, $2);
  $2 = $1;
 }
 __stack_pointer = $3 + 32 | 0;
 return $2 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0 >= $1 >>> 0) {
  label$2: {
   if ($1 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($1);
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1);
  }
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($3), $1, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 12, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($1 << 2) + $3 | 0, $4 + 12 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function __dynamic_cast($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $5 = SAFE_HEAP_LOAD_i32_4_4($6 - 4 | 0, 0);
 $6 = SAFE_HEAP_LOAD_i32_4_4($6 - 8 | 0, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 20, $3);
 SAFE_HEAP_STORE_i32_4_4($4, 16, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 12, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
 $1 = 0;
 memset($4 + 24 | 0, 0, 39);
 $0 = $0 + $6 | 0;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($5, $2, 0)) {
   SAFE_HEAP_STORE_i32_4_4($4, 56, 1);
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 0), 20) | 0]($5, $4 + 8 | 0, $0, $0, 1, 0);
   $1 = (SAFE_HEAP_LOAD_i32_4_4($4, 32) | 0) == 1 ? $0 : 0;
   break label$1;
  }
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 0), 24) | 0]($5, $4 + 8 | 0, $0, 1, 0);
  label$3: {
   switch (SAFE_HEAP_LOAD_i32_4_4($4, 44) | 0) {
   case 0:
    $1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = SAFE_HEAP_LOAD_i32_4_4($4, 28), 
    wasm2js_i32$7 = 0, wasm2js_i32$8 = (SAFE_HEAP_LOAD_i32_4_4($4, 40) | 0) == 1, wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), 
    wasm2js_i32$4 = 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_4_4($4, 36) | 0) == 1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), 
    wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($4, 48) | 0) == 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    break label$1;

   case 1:
    break label$3;

   default:
    break label$1;
   }
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 32) | 0) != 1) {
   if (SAFE_HEAP_LOAD_i32_4_4($4, 48)) {
    break label$1;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 36) | 0) != 1) {
    break label$1;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 40) | 0) != 1) {
    break label$1;
   }
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 24);
 }
 __stack_pointer = $4 - -64 | 0;
 return $1;
}

function mbsnrtowcs($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = __stack_pointer - 1040 | 0;
 __stack_pointer = $7;
 $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 SAFE_HEAP_STORE_i32_4_4($7, 12, $8);
 $6 = $0 ? $3 : 256;
 $9 = $0 ? $0 : $7 + 16 | 0;
 $3 = 0;
 label$1: {
  label$2: {
   label$3: {
    if (!$8 | !$6) {
     break label$3;
    }
    $5 = $2 >>> 2 | 0;
    $10 = $6 >>> 0 <= $5 >>> 0;
    if ($5 >>> 0 < $6 >>> 0 ? $2 >>> 0 <= 131 : 0) {
     break label$2;
    }
    while (1) {
     $5 = $10 ? $6 : $5;
     $2 = $2 - $5 | 0;
     $5 = mbsrtowcs($9, $7 + 12 | 0, $5, $4);
     if (($5 | 0) == -1) {
      $6 = 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($7, 12);
      $3 = -1;
      break label$3;
     }
     $8 = ($7 + 16 | 0) == ($9 | 0);
     $6 = $6 - ($8 ? 0 : $5) | 0;
     $9 = $8 ? $9 : ($5 << 2) + $9 | 0;
     $3 = $3 + $5 | 0;
     $8 = SAFE_HEAP_LOAD_i32_4_4($7, 12);
     if (!$8 | !$6) {
      break label$3;
     }
     $5 = $2 >>> 2 | 0;
     $10 = $6 >>> 0 <= $5 >>> 0;
     if ($2 >>> 0 > 131 | $5 >>> 0 >= $6 >>> 0) {
      continue;
     }
     break;
    }
    break label$2;
   }
   if (!$8) {
    break label$1;
   }
  }
  if (!$6 | !$2) {
   break label$1;
  }
  $5 = $3;
  while (1) {
   label$7: {
    $3 = mbrtowc($9, $8, $2, $4);
    label$8: {
     if ($3 + 2 >>> 0 <= 2) {
      label$10: {
       switch ($3 + 1 | 0) {
       case 1:
        SAFE_HEAP_STORE_i32_4_4($7, 12, 0);
        break label$8;

       case 0:
        break label$1;

       default:
        break label$10;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
      break label$8;
     }
     $8 = SAFE_HEAP_LOAD_i32_4_4($7, 12) + $3 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 12, $8);
     $5 = $5 + 1 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      break label$7;
     }
    }
    $3 = $5;
    break label$1;
   }
   $9 = $9 + 4 | 0;
   $2 = $2 - $3 | 0;
   $3 = $5;
   if ($2) {
    continue;
   }
   break;
  }
 }
 if ($0) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($7, 12));
 }
 __stack_pointer = $7 + 1040 | 0;
 return $3;
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 28 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13045));
 SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_1(0, 13041));
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1623, 1, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $5 = $0 - 16 | 0;
 __stack_pointer = $5;
 $7 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $4 = $6 >>> 9 & 1;
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $4 + 13 | 0, $7, $0 + 24 | 0, $0) + $5 | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
 $4 = $5 - (($4 << 3) + 107 & 112) | 0;
 __stack_pointer = $4;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($5, $7, $6, $4, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function fft_plan_dft_r2c_1d($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 SAFE_HEAP_STORE_i64_8_4($0, 28, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 16, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 20, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
 SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
 $3 = $0 + 36 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 28, operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3));
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $4);
 $0 = (Math_imul($1, 5) | 0) / 4 | 0;
 $0 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $3 = $1 >> 2;
 makewt_28int_2c_20int__2c_20double__29($3, $4, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 4, $3);
 label$1: {
  if (($1 | 0) < 8) {
   break label$1;
  }
  $1 = ($3 << 3) + $0 | 0;
  $4 = $3 >>> 1 | 0;
  $5 = +($4 | 0);
  $6 = .7853981633974483 / $5;
  $5 = cos($6 * $5);
  SAFE_HEAP_STORE_f64_8_8($1, 0, $5);
  SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $1 | 0, 0, $5 * .5);
  if ($3 >>> 0 < 4) {
   break label$1;
  }
  $0 = 1;
  $4 = ($4 >>> 0 > 2 ? $4 : 2) - 1 | 0;
  $7 = $4 & 1;
  if ($3 >>> 0 >= 6) {
   $2 = $4 & -2;
   while (1) {
    $5 = $6 * +($0 | 0);
    SAFE_HEAP_STORE_f64_8_8(($0 << 3) + $1 | 0, 0, cos($5) * .5);
    SAFE_HEAP_STORE_f64_8_8(($3 - $0 << 3) + $1 | 0, 0, sin($5) * .5);
    $4 = $0 + 1 | 0;
    $5 = $6 * +($4 | 0);
    SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $1 | 0, 0, cos($5) * .5);
    SAFE_HEAP_STORE_f64_8_8(($3 - $4 << 3) + $1 | 0, 0, sin($5) * .5);
    $0 = $0 + 2 | 0;
    $2 = $2 - 2 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  if (!$7) {
   break label$1;
  }
  $6 = $6 * +($0 | 0);
  SAFE_HEAP_STORE_f64_8_8(($0 << 3) + $1 | 0, 0, cos($6) * .5);
  SAFE_HEAP_STORE_f64_8_8(($3 - $0 << 3) + $1 | 0, 0, sin($6) * .5);
 }
}

function void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = SAFE_HEAP_LOAD_i32_4_4(std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($0), 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0) - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$1: {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$1;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 4;
 $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $8 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 42) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  if (($5 | 0) != 42) {
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 4, 41);
  $5 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  SAFE_HEAP_STORE_i32_4_4($1, 0, std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($7 - $8 | 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($3 & -4) | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 28 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13045));
 SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_1(0, 13041));
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1623, 0, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $5 = $0 - 16 | 0;
 __stack_pointer = $5;
 $7 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5 | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
 $4 = $5 - 96 | 0;
 __stack_pointer = $4;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($5, $7, $6, $4, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function $28anonymous_20namespace_29__FixF0_28double_20const__2c_20double_20const__2c_20int_2c_20int_2c_20double_2c_20int_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $10 = ($2 | 0) / 2 | 0;
 $14 = 1e-12;
 $8 = ($5 & 536870911) != ($5 | 0) ? -1 : $5 << 3;
 $12 = operator_20new_5b_5d_28unsigned_20long_29($8);
 $13 = operator_20new_5b_5d_28unsigned_20long_29($8);
 label$1: {
  if (($5 | 0) <= 0) {
   $4 = 0;
   break label$1;
  }
  $15 = +($2 | 0);
  $11 = +($3 | 0);
  $9 = $15 * $4 / $11;
  while (1) {
   $4 = 0;
   $2 = $6 + 1 | 0;
   $8 = matlab_round($9 * +($2 | 0));
   $8 = ($8 | 0) < ($10 | 0) ? $8 : $10;
   $3 = $8 << 3;
   $7 = SAFE_HEAP_LOAD_f64_8_8($3 + $0 | 0, 0);
   if ($7 != 0) {
    $4 = $11 * +($8 | 0) / $15 + SAFE_HEAP_LOAD_f64_8_8($1 + $3 | 0, 0) / $7 * $11 * .5 / 3.141592653589793;
   }
   $6 = $6 << 3;
   SAFE_HEAP_STORE_f64_8_8($13 + $6 | 0, 0, $4);
   SAFE_HEAP_STORE_f64_8_8($6 + $12 | 0, 0, Math_sqrt($7));
   $6 = $2;
   if (($2 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
  if (($5 | 0) < 1) {
   $4 = 0;
   break label$1;
  }
  $0 = $5 & 1;
  label$6: {
   if (($5 | 0) == 1) {
    $4 = 0;
    $2 = 0;
    $7 = 0;
    break label$6;
   }
   $10 = $5 & -2;
   $4 = 0;
   $6 = 0;
   $7 = 0;
   while (1) {
    $8 = $6 << 3;
    $9 = SAFE_HEAP_LOAD_f64_8_8($12 + $8 | 0, 0);
    $2 = $6 | 1;
    $7 = $7 + $9 * +($2 | 0);
    $3 = $2 << 3;
    $11 = SAFE_HEAP_LOAD_f64_8_8($12 + $3 | 0, 0);
    $2 = $6 + 2 | 0;
    $7 = $7 + $11 * +($2 | 0);
    $4 = $4 + $9 * SAFE_HEAP_LOAD_f64_8_8($8 + $13 | 0, 0) + $11 * SAFE_HEAP_LOAD_f64_8_8($3 + $13 | 0, 0);
    $6 = $2;
    $10 = $10 - 2 | 0;
    if ($10) {
     continue;
    }
    break;
   }
  }
  if ($0) {
   $6 = $2 << 3;
   $9 = SAFE_HEAP_LOAD_f64_8_8($12 + $6 | 0, 0);
   $4 = $4 + $9 * SAFE_HEAP_LOAD_f64_8_8($6 + $13 | 0, 0);
   $7 = $7 + $9 * +($2 + 1 | 0);
  }
  $14 = $7 + 1e-12;
 }
 operator_20delete_5b_5d_28void__29($12);
 operator_20delete_5b_5d_28void__29($13);
 return $4 / $14;
}

function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, std____2__char_traits_char___eof_28_29());
 $4 = SAFE_HEAP_LOAD_i32_1_U_1($0, 52);
 $5 = $0;
 label$1: {
  label$2: {
   if ($2) {
    $2 = $1;
    if ($4 & 255) {
     break label$1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
    $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, std____2__char_traits_char___eof_28_29()) ^ 1;
    break label$2;
   }
   if ($4 & 255) {
    SAFE_HEAP_STORE_i32_1_1($3, 19, std____2__char_traits_char___to_char_type_28int_29(SAFE_HEAP_LOAD_i32_4_4($0, 48)));
    label$5: {
     label$6: {
      switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $3 + 19 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) - 1 | 0) {
      case 2:
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
       SAFE_HEAP_STORE_i32_4_4($3, 20, $3 + 25 | 0);
       SAFE_HEAP_STORE_i32_1_1($3, 24, $2);

      default:
       while (1) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
        if ($2 >>> 0 <= $3 + 24 >>> 0) {
         $4 = 1;
         break label$5;
        }
        $2 = $2 - 1 | 0;
        SAFE_HEAP_STORE_i32_4_4($3, 20, $2);
        if ((ungetc(SAFE_HEAP_LOAD_i32_1_1($2, 0), SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != -1) {
         continue;
        }
        break;
       }
       ;
       break;

      case 0:
      case 1:
       break label$6;
      }
     }
     $4 = 0;
     $2 = std____2__char_traits_char___eof_28_29();
    }
    if (!$4) {
     break label$1;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 48, $1);
   $2 = 1;
  }
  SAFE_HEAP_STORE_i32_1_1($5, 52, $2);
  $2 = $1;
 }
 __stack_pointer = $3 + 32 | 0;
 return $2 | 0;
}

function pop_arg($0, $1, $2, $3) {
 label$1: {
  if ($1 >>> 0 > 20) {
   break label$1;
  }
  label$2: {
   switch ($1 - 9 | 0) {
   case 0:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
    return;

   case 1:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_4_4($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 2:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_4_U_4($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 3:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 7 & -8;
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 8 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 4:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_2_2($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 5:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_2_U_2($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 6:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_1_1($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 7:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_1_U_1($1, 0), i64toi32_i32$HIGH_BITS);
    return;

   case 8:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 7 & -8;
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 8 | 0);
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
    return;

   case 9:
    break label$2;

   default:
    break label$1;
   }
  }
  FUNCTION_TABLE[$3 | 0]($0, $2);
 }
}

function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $3 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
 SAFE_HEAP_STORE_i32_4_4($4, 16, $3);
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
 SAFE_HEAP_STORE_i32_4_4($4, 28, $2);
 SAFE_HEAP_STORE_i32_4_4($4, 24, $1);
 $1 = $5 - $3 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 20, $1);
 $8 = $1 + $2 | 0;
 $9 = 2;
 $1 = $4 + 16 | 0;
 label$1: {
  label$2: {
   label$3: {
    if (!__wasi_syscall_ret(__wasi_fd_write(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0, $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
     while (1) {
      $3 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
      if (($8 | 0) == ($3 | 0)) {
       break label$3;
      }
      if (($3 | 0) <= -1) {
       break label$2;
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      $5 = $6 >>> 0 < $3 >>> 0;
      $7 = ($5 << 3) + $1 | 0;
      $10 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
      $6 = $3 - ($5 ? $6 : 0) | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 0, $10 + $6 | 0);
      $7 = ($5 ? 12 : 4) + $1 | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - $6 | 0);
      $8 = $8 - $3 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
      $1 = $5 ? $1 + 8 | 0 : $1;
      $9 = $9 - $5 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write($3 | 0, $1 | 0, $9 | 0, $4 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    if (($8 | 0) != -1) {
     break label$2;
    }
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 16, SAFE_HEAP_LOAD_i32_4_4($0, 48) + $1 | 0);
   $3 = $2;
   break label$1;
  }
  $3 = 0;
  SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 32);
  if (($9 | 0) == 2) {
   break label$1;
  }
  $3 = $2 - SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return $3 | 0;
}

function fft_plan_dft_c2r_1d($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 SAFE_HEAP_STORE_i64_8_4($0, 28, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i64_8_4($0, 16, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
 SAFE_HEAP_STORE_i32_4_4($0, 4, 2);
 $2 = $0 + 36 | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 28, operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3));
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $4);
 $0 = (Math_imul($1, 5) | 0) / 4 | 0;
 $0 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 $2 = $1 >> 2;
 makewt_28int_2c_20int__2c_20double__29($2, $4, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 4, $2);
 label$1: {
  if (($1 | 0) < 8) {
   break label$1;
  }
  $1 = 1;
  $0 = ($2 << 3) + $0 | 0;
  $4 = $2 >>> 1 | 0;
  $5 = +($4 | 0);
  $6 = .7853981633974483 / $5;
  $5 = cos($6 * $5);
  SAFE_HEAP_STORE_f64_8_8($0, 0, $5);
  SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $0 | 0, 0, $5 * .5);
  if ($2 >>> 0 < 4) {
   break label$1;
  }
  $4 = ($4 >>> 0 > 2 ? $4 : 2) - 1 | 0;
  $7 = $4 & 1;
  if ($2 >>> 0 >= 6) {
   $3 = $4 & -2;
   while (1) {
    $5 = $6 * +($1 | 0);
    SAFE_HEAP_STORE_f64_8_8(($1 << 3) + $0 | 0, 0, cos($5) * .5);
    SAFE_HEAP_STORE_f64_8_8(($2 - $1 << 3) + $0 | 0, 0, sin($5) * .5);
    $4 = $1 + 1 | 0;
    $5 = $6 * +($4 | 0);
    SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $0 | 0, 0, cos($5) * .5);
    SAFE_HEAP_STORE_f64_8_8(($2 - $4 << 3) + $0 | 0, 0, sin($5) * .5);
    $1 = $1 + 2 | 0;
    $3 = $3 - 2 | 0;
    if ($3) {
     continue;
    }
    break;
   }
  }
  if (!$7) {
   break label$1;
  }
  $6 = $6 * +($1 | 0);
  SAFE_HEAP_STORE_f64_8_8(($1 << 3) + $0 | 0, 0, cos($6) * .5);
  SAFE_HEAP_STORE_f64_8_8(($2 - $1 << 3) + $0 | 0, 0, sin($6) * .5);
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$2: {
   if ($2 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
   $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  SAFE_HEAP_STORE_i32_1_1($4, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $11 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $11, $7, $9);
 $7 = $9;
 $11 = i64toi32_i32$HIGH_BITS;
 $8 = $11;
 $11 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $11, $5, $9);
 $13 = $9;
 $11 = i64toi32_i32$HIGH_BITS;
 $9 = $11;
 $11 = $8;
 $12 = $11 + $9 | 0;
 $9 = $7;
 $10 = $9 + $13 | 0;
 $14 = $10;
 $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
 $10 = $12;
 $9 = 0;
 $8 = $9;
 $11 = 0;
 $4 = $11;
 $12 = $6;
 $7 = $12;
 $9 = $2;
 $3 = $9;
 $12 = __wasm_i64_mul($6, $8, $9, $11);
 $13 = $12;
 $11 = i64toi32_i32$HIGH_BITS;
 $12 = $11;
 $11 = $10;
 $10 = $11 + $12 | 0;
 $9 = $14;
 $9 = $9 + $13 | 0;
 $10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
 $14 = $9;
 $15 = $10;
 $11 = $5;
 $5 = $11;
 $9 = 0;
 $6 = $9;
 $10 = $1;
 $1 = $10;
 $11 = 0;
 $2 = $11;
 $11 = $6;
 $10 = $2;
 $10 = __wasm_i64_mul($5, $11, $1, $10);
 $16 = $10;
 $11 = i64toi32_i32$HIGH_BITS;
 $10 = 0;
 $12 = $10;
 $10 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $10, $5, $9);
 $13 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $9 = $10;
 $10 = $12;
 $9 = $9 + $10 | 0;
 $12 = $11 + $13 | 0;
 $5 = $12;
 $9 = $12 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $6 = $9;
 $11 = 0;
 $10 = $11;
 $11 = $15;
 $12 = $11 + $10 | 0;
 $9 = $14;
 $13 = $6;
 $9 = $9 + $13 | 0;
 $12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
 $3 = $9;
 $4 = $12;
 $12 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $12, $7, $9);
 $12 = i64toi32_i32$HIGH_BITS;
 $1 = $12;
 $11 = $5;
 $13 = $11;
 $12 = $9;
 $10 = $11 + $12 | 0;
 $9 = 0;
 $11 = $9;
 $9 = $1;
 $9 = $11 + $9 | 0;
 $5 = $10;
 $9 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $6 = $9;
 $12 = 0;
 $9 = $12;
 $12 = $4;
 $10 = $9 + $12 | 0;
 $9 = $3;
 $13 = $6;
 $11 = $9 + $13 | 0;
 $10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $11, $10);
 $9 = 0;
 $1 = $9;
 $12 = $16;
 $9 = $12;
 $13 = 0;
 $10 = $5;
 $12 = $1;
 $10 = $10 | $12;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $9 | $13, $10);
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i64_8_8($0, 24, 37, 0);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1551, 0, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $7 = $0 - 32 | 0;
 __stack_pointer = $7;
 $8 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i64_8_8($0, 0, $4, $5);
 $6 = $6 >>> 9 & 1;
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6 + 23 | 0, $8, $0 + 24 | 0, $0) + $7 | 0;
 $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $8, $2);
 $6 = $7 - (($6 << 3) + 187 & 240) | 0;
 __stack_pointer = $6;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $4, $8, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 if ($5 >>> 0 >= $1 >>> 0) {
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  label$2: {
   if ($4 - $5 >>> 0 >= $3 >>> 0) {
    if (!$3) {
     break label$2;
    }
    $4 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
    $8 = $4 + $1 | 0;
    $7 = $5 - $1 | 0;
    if ($7) {
     $1 = $1 + $4 | 0;
     std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($1 + $3 | 0, $1, $7);
     $2 = $2 >>> 0 >= $1 >>> 0 ? $5 + $4 >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2 : $2;
    }
    std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($8, $2, $3);
    $3 = $3 + $5 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $3);
    SAFE_HEAP_STORE_i32_1_1($6, 15, 0);
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $4 | 0, $6 + 15 | 0);
    break label$2;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $4, ($3 + $5 | 0) - $4 | 0, $5, $1, 0, $3, $2);
  }
  __stack_pointer = $6 + 16 | 0;
  return $0;
 }
 std____2____basic_string_common_true_____throw_out_of_range_28_29_20const($0);
 abort();
}

function unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($0 | 0) != ($1 | 0)) {
      label$6: {
       label$7: {
        $6 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
        if (($6 | 0) != 45) {
         break label$7;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$7;
        }
        break label$6;
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
       $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $3 = $0;
       $5 = i64toi32_i32$HIGH_BITS;
       $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       label$8: {
        if ($0) {
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) != ($1 | 0)) {
          break label$8;
         }
         if (($0 | 0) == 68) {
          break label$3;
         }
         break label$4;
        }
        SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $8);
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) == ($1 | 0)) {
         break label$4;
        }
       }
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
     $0 = 0;
     break label$1;
    }
    $1 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
    $0 = i64toi32_i32$HIGH_BITS;
    if (($5 | 0) == ($0 | 0) & $3 >>> 0 <= $1 >>> 0 | $0 >>> 0 > $5 >>> 0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
   $1 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
   $7 = $1;
   $0 = i64toi32_i32$HIGH_BITS;
   break label$1;
  }
  $1 = ($6 | 0) == 45;
  $7 = $1 ? 0 - $3 | 0 : $3;
  $0 = $1 ? 0 - ((($3 | 0) != 0) + $5 | 0) | 0 : $5;
 }
 __stack_pointer = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $0;
 $3 = $7;
 return $3;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $1 >>> 0) {
  label$2: {
   if ($1 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($1);
   $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
  }
  std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  SAFE_HEAP_STORE_i32_1_1($4, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $4 + 15 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i64_8_8($0, 24, 37, 0);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1551, 1, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $7 = $0 - 32 | 0;
 __stack_pointer = $7;
 $8 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i64_8_8($0, 0, $4, $5);
 $6 = $6 >>> 9 & 1;
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($7, $6 + 23 | 0, $8, $0 + 24 | 0, $0) + $7 | 0;
 $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $8, $2);
 $6 = $7 - (($6 << 3) + 187 & 240) | 0;
 __stack_pointer = $6;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $4, $8, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = SAFE_HEAP_LOAD_i32_4_4(std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($0), 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0) - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$1: {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$1;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 1;
 $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $8 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 42) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  if (($5 | 0) != 42) {
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 4, 41);
  $5 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  SAFE_HEAP_STORE_i32_4_4($1, 0, std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($7 - $8 | 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + $3 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 28 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13045));
 SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_1(0, 13041));
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1623, 0, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $5 = $0 - 16 | 0;
 __stack_pointer = $5;
 $7 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5 | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
 $4 = $5 - 32 | 0;
 __stack_pointer = $4;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($5, $7, $6, $4, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 8) | 0]($0 + 8 | 0) | 0;
 if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0 + 12 | 0) | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 4);
  return;
 }
 $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $0 = $2 - $0 | 0;
 if (!($0 | ($4 | 0) != 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  return;
 }
 if (!(($0 | 0) != 12 | ($4 | 0) > 11)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $4 + 12 | 0);
 }
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 28 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13045));
 SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_1(0, 13041));
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1623, 1, std____2__ios_base__flags_28_29_20const($2));
 $6 = std____2__ios_base__flags_28_29_20const($2);
 $5 = $0 - 16 | 0;
 __stack_pointer = $5;
 $7 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, ($6 >>> 9 & 1) + 13 | 0, $7, $0 + 24 | 0, $0) + $5 | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
 $4 = $5 - 32 | 0;
 __stack_pointer = $4;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($5, $7, $6, $4, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function log10($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1: {
  label$2: {
   label$3: {
    wasm2js_scratch_store_f64(+$0);
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $4 = wasm2js_scratch_load_i32(0) | 0;
    $3 = $2;
    $1 = $3;
    if (!(($1 | 0) > -1 ? $1 >>> 0 >= 1048576 : 0)) {
     $1 = $2 & 2147483647;
     if (!($1 | $4)) {
      return -1 / ($0 * $0);
     }
     $1 = $2;
     if (($1 | 0) > -1) {
      break label$3;
     }
     return ($0 - $0) / 0;
    }
    if ($3 >>> 0 > 2146435071) {
     break label$1;
    }
    $1 = 1072693248;
    $9 = -1023;
    if (($3 | 0) != 1072693248) {
     $1 = $3;
     break label$2;
    }
    if ($4) {
     break label$2;
    }
    return 0;
   }
   wasm2js_scratch_store_f64(+($0 * 0x40000000000000));
   $2 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   $1 = $2;
   $9 = -1077;
  }
  $3 = $1 + 614242 | 0;
  $10 = +(($3 >>> 20 | 0) + $9 | 0);
  $5 = $10 * .30102999566361177;
  $1 = ($3 & 1048575) + 1072079006 | 0;
  $2 = 0;
  $1 = $2 | $1;
  wasm2js_scratch_store_i32(0, $4 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64() + -1;
  $7 = $0 * ($0 * .5);
  wasm2js_scratch_store_f64(+($0 - $7));
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $8 = +wasm2js_scratch_load_f64();
  $6 = $8 * .4342944818781689;
  $11 = $5 + $6;
  $12 = $6 + ($5 - $11);
  $13 = $0 - $8 - $7;
  $0 = $0 / ($0 + 2);
  $6 = $0;
  $5 = $0 * $0;
  $0 = $5 * $5;
  $0 = $13 + $6 * ($7 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
  $0 = $11 + ($12 + ($0 * .4342944818781689 + ($10 * 3.694239077158931e-13 + ($0 + $8) * 2.5082946711645275e-11)));
 }
 return $0;
}

function WorldModule__SpectralEnvelopeEstimation_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $5 = $4 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
 $2 = $4 + 16 | 0;
 SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
 $7 = $1 + 16 | 0;
 InitializeCheapTrickOption(SAFE_HEAP_LOAD_i32_4_4($7, 0), $4 + 8 | 0);
 SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 1079099392);
 $2 = GetFFTSizeForCheapTrick(SAFE_HEAP_LOAD_i32_4_4($7, 0), $4 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
 $8 = $1 + 40 | 0;
 SAFE_HEAP_STORE_i32_4_4($8, 0, $2);
 $9 = $1 + 32 | 0;
 $6 = SAFE_HEAP_LOAD_i32_4_4($1 + 28 | 0, 0);
 $5 = operator_20new_5b_5d_28unsigned_20long_29(($6 & 1073741823) != ($6 | 0) ? -1 : $6 << 2);
 SAFE_HEAP_STORE_i32_4_4($9, 0, $5);
 $3 = ($2 | 0) / 2 | 0;
 $2 = 0;
 if (($6 | 0) > 0) {
  $3 = $3 + 1 | 0;
  $3 = ($3 & 536870911) != ($3 | 0) ? -1 : $3 << 3;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($2 << 2) + $5 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($3));
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 32);
   $2 = $2 + 1 | 0;
   if (($6 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $10 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
 $11 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
 $2 = $1 + 24 | 0;
 CheapTrick($3, $10, $11, SAFE_HEAP_LOAD_i32_4_4($2, 0), SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0), $6, $4 + 8 | 0, $5);
 SAFE_HEAP_STORE_i64_8_8($0 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($7, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $4 + 32 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_copy_ctor_external_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  label$2: {
   if ($2 >>> 0 <= 1) {
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $2);
    break label$2;
   }
   if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0 < $2 >>> 0) {
    break label$1;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($2);
   $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $4 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($5, $4);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $4);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($3), $1, $2 + 1 | 0);
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 label$1: {
  label$2: {
   label$3: {
    if (std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($1, std____2__char_traits_wchar_t___eof_28_29())) {
     break label$3;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 20, std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($1));
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 44)) {
     if ((fwrite($2 + 20 | 0, 4, 1, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != 1) {
      break label$2;
     }
     break label$3;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 16, $2 + 24 | 0);
    $5 = $2 + 32 | 0;
    $6 = $2 + 24 | 0;
    $3 = $2 + 20 | 0;
    while (1) {
     $4 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0);
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0) == ($3 | 0)) {
      break label$2;
     }
     if (($4 | 0) == 3) {
      if ((fwrite($3, 1, 1, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) == 1) {
       break label$3;
      }
      break label$2;
     }
     if ($4 >>> 0 > 1) {
      break label$2;
     }
     $7 = $2 + 24 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16) - ($2 + 24 | 0) | 0;
     if (($3 | 0) != (fwrite($7, 1, $3, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0)) {
      break label$2;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
     if (($4 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = std____2__char_traits_wchar_t___not_eof_28unsigned_20int_29($1);
   break label$1;
  }
  $0 = std____2__char_traits_wchar_t___eof_28_29();
 }
 __stack_pointer = $2 + 32 | 0;
 return $0 | 0;
}

function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 0), $4)) {
   label$4: {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != ($2 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 20) | 0) != ($2 | 0)) {
      break label$4;
     }
    }
    if (($3 | 0) != 1) {
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 32, 1);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 32, $3);
   label$6: {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 44) | 0) == 4) {
     break label$6;
    }
    SAFE_HEAP_STORE_i32_2_2($1, 52, 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $2, 1, $4);
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 53)) {
     SAFE_HEAP_STORE_i32_4_4($1, 44, 3);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 52)) {
      break label$6;
     }
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 44, 4);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
   SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 1 | 0);
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
    break label$2;
   }
   SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
   return;
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0, $1, $2, $3, $4);
 }
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $6 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3, $0);
 label$1: {
  if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 0)) {
   break label$1;
  }
  $5 = $1 + $2 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0;
  $7 = (SAFE_HEAP_LOAD_i32_4_4($2, 4) & 176) == 32 ? $5 : $1;
  $8 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 76);
  if (($4 | 0) == -1) {
   std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $2);
   $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 26316);
   $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 0), 28) | 0]($4, 32) | 0;
   std____2__locale___locale_28_29($3 + 8 | 0);
   SAFE_HEAP_STORE_i32_4_4($2, 76, $4);
  }
  if (std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($8, $1, $7, $5, $2, $4 << 24 >> 24)) {
   break label$1;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0;
  std____2__ios_base__clear_28unsigned_20int_29($2, SAFE_HEAP_LOAD_i32_4_4($2, 16) | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($6);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i64_8_8($0, 24, 37, 0);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1551, 0, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $6 = $0 - 32 | 0;
 __stack_pointer = $6;
 $8 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i64_8_8($0, 0, $4, $5);
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1) + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
 $7 = $6 - 48 | 0;
 __stack_pointer = $7;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($6, $4, $8, $7, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $7, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i64_8_8($0, 24, 37, 0);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 1551, 1, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $6 = $0 - 32 | 0;
 __stack_pointer = $6;
 $8 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i64_8_8($0, 0, $4, $5);
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1) + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $4 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
 $7 = $6 - 48 | 0;
 __stack_pointer = $7;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($6, $4, $8, $7, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $7, SAFE_HEAP_LOAD_i32_4_4($0, 20), SAFE_HEAP_LOAD_i32_4_4($0, 16), $2, $3);
 __stack_pointer = $0 + 32 | 0;
 return $2 | 0;
}

function mbrtowc($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $5 = $3 ? $3 : 26088;
 $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
 label$1: {
  label$2: {
   label$3: {
    if (!$1) {
     if ($3) {
      break label$3;
     }
     break label$1;
    }
    $4 = -2;
    if (!$2) {
     break label$1;
    }
    $8 = $0 ? $0 : $7 + 12 | 0;
    label$5: {
     if ($3) {
      $0 = $2;
      break label$5;
     }
     $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
     $0 = $3 << 24 >> 24;
     if (($0 | 0) >= 0) {
      SAFE_HEAP_STORE_i32_4_4($8, 0, $3);
      $4 = ($0 | 0) != 0;
      break label$1;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(__pthread_self(), 172), 0);
     $0 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
     if (!$3) {
      SAFE_HEAP_STORE_i32_4_4($8, 0, $0 & 57343);
      $4 = 1;
      break label$1;
     }
     $3 = ($0 & 255) - 194 | 0;
     if ($3 >>> 0 > 50) {
      break label$3;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + 8688 | 0, 0);
     $0 = $2 - 1 | 0;
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
    }
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    $9 = $6 >>> 3 | 0;
    if (($9 - 16 | ($3 >> 26) + $9) >>> 0 > 7) {
     break label$3;
    }
    while (1) {
     $0 = $0 - 1 | 0;
     $3 = ($6 & 255) - 128 | $3 << 6;
     if (($3 | 0) >= 0) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($8, 0, $3);
      $4 = $2 - $0 | 0;
      break label$1;
     }
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
     if (($6 & 192) == 128) {
      continue;
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 25);
   $4 = -1;
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 }
 __stack_pointer = $7 + 16 | 0;
 return $4;
}

function unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($3, $1, $0);
 $5 = std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($3, $2, $1);
 label$1: {
  label$2: {
   if (!$4) {
    $4 = 0;
    if (!$5) {
     break label$1;
    }
    std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($1, $2);
    $4 = 1;
    if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($3, $1, $0)) {
     break label$1;
    }
    std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $1);
    break label$2;
   }
   if ($5) {
    std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $2);
    return 1;
   }
   std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $1);
   $4 = 1;
   if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($3, $2, $1)) {
    break label$1;
   }
   std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($1, $2);
  }
  $4 = 2;
 }
 return $4;
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 208 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 204 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13051));
 SAFE_HEAP_STORE_i32_4_4($0, 200, SAFE_HEAP_LOAD_i32_4_1(0, 13047));
 $6 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $7 = $0 + 176 | 0;
 $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 176 | 0, 20, $6, $0 + 200 | 0, $0);
 $4 = $5 + ($0 + 176 | 0) | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $4, $2);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $2);
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($7, $0 + 176 | 0, $4, $0 + 16 | 0);
 $5 = ($0 + 16 | 0) + ($5 << 2) | 0;
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0 + 16 | 0, ($4 | 0) == ($6 | 0) ? $5 : (($6 - $0 << 2) + $0 | 0) - 688 | 0, $5, $2, $3);
 __stack_pointer = $0 + 208 | 0;
 return $2 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 8) | 0]($0 + 8 | 0) | 0;
 if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 12 | 0) | 0)) {
  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 4);
  return;
 }
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $0 = $2 - $0 | 0;
 if (!($0 | ($4 | 0) != 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  return;
 }
 if (!(($0 | 0) != 12 | ($4 | 0) > 11)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $4 + 12 | 0);
 }
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 label$1: {
  if (!$0) {
   break label$1;
  }
  $8 = std____2__ios_base__width_28_29_20const($4);
  $7 = $2 - $1 | 0;
  if (($7 | 0) >= 1) {
   $7 = $7 >> 2;
   if (($7 | 0) != (std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $1, $7) | 0)) {
    break label$1;
   }
  }
  $6 = $3 - $1 >> 2;
  $1 = ($6 | 0) < ($8 | 0) ? $8 - $6 | 0 : 0;
  if (($1 | 0) >= 1) {
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($9, $1, $5);
   $8 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($6), $1);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($6);
   $6 = 0;
   if (($1 | 0) != ($8 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   $6 = 0;
   $1 = $1 >> 2;
   if (($1 | 0) != (std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $2, $1) | 0)) {
    break label$1;
   }
  }
  std____2__ios_base__width_28long_29($4, 0);
  $6 = $0;
 }
 __stack_pointer = $9 + 16 | 0;
 return $6;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__as_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_20_28__29_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29_2c_20double__28int_20_28__29_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___value_type_20const__2c_20double_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
 while (1) {
  label$2: {
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($1, 0);
   SAFE_HEAP_STORE_f64_8_8($5, 0, $2);
   $6 = $1;
   $4 = snprintf($4, $3 + 1 | 0, 1755, $5);
   label$3: {
    if (($4 | 0) >= 0) {
     if ($4 >>> 0 <= $3 >>> 0) {
      break label$2;
     }
     $3 = $4;
     break label$3;
    }
    $3 = $3 << 1 | 1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $3);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, $4);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1);
 __stack_pointer = $5 + 16 | 0;
}

function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 label$1: {
  label$2: {
   label$3: {
    if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, std____2__char_traits_char___eof_28_29())) {
     break label$3;
    }
    SAFE_HEAP_STORE_i32_1_1($2, 23, std____2__char_traits_char___to_char_type_28int_29($1));
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 44)) {
     if ((fwrite($2 + 23 | 0, 1, 1, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) != 1) {
      break label$2;
     }
     break label$3;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 16, $2 + 24 | 0);
    $5 = $2 + 32 | 0;
    $6 = $2 + 24 | 0;
    $3 = $2 + 23 | 0;
    while (1) {
     $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0);
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0) == ($3 | 0)) {
      break label$2;
     }
     if (($4 | 0) == 3) {
      if ((fwrite($3, 1, 1, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0) == 1) {
       break label$3;
      }
      break label$2;
     }
     if ($4 >>> 0 > 1) {
      break label$2;
     }
     $7 = $2 + 24 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16) - ($2 + 24 | 0) | 0;
     if (($3 | 0) != (fwrite($7, 1, $3, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0)) {
      break label$2;
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
     if (($4 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = std____2__char_traits_char___not_eof_28int_29($1);
   break label$1;
  }
  $0 = std____2__char_traits_char___eof_28_29();
 }
 __stack_pointer = $2 + 32 | 0;
 return $0 | 0;
}

function exp($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $4 = wasm2js_scratch_load_i32(0) | 0;
 $5 = $1 >>> 31 | 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     $3 = $0;
     label$5: {
      label$6: {
       $6 = $1;
       $1 = $6 & 2147483647;
       label$7: {
        if ($1 >>> 0 >= 1082532651) {
         $4 = __DOUBLE_BITS($0);
         $6 = $4;
         $1 = i64toi32_i32$HIGH_BITS;
         $4 = $1 & 2147483647;
         $1 = $6;
         if (($4 | 0) == 2146435072 & ($1 | 0) != 0 | $4 >>> 0 > 2146435072) {
          return $0;
         }
         if ($0 > 709.782712893384) {
          return $0 * 8.98846567431158e307;
         }
         if (!($0 < -708.3964185322641) | !($0 < -745.1332191019411)) {
          break label$7;
         }
         break label$2;
        }
        if ($1 >>> 0 < 1071001155) {
         break label$4;
        }
        if ($1 >>> 0 < 1072734898) {
         break label$6;
        }
       }
       $2 = $0 * 1.4426950408889634 + SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + 4752 | 0, 0);
       if (Math_abs($2) < 2147483648) {
        $1 = ~~$2;
        break label$5;
       }
       $1 = -2147483648;
       break label$5;
      }
      $1 = !$5 - $5 | 0;
     }
     $2 = +($1 | 0);
     $0 = $3 + $2 * -.6931471803691238;
     $7 = $2 * 1.9082149292705877e-10;
     $3 = $0 - $7;
     break label$3;
    }
    if ($1 >>> 0 <= 1043333120) {
     break label$1;
    }
    $1 = 0;
    $3 = $0;
   }
   $2 = $3 * $3;
   $2 = $3 - $2 * ($2 * ($2 * ($2 * ($2 * 4.1381367970572385e-8 + -16533902205465252e-22) + 6613756321437934e-20) + -.0027777777777015593) + .16666666666666602);
   $2 = $0 + ($3 * $2 / (2 - $2) - $7) + 1;
   if (!$1) {
    break label$2;
   }
   $2 = scalbn($2, $1);
  }
  return $2;
 }
 return $0 + 1;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_copy_ctor_external_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  label$2: {
   if ($2 >>> 0 <= 10) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
    break label$2;
   }
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 < $2 >>> 0) {
    break label$1;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
   $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $4 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($5, $4);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $4);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2 + 1 | 0);
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 label$1: {
  label$2: {
   label$3: {
    if (($0 | 0) != ($1 | 0)) {
     $6 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
     $0 = strtoll_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
     $3 = $0;
     $4 = i64toi32_i32$HIGH_BITS;
     $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     label$5: {
      if ($0) {
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0) != ($1 | 0)) {
        break label$5;
       }
       if (($0 | 0) == 68) {
        break label$2;
       }
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $6);
      if ((SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0) == ($1 | 0)) {
       break label$3;
      }
     }
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
    $3 = 0;
    $4 = 0;
    break label$1;
   }
   $1 = std____2__numeric_limits_long_20long___min_28_29();
   $0 = i64toi32_i32$HIGH_BITS;
   if (($4 | 0) < ($0 | 0) ? 1 : ($4 | 0) <= ($0 | 0) ? $1 >>> 0 > $3 >>> 0 : 0) {
    break label$2;
   }
   $1 = std____2__numeric_limits_long_20long___max_28_29();
   $0 = i64toi32_i32$HIGH_BITS;
   if (($4 | 0) < ($0 | 0) ? 1 : ($4 | 0) <= ($0 | 0) ? $1 >>> 0 >= $3 >>> 0 : 0) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
  if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $3 >>> 0 >= 1 : 0) {
   $3 = std____2__numeric_limits_long_20long___max_28_29();
   $4 = i64toi32_i32$HIGH_BITS;
   break label$1;
  }
  $3 = std____2__numeric_limits_long_20long___min_28_29();
  $4 = i64toi32_i32$HIGH_BITS;
 }
 __stack_pointer = $5 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $4;
 return $3;
}

function WorldNativeFun__Harvest_JS_28emscripten__val_2c_20int_2c_20double_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 $6 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $6);
 SAFE_HEAP_STORE_i32_4_4($4, 32, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $7 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($4 + 32 | 0, $4 + 36 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 32) | 0);
 if (!SAFE_HEAP_LOAD_i32_4_4($4, 36)) {
  emscripten_log(4, 2707, 0);
  EM_TERM_28_29();
 }
 $1 = $4 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
 InitializeHarvestOption($4 + 8 | 0);
 SAFE_HEAP_STORE_f64_8_8($1, 0, $3);
 SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 1079099392);
 $1 = GetSamplesForHarvest($2, SAFE_HEAP_LOAD_i32_4_4($4, 36), $3);
 $5 = ($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3;
 $0 = operator_20new_5b_5d_28unsigned_20long_29($5);
 $5 = operator_20new_5b_5d_28unsigned_20long_29($5);
 Harvest($7, SAFE_HEAP_LOAD_i32_4_4($4, 36), $2, $4 + 8 | 0, $5, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 44, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 40, $1);
 $2 = _emval_take_value(3516, $4 + 40 | 0) | 0;
 $8 = _emval_new_cstring(2704) | 0;
 _emval_set_property($6 | 0, $8 | 0, $2 | 0);
 _emval_decref($8 | 0);
 _emval_decref($2 | 0);
 SAFE_HEAP_STORE_i32_4_4($4, 44, $5);
 SAFE_HEAP_STORE_i32_4_4($4, 40, $1);
 $1 = _emval_take_value(3516, $4 + 40 | 0) | 0;
 $2 = _emval_new_cstring(1293) | 0;
 _emval_set_property($6 | 0, $2 | 0, $1 | 0);
 _emval_decref($2 | 0);
 _emval_decref($1 | 0);
 operator_20delete_5b_5d_28void__29($0);
 operator_20delete_5b_5d_28void__29($5);
 if ($7) {
  operator_20delete_5b_5d_28void__29($7);
 }
 __stack_pointer = $4 + 48 | 0;
}

function DCCorrection($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = +($3 | 0);
 $9 = +($2 | 0);
 $11 = $8 * $1 / $9;
 label$1: {
  if (Math_abs($11) < 2147483648) {
   $6 = ~~$11;
   break label$1;
  }
  $6 = -2147483648;
 }
 $3 = $6 + 2 | 0;
 $2 = ($3 & 536870911) != ($3 | 0) ? -1 : $3 << 3;
 $10 = operator_20new_5b_5d_28unsigned_20long_29($2);
 $7 = operator_20new_5b_5d_28unsigned_20long_29($2);
 if (($6 | 0) >= -1) {
  $5 = ($3 | 0) > 1 ? $3 : 1;
  $12 = $5 & 1;
  $2 = 0;
  if (($3 | 0) >= 2) {
   $3 = $5 & 2147483646;
   while (1) {
    SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $7 | 0, 0, $9 * +($2 | 0) / $8);
    $5 = $2 | 1;
    SAFE_HEAP_STORE_f64_8_8(($5 << 3) + $7 | 0, 0, $9 * +($5 | 0) / $8);
    $2 = $2 + 2 | 0;
    $3 = $3 - 2 | 0;
    if ($3) {
     continue;
    }
    break;
   }
  }
  if ($12) {
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $7 | 0, 0, $9 * +($2 | 0) / $8);
  }
  $11 = SAFE_HEAP_LOAD_f64_8_8($7, 0);
 }
 $2 = $6 + 1 | 0;
 interp1Q($1 - $11, -$9 / $8, $0, $6 + 3 | 0, $7, $2, $10);
 $3 = 0;
 label$8: {
  if (($6 | 0) < 0) {
   break label$8;
  }
  $12 = $2 & 1;
  if ($6) {
   $5 = $2 & -2;
   while (1) {
    $2 = $3 << 3;
    SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0));
    $2 = $2 | 8;
    SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0));
    $3 = $3 + 2 | 0;
    $5 = $5 - 2 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  if (!$12) {
   break label$8;
  }
  $2 = $3 << 3;
  SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $2 | 0, 0) + SAFE_HEAP_LOAD_f64_8_8($2 + $10 | 0, 0));
 }
 operator_20delete_5b_5d_28void__29($10);
 operator_20delete_5b_5d_28void__29($7);
}

function wcsnrtombs($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = __stack_pointer - 272 | 0;
 __stack_pointer = $6;
 $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $8);
 $7 = $0 ? $3 : 256;
 $3 = $0 ? $0 : $6 + 16 | 0;
 label$1: {
  label$2: {
   label$3: {
    if (!$8 | !$7) {
     break label$3;
    }
    $5 = $2 >>> 0 >= $7 >>> 0;
    if (!($5 | $2 >>> 0 > 32)) {
     break label$2;
    }
    while (1) {
     $5 = $5 & 1 ? $7 : $2;
     $2 = $2 - $5 | 0;
     $5 = wcsrtombs($3, $6 + 12 | 0, $5, 0);
     if (($5 | 0) == -1) {
      $7 = 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
      $9 = -1;
      break label$3;
     }
     $4 = ($6 + 16 | 0) == ($3 | 0);
     $7 = $7 - ($4 ? 0 : $5) | 0;
     $3 = $4 ? $3 : $3 + $5 | 0;
     $9 = $5 + $9 | 0;
     $8 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
     if (!$8 | !$7) {
      break label$3;
     }
     $5 = $2 >>> 0 >= $7 >>> 0;
     if ($5 | $2 >>> 0 >= 33) {
      continue;
     }
     break;
    }
    break label$2;
   }
   if (!$8) {
    break label$1;
   }
  }
  if (!$7 | !$2) {
   break label$1;
  }
  $4 = $9;
  while (1) {
   label$9: {
    $5 = wcrtomb($3, SAFE_HEAP_LOAD_i32_4_4($8, 0), 0);
    label$10: {
     if ($5 + 1 >>> 0 <= 1) {
      $9 = -1;
      if ($5) {
       break label$1;
      }
      SAFE_HEAP_STORE_i32_4_4($6, 12, 0);
      break label$10;
     }
     $8 = SAFE_HEAP_LOAD_i32_4_4($6, 12) + 4 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 12, $8);
     $4 = $5 + $4 | 0;
     $7 = $7 - $5 | 0;
     if ($7) {
      break label$9;
     }
    }
    $9 = $4;
    break label$1;
   }
   $3 = $3 + $5 | 0;
   $9 = $4;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 if ($0) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($6, 12));
 }
 __stack_pointer = $6 + 272 | 0;
 return $9;
}

function WorldNativeIO__WavRead_JS_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $5 = _emval_new_object() | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
 $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
 $1 = GetAudioLength($3);
 if (!$1) {
  emscripten_log(4, 2825, 0);
  EM_TERM_28_29();
 }
 $4 = $2 + 4 | 0;
 $0 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3);
 wavread($3, $4, $2, $0);
 SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
 SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
 $3 = _emval_take_value(3516, $2 + 8 | 0) | 0;
 $4 = _emval_new_cstring(1165) | 0;
 _emval_set_property($5 | 0, $4 | 0, $3 | 0);
 _emval_decref($4 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1313) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($2, 4));
 $4 = _emval_take_value(20676, $2 + 8 | 0) | 0;
 _emval_set_property($5 | 0, $3 | 0, $4 | 0);
 _emval_decref($4 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1256) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 $4 = _emval_take_value(20676, $2 + 8 | 0) | 0;
 _emval_set_property($5 | 0, $3 | 0, $4 | 0);
 _emval_decref($4 | 0);
 _emval_decref($3 | 0);
 $3 = _emval_new_cstring(1640) | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
 $1 = _emval_take_value(20676, $2 + 8 | 0) | 0;
 _emval_set_property($5 | 0, $3 | 0, $1 | 0);
 _emval_decref($1 | 0);
 _emval_decref($3 | 0);
 operator_20delete_5b_5d_28void__29($0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = __stack_pointer - 96 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_2_2($0 + 92 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_1(0, 13051));
 SAFE_HEAP_STORE_i32_4_4($0, 88, SAFE_HEAP_LOAD_i32_4_1(0, 13047));
 $6 = std____2____cloc_28_29();
 SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
 $7 = $0 - -64 | 0;
 $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 - -64 | 0, 20, $6, $0 + 88 | 0, $0);
 $4 = $5 + ($0 - -64 | 0) | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $4, $2);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $2);
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($7, $0 - -64 | 0, $4, $0 + 16 | 0);
 $5 = ($0 + 16 | 0) + $5 | 0;
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0 + 16 | 0, ($4 | 0) == ($6 | 0) ? $5 : (($6 - $0 | 0) + $0 | 0) - 48 | 0, $5, $2, $3);
 __stack_pointer = $0 + 96 | 0;
 return $2 | 0;
}

function unsigned_20int_20std____2____sort5_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = unsigned_20int_20std____2____sort4_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2, $3, $5);
 if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($5, $4, $3)) {
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($3, $4);
  if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($5, $3, $2)) {
   return $6 + 1 | 0;
  }
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($2, $3);
  if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($5, $2, $1)) {
   return $6 + 2 | 0;
  }
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($1, $2);
  if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($5, $1, $0)) {
   return $6 + 3 | 0;
  }
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $1);
  $6 = $6 + 4 | 0;
 }
 return $6;
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal___EM_VAL__2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 16, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
 if ($1 >>> 0 < 4294967280) {
  label$2: {
   label$3: {
    if ($1 >>> 0 >= 11) {
     $6 = $1 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($4, 8, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($4, 0, $5);
     SAFE_HEAP_STORE_i32_4_4($4, 4, $1);
     break label$3;
    }
    SAFE_HEAP_STORE_i32_1_1($4, 11, $1);
    $5 = $4;
    if (!$1) {
     break label$2;
    }
   }
   memcpy($5, $3 + 4 | 0, $1);
  }
  SAFE_HEAP_STORE_i32_1_1($1 + $5 | 0, 0, 0);
  FUNCTION_TABLE[$0 | 0]($4 + 24 | 0, $4 + 16 | 0, $2, $4);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 24);
  _emval_decref($1 | 0);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 11) | 0) <= -1) {
   operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 0));
  }
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 16) | 0);
  __stack_pointer = $4 + 32 | 0;
  return $1 | 0;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($4);
 abort();
}

function __shgetc($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = SAFE_HEAP_LOAD_i64_8_8($0, 112);
 $3 = $1;
 $5 = i64toi32_i32$HIGH_BITS;
 $6 = $5;
 label$1: {
  label$2: {
   if ($1 | $5) {
    $5 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
    $2 = $5;
    $1 = i64toi32_i32$HIGH_BITS;
    $5 = $6;
    if (($1 | 0) > ($5 | 0) ? 1 : ($1 | 0) >= ($5 | 0) ? $2 >>> 0 >= $3 >>> 0 : 0) {
     break label$2;
    }
   }
   $9 = __uflow($0);
   if (($9 | 0) > -1) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($0, 104, 0);
  return -1;
 }
 $8 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 $7 = $8;
 $2 = SAFE_HEAP_LOAD_i64_8_8($0, 112);
 $3 = $2;
 $1 = i64toi32_i32$HIGH_BITS;
 $6 = $1;
 label$4: {
  if (!($1 | $2)) {
   break label$4;
  }
  $7 = $8;
  $1 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
  $5 = $1 ^ -1;
  $2 = i64toi32_i32$HIGH_BITS;
  $1 = $2 ^ -1;
  $2 = $1;
  $1 = $6;
  $6 = $2;
  $4 = $1 + $6 | 0;
  $2 = $3;
  $3 = $5 + $2 | 0;
  $4 = $5 >>> 0 > $3 >>> 0 ? $4 + 1 | 0 : $4;
  $6 = $4;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = $8 - $10 | 0;
  $4 = $2 >> 31;
  $1 = $3;
  $5 = $2;
  $2 = $4;
  $4 = $6;
  if (($4 | 0) > ($2 | 0) ? 1 : ($2 | 0) <= ($4 | 0) ? $1 >>> 0 >= $5 >>> 0 : 0) {
   break label$4;
  }
  $7 = $3 + $10 | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 104, $7);
 $7 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 if ($8) {
  $1 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
  $5 = $1;
  $4 = i64toi32_i32$HIGH_BITS;
  $3 = $4;
  $1 = ($8 - $7 | 0) + 1 | 0;
  $4 = $1 >> 31;
  $2 = $1;
  $6 = $5 + $1 | 0;
  $1 = $4;
  $4 = $3;
  $3 = $1 + $4 | 0;
  $3 = $2 >>> 0 > $6 >>> 0 ? $3 + 1 | 0 : $3;
  SAFE_HEAP_STORE_i64_8_8($0, 120, $6, $3);
 }
 $0 = $7 - 1 | 0;
 if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != ($9 | 0)) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, $9);
 }
 return $9;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____assign_external_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 label$1: {
  if ($3 >>> 0 >= $2 >>> 0) {
   $3 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
   std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3, $1, $2);
   SAFE_HEAP_STORE_i32_4_4($4, 12, 0);
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $4 + 12 | 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_iterators_past_28unsigned_20long_29($0, $2);
   break label$1;
  }
  $6 = $2 - $3 | 0;
  $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, $6, $5, 0, $5, $2, $1);
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 label$1: {
  label$2: {
   label$3: {
    if (($0 | 0) != ($1 | 0)) {
     $7 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
     $3 = strtoll_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
     $6 = $3;
     $0 = i64toi32_i32$HIGH_BITS;
     $4 = $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     label$5: {
      if ($0) {
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0) != ($1 | 0)) {
        break label$5;
       }
       if (($0 | 0) == 68) {
        break label$2;
       }
       break label$3;
      }
      SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $7);
      if ((SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0) == ($1 | 0)) {
       break label$3;
      }
     }
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
    $0 = 0;
    break label$1;
   }
   $3 = std____2__numeric_limits_long___min_28_29();
   $0 = $3 >> 31;
   $1 = $3 >>> 0 > $6 >>> 0;
   $3 = $0;
   if (($4 | 0) < ($3 | 0) ? 1 : ($3 | 0) >= ($4 | 0) ? $1 : 0) {
    break label$2;
   }
   $0 = std____2__numeric_limits_long___max_28_29();
   $3 = $0;
   $0 = $3 >> 31;
   if (($0 | 0) < ($4 | 0) ? 1 : ($0 | 0) <= ($4 | 0) ? $6 >>> 0 > $3 >>> 0 : 0) {
    break label$2;
   }
   $0 = $6;
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
  $3 = $6;
  if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $3 >>> 0 >= 1 : 0) {
   $0 = std____2__numeric_limits_long___max_28_29();
   break label$1;
  }
  $0 = std____2__numeric_limits_long___min_28_29();
 }
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($0 | 0) != ($1 | 0)) {
      label$6: {
       label$7: {
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
        if (($5 | 0) != 45) {
         break label$7;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$7;
        }
        break label$6;
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       label$8: {
        if ($0) {
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) != ($1 | 0)) {
          break label$8;
         }
         if (($0 | 0) == 68) {
          break label$3;
         }
         break label$4;
        }
        SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $6);
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) == ($1 | 0)) {
         break label$4;
        }
       }
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
     $0 = 0;
     break label$1;
    }
    if (!$7 & std____2__numeric_limits_unsigned_20short___max_28_29() >>> 0 >= $3 >>> 0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
   $0 = std____2__numeric_limits_unsigned_20short___max_28_29();
   break label$1;
  }
  $0 = $3;
  $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 __stack_pointer = $4 + 16 | 0;
 return $0 & 65535;
}

function InitializeMinimumPhaseAnalysis($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($1, 4, $4);
 $3 = ($0 & 268435455) != ($0 | 0) ? -1 : $0 << 4;
 SAFE_HEAP_STORE_i32_4_4($1, 8, operator_20new_5b_5d_28unsigned_20long_29($3));
 $3 = operator_20new_5b_5d_28unsigned_20long_29($3);
 SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
 fft_plan_dft_r2c_1d($2 + 8 | 0, $0, $4, $3, 3);
 $4 = $2 + 40 | 0;
 SAFE_HEAP_STORE_i64_8_4($1 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4, 0), i64toi32_i32$HIGH_BITS);
 $3 = $2 + 32 | 0;
 SAFE_HEAP_STORE_i64_8_4($1 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
 $5 = $2 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_4($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
 $6 = $2 + 16 | 0;
 SAFE_HEAP_STORE_i64_8_4($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($6, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1, 16, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 fft_plan_dft_1d($2 + 8 | 0, $0, SAFE_HEAP_LOAD_i32_4_4($1, 12), SAFE_HEAP_LOAD_i32_4_4($1, 8), 1, 3);
 SAFE_HEAP_STORE_i64_8_4($1 + 88 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($6, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1, 56, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $2 + 48 | 0;
}

function Harvest($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $6 = +($2 | 0);
 $10 = matlab_round($6 / 8e3);
 if (SAFE_HEAP_LOAD_f64_8_8($3, 16) == 1) {
  $28anonymous_20namespace_29__HarvestGeneralBody_28double_20const__2c_20int_2c_20int_2c_20int_2c_20double_2c_20double_2c_20double_2c_20int_2c_20double__2c_20double__29($0, $1, $2, SAFE_HEAP_LOAD_f64_8_8($3, 0), SAFE_HEAP_LOAD_f64_8_8($3, 8), $10, $4, $5);
  return;
 }
 $8 = +($1 | 0) * 1e3 / $6;
 label$2: {
  if (Math_abs($8) < 2147483648) {
   $11 = ~~$8;
   break label$2;
  }
  $11 = -2147483648;
 }
 $7 = $11 + 1 | 0;
 $9 = ($7 & 536870911) != ($7 | 0) ? -1 : $7 << 3;
 $7 = operator_20new_5b_5d_28unsigned_20long_29($9);
 $9 = operator_20new_5b_5d_28unsigned_20long_29($9);
 $28anonymous_20namespace_29__HarvestGeneralBody_28double_20const__2c_20int_2c_20int_2c_20int_2c_20double_2c_20double_2c_20double_2c_20int_2c_20double__2c_20double__29($0, $1, $2, SAFE_HEAP_LOAD_f64_8_8($3, 0), SAFE_HEAP_LOAD_f64_8_8($3, 8), $10, $9, $7);
 $6 = SAFE_HEAP_LOAD_f64_8_8($3, 16);
 $8 = $8 / $6;
 label$4: {
  if (Math_abs($8) < 2147483648) {
   $0 = ~~$8;
   break label$4;
  }
  $0 = -2147483648;
 }
 $2 = 0;
 label$6: {
  if (($0 | 0) < 0) {
   break label$6;
  }
  while (1) {
   $1 = $2 << 3;
   $6 = $6 * +($2 | 0) / 1e3;
   SAFE_HEAP_STORE_f64_8_8($4 + $1 | 0, 0, $6);
   $10 = $1 + $5 | 0;
   $1 = matlab_round($6 * 1e3);
   SAFE_HEAP_STORE_f64_8_8($10, 0, SAFE_HEAP_LOAD_f64_8_8(((($1 | 0) > ($11 | 0) ? $11 : $1) << 3) + $7 | 0, 0));
   if (($0 | 0) == ($2 | 0)) {
    break label$6;
   }
   $2 = $2 + 1 | 0;
   $6 = SAFE_HEAP_LOAD_f64_8_8($3, 16);
   continue;
  }
 }
 operator_20delete_5b_5d_28void__29($7);
 operator_20delete_5b_5d_28void__29($9);
}

function unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($0 | 0) != ($1 | 0)) {
      label$6: {
       label$7: {
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
        if (($5 | 0) != 45) {
         break label$7;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$7;
        }
        break label$6;
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       label$8: {
        if ($0) {
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) != ($1 | 0)) {
          break label$8;
         }
         if (($0 | 0) == 68) {
          break label$3;
         }
         break label$4;
        }
        SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $6);
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) == ($1 | 0)) {
         break label$4;
        }
       }
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
     $0 = 0;
     break label$1;
    }
    if (!$7 & std____2__numeric_limits_unsigned_20long___max_28_29() >>> 0 >= $3 >>> 0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
   $0 = std____2__numeric_limits_unsigned_20long___max_28_29();
   break label$1;
  }
  $0 = $3;
  $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($0 | 0) != ($1 | 0)) {
      label$6: {
       label$7: {
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
        if (($5 | 0) != 45) {
         break label$7;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$7;
        }
        break label$6;
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
       label$8: {
        if ($0) {
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) != ($1 | 0)) {
          break label$8;
         }
         if (($0 | 0) == 68) {
          break label$3;
         }
         break label$4;
        }
        SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $6);
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) == ($1 | 0)) {
         break label$4;
        }
       }
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
     $0 = 0;
     break label$1;
    }
    if (!$7 & std____2__numeric_limits_unsigned_20int___max_28_29() >>> 0 >= $3 >>> 0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
   $0 = std____2__numeric_limits_unsigned_20int___max_28_29();
   break label$1;
  }
  $0 = $3;
  $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function __vfprintf_internal($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 204, $2);
 $2 = 0;
 memset($5 + 160 | 0, 0, 40);
 SAFE_HEAP_STORE_i32_4_4($5, 200, SAFE_HEAP_LOAD_i32_4_4($5, 204));
 label$1: {
  if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
   $1 = -1;
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0) {
   $2 = __lockfile($0);
  }
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ((SAFE_HEAP_LOAD_i32_1_1($0, 74) | 0) <= 0) {
   SAFE_HEAP_STORE_i32_4_4($0, 0, $6 & -33);
  }
  $6 = $6 & 32;
  label$5: {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 48)) {
    $3 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
    break label$5;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 48, 80);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $5 + 80 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 28, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $5);
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   SAFE_HEAP_STORE_i32_4_4($0, 44, $5);
   $1 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
   $3 = $1;
   if (!$7) {
    break label$5;
   }
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 48, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 44, $7);
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
   $3 = $3 ? $1 : -1;
  }
  $1 = $3;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $6 | $3);
  $1 = $3 & 32 ? -1 : $1;
  if (!$2) {
   break label$1;
  }
  __unlockfile($0);
 }
 __stack_pointer = $5 + 208 | 0;
 return $1;
}

function wavwrite($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $5 = fopen($4, 1950);
 label$1: {
  if (!$5) {
   puts(2859);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12, 1179011410);
  $4 = $1 << 1;
  SAFE_HEAP_STORE_i32_4_4($3, 8, $4 + 36 | 0);
  fwrite($3 + 12 | 0, 1, 4, $5);
  fwrite($3 + 8 | 0, 4, 1, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 1163280727);
  fwrite($3 + 12 | 0, 1, 4, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 544501094);
  fwrite($3 + 12 | 0, 1, 4, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 8, 16);
  fwrite($3 + 8 | 0, 4, 1, $5);
  SAFE_HEAP_STORE_i32_2_2($3, 6, 1);
  fwrite($3 + 6 | 0, 2, 1, $5);
  SAFE_HEAP_STORE_i32_2_2($3, 6, 1);
  fwrite($3 + 6 | 0, 2, 1, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
  fwrite($3 + 8 | 0, 4, 1, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2 << 1);
  fwrite($3 + 8 | 0, 4, 1, $5);
  SAFE_HEAP_STORE_i32_2_2($3, 6, 2);
  fwrite($3 + 6 | 0, 2, 1, $5);
  SAFE_HEAP_STORE_i32_2_2($3, 6, 16);
  fwrite($3 + 6 | 0, 2, 1, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 1635017060);
  fwrite($3 + 12 | 0, 1, 4, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
  fwrite($3 + 8 | 0, 4, 1, $5);
  $2 = 0;
  if (($1 | 0) > 0) {
   while (1) {
    $7 = $3;
    $6 = SAFE_HEAP_LOAD_f64_8_8(($2 << 3) + $0 | 0, 0) * 32767;
    label$5: {
     if (Math_abs($6) < 2147483648) {
      $4 = ~~$6;
      break label$5;
     }
     $4 = -2147483648;
    }
    $4 = ($4 | 0) < 32767 ? $4 : 32767;
    SAFE_HEAP_STORE_i32_2_2($7, 4, ($4 | 0) > -32768 ? $4 : -32768);
    fwrite($3 + 4 | 0, 2, 1, $5);
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  fclose($5);
 }
 __stack_pointer = $3 + 16 | 0;
}

function WorldModule__AperiodicityEstimation_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i64_8_8($3, 8, 0, 0);
 InitializeD4COption($3 + 8 | 0);
 SAFE_HEAP_STORE_i64_8_8($3, 8, 858993459, 1072378675);
 $2 = $1 + 36 | 0;
 $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 28 | 0, 0);
 $6 = operator_20new_5b_5d_28unsigned_20long_29(($4 & 1073741823) != ($4 | 0) ? -1 : $4 << 2);
 SAFE_HEAP_STORE_i32_4_4($2, 0, $6);
 $7 = $1 + 40 | 0;
 $8 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
 $2 = ($8 | 0) / 2 | 0;
 if (($4 | 0) > 0) {
  $2 = $2 + 1 | 0;
  $2 = ($2 & 536870911) != ($2 | 0) ? -1 : $2 << 3;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($5 << 2) + $6 | 0, 0, operator_20new_5b_5d_28unsigned_20long_29($2));
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 36);
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $10 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
 $5 = $1 + 16 | 0;
 $11 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
 $2 = $1 + 24 | 0;
 D4C($9, $10, $11, SAFE_HEAP_LOAD_i32_4_4($2, 0), SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0), $4, $8, $3 + 8 | 0, $6);
 SAFE_HEAP_STORE_i64_8_8($0 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($7, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($1 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 label$1: {
  if ($3 >>> 0 >= $2 >>> 0) {
   $3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
   std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($3, $1, $2);
   SAFE_HEAP_STORE_i32_1_1($4, 15, 0);
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $2);
   break label$1;
  }
  $6 = $2 - $3 | 0;
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, $6, $5, 0, $5, $2, $1);
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
 label$1: {
  if ($3 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$1;
   }
   $3 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3 + ($4 << 2) | 0, $1, $2);
   $2 = $2 + $4 | 0;
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
   SAFE_HEAP_STORE_i32_4_4($5, 12, 0);
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $5 + 12 | 0);
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function mbtowc($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $3 = 0;
 label$1: {
  if (!$1) {
   break label$1;
  }
  label$2: {
   if (!$2) {
    break label$2;
   }
   $0 = $0 ? $0 : $5 + 12 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   $4 = $3 << 24 >> 24;
   if (($4 | 0) >= 0) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
    $3 = ($4 | 0) != 0;
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(__pthread_self(), 172), 0);
   $4 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
   if (!$3) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, $4 & 57343);
    $3 = 1;
    break label$1;
   }
   $3 = ($4 & 255) - 194 | 0;
   if ($3 >>> 0 > 50) {
    break label$2;
   }
   $4 = $2 >>> 0 <= 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + 8688 | 0, 0);
   if ($3 << Math_imul($2, 6) - 6 < 0 ? $4 : 0) {
    break label$2;
   }
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
   $2 = $4 >>> 3 | 0;
   if (($2 - 16 | ($3 >> 26) + $2) >>> 0 > 7) {
    break label$2;
   }
   $2 = $4 - 128 | $3 << 6;
   if (($2 | 0) >= 0) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    $3 = 2;
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 2) - 128 | 0;
   if ($3 >>> 0 > 63) {
    break label$2;
   }
   $2 = $2 << 6 | $3;
   if (($2 | 0) >= 0) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    $3 = 3;
    break label$1;
   }
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 3) - 128 | 0;
   if ($1 >>> 0 > 63) {
    break label$2;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2 << 6 | $1);
   $3 = 4;
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 25);
  $3 = -1;
 }
 __stack_pointer = $5 + 16 | 0;
 $1 = $3;
 return $1;
}

function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 label$1: {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | ($2 - $1 | 0) < 5) {
   break label$1;
  }
  void_20std____2__reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($1, $2);
  $4 = $2 - 4 | 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
  $5 = $2 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0;
  label$2: {
   while (1) {
    label$4: {
     $0 = SAFE_HEAP_LOAD_i32_1_1($2, 0);
     if ($1 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     label$5: {
      if (($0 | 0) < 1) {
       break label$5;
      }
      if ((std____2__numeric_limits_char___max_28_29() | 0) <= ($0 | 0)) {
       break label$5;
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != (SAFE_HEAP_LOAD_i32_1_1($2, 0) | 0)) {
       break label$2;
      }
     }
     $2 = ($5 - $2 | 0) > 1 ? $2 + 1 | 0 : $2;
     $1 = $1 + 4 | 0;
     continue;
    }
    break;
   }
   if (($0 | 0) < 1) {
    break label$1;
   }
   if ((std____2__numeric_limits_char___max_28_29() | 0) <= ($0 | 0)) {
    break label$1;
   }
   if (SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 >>> 0 < SAFE_HEAP_LOAD_i32_1_1($2, 0) >>> 0) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($3, 0, 4);
 }
}

function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____shared_count____add_shared_28_29($1);
 $4 = std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($3 + 8 | 0, $1);
 $1 = $0 + 16 | 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($1) >>> 0 <= $2 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___resize_28unsigned_20long_29($1, $2 + 1 | 0);
 }
 if (SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), 0)) {
  std____2____shared_count____release_shared_28_29(SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), 0));
 }
 $0 = std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___release_28_29($4);
 SAFE_HEAP_STORE_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), 0, $0);
 std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release____unique_ptr_28_29($4);
 __stack_pointer = $3 + 16 | 0;
}

function WorldNativeFun__Synthesis_JS_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0, 20760, $7 + 8 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $6 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($7, $7 + 4 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
 $2 = double___20GetPtrFrom2XArray_double__28emscripten__val_20const__2c_20int__2c_20int__29($2, 0, 0);
 $3 = double___20GetPtrFrom2XArray_double__28emscripten__val_20const__2c_20int__2c_20int__29($3, 0, 0);
 $10 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
 $11 = $9 * +($10 - 1 | 0) / 1e3 * +($5 | 0);
 label$1: {
  if (Math_abs($11) < 2147483648) {
   $1 = ~~$11;
   break label$1;
  }
  $1 = -2147483648;
 }
 $1 = $1 + 1 | 0;
 $8 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3);
 Synthesis($6, $10, $2, $3, $4, $9, $5, $1, $8);
 SAFE_HEAP_STORE_i32_4_4($7, 12, $8);
 SAFE_HEAP_STORE_i32_4_4($7, 8, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(3516, $7 + 8 | 0) | 0);
 if ($6) {
  operator_20delete_5b_5d_28void__29($6);
 }
 if ($2) {
  operator_20delete_5b_5d_28void__29($2);
 }
 if ($3) {
  operator_20delete_5b_5d_28void__29($3);
 }
 operator_20delete_5b_5d_28void__29($8);
 __stack_pointer = $7 + 16 | 0;
}

function void_20std____2____insertion_sort_3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 $4 = $0 + 16 | 0;
 unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $0 + 8 | 0, $4, $2);
 $3 = $0 + 24 | 0;
 while (1) {
  if (($1 | 0) != ($3 | 0)) {
   if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $3, $4)) {
    SAFE_HEAP_STORE_f64_8_8($6, 8, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($3), 0));
    $7 = $3;
    while (1) {
     label$5: {
      $5 = $4;
      SAFE_HEAP_STORE_f64_8_8($7, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($5), 0));
      if (($0 | 0) == ($5 | 0)) {
       $5 = $0;
       break label$5;
      }
      $7 = $5;
      $4 = $5 - 8 | 0;
      if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2, $6 + 8 | 0, $4)) {
       continue;
      }
     }
     break;
    }
    SAFE_HEAP_STORE_f64_8_8($5, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($6 + 8 | 0), 0));
   }
   $4 = $3;
   $3 = $3 + 8 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 16 | 0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $7 = std____2__char_traits_wchar_t___eof_28_29();
 while (1) {
  label$2: {
   if (($2 | 0) <= ($6 | 0)) {
    break label$2;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
   if ($3 >>> 0 >= $4 >>> 0) {
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($1, 0)), 
    wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($7 | 0)) {
     break label$2;
    }
    $6 = $6 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   SAFE_HEAP_STORE_i32_4_4($5, 12, $4 - $3 >> 2);
   SAFE_HEAP_STORE_i32_4_4($5, 8, $2 - $6 | 0);
   $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($5 + 12 | 0, $5 + 8 | 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($4, $1, $3);
   $8 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   $4 = $3 << 2;
   SAFE_HEAP_STORE_i32_4_4($0, 24, $8 + $4 | 0);
   $6 = $6 + $3 | 0;
   $1 = $1 + $4 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 16 | 0;
 return $6 | 0;
}

function __fdopen($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 label$1: {
  label$2: {
   label$3: {
    if (!strchr(1960, SAFE_HEAP_LOAD_i32_1_1($1, 0))) {
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
     break label$3;
    }
    $2 = dlmalloc(1176);
    if ($2) {
     break label$2;
    }
   }
   $2 = 0;
   break label$1;
  }
  memset($2, 0, 144);
  if (!strchr($1, 43)) {
   SAFE_HEAP_STORE_i32_4_4($2, 0, (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) == 114 ? 8 : 4);
  }
  label$6: {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 97) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    break label$6;
   }
   $1 = __syscall221($0 | 0, 3, 0) | 0;
   if (!($1 & 1024)) {
    SAFE_HEAP_STORE_i32_4_4($3, 16, $1 | 1024);
    __syscall221($0 | 0, 4, $3 + 16 | 0) | 0;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) | 128;
   SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
  }
  SAFE_HEAP_STORE_i32_1_1($2, 75, 255);
  SAFE_HEAP_STORE_i32_4_4($2, 48, 1024);
  SAFE_HEAP_STORE_i32_4_4($2, 60, $0);
  SAFE_HEAP_STORE_i32_4_4($2, 44, $2 + 152 | 0);
  label$9: {
   if ($1 & 8) {
    break label$9;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 0, $3 + 24 | 0);
   if (__syscall54($0 | 0, 21523, $3 | 0) | 0) {
    break label$9;
   }
   SAFE_HEAP_STORE_i32_1_1($2, 75, 10);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 40, 28);
  SAFE_HEAP_STORE_i32_4_4($2, 36, 29);
  SAFE_HEAP_STORE_i32_4_4($2, 32, 30);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 31);
  if (!SAFE_HEAP_LOAD_i32_4_4(26020, 4)) {
   SAFE_HEAP_STORE_i32_4_4($2, 76, -1);
  }
  $2 = __ofl_add($2);
 }
 __stack_pointer = $3 + 32 | 0;
 return $2;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 $2 = 6;
 label$1: {
  label$2: {
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($1, $0 + 8 | 0)) {
    break label$2;
   }
   $2 = 4;
   if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($4, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($1), 0) | 0) != 37) {
    break label$2;
   }
   $2 = 2;
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($1), $0 + 8 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | $2);
 }
 __stack_pointer = $0 + 16 | 0;
}

function scalbnl($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 label$1: {
  if (($5 | 0) >= 16384) {
   __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $3 = SAFE_HEAP_LOAD_i64_8_8($6 + 40 | 0, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $1 = SAFE_HEAP_LOAD_i64_8_8($6, 32);
   $2 = i64toi32_i32$HIGH_BITS;
   if (($5 | 0) < 32767) {
    $5 = $5 - 16383 | 0;
    break label$1;
   }
   __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $5 = (($5 | 0) < 49149 ? $5 : 49149) - 32766 | 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($6 + 24 | 0, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $1 = SAFE_HEAP_LOAD_i64_8_8($6, 16);
   $2 = i64toi32_i32$HIGH_BITS;
   break label$1;
  }
  if (($5 | 0) > -16383) {
   break label$1;
  }
  __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $3 = SAFE_HEAP_LOAD_i64_8_8($6 + 72 | 0, 0);
  $4 = i64toi32_i32$HIGH_BITS;
  $1 = SAFE_HEAP_LOAD_i64_8_8($6, 64);
  $2 = i64toi32_i32$HIGH_BITS;
  if (($5 | 0) > -32765) {
   $5 = $5 + 16382 | 0;
   break label$1;
  }
  __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
  $3 = SAFE_HEAP_LOAD_i64_8_8($6 + 56 | 0, 0);
  $4 = i64toi32_i32$HIGH_BITS;
  $1 = SAFE_HEAP_LOAD_i64_8_8($6, 48);
  $2 = i64toi32_i32$HIGH_BITS;
 }
 __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
 SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($6, 0), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $6 + 80 | 0;
}

function emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 if ($3 >>> 0 < 4294967280) {
  label$2: {
   label$3: {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($2, 16, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
     SAFE_HEAP_STORE_i32_4_4($2, 12, $3);
     break label$3;
    }
    SAFE_HEAP_STORE_i32_1_1($2, 19, $3);
    $4 = $2 + 8 | 0;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, $1 + 4 | 0, $3);
  }
  SAFE_HEAP_STORE_i32_1_1($3 + $4 | 0, 0, 0);
  FUNCTION_TABLE[$0 | 0]($2 + 24 | 0, $2 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
  _emval_decref($3 | 0);
  if ((SAFE_HEAP_LOAD_i32_1_1($2, 19) | 0) <= -1) {
   operator_20delete_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 8));
  }
  __stack_pointer = $2 + 32 | 0;
  return $3 | 0;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($2 + 8 | 0);
 abort();
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($1, $0 + 8 | 0)) {
    break label$2;
   }
   if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($4, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($1))) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($1);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($1, $0 + 8 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | 2);
 }
 __stack_pointer = $0 + 16 | 0;
}

function log($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1: {
  label$2: {
   label$3: {
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    $4 = wasm2js_scratch_load_i32(0) | 0;
    $1 = $3;
    if (!(($1 | 0) > -1 ? $1 >>> 0 >= 1048576 : 0)) {
     $1 = $3 & 2147483647;
     if (!($1 | $4)) {
      return -1 / ($0 * $0);
     }
     if (($3 | 0) > -1) {
      break label$3;
     }
     return ($0 - $0) / 0;
    }
    if ($1 >>> 0 > 2146435071) {
     break label$1;
    }
    $5 = 1072693248;
    $6 = -1023;
    if (($1 | 0) != 1072693248) {
     $5 = $1;
     break label$2;
    }
    if ($4) {
     break label$2;
    }
    return 0;
   }
   wasm2js_scratch_store_f64(+($0 * 0x40000000000000));
   $3 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   $5 = $3;
   $6 = -1077;
  }
  $1 = $5 + 614242 | 0;
  $2 = +(($1 >>> 20 | 0) + $6 | 0);
  $8 = $2 * .6931471803691238;
  $1 = ($1 & 1048575) + 1072079006 | 0;
  $3 = 0;
  $1 = $3 | $1;
  wasm2js_scratch_store_i32(0, $4 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64() + -1;
  $9 = $0;
  $10 = $2 * 1.9082149292705877e-10;
  $2 = $0 / ($0 + 2);
  $11 = $2;
  $7 = $0 * ($0 * .5);
  $2 = $2 * $2;
  $0 = $2 * $2;
  $0 = $8 + ($9 + ($10 + $11 * ($7 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $7));
 }
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 label$1: {
  if ($3 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$1;
   }
   $3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 + $4 | 0, $1, $2);
   $2 = $2 + $4 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
   SAFE_HEAP_STORE_i32_1_1($5, 15, 0);
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $5 + 15 | 0);
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 while (1) {
  label$2: {
   if (($2 | 0) <= ($5 | 0)) {
    break label$2;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   label$3: {
    if ($3 >>> 0 < $6 >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($4, 12, 2147483647);
     SAFE_HEAP_STORE_i32_4_4($4, 8, $6 - $3 >> 2);
     SAFE_HEAP_STORE_i32_4_4($4, 4, $2 - $5 | 0);
     $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0));
     $6 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
     $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, $6, $3);
     std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___gbump_28int_29($0, $3);
     $1 = ($3 << 2) + $1 | 0;
     break label$3;
    }
    $3 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0]($0) | 0;
    if (($3 | 0) == -1) {
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($3));
    $3 = 1;
    $1 = $1 + 4 | 0;
   }
   $5 = $3 + $5 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
 return $5 | 0;
}

function randn() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 25120);
 $0 = $0 ^ $0 << 11;
 $1 = $0 ^ $0 >>> 8;
 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 25132);
 $6 = $1 ^ $0;
 $11 = $6 ^ $0 >>> 19;
 $4 = $11 ^ $11 << 11;
 $2 = $4 ^ $4 >>> 8;
 $0 = $0 << 11 ^ $0;
 $1 = $0 ^ $0 >>> 8;
 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 25128);
 $0 = $0 ^ $0 << 11;
 $3 = $0 ^ $0 >>> 8;
 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 25124);
 $0 = $0 ^ $0 << 11;
 $4 = $0 ^ $0 >>> 8 ^ $11;
 $0 = $4 ^ $6 >>> 19;
 $7 = $3 ^ $0;
 $6 = $7 ^ $4 >>> 19;
 $1 = $1 ^ $6;
 $4 = $1 ^ $7 >>> 19;
 $8 = $2 ^ $4;
 $7 = $8 ^ $1 >>> 19;
 $1 = $7 ^ $7 << 11;
 $3 = $1 ^ $1 >>> 8;
 $1 = $4 << 11 ^ $4;
 $2 = $1 ^ $1 >>> 8;
 $1 = $6 << 11 ^ $6;
 $5 = $1 ^ $1 >>> 8;
 $1 = $0 << 11 ^ $0;
 $9 = $1 ^ $1 >>> 8 ^ $7;
 $1 = $9 ^ $8 >>> 19;
 $10 = $5 ^ $1;
 $8 = $10 ^ $9 >>> 19;
 $2 = $2 ^ $8;
 $9 = $2 ^ $10 >>> 19;
 $3 = $3 ^ $9;
 $10 = $3 ^ $2 >>> 19;
 SAFE_HEAP_STORE_i32_4_4(0, 25120, $10);
 $2 = $1 << 11 ^ $1;
 $5 = $2 ^ $2 >>> 8 ^ $10;
 $2 = $5 ^ $3 >>> 19;
 SAFE_HEAP_STORE_i32_4_4(0, 25124, $2);
 $3 = $8 << 11 ^ $8;
 $12 = $3 ^ $3 >>> 8 ^ $2;
 $3 = $12 ^ $5 >>> 19;
 SAFE_HEAP_STORE_i32_4_4(0, 25128, $3);
 $5 = $9 << 11 ^ $9;
 $5 = $5 ^ $5 >>> 8 ^ $3 ^ $12 >>> 19;
 SAFE_HEAP_STORE_i32_4_4(0, 25132, $5);
 return +(($0 >>> 4) + ($11 >>> 4) + ($6 >>> 4) + ($4 >>> 4) + ($7 >>> 4) + ($1 >>> 4) + ($8 >>> 4) + ($9 >>> 4) + ($10 >>> 4) + ($2 >>> 4) + ($3 >>> 4) + ($5 >>> 4) >>> 0) * 3.725290298461914e-9 + -6;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $7 = std____2__char_traits_char___eof_28_29();
 while (1) {
  label$2: {
   if (($2 | 0) <= ($5 | 0)) {
    break label$2;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
   if ($3 >>> 0 >= $6 >>> 0) {
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($1, 0)), 
    wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($7 | 0)) {
     break label$2;
    }
    $5 = $5 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   SAFE_HEAP_STORE_i32_4_4($4, 12, $6 - $3 | 0);
   SAFE_HEAP_STORE_i32_4_4($4, 8, $2 - $5 | 0);
   $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, $4 + 8 | 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($6, $1, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_4($0, 24) + $3 | 0);
   $5 = $3 + $5 | 0;
   $1 = $1 + $3 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
 return $5 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 $2 = 6;
 label$1: {
  label$2: {
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($1, $0 + 8 | 0)) {
    break label$2;
   }
   $2 = 4;
   if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($4, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($1), 0) | 0) != 37) {
    break label$2;
   }
   $2 = 2;
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($1), $0 + 8 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | $2);
 }
 __stack_pointer = $0 + 16 | 0;
}

function DestroyMinimumPhaseAnalysis($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i64_8_8($1 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 88 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 - -64 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 80 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 56 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 72 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 - -64 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1, 40, SAFE_HEAP_LOAD_i64_8_4($0, 56), i64toi32_i32$HIGH_BITS);
 fft_destroy_plan($1 + 40 | 0);
 SAFE_HEAP_STORE_i64_8_8($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 48 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1, 0, SAFE_HEAP_LOAD_i64_8_4($0, 16), i64toi32_i32$HIGH_BITS);
 fft_destroy_plan($1);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 if ($2) {
  operator_20delete_5b_5d_28void__29($2);
 }
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 if ($2) {
  operator_20delete_5b_5d_28void__29($2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 if ($0) {
  operator_20delete_5b_5d_28void__29($0);
 }
 __stack_pointer = $1 + 80 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($0 | 0) / 12 | 0) % 7 | 0);
 }
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 4) | 0]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($0 | 0) / 12 | 0) % 12 | 0);
 }
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____construct_at_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____ConstructTransaction___ConstructTransaction_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___2c_20unsigned_20long_29($3, $0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
 $4 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 while (1) {
  if (($1 | 0) == ($4 | 0)) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____ConstructTransaction____ConstructTransaction_28_29($2);
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___construct_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0), std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($1));
  $1 = $1 + 4 | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  continue;
 }
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 while (1) {
  label$2: {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($1, $0 + 8 | 0)) {
    break label$2;
   }
   if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($4, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($1))) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($1);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($1, $0 + 8 | 0)) {
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | 2);
 }
 __stack_pointer = $0 + 16 | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 while (1) {
  label$2: {
   if (($2 | 0) <= ($5 | 0)) {
    break label$2;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   label$3: {
    if ($3 >>> 0 < $6 >>> 0) {
     SAFE_HEAP_STORE_i32_4_4($4, 12, 2147483647);
     SAFE_HEAP_STORE_i32_4_4($4, 8, $6 - $3 | 0);
     SAFE_HEAP_STORE_i32_4_4($4, 4, $2 - $5 | 0);
     $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0));
     $6 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
     $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($1, $6, $3);
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $3);
     break label$3;
    }
    $3 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0]($0) | 0;
    if (($3 | 0) == -1) {
     break label$2;
    }
    SAFE_HEAP_STORE_i32_1_1($1, 0, std____2__char_traits_char___to_char_type_28int_29($3));
    $3 = 1;
   }
   $1 = $1 + $3 | 0;
   $5 = $3 + $5 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
 return $5 | 0;
}

function double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 if (!$1) {
  $1 = operator_20new_5b_5d_28unsigned_20long_29(4);
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $3 = _emval_new_cstring(1642) | 0;
 $5 = _emval_get_property($4 | 0, $3 | 0) | 0;
 _emval_decref($3 | 0);
 $6 = +_emval_as($5 | 0, 20676, $2 + 24 | 0);
 _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0);
 $4 = $1;
 if (Math_abs($6) < 2147483648) {
  $3 = ~~$6;
 } else {
  $3 = -2147483648;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
 _emval_decref($5 | 0);
 $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 $1 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 536870911) != ($1 | 0) ? -1 : $1 << 3);
 $3 = _emval_get_global(1864) | 0;
 $4 = _emval_new_cstring(2696) | 0;
 $5 = _emval_get_property($3 | 0, $4 | 0) | 0;
 _emval_decref($4 | 0);
 SAFE_HEAP_STORE_i32_4_4($2, 24, $1 >>> 3 | 0);
 SAFE_HEAP_STORE_i32_4_4($2, 8, _emval_take_value(20676, $2 + 24 | 0) | 0);
 emscripten__internal__MethodCaller_emscripten__val_2c_20emscripten__val__2c_20emscripten__val___call_28emscripten__internal___EM_VAL__2c_20char_20const__2c_20emscripten__val__2c_20emscripten__val___29($2 + 16 | 0, $5, 1266, $0, $2 + 8 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 16) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0);
 _emval_decref($5 | 0);
 _emval_decref($3 | 0);
 __stack_pointer = $2 + 32 | 0;
 return $1;
}

function __newlocale($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 label$1: {
  if (__loc_is_allocated($2)) {
   while (1) {
    if ($0 >>> $3 & 1) {
     SAFE_HEAP_STORE_i32_4_4(($3 << 2) + $2 | 0, 0, __get_locale($3, $1));
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 6) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $7 = ($4 + 8 | 0) + ($3 << 2) | 0;
   $5 = 1 << $3 & $0;
   label$6: {
    if (!($5 | !$2)) {
     $5 = SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + $2 | 0, 0);
     break label$6;
    }
    $5 = __get_locale($3, $5 ? $1 : 2972);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
   $6 = (($5 | 0) != 0) + $6 | 0;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 6) {
    continue;
   }
   break;
  }
  $2 = 8944;
  label$8: {
   label$9: {
    switch ($6 | 0) {
    case 0:
     break label$1;

    case 1:
     break label$9;

    default:
     break label$8;
    }
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0) != 8916) {
    break label$8;
   }
   $2 = 8968;
   break label$1;
  }
  $2 = dlmalloc(24);
  if (!$2) {
   break label$1;
  }
  SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_8($4, 8), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 __stack_pointer = $4 + 32 | 0;
 return $2;
}

function __extenddftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = __stack_pointer - 16 | 0;
 __stack_pointer = $8;
 wasm2js_scratch_store_f64(+$1);
 $6 = wasm2js_scratch_load_i32(1) | 0;
 $7 = wasm2js_scratch_load_i32(0) | 0;
 $9 = $6;
 $4 = $6 & 2147483647;
 $2 = 1048576;
 $2 = $4 - $2 | 0;
 $5 = $7;
 label$1: {
  if (($2 | 0) == 2145386495 | $2 >>> 0 < 2145386495) {
   $3 = $5;
   $2 = $3 << 28;
   $10 = $2;
   $2 = $4;
   $3 = $2 >>> 4 | 0;
   $2 = ($2 & 15) << 28 | $5 >>> 4;
   $5 = $2;
   $4 = $3 + 1006632960 | 0;
   break label$1;
  }
  if (($4 | 0) == 2146435072 | $4 >>> 0 > 2146435072) {
   $6 = $7;
   $10 = $6 << 28;
   $5 = ($9 & 15) << 28 | $6 >>> 4;
   $6 = $9 >>> 4 | 0;
   $3 = $6 | 2147418112;
   $4 = $3;
   break label$1;
  }
  $3 = $4;
  if (!($3 | $5)) {
   $5 = 0;
   $4 = 0;
   break label$1;
  }
  $7 = $4 >>> 0 < 1 ? Math_clz32($7) + 32 | 0 : Math_clz32($4);
  __ashlti3($8, $5, $4, 0, 0, $7 + 49 | 0);
  $2 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  $4 = $3 ^ 65536;
  $6 = 0;
  $5 = $2 | $6;
  $3 = 15372 - $7 | 0;
  $2 = $3 << 16;
  $3 = $2;
  $2 = $4;
  $3 = $3 | $2;
  $4 = $3;
  $3 = SAFE_HEAP_LOAD_i64_8_8($8, 0);
  $11 = $3;
  $10 = i64toi32_i32$HIGH_BITS;
 }
 SAFE_HEAP_STORE_i64_8_8($0, 0, $11, $10);
 $3 = $9 & -2147483648;
 $2 = $3;
 $6 = 0;
 $3 = $4;
 $2 = $3 | $2;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $5 | $6, $2);
 __stack_pointer = $8 + 16 | 0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, 0);
 std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______compressed_pair_std__nullptr_t_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____28std__nullptr_t___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($0 + 12 | 0, $4 + 12 | 0, $3);
 $3 = $0;
 if ($1) {
  $5 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_28_29($0), $1);
 }
 SAFE_HEAP_STORE_i32_4_4($3, 0, $5);
 $2 = ($2 << 2) + $5 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 SAFE_HEAP_STORE_i32_4_4(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_28_29($0), 0, ($1 << 2) + $5 | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______construct_at_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $1 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______ConstructTransaction___ConstructTransaction_28std____2__locale__facet____2c_20unsigned_20long_29($2, $0 + 8 | 0, $1);
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 while (1) {
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) != ($3 | 0)) {
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___construct_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_28_29($0), std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29(SAFE_HEAP_LOAD_i32_4_4($1, 0)));
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + 4 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
   continue;
  }
  break;
 }
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______ConstructTransaction____ConstructTransaction_28_29($1);
 __stack_pointer = $2 + 16 | 0;
}

function long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 label$1: {
  label$2: {
   label$3: {
    if (($1 | 0) != ($2 | 0)) {
     $9 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
     long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($4, $1, $4 + 28 | 0);
     $5 = SAFE_HEAP_LOAD_i64_8_8($4, 8);
     $6 = i64toi32_i32$HIGH_BITS;
     $7 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
     $8 = i64toi32_i32$HIGH_BITS;
     $1 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     if (!$1) {
      break label$3;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 28) | 0) != ($2 | 0)) {
      break label$2;
     }
     $10 = $7;
     $11 = $8;
     $12 = $5;
     $13 = $6;
     if (($1 | 0) != 68) {
      break label$1;
     }
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, 4);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $9);
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 28) | 0) == ($2 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($3, 0, 4);
  $7 = $10;
  $8 = $11;
  $5 = $12;
  $6 = $13;
 }
 SAFE_HEAP_STORE_i64_8_8($0, 0, $7, $8);
 SAFE_HEAP_STORE_i64_8_8($0, 8, $5, $6);
 __stack_pointer = $4 + 32 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 if ($1) {
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  $6 = $4 + $1 | 0;
  if ($3 - $4 >>> 0 < $1 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $6 - $3 | 0, $4, $4, 0, 0);
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29(char__20std____2____to_address_char__28char__29($3) + $4 | 0, $1, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $6);
  SAFE_HEAP_STORE_i32_1_1($5, 15, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $6 | 0, $5 + 15 | 0);
 }
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function unsigned_20int_20std____2____sort4_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = unsigned_20int_20std____2____sort3_std____2____less_double_2c_20double___2c_20double___28double__2c_20double__2c_20double__2c_20std____2____less_double_2c_20double___29($0, $1, $2, $4);
 if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($4, $3, $2)) {
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($2, $3);
  if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($4, $2, $1)) {
   return $5 + 1 | 0;
  }
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($1, $2);
  if (!std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($4, $1, $0)) {
   return $5 + 2 | 0;
  }
  std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $1);
  $5 = $5 + 3 | 0;
 }
 return $5;
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 label$1: {
  if (!std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if (!std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if (!(std____2__ios_base__flags_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0) & 8192)) {
   break label$1;
  }
  if (std__uncaught_exception_28_29()) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) | 0) != -1) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0, 1);
 }
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
 label$1: {
  if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
   SAFE_HEAP_STORE_i32_4_4($1, 12, 0);
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($2, $1 + 12 | 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, 0);
   break label$1;
  }
  $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, 0);
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($2, $1 + 8 | 0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 20) | 0]($0 + 8 | 0) | 0;
 return std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) << 2) | 0) | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($0 | 0) / 12 | 0) % 7 | 0);
 }
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 4) | 0]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($0 | 0) / 12 | 0) % 12 | 0);
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
   SAFE_HEAP_STORE_i32_1_1($2, 15, 0);
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
   break label$1;
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
  SAFE_HEAP_STORE_i32_1_1($2, 14, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 14 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i64_8_8($6 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13240), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($6 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13232), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($6, 8, SAFE_HEAP_LOAD_i64_8_8(0, 13224), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($6, 0, SAFE_HEAP_LOAD_i64_8_8(0, 13216), i64toi32_i32$HIGH_BITS);
 $0 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 32 | 0);
 __stack_pointer = $6 + 32 | 0;
 return $0 | 0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_delete_28_29_20const($0) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) << 2) | 0);
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 label$1: {
  if (!std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if (!std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if (!(std____2__ios_base__flags_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0) & 8192)) {
   break label$1;
  }
  if (std__uncaught_exception_28_29()) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0)) | 0) != -1) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($1 + SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) | 0, 1);
 }
 return $0;
}

function $28anonymous_20namespace_29__CheckHeader_28_IO_FILE__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 fread($1 + 11 | 0, 1, 4, $0);
 SAFE_HEAP_STORE_i32_1_1($1, 15, 0);
 $2 = 2769;
 label$1: {
  label$2: {
   if (memcmp($1 + 11 | 0, 2055, 5)) {
    break label$2;
   }
   fseek($0, 4, 1);
   fread($1 + 11 | 0, 1, 4, $0);
   $2 = 2781;
   if (memcmp($1 + 11 | 0, 2060, 5)) {
    break label$2;
   }
   fread($1 + 11 | 0, 1, 4, $0);
   $2 = 2746;
   if (memcmp($1 + 11 | 0, 2924, 5)) {
    break label$2;
   }
   fread($1 + 11 | 0, 1, 4, $0);
   $2 = 2810;
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 11) | 0) != 16) {
    break label$2;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 12)) {
    break label$2;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 13)) {
    break label$2;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 14)) {
    break label$2;
   }
   fread($1 + 11 | 0, 1, 2, $0);
   $2 = 2793;
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 11) | 0) != 1) {
    break label$2;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 12) & 255) {
    break label$2;
   }
   $3 = 1;
   fread($1 + 11 | 0, 1, 2, $0);
   $2 = 1871;
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 11) | 0) != 1) {
    break label$2;
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 12) & 255)) {
    break label$1;
   }
  }
  puts($2);
  $3 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $3;
}

function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 0), $4)) {
   break label$2;
  }
  label$3: {
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != ($2 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 20) | 0) != ($2 | 0)) {
     break label$3;
    }
   }
   if (($3 | 0) != 1) {
    break label$2;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 32, 1);
   return;
  }
  SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
  SAFE_HEAP_STORE_i32_4_4($1, 32, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 1 | 0);
  label$5: {
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
    break label$5;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
    break label$5;
   }
   SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
  }
  SAFE_HEAP_STORE_i32_4_4($1, 44, 4);
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
 label$1: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
   SAFE_HEAP_STORE_i32_1_1($1, 15, 0);
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2, $1 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, 0);
   break label$1;
  }
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
  SAFE_HEAP_STORE_i32_1_1($1, 14, 0);
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2, $1 + 14 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 20) | 0]($0 + 8 | 0) | 0;
 return std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | 0) | 0;
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0)) {
  $2 = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($1 + 8 | 0, $0);
  label$2: {
   if (!std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__operator_20bool_28_29_20const($2)) {
    break label$2;
   }
   if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0)) | 0) != -1) {
    break label$2;
   }
   std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0, 1);
  }
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($2);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
 label$1: {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3)) {
   break label$1;
  }
  $4 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2, $0);
  std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($4), $1);
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($4)) {
   break label$1;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0, 1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_2c_20int_2c_20emscripten__internal___EM_VAL__29($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 SAFE_HEAP_STORE_i32_4_4($7, 32, $1);
 SAFE_HEAP_STORE_i32_4_4($7, 24, $2);
 SAFE_HEAP_STORE_i32_4_4($7, 16, $3);
 SAFE_HEAP_STORE_i32_4_4($7, 8, $6);
 FUNCTION_TABLE[$0 | 0]($7 + 40 | 0, $7 + 32 | 0, $7 + 24 | 0, $7 + 16 | 0, $4, $5, $7 + 8 | 0);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($7, 40) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($7, 40);
 _emval_decref($0 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 24) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 32) | 0);
 __stack_pointer = $7 + 48 | 0;
 return $0 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 $4 = 1;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$1;
  }
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1, 20228, 20276, 0);
  if (!$1) {
   break label$1;
  }
  memset($3 + 8 | 4, 0, 52);
  SAFE_HEAP_STORE_i32_4_4($3, 56, 1);
  SAFE_HEAP_STORE_i32_4_4($3, 20, -1);
  SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
  wasm2js_i32$1 = $1, wasm2js_i32$2 = $3 + 8 | 0, wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 0), 
  wasm2js_i32$4 = 1, wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0, 
  FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 32);
  if (($4 | 0) == 1) {
   SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($3, 24));
  }
  $4 = ($4 | 0) == 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return $4 | 0;
}

function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1: {
  if ($5 & 64) {
   $8 = $4;
   $7 = $3;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (($9 & 63) >>> 0 >= 32) {
    $1 = $8 >>> $6 | 0;
   } else {
    $10 = $8 >>> $6 | 0;
    $1 = ((1 << $6) - 1 & $8) << 32 - $6 | $7 >>> $6;
   }
   $2 = $10;
   $3 = 0;
   $4 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $8 = $3;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $7 = $8 << $6;
   $11 = 0;
  } else {
   $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $10 << $6;
   $11 = $8 << $6;
  }
  $12 = $7;
  $7 = $2;
  $10 = $1;
  $8 = 0;
  $13 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $9 = $7 >>> $6 | 0;
  } else {
   $8 = $7 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $7) << 32 - $6 | $10 >>> $6;
  }
  $10 = $8;
  $7 = $11;
  $1 = $7 | $9;
  $8 = $12;
  $10 = $8 | $10;
  $2 = $10;
  $10 = $4;
  $8 = $3;
  $7 = 0;
  $9 = $13;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $3 = $10 >>> $6 | 0;
  } else {
   $7 = $10 >>> $6 | 0;
   $3 = ((1 << $6) - 1 & $10) << 32 - $6 | $8 >>> $6;
  }
  $4 = $7;
 }
 $7 = $2;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $7);
 $7 = $4;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $7);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + ($1 << 2) | 0);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + ($1 << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) << 2) | 0);
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0)) {
  $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($1 + 8 | 0, $0);
  label$2: {
   if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($2)) {
    break label$2;
   }
   if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0)) | 0) != -1) {
    break label$2;
   }
   std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0, 1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1: {
  if ($5 & 64) {
   $8 = $2;
   $7 = $1;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (($9 & 63) >>> 0 >= 32) {
    $10 = $7 << $6;
    $3 = 0;
   } else {
    $10 = (1 << $6) - 1 & $7 >>> 32 - $6 | $8 << $6;
    $3 = $7 << $6;
   }
   $4 = $10;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $8 = $3;
  $11 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $7 = $8 << $6;
   $3 = 0;
  } else {
   $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $10 << $6;
   $3 = $8 << $6;
  }
  $4 = $7;
  $7 = $2;
  $10 = $1;
  $8 = 0;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $9 = $7 >>> $6 | 0;
  } else {
   $8 = $7 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $7) << 32 - $6 | $10 >>> $6;
  }
  $10 = $8;
  $7 = $3;
  $3 = $7 | $9;
  $8 = $4;
  $10 = $8 | $10;
  $4 = $10;
  $10 = $2;
  $8 = $1;
  $9 = $11;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $7 = $8 << $6;
   $1 = 0;
  } else {
   $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $10 << $6;
   $1 = $8 << $6;
  }
  $2 = $7;
 }
 $7 = $2;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $7);
 $7 = $4;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $7);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 16, $1);
 SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
 SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
 while (1) {
  label$2: {
   $2 = bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($3 + 24 | 0, $3 + 16 | 0);
   if (!$2) {
    break label$2;
   }
   if (!std____2____equal_to_wchar_t_2c_20wchar_t___operator_28_29_28wchar_t_20const__2c_20wchar_t_20const__29_20const($3, std____2____wrap_iter_wchar_t____operator__28_29_20const($3 + 24 | 0), std____2____wrap_iter_wchar_t____operator__28_29_20const($3 + 8 | 0))) {
    break label$2;
   }
   std____2____wrap_iter_wchar_t____operator___28_29($3 + 24 | 0);
   std____2____wrap_iter_wchar_t____operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
 return $2 ^ 1;
}

function __stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 16, $1);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
 SAFE_HEAP_STORE_i32_4_4($3, 20, $2 - (($4 | 0) != 0) | 0);
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
 SAFE_HEAP_STORE_i32_4_4($3, 28, $4);
 SAFE_HEAP_STORE_i32_4_4($3, 24, $5);
 $4 = -1;
 label$1: {
  label$2: {
   if (!__wasi_syscall_ret(__wasi_fd_read(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0, $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
    if (($4 | 0) > 0) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | $4 & 48 ^ 16);
   break label$1;
  }
  $6 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
  if ($6 >>> 0 >= $4 >>> 0) {
   break label$1;
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $5);
  SAFE_HEAP_STORE_i32_4_4($0, 8, ($4 - $6 | 0) + $5 | 0);
  if (SAFE_HEAP_LOAD_i32_4_4($0, 48)) {
   SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1(($1 + $2 | 0) - 1 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($5, 0));
  }
  $4 = $2;
 }
 __stack_pointer = $3 + 32 | 0;
 return $4 | 0;
}

function cfttree_28int_2c_20int_2c_20int_2c_20double__2c_20int_2c_20double__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 label$1: {
  label$2: {
   if (!($2 & 3)) {
    while (1) {
     $0 = $0 << 2;
     $6 = $2 & 12;
     $7 = $2 >> 2;
     $2 = $7;
     if (!$6) {
      continue;
     }
     break;
    }
    $6 = 1;
    $7 = $7 & 1;
    if (!$7) {
     break label$2;
    }
    if (($0 | 0) <= 128) {
     break label$1;
    }
    while (1) {
     cftmdl1_28int_2c_20double__2c_20double__29($0, ($1 - $0 << 3) + $3 | 0, ($4 - ($0 >>> 1 | 0) << 3) + $5 | 0);
     $2 = $0 >>> 0 > 515;
     $0 = $0 >>> 2 | 0;
     if ($2) {
      continue;
     }
     break;
    }
    return $7;
   }
   $6 = ($1 - $0 << 3) + $3 | 0;
   if ($2 & 1) {
    cftmdl1_28int_2c_20double__2c_20double__29($0, $6, ($4 - ($0 >>> 1 | 0) << 3) + $5 | 0);
    return 1;
   }
   cftmdl2_28int_2c_20double__2c_20double__29($0, $6, ($4 - $0 << 3) + $5 | 0);
   return 0;
  }
  $6 = 0;
  if (($0 | 0) <= 128) {
   break label$1;
  }
  while (1) {
   cftmdl2_28int_2c_20double__2c_20double__29($0, ($1 - $0 << 3) + $3 | 0, ($4 - $0 << 3) + $5 | 0);
   $2 = $0 >>> 0 > 515;
   $0 = $0 >>> 2 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $6;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____vallocate_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
  abort();
 }
 $2 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0), $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 SAFE_HEAP_STORE_i32_4_4(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29($0), 0, ($1 << 2) + $2 | 0);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_new_28unsigned_20long_29_20const($0, 0);
}

function exp2($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $3 = $1;
  $1 = $1 & 2147483647;
  label$2: {
   if ($1 >>> 0 >= 1083174912) {
    if (!(($3 | 0) < 0 | $1 >>> 0 < 1083179008)) {
     return $0 * 8.98846567431158e307;
    }
    if ($1 >>> 0 >= 2146435072) {
     return -1 / $0;
    }
    if (!($0 <= -1075)) {
     break label$1;
    }
    $1 = $3;
    $2 = 0;
    if (($1 | 0) < -1 ? 1 : ($1 | 0) <= -1) {
     break label$2;
    }
    break label$1;
   }
   if ($1 >>> 0 > 1016070143) {
    break label$1;
   }
   $2 = $0 + 1;
  }
  return $2;
 }
 $2 = $0 + 26388279066624;
 wasm2js_scratch_store_f64(+$2);
 wasm2js_scratch_load_i32(1) | 0;
 $1 = (wasm2js_scratch_load_i32(0) | 0) + 128 | 0;
 $3 = $1 << 4 & 4080;
 $4 = SAFE_HEAP_LOAD_f64_8_8($3 + 21024 | 0, 0);
 $0 = $0 - ($2 + -26388279066624) - SAFE_HEAP_LOAD_f64_8_8(($3 | 8) + 21024 | 0, 0);
 return scalbn($4 + $4 * $0 * ($0 * ($0 * ($0 * ($0 * .0013333559164630223 + .009618129842126066) + .0555041086648214) + .2402265069591) + .6931471805599453), ($1 & -256) / 256 | 0);
}

function __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 label$1: {
  while (1) {
   if (!$1) {
    return 0;
   }
   $1 = __dynamic_cast($1, 20228, 20372, 0);
   if (!$1) {
    break label$1;
   }
   if (SAFE_HEAP_LOAD_i32_4_4($1, 8) & (SAFE_HEAP_LOAD_i32_4_4($0, 8) ^ -1)) {
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), SAFE_HEAP_LOAD_i32_4_4($1, 12), 0)) {
    return 1;
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   if (!$2) {
    break label$1;
   }
   $2 = __dynamic_cast($2, 20228, 20372, 0);
   if ($2) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
    $0 = $2;
    continue;
   }
   break;
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!$0) {
   break label$1;
  }
  $0 = __dynamic_cast($0, 20228, 20484, 0);
  if (!$0) {
   break label$1;
  }
  $3 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, SAFE_HEAP_LOAD_i32_4_4($1, 12));
 }
 return $3;
}

function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 16, $1);
 SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
 SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
 while (1) {
  label$2: {
   $2 = bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($3 + 24 | 0, $3 + 16 | 0);
   if (!$2) {
    break label$2;
   }
   if (!std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($3, std____2____wrap_iter_char____operator__28_29_20const($3 + 24 | 0), std____2____wrap_iter_char____operator__28_29_20const($3 + 8 | 0))) {
    break label$2;
   }
   std____2____wrap_iter_char____operator___28_29($3 + 24 | 0);
   std____2____wrap_iter_char____operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
 return $2 ^ 1;
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______compressed_pair_std__nullptr_t_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____28std__nullptr_t___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1));
 std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_201_2c_20false_____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($0 + 4 | 0, std____2____sso_allocator_std____2__locale__facet__2c_2030ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____type__29($2));
 return $0;
}

function emscripten__internal__MethodCaller_emscripten__val_2c_20emscripten__val__2c_20emscripten__val___call_28emscripten__internal___EM_VAL__2c_20char_20const__2c_20emscripten__val__2c_20emscripten__val___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 25992) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25992)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4(0, 25988, _emval_get_method_caller(3, 3524) | 0);
  __cxa_guard_release(25992);
 }
 $7 = SAFE_HEAP_LOAD_i32_4_4(0, 25988);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 16, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($4, 0));
 $6 = +_emval_call_method($7 | 0, $1 | 0, $2 | 0, $5 + 12 | 0, $5 + 16 | 0);
 label$2: {
  if ($6 < 4294967296 & $6 >= 0) {
   $3 = ~~$6 >>> 0;
   break label$2;
  }
  $3 = 0;
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
 _emval_run_destructors($4 | 0);
 __stack_pointer = $5 + 32 | 0;
}

function __extendsftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $9 = $0;
 $7 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
 $4 = $7 & 2147483647;
 label$1: {
  if ($4 - 8388608 >>> 0 <= 2130706431) {
   $2 = $4 >>> 7 | 0;
   $3 = $4 << 25;
   $8 = $3;
   $6 = $2 + 1065353216 | 0;
   $2 = 0;
   break label$1;
  }
  if ($4 >>> 0 >= 2139095040) {
   $8 = $7 << 25;
   $2 = $7;
   $3 = $2 >>> 7 | 0;
   $2 = $3 | 2147418112;
   $6 = $2;
   $2 = 0;
   break label$1;
  }
  if (!$4) {
   $2 = 0;
   break label$1;
  }
  $2 = $4;
  $4 = Math_clz32($4);
  __ashlti3($5, $2, 0, 0, 0, $4 + 81 | 0);
  $3 = SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0);
  $8 = $3;
  $2 = i64toi32_i32$HIGH_BITS;
  $6 = $2 ^ 65536;
  $2 = 16265 - $4 | 0;
  $3 = $2 << 16;
  $2 = $3;
  $3 = $6;
  $2 = $3 | $2;
  $6 = $2;
  $2 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
  $10 = $2;
  $2 = i64toi32_i32$HIGH_BITS;
 }
 SAFE_HEAP_STORE_i64_8_8($9, 0, $10, $2);
 $3 = $7 & -2147483648;
 $2 = $6;
 $3 = $3 | $2;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $8, $3);
 __stack_pointer = $5 + 16 | 0;
}

function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = ($2 | 0) != 0;
 label$1: {
  label$2: {
   label$3: {
    if (!($0 & 3) | !$2) {
     break label$3;
    }
    $4 = $1 & 255;
    while (1) {
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($4 | 0)) {
      break label$2;
     }
     $2 = $2 - 1 | 0;
     $3 = ($2 | 0) != 0;
     $0 = $0 + 1 | 0;
     if (!($0 & 3)) {
      break label$3;
     }
     if ($2) {
      continue;
     }
     break;
    }
   }
   if (!$3) {
    break label$1;
   }
  }
  label$5: {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($1 & 255) | $2 >>> 0 < 4) {
    break label$5;
   }
   $4 = Math_imul($1 & 255, 16843009);
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0) ^ $4;
    if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
     break label$5;
    }
    $0 = $0 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2 >>> 0 > 3) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$1;
  }
  $3 = $1 & 255;
  while (1) {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($3 | 0)) {
    return $0;
   }
   $0 = $0 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return 0;
}

function emscripten__internal__MethodCaller_emscripten__val_2c_20emscripten__val_2c_20emscripten__val___call_28emscripten__internal___EM_VAL__2c_20char_20const__2c_20emscripten__val___2c_20emscripten__val___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26e3) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26e3)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4(0, 25996, _emval_get_method_caller(3, 3536) | 0);
  __cxa_guard_release(26e3);
 }
 $7 = SAFE_HEAP_LOAD_i32_4_4(0, 25996);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 16, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
 SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($4, 0));
 $6 = +_emval_call_method($7 | 0, $1 | 0, $2 | 0, $5 + 12 | 0, $5 + 16 | 0);
 label$2: {
  if ($6 < 4294967296 & $6 >= 0) {
   $3 = ~~$6 >>> 0;
   break label$2;
  }
  $3 = 0;
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
 _emval_run_destructors($4 | 0);
 __stack_pointer = $5 + 32 | 0;
}

function EmscriptenBindingInitializer_WorldJS__EmscriptenBindingInitializer_WorldJS_28_29($0) {
 _embind_register_class(2984, 3004, 3032, 0, 3048, 1, 3051, 0, 3051, 0, 2012, 3053, 2);
 _embind_register_class_constructor(2984, 1, 3056, 3048, 3, 4);
 _embind_register_class_class_function(2984, 1496, 4, 3072, 3088, 5, 6);
 _embind_register_class_class_function(2984, 1938, 2, 3096, 3268, 7, 8);
 _embind_register_class_class_function(2984, 1515, 4, 3280, 3296, 9, 10);
 _embind_register_class_class_function(2984, 1844, 4, 3312, 3296, 11, 12);
 _embind_register_class_class_function(2984, 1413, 4, 3328, 3344, 13, 14);
 _embind_register_class_class_function(2984, 1220, 4, 3328, 3344, 13, 15);
 _embind_register_class_class_function(2984, 1625, 5, 3360, 3380, 16, 17);
 _embind_register_class_class_function(2984, 2065, 6, 3392, 3416, 18, 19);
 _embind_register_class_class_function(2984, 1303, 7, 3424, 3452, 20, 21);
 _embind_register_class_class_function(2984, 1585, 2, 3464, 3472, 22, 23);
 _embind_register_class_class_function(2984, 1607, 2, 3476, 3268, 24, 25);
 _embind_register_class_class_function(2984, 1919, 2, 3096, 3268, 7, 26);
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20const___28std____2____default_init_tag___2c_20std____2__allocator_wchar_t__20const__29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__20const__2c_20void__28std____2__allocator_wchar_t__20const__29($0, std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($2));
 return $0;
}

function std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2__distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($0, $1) {
 return std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2____distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__locale____imp_____imp_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13256);
 $1 = $0 + 16 | 0;
 while (1) {
  if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   if (SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), 0)) {
    std____2____shared_count____release_shared_28_29(SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), 0));
   }
   $2 = $2 + 1 | 0;
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 192 | 0);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____vector_28_29($1);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $1, $2) {
 std____2____libcpp_mutex_lock_28pthread_mutex_t__29(31236);
 while (1) {
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == 1) {
   std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29(31264, 31236);
   continue;
  }
  break;
 }
 if (!SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
  void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0);
  std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(31236);
  FUNCTION_TABLE[$2 | 0]($1);
  std____2____libcpp_mutex_lock_28pthread_mutex_t__29(31236);
  void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0);
  std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(31236);
  std____2____libcpp_condvar_broadcast_28pthread_cond_t__29(31264);
  return;
 }
 std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(31236);
}

function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
  return;
 }
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2: {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 54)) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($4 >>> 0 > $0 >>> 0) {
    continue;
   }
   break;
  }
 }
}

function Wav2World__Wav2World_28double__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 0);
 $5 = $0 + 32 | 0;
 SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
 $6 = $0 + 24 | 0;
 SAFE_HEAP_STORE_i64_8_8($6, 0, 0, 0);
 $7 = $0 + 16 | 0;
 SAFE_HEAP_STORE_i64_8_8($7, 0, 0, 0);
 $8 = $0 + 8 | 0;
 SAFE_HEAP_STORE_i64_8_8($8, 0, 0, 0);
 $9 = $4 + 8 | 0;
 $1 = WorldModule__WorldModule_28double__2c_20int_2c_20int_29($4 + 48 | 0, $1, $2, $3);
 WorldModule__GetModule_28_29($9, $1);
 SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($4 + 40 | 0, 0));
 SAFE_HEAP_STORE_i64_8_8($6, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($4, 8), i64toi32_i32$HIGH_BITS);
 WorldModule___WorldModule_28_29($1);
 __stack_pointer = $4 + 96 | 0;
 return $0;
}

function std____2__to_string_28double_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2___28anonymous_20namespace_29__initial_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator_28_29_28_29_20const($2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__as_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_20_28__29_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29_2c_20double__28int_20_28__29_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___value_type_20const__2c_20double_29($0, $2, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 SAFE_HEAP_STORE_i32_1_1($1, 53, 1);
 label$1: {
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) != ($3 | 0)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_1_1($1, 52, 1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
  label$2: {
   if (!$3) {
    SAFE_HEAP_STORE_i32_4_4($1, 36, 1);
    SAFE_HEAP_STORE_i32_4_4($1, 24, $4);
    SAFE_HEAP_STORE_i32_4_4($1, 16, $2);
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 48) | 0) != 1) {
     break label$1;
    }
    if (($4 | 0) == 1) {
     break label$2;
    }
    break label$1;
   }
   if (($2 | 0) == ($3 | 0)) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 24);
    if (($3 | 0) == 2) {
     SAFE_HEAP_STORE_i32_4_4($1, 24, $4);
     $3 = $4;
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 48) | 0) != 1) {
     break label$1;
    }
    if (($3 | 0) == 1) {
     break label$2;
    }
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 36, SAFE_HEAP_LOAD_i32_4_4($1, 36) + 1 | 0);
  }
  SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
 }
}

function wcrtomb($0, $1, $2) {
 $2 = 1;
 label$1: {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3: {
    if (!SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(__pthread_self(), 172), 0)) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     SAFE_HEAP_STORE_i32_1_1($0, 1, $1 & 63 | 128);
     SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 6 | 192);
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 2, $1 & 63 | 128);
     SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 12 | 224);
     SAFE_HEAP_STORE_i32_1_1($0, 1, $1 >>> 6 & 63 | 128);
     return 3;
    }
    if ($1 - 65536 >>> 0 <= 1048575) {
     SAFE_HEAP_STORE_i32_1_1($0, 3, $1 & 63 | 128);
     SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 18 | 240);
     SAFE_HEAP_STORE_i32_1_1($0, 2, $1 >>> 6 & 63 | 128);
     SAFE_HEAP_STORE_i32_1_1($0, 1, $1 >>> 12 & 63 | 128);
     return 4;
    }
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 25);
   $2 = -1;
  }
  return $2;
 }
 SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
 return 1;
}

function GetAudioLength($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = fopen($0, 1953);
 $2 = 0;
 label$1: {
  if (!$0) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__CheckHeader_28_IO_FILE__29($0)) {
   fclose($0);
   $2 = -1;
   break label$1;
  }
  SAFE_HEAP_STORE_i32_1_1($1 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, 0);
  fseek($0, 10, 1);
  fread($1 + 4 | 0, 1, 2, $0);
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 4);
  label$3: {
   if (!fread($1 + 8 | 0, 1, 1, $0)) {
    break label$3;
   }
   $3 = $1 + 8 | 1;
   while (1) {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 8) | 0) == 100) {
     fread($3, 1, 3, $0);
     if (!memcmp($1 + 8 | 0, 1964, 5)) {
      break label$3;
     }
     fseek($0, -3, 1);
    }
    if (fread($1 + 8 | 0, 1, 1, $0)) {
     continue;
    }
    break;
   }
  }
  if (memcmp($1 + 8 | 0, 1964, 5)) {
   fclose($0);
   $2 = -1;
   break label$1;
  }
  fread($1 + 4 | 0, 1, 4, $0);
  fclose($0);
  $2 = (SAFE_HEAP_LOAD_i32_4_1($1, 4) >>> 0) / (($2 & 248) >>> 3 >>> 0) | 0;
 }
 __stack_pointer = $1 + 16 | 0;
 $0 = $2;
 return $0;
}

function strtox_1($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $4 = __stack_pointer - 160 | 0;
 __stack_pointer = $4;
 memset($4 + 16 | 0, 0, 144);
 SAFE_HEAP_STORE_i32_4_4($4, 92, -1);
 SAFE_HEAP_STORE_i32_4_4($4, 60, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 24, -1);
 SAFE_HEAP_STORE_i32_4_4($4, 20, $1);
 __shlim($4 + 16 | 0, 0, 0);
 __floatscan($4, $4 + 16 | 0, $3, 1);
 $5 = SAFE_HEAP_LOAD_i64_8_8($4, 8);
 $7 = $5;
 $3 = i64toi32_i32$HIGH_BITS;
 $8 = $3;
 $3 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
 $9 = $3;
 $5 = i64toi32_i32$HIGH_BITS;
 $10 = $5;
 if ($2) {
  $5 = SAFE_HEAP_LOAD_i64_8_8($4, 136);
  $6 = $5;
  $3 = i64toi32_i32$HIGH_BITS;
  $11 = $3;
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 20) - SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0;
  $3 = $5 >> 31;
  $12 = $5;
  $6 = $5 + $6 | 0;
  $5 = $3;
  $3 = $11;
  $3 = $5 + $3 | 0;
  $3 = $6 >>> 0 < $12 >>> 0 ? $3 + 1 | 0 : $3;
  SAFE_HEAP_STORE_i32_4_4($2, 0, $3 | $6 ? $6 + $1 | 0 : $1);
 }
 $3 = $10;
 SAFE_HEAP_STORE_i64_8_8($0, 0, $9, $3);
 $3 = $8;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $7, $3);
 __stack_pointer = $4 + 160 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
 var $2 = 0;
 $2 = std____2__remove_reference_std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____type___20std____2__move_std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20____28std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___29($1);
 SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0));
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($1);
 return $0;
}

function float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 label$1: {
  label$2: {
   label$3: {
    if (($0 | 0) != ($1 | 0)) {
     $5 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
     $4 = float_20std____2____do_strtod_float__28char_20const__2c_20char___29($0, $3 + 12 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     if (!$0) {
      break label$3;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0) != ($1 | 0)) {
      break label$2;
     }
     $6 = $4;
     if (($0 | 0) != 68) {
      break label$1;
     }
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $5);
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0) == ($1 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
  $4 = $6;
 }
 __stack_pointer = $3 + 16 | 0;
 return $4;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__20const__2c_20void__28std____2__allocator_char__20const__29($0, std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($2));
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20__28std____2____default_init_tag___2c_20std____2__allocator_wchar_t____29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__2c_20void__28std____2__allocator_wchar_t____29($0, std____2__allocator_wchar_t____20std____2__forward_std____2__allocator_wchar_t__20__28std____2__remove_reference_std____2__allocator_wchar_t__20___type__29($2));
 return $0;
}

function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = __stack_pointer - 416 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, $2 + 416 | 0);
 std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 12), $1);
 __stack_pointer = $2 + 416 | 0;
 return $1 | 0;
}

function double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 label$1: {
  label$2: {
   label$3: {
    if (($0 | 0) != ($1 | 0)) {
     $5 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0);
     $4 = double_20std____2____do_strtod_double__28char_20const__2c_20char___29($0, $3 + 12 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4(__errno_location(), 0);
     if (!$0) {
      break label$3;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0) != ($1 | 0)) {
      break label$2;
     }
     $6 = $4;
     if (($0 | 0) != 68) {
      break label$1;
     }
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $5);
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0) == ($1 | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($2, 0, 4);
  $4 = $6;
 }
 __stack_pointer = $3 + 16 | 0;
 return $4;
}

function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 return std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2____distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 16, $1);
 SAFE_HEAP_STORE_i32_4_4($6, 8, $2);
 SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
 FUNCTION_TABLE[$0 | 0]($6 + 24 | 0, $6 + 16 | 0, $6 + 8 | 0, $6, $4, $5);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
 _emval_decref($0 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
 __stack_pointer = $6 + 32 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29($0, std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($2));
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i64_8_8($6, 8, 624576549, 1394948685);
 $0 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6 + 8 | 0, $6 + 16 | 0);
 __stack_pointer = $6 + 16 | 0;
 return $0 | 0;
}

function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, $2 + 116 | 0);
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 12), $1);
 __stack_pointer = $2 + 128 | 0;
 return $1 | 0;
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29(wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($0), wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($1), std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2));
}

function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
 label$1: {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0]($2, $0, $1) | 0;
  }
  label$5: {
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 75) | 0) < 0) {
    $3 = 0;
    break label$5;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     $3 = 0;
     break label$5;
    }
    $4 = $3 - 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_1_U_1($4 + $0 | 0, 0) | 0) != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $0 = $0 + $3 | 0;
   $1 = $1 - $3 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
  }
  memcpy($5, $0, $1);
  SAFE_HEAP_STORE_i32_4_4($2, 20, SAFE_HEAP_LOAD_i32_4_4($2, 20) + $1 | 0);
  $4 = $1 + $3 | 0;
 }
 return $4;
}

function fread($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if ((SAFE_HEAP_LOAD_i32_4_4($3, 76) | 0) >= 0) {
  $7 = __lockfile($3);
 }
 $6 = Math_imul($1, $2);
 $4 = SAFE_HEAP_LOAD_i32_1_U_1($3, 74);
 SAFE_HEAP_STORE_i32_1_1($3, 74, $4 | $4 - 1);
 $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
 $8 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
 $4 = $4 - $8 | 0;
 if (($4 | 0) < 1) {
  $4 = $6;
 } else {
  $5 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
  memcpy($0, $8, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) + $5 | 0);
  $0 = $0 + $5 | 0;
  $4 = $6 - $5 | 0;
 }
 if ($4) {
  while (1) {
   label$6: {
    if (!__toread($3)) {
     $5 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($3, 32) | 0]($3, $0, $4) | 0;
     if ($5 + 1 >>> 0 > 1) {
      break label$6;
     }
    }
    if ($7) {
     __unlockfile($3);
    }
    return ($6 - $4 >>> 0) / ($1 >>> 0) | 0;
   }
   $0 = $0 + $5 | 0;
   $4 = $4 - $5 | 0;
   if ($4) {
    continue;
   }
   break;
  }
 }
 $0 = $1 ? $2 : 0;
 if ($7) {
  __unlockfile($3);
 }
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 $2 = 2;
 label$1: {
  $1 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5 + 12 | 0, 0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8));
  if ($1 + 1 >>> 0 < 2) {
   break label$1;
  }
  $2 = 1;
  $1 = $1 - 1 | 0;
  if ($1 >>> 0 > $3 - SAFE_HEAP_LOAD_i32_4_4($4, 0) >>> 0) {
   break label$1;
  }
  $2 = $5 + 12 | 0;
  while (1) {
   if (!$1) {
    $2 = 0;
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $3 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($3, 0, $0);
   $1 = $1 - 1 | 0;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 __stack_pointer = $5 + 16 | 0;
 return $2 | 0;
}

function InitializeInverseRealFFT($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 $3 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 268435455) != ($0 | 0) ? -1 : $0 << 4);
 SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
 fft_plan_dft_c2r_1d($2 + 8 | 0, $0, $4, $3, 3);
 SAFE_HEAP_STORE_i64_8_4($1 + 44 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 36 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 20 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1, 12, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $2 + 48 | 0;
}

function InitializeForwardRealFFT($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 $3 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 268435455) != ($0 | 0) ? -1 : $0 << 4);
 SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
 fft_plan_dft_r2c_1d($2 + 8 | 0, $0, $3, $4, 3);
 SAFE_HEAP_STORE_i64_8_4($1 + 44 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 36 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1 + 20 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_4($1, 12, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $2 + 48 | 0;
}

function std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($0), 0));
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($1), 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($2 + 12 | 0), 0));
 __stack_pointer = $2 + 16 | 0;
}

function __strchrnul($0, $1) {
 var $2 = 0, $3 = 0;
 label$1: {
  $3 = $1 & 255;
  if ($3) {
   if ($0 & 3) {
    while (1) {
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
     if (!$2 | ($1 & 255) == ($2 | 0)) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$5: {
    if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
     break label$5;
    }
    $3 = Math_imul($3, 16843009);
    while (1) {
     $2 = $2 ^ $3;
     if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
      break label$5;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     $0 = $0 + 4 | 0;
     if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
      continue;
     }
     break;
    }
   }
   while (1) {
    $2 = $0;
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
    if ($3) {
     $0 = $2 + 1 | 0;
     if (($1 & 255) != ($3 | 0)) {
      continue;
     }
    }
    break;
   }
   return $2;
  }
  return strlen($0) + $0 | 0;
 }
 return $0;
}

function WorldNativeIO__WavWrite_JS_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 $1 = double__20GetPtrFrom1XArray_double__28emscripten__val_2c_20int__29($4, $4 + 4 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
 wavwrite($1, SAFE_HEAP_LOAD_i32_4_4($4, 4), $2, 16, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($3, 0), 
 wasm2js_i32$1 = $3, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($3, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 SAFE_HEAP_STORE_i32_4_4($4, 8, SAFE_HEAP_LOAD_i32_4_4($4, 4));
 SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(20676, $4 + 8 | 0) | 0);
 __stack_pointer = $4 + 16 | 0;
}

function std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 28, $6 + 132 | 0);
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $6 + 32 | 0, $6 + 28 | 0, $3, $4, $5);
 SAFE_HEAP_STORE_i64_8_8($6, 16, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 12, $6 + 32 | 0);
 $0 = std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($1, $6 + 12 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($1, SAFE_HEAP_LOAD_i32_4_4($2, 0)), $6 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 if (($0 | 0) == -1) {
  std____2____throw_runtime_error_28char_20const__29($6);
  abort();
 }
 SAFE_HEAP_STORE_i32_4_4($2, 0, ($0 << 2) + $1 | 0);
 __stack_pointer = $6 + 144 | 0;
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 16, $1);
 SAFE_HEAP_STORE_i32_4_4($5, 8, $2);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 FUNCTION_TABLE[$0 | 0]($5 + 24 | 0, $5 + 16 | 0, $5 + 8 | 0, $5, $4);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($5, 24) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
 _emval_decref($0 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 16) | 0);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____recommend_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
 $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___max_size_28_29_20const($0);
 if ($3 >>> 0 >= $1 >>> 0) {
  $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0);
  if ($0 >>> 0 < $3 >>> 1 >>> 0) {
   SAFE_HEAP_STORE_i32_4_4($2, 8, $0 << 1);
   $3 = SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0), 0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $3;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function cos($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $3 = $3 & 2147483647;
 label$1: {
  if ($3 >>> 0 <= 1072243195) {
   $2 = 1;
   if ($3 >>> 0 < 1044816030) {
    break label$1;
   }
   $2 = __cos($0, 0);
   break label$1;
  }
  $2 = $0 - $0;
  if ($3 >>> 0 >= 2146435072) {
   break label$1;
  }
  label$3: {
   switch (__rem_pio2($0, $1) & 3) {
   case 0:
    $2 = __cos(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8));
    break label$1;

   case 1:
    $2 = -__sin(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8), 1);
    break label$1;

   case 2:
    $2 = -__cos(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8));
    break label$1;

   default:
    break label$3;
   }
  }
  $2 = __sin(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8), 1);
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1: {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  label$4: {
   switch (__rem_pio2($0, $1) & 3) {
   case 0:
    $0 = __sin(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8), 1);
    break label$1;

   case 1:
    $0 = __cos(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8));
    break label$1;

   case 2:
    $0 = -__sin(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8), 1);
    break label$1;

   default:
    break label$4;
   }
  }
  $0 = -__cos(SAFE_HEAP_LOAD_f64_8_8($1, 0), SAFE_HEAP_LOAD_f64_8_8($1, 8));
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function fftshift($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = ($1 | 0) / 2 | 0;
 label$1: {
  if (($1 | 0) < 2) {
   break label$1;
  }
  if (($1 & -2) != 2) {
   $1 = $5 & -2;
   while (1) {
    $4 = $3 << 3;
    $6 = $3 + $5 << 3;
    SAFE_HEAP_STORE_f64_8_8($4 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($6 + $0 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8($2 + $6 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $4 | 0, 0));
    $4 = $3 | 1;
    $6 = $4 << 3;
    $4 = $5 + $4 << 3;
    SAFE_HEAP_STORE_f64_8_8($6 + $2 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($4 + $0 | 0, 0));
    SAFE_HEAP_STORE_f64_8_8($2 + $4 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $6 | 0, 0));
    $3 = $3 + 2 | 0;
    $1 = $1 - 2 | 0;
    if ($1) {
     continue;
    }
    break;
   }
  }
  if (!($5 & 1)) {
   break label$1;
  }
  $1 = $3 << 3;
  $3 = $3 + $5 << 3;
  SAFE_HEAP_STORE_f64_8_8($2 + $1 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($3 + $0 | 0, 0));
  SAFE_HEAP_STORE_f64_8_8($2 + $3 | 0, 0, SAFE_HEAP_LOAD_f64_8_8($0 + $1 | 0, 0));
 }
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0), 13008, 13040, $2);
 $2 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($3, 0, std____2__numpunct_wchar_t___decimal_point_28_29_20const($2));
 SAFE_HEAP_STORE_i32_4_4($4, 0, std____2__numpunct_wchar_t___thousands_sep_28_29_20const($2));
 std____2__numpunct_wchar_t___grouping_28_29_20const($0, $2);
 std____2__locale___locale_28_29($5 + 8 | 0);
 __stack_pointer = $5 + 16 | 0;
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_constexpr_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29(std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($3 + 8 | 0), $2);
   $0 = $0 + 4 | 0;
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) < 1 | ($2 | 0) > 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function WorldModule___WorldModule_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 24 | 0, 0);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 $1 = 0;
 if ((SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0) | 0) > 0) {
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
   $2 = $1 << 2;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3 + $2 | 0, 0);
   if ($3) {
    operator_20delete_5b_5d_28void__29($3);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 36) + $2 | 0, 0);
   if ($2) {
    operator_20delete_5b_5d_28void__29($2);
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) < (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 return $0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) < 1 | ($2 | 0) > 31)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t__2c_20void__28wchar_t__2c_20wchar_t__2c_20std____2__allocator_wchar_t__20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20const___28std____2____default_init_tag___2c_20std____2__allocator_wchar_t__20const__29($0, $4 + 8 | 0, $3);
 std____2___MetaBase___is_cpp17_forward_iterator_wchar_t____value____EnableIfImpl_void__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___max_size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, unsigned_20long_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___max_size_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20const__29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29_20const($0)));
 SAFE_HEAP_STORE_i32_4_4($1, 8, std____2__numeric_limits_long___max_28_29());
 $0 = SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($1 + 12 | 0, $1 + 8 | 0), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1 | 0);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 3);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 365)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t_20const__2c_20void__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2___MetaBase___is_cpp17_forward_iterator_wchar_t_20const____value____EnableIfImpl_void__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______destruct_at_end_28std____2__locale__facet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
 var $2 = 0, $3 = 0;
 while (1) {
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) != ($1 | 0)) {
   $3 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_28_29($0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) - 4 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___destroy_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29($3, std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($2));
   continue;
  }
  break;
 }
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 0) & 4)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($2 | 0) < 69 ? $2 + 2e3 | 0 : ($2 | 0) < 100 ? $2 + 1900 | 0 : $2) - 1900 | 0);
 }
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 1);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 6)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 60)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 59)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 23)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 19820);
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($3 + 8 | 0, $4);
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 40, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 44, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29(char__20std____2____unwrap_iter_char___28char__29($0), char__20std____2____unwrap_iter_char___28char__29($1), std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2));
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
 $5 = std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($0, 12));
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 __stack_pointer = $0 + 16 | 0;
 return $5 | 0;
}

function void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if ((unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) | 0) != -1) {
  std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($2, std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_20false_2c_20false__28std____2___28anonymous_20namespace_29____fake_bind___29($2 + 8 | 0, $1));
  std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $2, 44);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
 $5 = std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($0, 12));
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 __stack_pointer = $0 + 16 | 0;
 return $5 | 0;
}

function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($5 + 8 | 0), 13008, 13040, $2);
 $2 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 8 | 0);
 SAFE_HEAP_STORE_i32_1_1($3, 0, std____2__numpunct_char___decimal_point_28_29_20const($2));
 SAFE_HEAP_STORE_i32_1_1($4, 0, std____2__numpunct_char___thousands_sep_28_29_20const($2));
 std____2__numpunct_char___grouping_28_29_20const($0, $2);
 std____2__locale___locale_28_29($5 + 8 | 0);
 __stack_pointer = $5 + 16 | 0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
 $5 = std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($0, 12));
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 __stack_pointer = $0 + 16 | 0;
 return $5 | 0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
 $5 = std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($0, 12));
 SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($0, 8));
 __stack_pointer = $0 + 16 | 0;
 return $5 | 0;
}

function fft_plan_dft_1d($0, $1, $2, $3, $4, $5) {
 SAFE_HEAP_STORE_i64_8_4($0, 28, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 20, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
 $5 = $0 + 36 | 0;
 SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
 $4 = $1 << 1;
 SAFE_HEAP_STORE_i32_4_4($0, 28, operator_20new_5b_5d_28unsigned_20long_29(($4 | 0) != ($4 & 536870910) ? -1 : $1 << 4));
 $4 = operator_20new_5b_5d_28unsigned_20long_29(($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $4);
 $0 = (Math_imul($1, 5) | 0) / 4 | 0;
 $0 = operator_20new_5b_5d_28unsigned_20long_29(($0 & 536870911) != ($0 | 0) ? -1 : $0 << 3);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $0);
 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
 makewt_28int_2c_20int__2c_20double__29($1 >> 1, $4, $0);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_constexpr_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   $2 = SAFE_HEAP_LOAD_i32_1_1($0, 0);
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($3 + 8 | 0), $2);
   $0 = $0 + 1 | 0;
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 if ($2 & 2048) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, 43);
  $0 = $0 + 1 | 0;
 }
 if ($2 & 1024) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, 35);
  $0 = $0 + 1 | 0;
 }
 $3 = $2 & 260;
 if (($3 | 0) != 260) {
  SAFE_HEAP_STORE_i32_2_1($0, 0, 10798);
  $0 = $0 + 2 | 0;
 }
 $4 = $2 & 16384;
 while (1) {
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  if ($2) {
   SAFE_HEAP_STORE_i32_1_1($0, 0, $2);
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 label$6: {
  label$7: {
   if (($3 | 0) != 256) {
    if (($3 | 0) != 4) {
     break label$7;
    }
    $1 = $4 ? 70 : 102;
    break label$6;
   }
   $1 = $4 ? 69 : 101;
   break label$6;
  }
  $1 = $4 ? 65 : 97;
  if (($3 | 0) == 260) {
   break label$6;
  }
  $1 = $4 ? 71 : 103;
 }
 SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
 return ($3 | 0) != 260;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) < 1 | ($2 | 0) > 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 19716);
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 40, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 44, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) < 1 | ($2 | 0) > 31)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function vsnprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 160 | 0;
 __stack_pointer = $4;
 memcpy($4 + 8 | 0, 8192, 144);
 label$1: {
  label$2: {
   $5 = $4;
   if ($1 - 1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$2;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($5, 52, $0);
   SAFE_HEAP_STORE_i32_4_4($4, 28, $0);
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   SAFE_HEAP_STORE_i32_4_4($4, 56, $1);
   $0 = $0 + $1 | 0;
   SAFE_HEAP_STORE_i32_4_4($4, 36, $0);
   SAFE_HEAP_STORE_i32_4_4($4, 24, $0);
   $0 = vfprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$1;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
   SAFE_HEAP_STORE_i32_1_1($1 - ((SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0) == ($1 | 0)) | 0, 0, 0);
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 61);
  $0 = -1;
 }
 __stack_pointer = $4 + 160 | 0;
 return $0;
}

function wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
 return std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29(std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($0), std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($1), wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($2));
}

function WorldJS__D4C_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 24, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 16, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($6, 8, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 WorldNativeFun__D4C_JS_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $6 + 24 | 0, $6 + 16 | 0, $6 + 8 | 0, $4, $5);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
 __stack_pointer = $6 + 32 | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 12)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1 | 0);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 3);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 365)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 0) & 4)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, (($2 | 0) < 69 ? $2 + 2e3 | 0 : ($2 | 0) < 100 ? $2 + 1900 | 0 : $2) - 1900 | 0);
 }
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 1);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 6)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 60)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 59)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char_20const__2c_20void__28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2___MetaBase___is_cpp17_forward_iterator_char_20const____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
 if (!($3 & 4 | ($2 | 0) > 23)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($4, 0, $3 | 4);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__2c_20std____2__allocator_char__20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $4 + 8 | 0, $3);
 std____2___MetaBase___is_cpp17_forward_iterator_char____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
 if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0)) {
  if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0)) {
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0));
  }
  SAFE_HEAP_STORE_i32_1_1($0, 0, 1);
 }
 return $0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}

function std____2____stdoutbuf_wchar_t___sync_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $4 = $1 + 16 | 0;
 label$1: {
  while (1) {
   $5 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $1 + 8 | 0, $4, $1 + 4 | 0);
   $2 = -1;
   $6 = $1 + 8 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - ($1 + 8 | 0) | 0;
   if (($3 | 0) != (fwrite($6, 1, $3, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0)) {
    break label$1;
   }
   label$3: {
    switch ($5 - 1 | 0) {
    case 1:
     break label$1;

    case 0:
     continue;

    default:
     break label$3;
    }
   }
   break;
  }
  $2 = fflush(SAFE_HEAP_LOAD_i32_4_4($0, 32)) ? -1 : 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 | 0;
}

function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 label$1: {
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 44)) {
   $2 = ($2 | 0) > 0 ? $2 : 0;
   while (1) {
    if (($2 | 0) == ($3 | 0)) {
     break label$1;
    }
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($1, 0)), 
    wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == (std____2__char_traits_wchar_t___eof_28_29() | 0)) {
     return $3 | 0;
    } else {
     $1 = $1 + 4 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
  }
  $2 = fwrite($1, 4, $2, SAFE_HEAP_LOAD_i32_4_4($0, 32));
 }
 return $2 | 0;
}

function std____2____stdoutbuf_char___sync_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $4 = $1 + 16 | 0;
 label$1: {
  while (1) {
   $5 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36), SAFE_HEAP_LOAD_i32_4_4($0, 40), $1 + 8 | 0, $4, $1 + 4 | 0);
   $2 = -1;
   $6 = $1 + 8 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - ($1 + 8 | 0) | 0;
   if (($3 | 0) != (fwrite($6, 1, $3, SAFE_HEAP_LOAD_i32_4_4($0, 32)) | 0)) {
    break label$1;
   }
   label$3: {
    switch ($5 - 1 | 0) {
    case 1:
     break label$1;

    case 0:
     continue;

    default:
     break label$3;
    }
   }
   break;
  }
  $2 = fflush(SAFE_HEAP_LOAD_i32_4_4($0, 32)) ? -1 : 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 | 0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 0) & 4)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1900 | 0);
 }
}

function WorldJS__CheapTrick_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($5, 16, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($5, 8, SAFE_HEAP_LOAD_i32_4_4($3, 0));
 SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
 WorldNativeFun__CheapTrick_JS_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $5 + 24 | 0, $5 + 16 | 0, $5 + 8 | 0, $4);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 16) | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 24) | 0);
 __stack_pointer = $5 + 32 | 0;
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0);
   $2 = $2 - 4 | 0;
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___destroy_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29($3, std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($2));
   continue;
  }
  break;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0 + 16 | 0);
 return $0;
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20______vector_base_28_29($0) {
 if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___clear_28_29($0);
  std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0), SAFE_HEAP_LOAD_i32_4_4($0, 0), std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0));
 }
 return $0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul________split_buffer_28_29($0) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____clear_28_29($0);
 if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
  std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_28_29($0), SAFE_HEAP_LOAD_i32_4_4($0, 0), std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____capacity_28_29_20const($0));
 }
 return $0;
}

function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 label$1: {
  if ($0) {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) <= -1) {
    return __fflush_unlocked($0) | 0;
   }
   $2 = __lockfile($0);
   $1 = __fflush_unlocked($0);
   if (!$2) {
    break label$1;
   }
   __unlockfile($0);
   return $1 | 0;
  }
  if (SAFE_HEAP_LOAD_i32_4_4(0, 25656)) {
   $1 = fflush(SAFE_HEAP_LOAD_i32_4_4(0, 25656));
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4(__ofl_lock(), 0);
  if ($0) {
   while (1) {
    $2 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0) {
     $2 = __lockfile($0);
    }
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 > SAFE_HEAP_LOAD_i32_4_4($0, 28) >>> 0) {
     $1 = __fflush_unlocked($0) | $1;
    }
    if ($2) {
     __unlockfile($0);
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
    if ($0) {
     continue;
    }
    break;
   }
  }
  __ofl_unlock();
 }
 return $1 | 0;
}

function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 label$1: {
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 44)) {
   $2 = ($2 | 0) > 0 ? $2 : 0;
   while (1) {
    if (($2 | 0) == ($3 | 0)) {
     break label$1;
    }
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($1, 0)), 
    wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == (std____2__char_traits_char___eof_28_29() | 0)) {
     return $3 | 0;
    } else {
     $1 = $1 + 1 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
  }
  $2 = fwrite($1, 1, $2, SAFE_HEAP_LOAD_i32_4_4($0, 32));
 }
 return $2 | 0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 while (1) {
  label$2: {
   if (($2 | 0) == ($3 | 0) | $4 >>> 0 <= $6 >>> 0) {
    break label$2;
   }
   $5 = 1;
   label$3: {
    label$4: {
     $7 = std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($2, $3 - $2 | 0, $1, SAFE_HEAP_LOAD_i32_4_4($0, 8));
     switch ($7 + 2 | 0) {
     case 0:
     case 1:
      break label$2;

     case 2:
      break label$3;

     default:
      break label$4;
     }
    }
    $5 = $7;
   }
   $6 = $6 + 1 | 0;
   $8 = $5 + $8 | 0;
   $2 = $2 + $5 | 0;
   continue;
  }
  break;
 }
 return $8 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $2 + 8 | 0, $2);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_wchar_t___length_28wchar_t_20const__29($1));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
 if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0)) {
  if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0)) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0));
  }
  SAFE_HEAP_STORE_i32_1_1($0, 0, 1);
 }
 return $0;
}

function cftrec4_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0;
 if (($5 | 0) >= 513) {
  $4 = $0;
  while (1) {
   $5 = $4 >>> 2 | 0;
   cftmdl1_28int_2c_20double__2c_20double__29($5, ($0 - $5 << 3) + $1 | 0, ($2 - ($4 >>> 3 | 0) << 3) + $3 | 0);
   $6 = $4 >>> 0 > 2051;
   $4 = $5;
   if ($6) {
    continue;
   }
   break;
  }
 }
 $4 = $0 - $5 | 0;
 cftleaf_28int_2c_20int_2c_20double__2c_20int_2c_20double__29($5, 1, ($4 << 3) + $1 | 0, $2, $3);
 if (($4 | 0) >= 1) {
  $0 = 0;
  while (1) {
   $0 = $0 + 1 | 0;
   $7 = cfttree_28int_2c_20int_2c_20int_2c_20double__2c_20int_2c_20double__29($5, $4, $0, $1, $2, $3);
   $6 = $4 - $5 | 0;
   cftleaf_28int_2c_20int_2c_20double__2c_20int_2c_20double__29($5, $7, ($6 << 3) + $1 | 0, $2, $3);
   $4 = $6;
   if (($4 | 0) > 0) {
    continue;
   }
   break;
  }
 }
}

function DestroyInverseRealFFT($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i64_8_8($1 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 44 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 36 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 28 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 20 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1, 8, SAFE_HEAP_LOAD_i64_8_4($0, 12), i64toi32_i32$HIGH_BITS);
 fft_destroy_plan($1 + 8 | 0);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 if ($2) {
  operator_20delete_5b_5d_28void__29($2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 if ($0) {
  operator_20delete_5b_5d_28void__29($0);
 }
 __stack_pointer = $1 + 48 | 0;
}

function DestroyForwardRealFFT($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i64_8_8($1 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 44 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 36 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 28 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 20 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($1, 8, SAFE_HEAP_LOAD_i64_8_4($0, 12), i64toi32_i32$HIGH_BITS);
 fft_destroy_plan($1 + 8 | 0);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 if ($2) {
  operator_20delete_5b_5d_28void__29($2);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 if ($0) {
  operator_20delete_5b_5d_28void__29($0);
 }
 __stack_pointer = $1 + 48 | 0;
}

function __fseeko_unlocked($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 if (($3 | 0) == 1) {
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8) - SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0;
  $5 = $4;
  $4 = $4 >> 31;
  $4 = $4 + ($1 >>> 0 < $5 >>> 0) | 0;
  $1 = $1 - $5 | 0;
  $4 = $2 - $4 | 0;
  $2 = $4;
 }
 label$2: {
  if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 > SAFE_HEAP_LOAD_i32_4_4($0, 28) >>> 0) {
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
   if (!SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
    break label$2;
   }
  }
  SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0]($0, $1, $2, $3) | 0;
  if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
   break label$2;
  }
  SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) & -17);
  return 0;
 }
 return -1;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
 var $2 = 0;
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____invalidate_iterators_past_28std____2__locale__facet___29($0, $1);
 $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
}

function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_1_1($6, 15, 0);
 SAFE_HEAP_STORE_i32_1_1($6, 14, $5);
 SAFE_HEAP_STORE_i32_1_1($6, 13, $4);
 SAFE_HEAP_STORE_i32_1_1($6, 12, 37);
 if ($5) {
  std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0);
 }
 SAFE_HEAP_STORE_i32_4_4($2, 0, (strftime_l($1 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($1, SAFE_HEAP_LOAD_i32_4_4($2, 0)) | 0, $6 + 12 | 0, $3 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) | 0) + $1 | 0);
 __stack_pointer = $6 + 16 | 0;
}

function std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0), 0));
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($1), 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($2 + 12 | 0), 0));
 __stack_pointer = $2 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2___MetaBase___is_cpp17_forward_iterator_char____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function fclose($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0) {
  $5 = __lockfile($0);
 }
 dummy($0);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0) & 1;
 if (!$4) {
  $3 = __ofl_lock();
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  if ($2) {
   SAFE_HEAP_STORE_i32_4_4($2, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56));
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 52, $2);
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
  }
  __ofl_unlock();
 }
 $3 = fflush($0);
 $2 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0]($0) | 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 96);
 if ($1) {
  dlfree($1);
 }
 label$7: {
  if (!$4) {
   dlfree($0);
   break label$7;
  }
  if (!$5) {
   break label$7;
  }
  __unlockfile($0);
 }
 return $3 | $2;
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 0) & 4)) {
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1900 | 0);
 }
}

function __overflow($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_1_1($3, 15, $1);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
 label$1: {
  if (!$2) {
   $2 = -1;
   if (__towrite($0)) {
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  }
  label$3: {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   if ($4 >>> 0 >= $2 >>> 0) {
    break label$3;
   }
   $2 = $1 & 255;
   if (($2 | 0) == (SAFE_HEAP_LOAD_i32_1_1($0, 75) | 0)) {
    break label$3;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, $4 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($4, 0, $1);
   break label$1;
  }
  $2 = -1;
  if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, $3 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 15);
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}

function char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
 return std____2__enable_if__28is_same_std____2__remove_const_char_20const___type_2c_20char___value_29_20___20_28is_trivially_copy_assignable_char___value_29_2c_20char____type_20std____2____copy_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29(std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0), std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($1), char__20std____2____unwrap_iter_char___28char__29($2));
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0));
 }
 return $0;
}

function ungetc($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = -1;
 label$1: {
  if (($0 | 0) == -1) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 76) | 0) >= 0) {
   $3 = __lockfile($1);
  }
  label$3: {
   label$4: {
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    label$5: {
     if (!$2) {
      __toread($1);
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      if (!$2) {
       break label$5;
      }
     }
     if (SAFE_HEAP_LOAD_i32_4_4($1, 44) - 8 >>> 0 < $2 >>> 0) {
      break label$4;
     }
    }
    $2 = -1;
    if ($3) {
     break label$3;
    }
    break label$1;
   }
   $2 = $2 - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
   SAFE_HEAP_STORE_i32_1_1($2, 0, $0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) & -17);
   $2 = $0;
   if (!$3) {
    break label$1;
   }
  }
  __unlockfile($1);
 }
 return $2;
}

function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20char___2c_20void_20_28__29_28void__29__28unsigned_20char___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____compressed_pair_elem_unsigned_20char___2c_20void__28unsigned_20char___29($0, unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $2 + 8 | 0, $2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20int___2c_20void_20_28__29_28void__29__28unsigned_20int___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____compressed_pair_elem_unsigned_20int___2c_20void__28unsigned_20int___29($0, unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}

function std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 40, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 19616);
 $1 = std____2__char_traits_wchar_t___eof_28_29();
 SAFE_HEAP_STORE_i32_1_1($0, 52, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 48, $1);
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($3 + 8 | 0, $4);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 8) | 0]($0, $3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function getenv($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = strlen($0);
 label$1: {
  if (!SAFE_HEAP_LOAD_i32_4_4(0, 26092)) {
   break label$1;
  }
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 0)) {
   break label$1;
  }
  if (strchr($0, 61)) {
   break label$1;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 26092), 0);
  if (!$1) {
   break label$1;
  }
  label$2: {
   while (1) {
    $3 = strncmp($0, $1, $4);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 26092);
    if (!$3) {
     $3 = SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $1 | 0, 0) + $4 | 0;
     if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) == 61) {
      break label$2;
     }
    }
    $2 = $2 + 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $1 | 0, 0);
    if ($1) {
     continue;
    }
    break;
   }
   return 0;
  }
  $2 = $3 + 1 | 0;
 }
 return $2;
}

function std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 40, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 32, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 19516);
 $1 = std____2__char_traits_char___eof_28_29();
 SAFE_HEAP_STORE_i32_1_1($0, 52, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 48, $1);
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 8) | 0]($0, $3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 if (!__cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29(__cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 4)))) {
  $2 = __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
 }
 return $0;
}

function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
 std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20char___2c_20void_20_28__29_28void__29__28unsigned_20char___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
 std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20int___2c_20void_20_28__29_28void__29__28unsigned_20int___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 __cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29(__cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 4)));
 __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 __stack_pointer = $1 + 16 | 0;
}

function std____2__init_wam_pm_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 27576) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(27576)) {
   break label$1;
  }
  $0 = 27552;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 27576) {
    continue;
   }
   break;
  }
  __cxa_guard_release(27576);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27552, 18528);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(27564, 18540);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___resize_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0);
 if ($2 >>> 0 < $1 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
  return;
 }
 if ($1 >>> 0 < $2 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____destruct_at_end_28std____2__locale__facet___29($0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + ($1 << 2) | 0);
 }
}

function __floatsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $6 = $0;
 label$1: {
  if (!$1) {
   $2 = 0;
   break label$1;
  }
  $2 = $1 >> 31;
  $2 = $2 ^ $1 + $2;
  $3 = $2;
  $2 = Math_clz32($2);
  __ashlti3($4, $3, 0, 0, 0, $2 + 81 | 0);
  $3 = SAFE_HEAP_LOAD_i64_8_8($4 + 8 | 0, 0);
  $2 = (i64toi32_i32$HIGH_BITS ^ 65536) + (16414 - $2 << 16) | 0;
  $3 = 0 + $3 | 0;
  $2 = $8 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2;
  $5 = $2;
  $2 = $3;
  $7 = 0 | $2;
  $3 = $1 & -2147483648 | $5;
  $5 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
  $2 = i64toi32_i32$HIGH_BITS;
 }
 SAFE_HEAP_STORE_i64_8_8($6, 0, $5, $2);
 $2 = $3;
 SAFE_HEAP_STORE_i64_8_8($0, 8, $7, $2);
 __stack_pointer = $4 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____29($0, $1) {
 std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = SAFE_HEAP_LOAD_i32_4_4(void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0), 0, $1);
 return $0;
}

function std____2__enable_if__28is_move_constructible_wchar_t___value_29_20___20_28is_move_assignable_wchar_t___value_29_2c_20void___type_20std____2__swap_wchar_t__28wchar_t__2c_20wchar_t__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($0), 0));
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($1), 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($2 + 12 | 0), 0));
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29_____compressed_pair_wchar_t___2c_20void_20_28__29_28void__29__28wchar_t___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____compressed_pair_elem_wchar_t___2c_20void__28wchar_t___29($0, wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}

function std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release_____compressed_pair_std____2__locale__facet___2c_20std____2____default_init_tag__28std____2__locale__facet___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____compressed_pair_elem_std____2__locale__facet___2c_20void__28std____2__locale__facet___29($0, std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 return $0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___clear_28_29($0) {
 var $1 = 0;
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___clear_28_29($0);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____invalidate_all_iterators_28_29($0);
}

function std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
 return $0;
}

function std____2__enable_if__28is_move_constructible_double___value_29_20___20_28is_move_assignable_double___value_29_2c_20void___type_20std____2__swap_double__28double__2c_20double__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_f64_8_8($2, 8, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($0), 0));
 SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($1), 0));
 SAFE_HEAP_STORE_f64_8_8($1, 0, SAFE_HEAP_LOAD_f64_8_8(std____2__remove_reference_double____type___20std____2__move_double___28double__29($2 + 8 | 0), 0));
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
 std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29_____compressed_pair_wchar_t___2c_20void_20_28__29_28void__29__28wchar_t___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29_____compressed_pair_char___2c_20void_20_28__29_28void__29__28char___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_char__2c_200_2c_20false_____compressed_pair_elem_char___2c_20void__28char___29($0, char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}

function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1: {
  if ($1 >>> 0 < 1) {
   $5 = $0;
   $3 = $1;
   $6 = $3;
   break label$1;
  }
  while (1) {
   $2 = $2 - 1 | 0;
   $3 = $1;
   $5 = __wasm_i64_udiv($0, $3, 10, 0);
   $3 = i64toi32_i32$HIGH_BITS;
   $6 = $3;
   $4 = __wasm_i64_mul($5, $3, 10, 0);
   $3 = $1;
   SAFE_HEAP_STORE_i32_1_1($2, 0, $0 - $4 | 48);
   $4 = $3 >>> 0 > 9;
   $0 = $5;
   $3 = $6;
   $1 = $3;
   if ($4) {
    continue;
   }
   break;
  }
 }
 $4 = $5;
 if ($4) {
  while (1) {
   $2 = $2 - 1 | 0;
   $0 = ($4 >>> 0) / 10 | 0;
   SAFE_HEAP_STORE_i32_1_1($2, 0, $4 - Math_imul($0, 10) | 48);
   $1 = $4 >>> 0 > 9;
   $4 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function WorldModule__WorldModule_28double__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 $5 = $0 + 16 | 0;
 SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 SAFE_HEAP_STORE_i64_8_8($0, 8, 0, 1075052544);
 SAFE_HEAP_STORE_i32_4_4($0 + 40 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($0 + 32 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_8($0 + 24 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
 WorldModule__F0EstimationDio_28_29($4 + 8 | 0, $0);
 WorldModule__SpectralEnvelopeEstimation_28_29($4 + 8 | 0, $0);
 WorldModule__AperiodicityEstimation_28_29($4 + 8 | 0, $0);
 __stack_pointer = $4 + 48 | 0;
 return $0;
}

function std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_20false_2c_20false__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
 return $0;
}

function std____2__init_am_pm_28_29() {
 var $0 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 27544) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(27544)) {
   break label$1;
  }
  $0 = 27520;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 27544) {
    continue;
   }
   break;
  }
  __cxa_guard_release(27544);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27520, 2036);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(27532, 2033);
}

function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $7 = ($4 - $3 | 0) + $1 | 0;
 label$1: {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
    $6 = SAFE_HEAP_LOAD_i32_1_1($3, 0);
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($5 | 0) > ($6 | 0)) {
     return 1;
    } else {
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($2 | 0) != ($7 | 0);
 }
 return $0 | 0;
}

function std____2___MetaBase__28__is_cpp17_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29____EnableIfImpl_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2);
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
 std____2____compressed_pair_char__2c_20void_20_28__29_28void__29_____compressed_pair_char___2c_20void_20_28__29_28void__29__28char___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1 + 8 | 0, $1);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function WorldJS__Synthesis_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 SAFE_HEAP_STORE_i32_4_4($7, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 WorldNativeFun__Synthesis_JS_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29($0, $7 + 8 | 0, $2, $3, $4, $5, $6);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
 __stack_pointer = $7 + 16 | 0;
}

function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_1_1($2, 15, SAFE_HEAP_LOAD_i32_1_U_1(std____2__remove_reference_char____type___20std____2__move_char___28char__29($0), 0));
 SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1(std____2__remove_reference_char____type___20std____2__move_char___28char__29($1), 0));
 SAFE_HEAP_STORE_i32_1_1($1, 0, SAFE_HEAP_LOAD_i32_1_U_1(std____2__remove_reference_char____type___20std____2__move_char___28char__29($2 + 15 | 0), 0));
 __stack_pointer = $2 + 16 | 0;
}

function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 44, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1));
 SAFE_HEAP_STORE_i32_1_1($0, 53, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36)));
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 44) | 0) >= 9) {
  std____2____throw_runtime_error_28char_20const__29(1175);
  abort();
 }
}

function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4, $5);
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____29($0, $1) {
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = SAFE_HEAP_LOAD_i32_4_4(void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0), 0, $1);
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($2 + 8 | 0, $2 + 21 | 0, $2 + 32 | 0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0, $2 + 21 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 8));
 __stack_pointer = $2 + 32 | 0;
}

function __emscripten_environ_constructor() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0) | 0) {
   break label$1;
  }
  $1 = dlmalloc((SAFE_HEAP_LOAD_i32_4_4($0, 12) << 2) + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4(0, 26092, $1);
  if (!$1) {
   break label$1;
  }
  $1 = dlmalloc(SAFE_HEAP_LOAD_i32_4_4($0, 8));
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 26092) + (SAFE_HEAP_LOAD_i32_4_4($0, 12) << 2) | 0, 0, 0);
   if (!(__wasi_environ_get(SAFE_HEAP_LOAD_i32_4_4(0, 26092) | 0, $1 | 0) | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4(0, 26092, 0);
 }
 __stack_pointer = $0 + 16 | 0;
}

function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 44, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1));
 SAFE_HEAP_STORE_i32_1_1($0, 53, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 36)));
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 44) | 0) >= 9) {
  std____2____throw_runtime_error_28char_20const__29(1175);
  abort();
 }
}

function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 label$1: {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $6 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($5 | 0) > ($6 | 0)) {
     return 1;
    } else {
     $3 = $3 + 4 | 0;
     $1 = $1 + 4 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($1 | 0) != ($2 | 0);
 }
 return $0 | 0;
}

function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
 var $2 = 0;
 label$1: {
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1, 20228, 20484, 0);
  if (!$1) {
   break label$1;
  }
  if (SAFE_HEAP_LOAD_i32_4_4($1, 8) & (SAFE_HEAP_LOAD_i32_4_4($0, 8) ^ -1)) {
   break label$1;
  }
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), SAFE_HEAP_LOAD_i32_4_4($1, 12), 0)) {
   break label$1;
  }
  $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 16), SAFE_HEAP_LOAD_i32_4_4($1, 16), 0);
 }
 return $2;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 std____2__remove_reference_std____2__allocator_wchar_t_____type___20std____2__move_std____2__allocator_wchar_t____28std____2__allocator_wchar_t___29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($1));
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____vector_base_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2____vector_base_common_true_____vector_base_common_28_29($0);
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($1, 12, 0);
 std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $5 = $0;
 label$1: {
  label$2: {
   $4 = $2 - $1 | 0;
   if (($4 | 0) <= 9) {
    if ((std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($3) | 0) > ($4 | 0)) {
     break label$2;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($3, $1));
   $1 = 0;
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  $1 = 61;
 }
 SAFE_HEAP_STORE_i32_4_4($5, 4, $1);
}

function void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0) {
 decltype_28std____2__forward_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29(std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29(SAFE_HEAP_LOAD_i32_4_4($0, 0)));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1 + 8 | 0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 if ($3 & 2048) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, 43);
  $0 = $0 + 1 | 0;
 }
 if ($3 & 512) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, 35);
  $0 = $0 + 1 | 0;
 }
 while (1) {
  $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  if ($4) {
   SAFE_HEAP_STORE_i32_1_1($0, 0, $4);
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 $1 = $3 & 74;
 $4 = 111;
 label$5: {
  if (($1 | 0) == 64) {
   break label$5;
  }
  $4 = $3 & 16384 ? 88 : 120;
  if (($1 | 0) == 8) {
   break label$5;
  }
  $4 = $2 ? 100 : 117;
 }
 $1 = $4;
 SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
}

function std____2__locale__id____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, 0);
 SAFE_HEAP_STORE_i32_4_4($1, 8, 43);
 SAFE_HEAP_STORE_i64_8_8($1, 0, SAFE_HEAP_LOAD_i64_8_8($1, 8), i64toi32_i32$HIGH_BITS);
 void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($1 + 16 | 0, $1, $0));
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 __stack_pointer = $1 + 32 | 0;
 return $0 - 1 | 0;
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = SAFE_HEAP_LOAD_i32_4_4(void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0), 0, $1);
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
 if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
  return wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($1), 
  wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 24, $2 + 4 | 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($1);
}

function WorldJS__WavWrite_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 WorldNativeIO__WavWrite_JS_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $4 + 8 | 0, $2, $3);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
 __stack_pointer = $4 + 16 | 0;
}

function __floatunsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = $0;
 label$1: {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  $2 = $1;
  $1 = Math_clz32($1);
  __ashlti3($3, $2, 0, 0, 0, $1 + 81 | 0);
  $2 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0);
  $1 = (i64toi32_i32$HIGH_BITS ^ 65536) + (16414 - $1 << 16) | 0;
  $2 = 0 + $2 | 0;
  $5 = $2;
  $1 = $7 >>> 0 > $2 >>> 0 ? $1 + 1 | 0 : $1;
  $6 = $1;
  $1 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
  $2 = $1;
  $1 = i64toi32_i32$HIGH_BITS;
 }
 SAFE_HEAP_STORE_i64_8_8($4, 0, $2, $1);
 SAFE_HEAP_STORE_i64_8_8($0, 8, $5, $6);
 __stack_pointer = $3 + 16 | 0;
}

function std____2___MetaBase__28__is_cpp17_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29____EnableIfImpl_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29($0, $1, $2) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
 if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
  return wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29($1), 
  wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0, FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 24, $2 + 1 | 0);
 SAFE_HEAP_STORE_i32_1_1($2, 0, $1);
 return std____2__char_traits_char___to_int_type_28char_29($1);
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20int_2c_20double___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20int_2c_20double_29_2c_20emscripten__internal___EM_VAL__2c_20int_2c_20double_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
 FUNCTION_TABLE[$0 | 0]($4 + 8 | 0, $4, $2, $3);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
 _emval_decref($0 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function puts($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(0, 19500);
 if ((SAFE_HEAP_LOAD_i32_4_4($1, 76) | 0) >= 0) {
  $2 = __lockfile($1);
 }
 $3 = (fputs($0, $1) | 0) < 0;
 $0 = -1;
 label$2: {
  if ($3) {
   break label$2;
  }
  label$3: {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 75) | 0) == 10) {
    break label$3;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 20);
   if ($0 >>> 0 >= SAFE_HEAP_LOAD_i32_4_4($1, 16) >>> 0) {
    break label$3;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 20, $0 + 1 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 0, 10);
   $0 = 0;
   break label$2;
  }
  $0 = __overflow($1, 10) >> 31;
 }
 if ($2) {
  __unlockfile($1);
 }
 return $0;
}

function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $3 = $1;
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + -64 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
   return $0;
  }
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1022 | 0);
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}

function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
 $2 = std____2__ios_base__flags_28_29_20const($2) & 176;
 if (($2 | 0) == 32) {
  return $1;
 }
 label$2: {
  if (($2 | 0) != 16) {
   break label$2;
  }
  label$3: {
   label$4: {
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
    switch ($2 - 43 | 0) {
    case 0:
    case 2:
     break label$4;

    default:
     break label$3;
    }
   }
   return $0 + 1 | 0;
  }
  if (($2 | 0) != 48 | ($1 - $0 | 0) < 2) {
   break label$2;
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 32) != 120) {
   break label$2;
  }
  $0 = $0 + 2 | 0;
 }
 return $0;
}

function scalbn($0, $1) {
 label$1: {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e307;
   if (($1 | 0) < 2047) {
    $1 = $1 - 1023 | 0;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) - 2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  if (($1 | 0) > -2045) {
   $1 = $1 + 1022 | 0;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_constexpr_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 std____2__remove_reference_std____2__allocator_char_____type___20std____2__move_std____2__allocator_char____28std____2__allocator_char___29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($1));
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___vector_28unsigned_20long_29($0, $1) {
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____vector_base_28_29($0);
 if ($1) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____vallocate_28unsigned_20long_29($0, $1);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____construct_at_end_28unsigned_20long_29($0, $1);
 }
 return $0;
}

function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
 if (!$0) {
  SAFE_HEAP_STORE_i32_4_4($1, 36, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 24, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $2);
  return;
 }
 label$2: {
  if (($2 | 0) == ($0 | 0)) {
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
    break label$2;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 24, $3);
   return;
  }
  SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 24, 2);
  SAFE_HEAP_STORE_i32_4_4($1, 36, SAFE_HEAP_LOAD_i32_4_4($1, 36) + 1 | 0);
 }
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= SAFE_HEAP_LOAD_i32_4_4($0, 28) >>> 0) {
   break label$1;
  }
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
  if (SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
   break label$1;
  }
  return -1;
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0]($0, $1, $1 >> 31, 1) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
 SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
 return 0;
}

function __toread($0) {
 var $1 = 0, $2 = 0;
 $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 74);
 SAFE_HEAP_STORE_i32_1_1($0, 74, $1 | $1 - 1);
 if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 > SAFE_HEAP_LOAD_i32_4_4($0, 28) >>> 0) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
 SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if ($1 & 4) {
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1 | 32);
  return -1;
 }
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44) + SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 return $1 << 27 >> 31;
}

function strlen($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = $0;
 label$1: {
  if ($1 & 3) {
   while (1) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$1;
    }
    $1 = $1 + 1 | 0;
    if ($1 & 3) {
     continue;
    }
    break;
   }
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   return $2 - $0 | 0;
  }
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 1);
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}

function std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0, $1) {
 var $2 = 0, $3 = 0;
 if ($0 >>> 0 <= 99999999) {
  return char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1, $0);
 }
 $2 = ($0 >>> 0) / 1e8 | 0;
 $3 = char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1, $2);
 $0 = $0 - Math_imul($2, 1e8) | 0;
 $1 = ($0 >>> 0) / 1e4 | 0;
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($3, $1), $0 - Math_imul($1, 1e4) | 0);
}

function std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = std____2__make_unsigned_int___type_20std____2____to_unsigned_int__28int_29($3);
 if (!(($1 | 0) == ($2 | 0) | ($3 | 0) > -1)) {
  SAFE_HEAP_STORE_i32_1_1($1, 0, 45);
  $1 = $1 + 1 | 0;
  $4 = unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($4);
 }
 std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0, $1, $2, $4);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 if ($3 >>> 0 < $1 >>> 0) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1 - $3 | 0, $2);
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1);
}

function std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
 while (1) {
  if (!$2) {
   return;
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
  $2 = $2 - 1 | 0;
  $3 = $2 << 2;
  wasm2js_i32$1 = $1, wasm2js_i32$2 = $0, wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4 + $3 | 0, 0), 
  wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 32) + $3 | 0, 0) | 0, 
  FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  continue;
 }
}

function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18812);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 18832);
 SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(SAFE_HEAP_LOAD_i32_4_4(0, 18800) + $0 | 0, $1);
 return $0;
}

function getc($0) {
 var $1 = 0;
 label$1: {
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0) {
   if (__lockfile($0)) {
    break label$1;
   }
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ($1 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 8) >>> 0) {
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
   return SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  }
  return __uflow($0);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 label$4: {
  if ($1 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 8) >>> 0) {
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   break label$4;
  }
  $1 = __uflow($0);
 }
 __unlockfile($0);
 return $1;
}

function std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2____distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return ($1 - $0 | 0) / 12 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0, $1, $2, $3);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $1) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1);
  return;
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1);
}

function std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 label$1: {
  while (1) {
   if (($2 | 0) == ($3 | 0)) {
    break label$1;
   }
   label$3: {
    if (SAFE_HEAP_LOAD_i32_4_4($2, 0) >>> 0 > 127) {
     break label$3;
    }
    if (!(SAFE_HEAP_LOAD_i32_2_U_2(std____2__ctype_char___classic_table_28_29() + (SAFE_HEAP_LOAD_i32_4_4($2, 0) << 1) | 0, 0) & $1)) {
     break label$3;
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  }
  $3 = $2;
 }
 return $3 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
 $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($2, 0, std____2__numpunct_wchar_t___thousands_sep_28_29_20const($1));
 std____2__numpunct_wchar_t___grouping_28_29_20const($0, $1);
 std____2__locale___locale_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $3 - $2 | 0);
 $3 = SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0), 0);
 __stack_pointer = $0 + 16 | 0;
 return $3 | 0;
}

function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
 std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release_____compressed_pair_std____2__locale__facet___2c_20std____2____default_init_tag__28std____2__locale__facet___2c_20std____2____default_init_tag___29($0, $2 + 12 | 0, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_constexpr_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2);
}

function fopen($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1: {
  label$2: {
   if (!strchr(1960, SAFE_HEAP_LOAD_i32_1_1($1, 0))) {
    SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 28);
    break label$2;
   }
   $4 = __fmodeflags($1);
   SAFE_HEAP_STORE_i32_4_4($2, 0, 438);
   $0 = __syscall_ret(__syscall5($0 | 0, $4 | 32768, $2 | 0) | 0);
   if (($0 | 0) < 0) {
    break label$1;
   }
   $3 = __fdopen($0, $1);
   if ($3) {
    break label$1;
   }
   __wasi_fd_close($0 | 0) | 0;
  }
  $3 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18764);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 18784);
 SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(SAFE_HEAP_LOAD_i32_4_4(0, 18752) + $0 | 0, $1);
 return $0;
}

function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
 label$2: {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4: {
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    if (!$4) {
     break label$4;
    }
    $2 = $2 - 1 | 0;
    if (!$2 | ($3 & 255) != ($4 | 0)) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29_20const($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29_20const($0);
}

function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_201_2c_20false_____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, std____2____sso_allocator_std____2__locale__facet__2c_2030ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____type__29($1));
 return $0;
}

function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $4 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  $6 = $5 >> 8;
  $4 = $6;
  if (!($5 & 1)) {
   break label$1;
  }
  $4 = update_offset_to_base_28char_20const__2c_20long_29(SAFE_HEAP_LOAD_i32_4_4($2, 0), $6);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0, $1, $2 + $4 | 0, $5 & 2 ? $3 : 2);
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0 + 4 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18908);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 18928);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(SAFE_HEAP_LOAD_i32_4_4(0, 18896) + $0 | 0, $1);
 return $0;
}

function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
 $1 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($3 + 8 | 0);
 SAFE_HEAP_STORE_i32_1_1($2, 0, std____2__numpunct_char___thousands_sep_28_29_20const($1));
 std____2__numpunct_char___grouping_28_29_20const($0, $1);
 std____2__locale___locale_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2____distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return ($1 - $0 | 0) / 12 | 0;
}

function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), 0, 0);
 if ($1) {
  std____2___28anonymous_20namespace_29__release__operator_28_29_28std____2__locale__facet__29($1);
 }
}

function cftfx41_28int_2c_20double__2c_20int_2c_20double__29($0, $1, $2, $3) {
 $2 = ($2 << 3) + $3 | 0;
 $3 = $2 + -64 | 0;
 if (($0 | 0) == 128) {
  cftf161_28double__2c_20double__29($1, $3);
  cftf162_28double__2c_20double__29($1 + 256 | 0, $2 - 256 | 0);
  cftf161_28double__2c_20double__29($1 + 512 | 0, $3);
  cftf161_28double__2c_20double__29($1 + 768 | 0, $3);
  return;
 }
 cftf081_28double__2c_20double__29($1, $3);
 cftf082_28double__2c_20double__29($1 + 128 | 0, $3);
 cftf081_28double__2c_20double__29($1 + 256 | 0, $3);
 cftf081_28double__2c_20double__29($1 + 384 | 0, $3);
}

function std____2__remove_reference_std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____type___20std____2__move_std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20____28std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___29($0) {
 return $0;
}

function wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2) {
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $1);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 8 | 0), 13008, 13034, $2);
 std____2__locale___locale_28_29($0 + 8 | 0);
 __stack_pointer = $0 + 16 | 0;
 return $2;
}

function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28emscripten__val_20const__29_2c_20emscripten__internal___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
 FUNCTION_TABLE[$0 | 0]($2 + 8 | 0, $2);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 _emval_decref($0 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $1) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
}

function std____2___28anonymous_20namespace_29__initial_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator_28_29_28_29_20const($0) {
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_char______wrap_iter_28char__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $4 = 0;
   $0 = $3;
   if (SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 0 <= 127) {
    $4 = SAFE_HEAP_LOAD_i32_2_U_2(std____2__ctype_char___classic_table_28_29() + (SAFE_HEAP_LOAD_i32_4_4($1, 0) << 1) | 0, 0);
   }
   SAFE_HEAP_STORE_i32_2_2($0, 0, $4);
   $3 = $3 + 2 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
}

function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
 }
}

function void_20_28anonymous_20namespace_29__register_bigint_unsigned_20long_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 legalfunc$_embind_register_bigint(emscripten__internal__TypeID_unsigned_20long_20long_2c_20void___get_28_29(), SAFE_HEAP_LOAD_i32_4_4($1, 12), 8, std____2__numeric_limits_unsigned_20long_20long___min_28_29(), i64toi32_i32$HIGH_BITS, std____2__numeric_limits_unsigned_20long_20long___max_28_29(), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 4 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18860);
 SAFE_HEAP_STORE_i32_4_4($2, 0, 18880);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(SAFE_HEAP_LOAD_i32_4_4(0, 18848) + $0 | 0, $1);
 return $0;
}

function std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  label$2: {
   if (($2 | 0) != ($3 | 0)) {
    if (SAFE_HEAP_LOAD_i32_4_4($2, 0) >>> 0 > 127) {
     break label$2;
    }
    if (!(SAFE_HEAP_LOAD_i32_2_U_2(std____2__ctype_char___classic_table_28_29() + (SAFE_HEAP_LOAD_i32_4_4($2, 0) << 1) | 0, 0) & $1)) {
     break label$2;
    }
    $3 = $2;
   }
   return $3 | 0;
  }
  $2 = $2 + 4 | 0;
  continue;
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0);
}

function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($5, 8, $4);
 $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5, $5 + 12 | 0);
 $0 = vsnprintf($0, $1, $3, SAFE_HEAP_LOAD_i32_4_4($5, 8));
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($2);
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function WorldModule__GetModule_28_29($0, $1) {
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 8), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($1 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($1 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($1 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($1 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
}

function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($0, $5);
}

function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $1, $0);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}

function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $0, $1);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}

function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29($0, $1, $2) {
 return bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2);
}

function std____2____sso_allocator_std____2__locale__facet__2c_2030ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 label$1: {
  if (($0 | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($0, 128, 0);
   break label$1;
  }
  std____2__allocator_std____2__locale__facet____deallocate_28std____2__locale__facet___2c_20unsigned_20long_29(std____2__allocator_std____2__locale__facet____allocator_28_29($3 + 8 | 0), $1, $2);
 }
 __stack_pointer = $3 + 16 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
}

function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0), 0, $1);
 if ($2) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___second_28_29($0), 0) | 0]($2);
 }
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
}

function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 44, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1));
}

function std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 12, $5);
 $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
 $0 = wcsnrtombs($0, $1, $2, $3, $4);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
 __stack_pointer = $6 + 16 | 0;
 return $0;
}

function std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 SAFE_HEAP_STORE_i32_4_4($6, 12, $5);
 $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
 $0 = mbsnrtowcs($0, $1, $2, $3, $4);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
 __stack_pointer = $6 + 16 | 0;
 return $0;
}

function wmemmove($0, $1, $2) {
 var $3 = 0;
 label$1: {
  if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
   while (1) {
    $2 = $2 - 1 | 0;
    $3 = $2 << 2;
    SAFE_HEAP_STORE_i32_4_4($3 + $0 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + $3 | 0, 0));
    if ($2) {
     continue;
    }
    break label$1;
   }
  }
  if (!$2) {
   break label$1;
  }
  $3 = $0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
   $3 = $3 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), 0, $1);
 if ($2) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0), 0) | 0]($2);
 }
}

function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
}

function __cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = 1;
 $2 = $0;
 $4 = $1;
 label$1: {
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 24)) {
   $3 = 0;
   if (!$1) {
    break label$1;
   }
   $0 = __dynamic_cast($1, 20228, 20324, 0);
   if (!$0) {
    break label$1;
   }
   $3 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 24) != 0;
  }
  $3 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($2, $4, $3);
 }
 return $3;
}

function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $7 = $6 >> 8;
 if ($6 & 1) {
  $7 = update_offset_to_base_28char_20const__2c_20long_29(SAFE_HEAP_LOAD_i32_4_4($3, 0), $7);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
}

function std____2____sso_allocator_std____2__locale__facet__2c_2030ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1: {
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 128) | $1 >>> 0 > 30)) {
   SAFE_HEAP_STORE_i32_1_1($0, 128, 1);
   break label$1;
  }
  $0 = std____2__allocator_std____2__locale__facet____allocate_28unsigned_20long_29(std____2__allocator_std____2__locale__facet____allocator_28_29($2 + 8 | 0), $1);
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
 SAFE_HEAP_STORE_i32_1_1($0, 44, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1));
}

function std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
 $0 = vsscanf($0, $2, SAFE_HEAP_LOAD_i32_4_4($4, 8));
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 label$1: {
  if (!$2) {
   break label$1;
  }
  if (!std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($2, $1), std____2__char_traits_wchar_t___eof_28_29())) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 }
 return $0;
}

function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
 SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
 $0 = vasprintf($0, $2, SAFE_HEAP_LOAD_i32_4_4($4, 8));
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $5);
}

function emscripten__internal__Invoker_emscripten__val_2c_20int_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 FUNCTION_TABLE[$0 | 0]($4 + 8 | 0, $1, $2, $3);
 _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
 _emval_decref($0 | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function void_20_28anonymous_20namespace_29__register_bigint_long_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 legalfunc$_embind_register_bigint(emscripten__internal__TypeID_long_20long_2c_20void___get_28_29(), SAFE_HEAP_LOAD_i32_4_4($1, 12), 8, std____2__numeric_limits_long_20long___min_28_29(), i64toi32_i32$HIGH_BITS, std____2__numeric_limits_long_20long___max_28_29(), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $1 + 16 | 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0) == (std____2__char_traits_wchar_t___eof_28_29() | 0)) {
  return std____2__char_traits_wchar_t___eof_28_29() | 0;
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $1 + 4 | 0);
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($1, 0)) | 0;
}

function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = $1;
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($3 >>> 0 <= 127) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_upper_table_28_29() + (SAFE_HEAP_LOAD_i32_4_4($1, 0) << 2) | 0, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = $1;
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($3 >>> 0 <= 127) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_lower_table_28_29() + (SAFE_HEAP_LOAD_i32_4_4($1, 0) << 2) | 0, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 12, $4);
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $0 = mbsrtowcs($0, $1, $2, $3);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
}

function void_20std____2____construct_backward_with_exception_guarantees_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_20std____2__locale__facet__2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20std____2__locale__facet___2c_20std____2__locale__facet____29($0, $1, $2, $3) {
 $0 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
 $2 = $2 - $1 | 0;
 $0 = $0 - $2 | 0;
 SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
 if (($2 | 0) >= 1) {
  memcpy($0, $1, $2);
 }
}

function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 2, std____2__numeric_limits_unsigned_20short___min_28_29() & 65535, std____2__numeric_limits_unsigned_20short___max_28_29() & 65535);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0)), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 return $0;
}

function std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 SAFE_HEAP_STORE_i32_4_4($5, 12, $4);
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $0 = mbrtowc($0, $1, $2, $3);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
 __stack_pointer = $5 + 16 | 0;
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if ($1) {
  if (!std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($1), std____2__char_traits_wchar_t___eof_28_29())) {
   return !SAFE_HEAP_LOAD_i32_4_4($0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 }
 return 1;
}

function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29($0, $1, $2) {
 return bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2);
}

function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $6 = $5 >> 8;
 if ($5 & 1) {
  $6 = update_offset_to_base_28char_20const__2c_20long_29(SAFE_HEAP_LOAD_i32_4_4($2, 0), $6);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
}

function vasprintf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
 $4 = -1;
 $2 = vsnprintf(0, 0, $1, $2);
 label$1: {
  if (($2 | 0) < 0) {
   break label$1;
  }
  $5 = $2 + 1 | 0;
  $2 = dlmalloc($5);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  if (!$2) {
   break label$1;
  }
  $4 = vsnprintf($2, $5, $1, SAFE_HEAP_LOAD_i32_4_4($3, 12));
 }
 __stack_pointer = $3 + 16 | 0;
 return $4;
}

function std____2__allocator_std____2__locale__facet____allocate_28unsigned_20long_29($0, $1) {
 if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_std____2__locale__facet___20___max_size_std____2__allocator_std____2__locale__facet___2c_20void__28std____2__allocator_std____2__locale__facet___20const__29($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(1767);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}

function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 1, std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24, std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = $1;
   $3 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
   if (($3 | 0) >= 0) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_upper_table_28_29() + (SAFE_HEAP_LOAD_i32_1_1($1, 0) << 2) | 0, 0);
   }
   SAFE_HEAP_STORE_i32_1_1($0, 0, $3);
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = $1;
   $3 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
   if (($3 | 0) >= 0) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_lower_table_28_29() + (SAFE_HEAP_LOAD_i32_1_1($1, 0) << 2) | 0, 0);
   }
   SAFE_HEAP_STORE_i32_1_1($0, 0, $3);
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), 0, $1);
 if ($2) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0), 0) | 0]($2);
 }
}

function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 1, std____2__numeric_limits_unsigned_20char___min_28_29() & 255, std____2__numeric_limits_unsigned_20char___max_28_29() & 255);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0) == (std____2__char_traits_char___eof_28_29() | 0)) {
  return std____2__char_traits_char___eof_28_29() | 0;
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $1 + 1 | 0);
 return std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($1, 0)) | 0;
}

function fft_destroy_plan($0) {
 var $1 = 0;
 SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
 SAFE_HEAP_STORE_i32_4_4($0 + 24 | 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, 0, 0);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
 if ($1) {
  operator_20delete_5b_5d_28void__29($1);
 }
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
 if ($0) {
  operator_20delete_5b_5d_28void__29($0);
 }
}

function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, $0);
 $1 = std____2__ctype_char___widen_28char_29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($2 + 8 | 0), $1);
 std____2__locale___locale_28_29($2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 if ($1 >>> 0 <= 9999) {
  return char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 $2 = ($1 >>> 0) / 1e4 | 0;
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 1e4) | 0);
}

function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 4, std____2__numeric_limits_unsigned_20long___min_28_29() | 0, std____2__numeric_limits_unsigned_20long___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}

function dlrealloc($0, $1) {
 var $2 = 0, $3 = 0;
 if (!$0) {
  return dlmalloc($1);
 }
 if ($1 >>> 0 >= 4294967232) {
  SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 48);
  return 0;
 }
 $2 = try_realloc_chunk($0 - 8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
 if ($2) {
  return $2 + 8 | 0;
 }
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 $3 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0);
 $3 = ($3 & 3 ? -4 : -8) + ($3 & -8) | 0;
 memcpy($2, $0, $1 >>> 0 > $3 >>> 0 ? $3 : $1);
 dlfree($0);
 return $2;
}

function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 4, std____2__numeric_limits_unsigned_20int___min_28_29() | 0, std____2__numeric_limits_unsigned_20int___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____ConstructTransaction___ConstructTransaction_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___2c_20unsigned_20long_29($0, $1, $2) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 8, ($2 << 2) + $1 | 0);
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0) {
 var $1 = 0;
 $1 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0);
 $0 = 0;
 while (1) {
  if (($0 | 0) == 3) {
   return;
  }
  SAFE_HEAP_STORE_i32_4_4(($0 << 2) + $1 | 0, 0, 0);
  $0 = $0 + 1 | 0;
  continue;
 }
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($0) {
 var $1 = 0;
 label$1: {
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__char_traits_char___eof_28_29(), SAFE_HEAP_LOAD_i32_4_4($0, 76))) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
   break label$1;
  }
  $1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, 32);
  SAFE_HEAP_STORE_i32_4_4($0, 76, $1);
 }
 return $1 << 24 >> 24;
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), 0, $1);
 if ($2) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0), 0) | 0]($2);
 }
}

function std____2__locale____imp__has_facet_28long_29_20const($0, $1) {
 var $2 = 0;
 $0 = $0 + 16 | 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) >>> 0 > $1 >>> 0) {
  $2 = (SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1), 0) | 0) != 0;
 }
 return $2;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = -1;
 label$1: {
  if (!std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29(0, 0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 8))) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($0) {
    break label$1;
   }
   $1 = 1;
  }
  return $1 | 0;
 }
 return (std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0) == 1 | 0;
}

function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}

function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29(27816, 1);
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29(27800, 1);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0)), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = mbrlen($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 label$1: {
  if (!$2) {
   break label$1;
  }
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($2, $1), std____2__char_traits_char___eof_28_29())) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 }
 return $0;
}

function InitializeCheapTrickOption($0, $1) {
 var $2 = 0;
 SAFE_HEAP_STORE_i64_8_8($1, 8, 0, 1079099392);
 SAFE_HEAP_STORE_i64_8_8($1, 0, 858993459, -1077726413);
 $2 = log(+($0 | 0) * 3 / 71 + 1) / .6931471805599453;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 $2 = exp2(+($0 | 0) + 1);
 if (Math_abs($2) < 2147483648) {
  SAFE_HEAP_STORE_i32_4_4($1, 16, ~~$2);
  return;
 }
 SAFE_HEAP_STORE_i32_4_4($1, 16, -2147483648);
}

function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29(27872, 1);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_get_28unsigned_20long_29(27840, 1);
}

function std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = mbtowc($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) ^ 1;
}

function WorldJS__Harvest_28emscripten__val_2c_20int_2c_20double_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 WorldNativeFun__Harvest_JS_28emscripten__val_2c_20int_2c_20double_29($0, $4 + 8 | 0, $2, $3);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
 __stack_pointer = $4 + 16 | 0;
}

function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1);
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_put_28unsigned_20long_29(27752, 1);
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_get_28unsigned_20long_29(27736, 1);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0)), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_short_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 2, std____2__numeric_limits_short___min_28_29() << 16 >> 16, std____2__numeric_limits_short___max_28_29() << 16 >> 16);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = 1;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0) - 1 | 0;
 }
 return $1;
}

function WorldJS__Dio_28emscripten__val_2c_20int_2c_20double_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 WorldNativeFun__Dio_JS_28emscripten__val_2c_20int_2c_20double_29($0, $4 + 8 | 0, $2, $3);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
 __stack_pointer = $4 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0) {
 var $1 = 0;
 $1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
 $0 = 0;
 while (1) {
  if (($0 | 0) == 3) {
   return;
  }
  SAFE_HEAP_STORE_i32_4_4(($0 << 2) + $1 | 0, 0, 0);
  $0 = $0 + 1 | 0;
  continue;
 }
}

function std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = wcrtomb($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function __towrite($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 74);
 SAFE_HEAP_STORE_i32_1_1($0, 74, $1 | $1 - 1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if ($1 & 8) {
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1 | 32);
  return -1;
 }
 SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
 SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 16, SAFE_HEAP_LOAD_i32_4_4($0, 48) + $1 | 0);
 return 0;
}

function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
 }
}

function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_char_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 1, std____2__numeric_limits_char___min_28_29() << 24 >> 24, std____2__numeric_limits_char___max_28_29() << 24 >> 24);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if ($1) {
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($1), std____2__char_traits_char___eof_28_29())) {
   return !SAFE_HEAP_LOAD_i32_4_4($0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 }
 return 1;
}

function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
 $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
 label$1: {
  if (!$2 | ($3 & 255) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($3 & 255) == ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - ($3 & 255) | 0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($0, $1, $2) {
 std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy____proxy_28wchar_t_2c_20std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(SAFE_HEAP_LOAD_i32_4_4($1, 0)), SAFE_HEAP_LOAD_i32_4_4($1, 0));
}

function char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 if ($1 >>> 0 <= 99) {
  return char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 if ($1 >>> 0 <= 999) {
  return char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
}

function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___release_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), 0, 0);
 return $1;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) {
 return unsigned_20long_20std____2__allocator_traits_std____2__allocator_wchar_t__20___max_size_std____2__allocator_wchar_t__2c_20void__28std____2__allocator_wchar_t__20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29_20const($0)) - 16 | 0;
}

function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29(27808, 1);
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29(27792, 1);
}

function sbrk($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(0, 25808);
 $2 = $0 + 3 & -4;
 $0 = $1 + $2 | 0;
 label$1: {
  if ($0 >>> 0 <= $1 >>> 0 ? $2 : 0) {
   break label$1;
  }
  if (emscripten_get_heap_size() >>> 0 < $0 >>> 0) {
   if (!(emscripten_resize_heap($0 | 0) | 0)) {
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i32_4_4(0, 25808, $0);
  return $1 | 0;
 }
 SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 48);
 return -1;
}

function void_20std____2____reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1: {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 - 4 | 0;
   if ($1 >>> 0 <= $0 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_unsigned_20int__2c_20unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1);
   $0 = $0 + 4 | 0;
   continue;
  }
 }
}

function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29(27856, 1);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_get_28unsigned_20long_29(27824, 1);
}

function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_long_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 4, std____2__numeric_limits_long___min_28_29() | 0, std____2__numeric_limits_long___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = SAFE_HEAP_LOAD_i32_4_4(std____2____wrap_iter_char______wrap_iter_28char__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0)), 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______ConstructTransaction___ConstructTransaction_28std____2__locale__facet____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 4, ($2 << 2) + $3 | 0);
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 1;
 if ($0 >>> 0 >= 2) {
  $0 = unsigned_20long_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____align_it_4ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 - 1 | 0;
  $1 = ($0 | 0) == 2 ? $1 : $0;
 }
 return $1;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____vector_28_29($0) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_delete_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20______vector_base_28_29($0);
 return $0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_put_28unsigned_20long_29(27744, 1);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_get_28unsigned_20long_29(27728, 1);
}

function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) ^ 1;
}

function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_integer(emscripten__internal__TypeID_int_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 4, std____2__numeric_limits_int___min_28_29() | 0, std____2__numeric_limits_int___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}

function store_int($0, $1, $2, $3) {
 label$1: {
  if (!$0) {
   break label$1;
  }
  label$2: {
   switch ($1 + 2 | 0) {
   case 0:
    SAFE_HEAP_STORE_i64_1_1($0, 0, $2, $3);
    return;

   case 1:
    SAFE_HEAP_STORE_i64_2_2($0, 0, $2, $3);
    return;

   case 2:
   case 3:
    SAFE_HEAP_STORE_i64_4_4($0, 0, $2, $3);
    return;

   case 5:
    break label$2;

   default:
    break label$1;
   }
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $2, $3);
 }
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1, $2) {
 std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy____proxy_28char_2c_20std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(SAFE_HEAP_LOAD_i32_4_4($1, 0)) << 24 >> 24, SAFE_HEAP_LOAD_i32_4_4($1, 0));
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 if (($1 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0)) {
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0]($0) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 12, $1 + 4 | 0);
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($1, 0));
}

function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = 10;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) - 1 | 0;
 }
 return $1;
}

function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26448) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26448)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(26436, 13492);
  __cxa_guard_release(26448);
 }
 return 26436;
}

function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26544) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26544)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(26532, 13648);
  __cxa_guard_release(26544);
 }
 return 26532;
}

function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26512) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26512)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(26500, 13564);
  __cxa_guard_release(26512);
 }
 return 26500;
}

function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26480) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26480)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(26468, 13528);
  __cxa_guard_release(26480);
 }
 return 26468;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4, 1114111, 0) | 0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4, 1114111, 0) | 0;
}

function std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29($0, $1, $2, $3) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $3);
 std____2__ctype_base__ctype_base_28_29($0);
 SAFE_HEAP_STORE_i32_1_1($0, 12, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13276);
 if (!$1) {
  SAFE_HEAP_STORE_i32_4_4($0, 8, std____2__ctype_char___classic_table_28_29());
 }
 return $0;
}

function __shlim($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 SAFE_HEAP_STORE_i64_8_8($0, 112, $1, $2);
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $3 = $4 - $5 | 0;
 $7 = $3;
 $6 = $3 >> 31;
 SAFE_HEAP_STORE_i64_8_8($0, 120, $3, $6);
 $3 = $6;
 $3 = (($2 | 0) < ($3 | 0) ? 1 : ($2 | 0) <= ($3 | 0) ? $1 >>> 0 < $7 >>> 0 : 0) ? $1 + $5 | 0 : $4;
 SAFE_HEAP_STORE_i32_4_4($0, 104, $1 | $2 ? $3 : $4);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29_20const($0) {
 return std____2__pointer_traits_wchar_t_20const____pointer_to_28wchar_t_20const__29(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0));
}

function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek(SAFE_HEAP_LOAD_i32_4_4($0, 60), $1, $2, $3 & 255, $4 + 8 | 0));
 $1 = SAFE_HEAP_LOAD_i64_8_8($4, 8);
 __stack_pointer = $4 + 16 | 0;
 $2 = i64toi32_i32$HIGH_BITS;
 i64toi32_i32$HIGH_BITS = $0 ? -1 : $2;
 return ($0 ? -1 : $1) | 0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($1) ^ 1;
}

function std____2__allocator_wchar_t___allocate_28unsigned_20long_29($0, $1) {
 if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_wchar_t__20___max_size_std____2__allocator_wchar_t__2c_20void__28std____2__allocator_wchar_t__20const__29($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(1767);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 10;
 if ($0 >>> 0 >= 11) {
  $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 - 1 | 0;
  $1 = ($0 | 0) == 11 ? $1 : $0;
 }
 return $1;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 if (($1 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0)) {
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0]($0) | 0;
 }
 SAFE_HEAP_STORE_i32_4_4($0, 12, $1 + 1 | 0);
 return std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($1, 0));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) {
 return unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0)) - 16 | 0;
}

function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_1_1($4, 0, $0 >>> 0 < 128 ? $0 : $3);
   $4 = $4 + 1 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
 $2 = __ctype_get_mb_cur_max();
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26432) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26432)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(26420, 1129);
  __cxa_guard_release(26432);
 }
 return 26420;
}

function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26528) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26528)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(26516, 1401);
  __cxa_guard_release(26528);
 }
 return 26516;
}

function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26496) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26496)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(26484, 1985);
  __cxa_guard_release(26496);
 }
 return 26484;
}

function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26464) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26464)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(26452, 2020);
  __cxa_guard_release(26464);
 }
 return 26452;
}

function long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 strtold_l($3, $1, $2, std____2____cloc_28_29());
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($3, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__DoIOSInit___DoIOSInit_28_29($0) {
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(30368);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(30452);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(30704);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(30788);
 return $0;
}

function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
   SAFE_HEAP_STORE_i32_1_1($4, 0, ($0 | 0) > -1 ? $0 : $3);
   $4 = $4 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__allocator_char___allocate_28unsigned_20long_29($0, $1) {
 if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(1767);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
}

function pad($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 256 | 0;
 __stack_pointer = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $2 = $2 - $3 | 0;
  $3 = $2 >>> 0 < 256;
  memset($5, $1 & 255, $3 ? $2 : 256);
  if (!$3) {
   while (1) {
    out($0, $5, 256);
    $2 = $2 - 256 | 0;
    if ($2 >>> 0 > 255) {
     continue;
    }
    break;
   }
  }
  out($0, $5, $2);
 }
 __stack_pointer = $5 + 256 | 0;
}

function void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26248));
}

function void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26232));
}

function long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($2 + 8 | 0, $1, $0);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}

function void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26184));
}

function void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26168));
}

function void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26152));
}

function void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26136));
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($1) ^ 1;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0) {
 return std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0));
}

function std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
 $0 = std____2____wrap_iter_wchar_t_20const____base_28_29_20const($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
 return 3;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______destruct_at_end_28std____2__locale__facet___29($0, $1) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______destruct_at_end_28std____2__locale__facet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
 return 3;
}

function NuttallWindow($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 if (($0 | 0) > 0) {
  $4 = +($0 | 0) + -1;
  while (1) {
   $3 = +($2 | 0) / $4;
   SAFE_HEAP_STORE_f64_8_8(($2 << 3) + $1 | 0, 0, cos($3 * 12.566370614359172) * .144232 + (cos($3 * 6.283185307179586) * -.487396 + .355768) + cos($3 * 18.84955592153876) * -.012604);
   $2 = $2 + 1 | 0;
   if (($2 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____assign_external_28wchar_t_20const__29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____assign_external_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_wchar_t___length_28wchar_t_20const__29($1));
}

function emscripten__internal__Invoker_void_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_29_2c_20emscripten__internal___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
 FUNCTION_TABLE[$0 | 0]($2 + 8 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0) {
 return std____2__pointer_traits_wchar_t____pointer_to_28wchar_t__29(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__29($0, $1, $2) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2, std____2__char_traits_char___length_28char_20const__29($2));
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}

function int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, $0, $1);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}

function void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1: {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 - 4 | 0;
   if ($1 >>> 0 <= $0 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($0, $1);
   $0 = $0 + 4 | 0;
   continue;
  }
 }
}

function std____2__ios_base___ios_base_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 7672);
 std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0, 0);
 std____2__locale___locale_28_29($0 + 28 | 0);
 dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 32));
 dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 36));
 dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 48));
 dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 60));
 return $0 | 0;
}

function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__20const__2c_20void__28std____2__allocator_wchar_t__20const__29($0, $1) {
 std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($1);
 return $0;
}

function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (isdigit(SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 0), 0))) {
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $3 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1 + 1 | 0);
   $2 = (Math_imul($2, 10) + $3 | 0) - 48 | 0;
   if (isdigit(SAFE_HEAP_LOAD_i32_1_1($1, 1))) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29($0) {
 return std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0);
}

function void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26240));
}

function void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26224));
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 if (($1 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0)) {
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
 }
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(SAFE_HEAP_LOAD_i32_4_4($1, 0));
}

function std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($1), 0));
 return $0;
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 $1 = std____2____time_get_c_storage_wchar_t_____time_get_c_storage_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 15796);
 SAFE_HEAP_STORE_i32_4_4($1, 0, 15844);
 return $0;
}

function std____2__locale____imp__use_facet_28long_29_20const($0, $1) {
 if (!std____2__locale____imp__has_facet_28long_29_20const($0, $1)) {
  std____2____throw_bad_cast_28_29();
  abort();
 }
 return SAFE_HEAP_LOAD_i32_4_4(std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 16 | 0, $1), 0);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 11 | 0, 0) >>> 7 | 0;
}

function WorldJS__DisplayInformationVal_28emscripten__val_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 WorldJSWrapper__DisplayInformationVal_28emscripten__val_29($1 + 8 | 0);
 _emval_decref(SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26176));
}

function void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26160));
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), 8, $1 | -2147483648);
}

function std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____compressed_pair_elem_std____2__locale__facet___2c_20void__28std____2__locale__facet___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($1), 0));
 return $0;
}

function memcmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   if (($3 | 0) == ($4 | 0)) {
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}

function wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
 while (1) {
  label$2: {
   if (($0 | 0) != ($1 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 4 | 0;
  continue;
 }
}

function void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26144));
}

function void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26128));
}

function std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
 $0 = std____2____wrap_iter_char_20const____base_28_29_20const($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 11 | 0, 0);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0), 8) & 2147483647;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_1_1(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0) + 11 | 0, 0, $1);
}

function std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 8 | 0, 0);
 $1 = $1 + ($2 >> 1) | 0;
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 $3 = $1;
 if ($2 & 1) {
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
 }
 FUNCTION_TABLE[$0 | 0]($3);
}

function __cxa_guard_acquire($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function fwrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = Math_imul($1, $2);
 label$1: {
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 76) | 0) <= -1) {
   $0 = __fwritex($0, $4, $3);
   break label$1;
  }
  $5 = __lockfile($3);
  $0 = __fwritex($0, $4, $3);
  if (!$5) {
   break label$1;
  }
  __unlockfile($3);
 }
 if (($0 | 0) == ($4 | 0)) {
  return $1 ? $2 : 0;
 }
 return ($0 >>> 0) / ($1 >>> 0) | 0;
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29($0);
}

function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}

function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}

function char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 255;
 while (1) {
  label$2: {
   if (($0 | 0) != ($1 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 1 | 0;
  continue;
 }
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 if (($1 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0)) {
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
 }
 return std____2__char_traits_char___to_int_type_28char_29(SAFE_HEAP_LOAD_i32_1_1($1, 0));
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 $1 = std____2____time_get_c_storage_char_____time_get_c_storage_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 15532);
 SAFE_HEAP_STORE_i32_4_4($1, 0, 15580);
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0), 0);
}

function fmt_x($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $1;
 if ($4 | $0) {
  while (1) {
   $2 = $2 - 1 | 0;
   $4 = $1;
   SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1(($0 & 15) + 8176 | 0, 0) | $3);
   $5 = !$4 & $0 >>> 0 > 15 | ($4 | 0) != 0;
   $0 = ($4 & 15) << 28 | $0 >>> 4;
   $4 = $4 >>> 4 | 0;
   $1 = $4;
   if ($5) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 16 | 0;
 __stack_pointer = $9;
 __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($9, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $9 + 16 | 0;
}

function SAFE_HEAP_LOAD_i64_8_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 i64toi32_i32$HIGH_BITS = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), 4, $1);
}

function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26400) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26400)) {
   break label$1;
  }
  std____2__init_wmonths_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26396, 27216);
  __cxa_guard_release(26400);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26396) | 0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0), 4);
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__20const__2c_20void__28std____2__allocator_char__20const__29($0, $1) {
 std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($1);
 return $0;
}

function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1: {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 - 1 | 0;
   if ($1 >>> 0 <= $0 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1);
   $0 = $0 + 1 | 0;
   continue;
  }
 }
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) - 12 | 0, 0) + $1 | 0));
 return $0;
}

function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26384) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26384)) {
   break label$1;
  }
  std____2__init_wweeks_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26380, 26736);
  __cxa_guard_release(26384);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26380) | 0;
}

function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26416) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26416)) {
   break label$1;
  }
  std____2__init_wam_pm_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26412, 27552);
  __cxa_guard_release(26416);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26412) | 0;
}

function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
 std____2____sso_allocator_std____2__locale__facet__2c_2030ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2);
}

function __string_read($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
 $3 = $2 + 256 | 0;
 $5 = memchr($4, 0, $3);
 $3 = $5 ? $5 - $4 | 0 : $3;
 $2 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
 memcpy($1, $4, $2);
 $3 = $3 + $4 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 84, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + $4 | 0);
 return $2;
}

function std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
 return $1 + $2 | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), 0, $1);
}

function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26392) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26392)) {
   break label$1;
  }
  std____2__init_months_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26388, 26912);
  __cxa_guard_release(26392);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26388) | 0;
}

function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0) {
 return std____2__pointer_traits_char____pointer_to_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0));
}

function __fmodeflags($0) {
 var $1 = 0, $2 = 0;
 $1 = 2;
 if (!strchr($0, 43)) {
  $1 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 114;
 }
 $1 = strchr($0, 120) ? $1 | 128 : $1;
 $1 = strchr($0, 101) ? $1 | 524288 : $1;
 $2 = $1 | 64;
 $0 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
 $1 = ($0 | 0) == 114 ? $1 : $2;
 $1 = ($0 | 0) == 119 ? $1 | 512 : $1;
 return ($0 | 0) == 97 ? $1 | 1024 : $1;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}

function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26376) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26376)) {
   break label$1;
  }
  std____2__init_weeks_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26372, 26560);
  __cxa_guard_release(26376);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26372) | 0;
}

function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26408) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26408)) {
   break label$1;
  }
  std____2__init_am_pm_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26404, 27520);
  __cxa_guard_release(26408);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26404) | 0;
}

function unsigned_20long_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___max_size_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20const__29($0) {
 return std____2____sso_allocator_std____2__locale__facet__2c_2030ul___max_size_28_29_20const($0);
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 32) | 0]($0, $1, $2, $3, $4) | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 8, $1 | -2147483648);
}

function __cxa_guard_release($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 __stack_pointer = $1 + 16 | 0;
}

function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
 __embind_register_native_and_builtin_types();
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29();
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0, $1, $2, $3, $4) | 0;
}

function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t_20const__2c_20void__28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0), 8) & 2147483647;
}

function std____2____wrap_iter_wchar_t_20const____operator__28long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 std____2____wrap_iter_wchar_t_20const____operator___28long_29($2 + 8 | 0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29_20const($0), 0) - SAFE_HEAP_LOAD_i32_4_4($0, 0) >> 2;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____capacity_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_28_29_20const($0), 0) - SAFE_HEAP_LOAD_i32_4_4($0, 0) >> 2;
}

function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29($0) {
 var $1 = 0, $2 = 0;
 label$1: {
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  if (($0 | 0) != 1) {
   if ($0 & 2) {
    break label$1;
   }
   SAFE_HEAP_STORE_i32_1_1($1, 0, 2);
   $2 = 1;
  }
  return $2;
 }
 abort_message(1425, 0);
 abort();
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), 0);
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), 0, 0);
 return $1;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0), 11) >>> 7 | 0;
}

function std____2____wrap_iter_char_20const____operator__28long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 std____2____wrap_iter_char_20const____operator___28long_29($2 + 8 | 0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0);
}

function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) == ($2 | 0)) {
   return $3 | 0;
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + ($3 << 4) | 0;
  $0 = $3 & -268435456;
  $3 = ($0 >>> 24 | $0) ^ $3;
  $1 = $1 + 4 | 0;
  continue;
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0), 11);
}

function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__2c_20void__28std____2__allocator_wchar_t____29($0, $1) {
 std____2__allocator_wchar_t____20std____2__forward_std____2__allocator_wchar_t__20__28std____2__remove_reference_std____2__allocator_wchar_t__20___type__29($1);
 return $0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26144);
}

function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_1_1($1, 0));
   $3 = $3 + 4 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function std____2__ctype_char____ctype_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13276);
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 label$1: {
  if (!$1) {
   break label$1;
  }
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 12)) {
   break label$1;
  }
  operator_20delete_5b_5d_28void__29($1);
 }
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_1_1(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 11, $1);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0), 0);
}

function wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($0, $1, $2) {
 $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
 while (1) {
  label$2: {
   if (($0 | 0) != ($1 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 4 | 0;
  continue;
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 4, $1);
}

function decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) - std____2____wrap_iter_wchar_t____base_28_29_20const($1) >> 2;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($0) {
 return wchar_t_20const__20std____2____to_address_wchar_t_20const__28wchar_t_20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0), 4);
}

function std____2__iterator_traits_wchar_t_20const____difference_type_20std____2__distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
 return std____2__iterator_traits_wchar_t_20const____difference_type_20std____2____distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}

function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 label$1: {
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) != ($2 | 0)) {
   break label$1;
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 28) | 0) == 1) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4($1, 28, $3);
 }
}

function __cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
}

function std____2____wrap_iter_wchar_t____operator__28long_29_20const_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 std____2____wrap_iter_wchar_t____operator___28long_29($2 + 8 | 0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function __uflow($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $2 = -1;
 label$1: {
  if (__toread($0)) {
   break label$1;
  }
  if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 15);
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i64_8_4($0, 8, 46, 44);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13416);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 16 | 0);
 return $0;
}

function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) == ($2 | 0)) {
   return $3 | 0;
  }
  $3 = SAFE_HEAP_LOAD_i32_1_1($1, 0) + ($3 << 4) | 0;
  $0 = $3 & -268435456;
  $3 = ($0 >>> 24 | $0) ^ $3;
  $1 = $1 + 1 | 0;
  continue;
 }
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 0, $1);
}

function char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($0, $1, $2) {
 $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 255;
 while (1) {
  label$2: {
   if (($0 | 0) != ($1 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 1 | 0;
  continue;
 }
}

function bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29_1($0, $1) ^ 1;
}

function std____2____wrap_iter_char____operator__28long_29_20const_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 std____2____wrap_iter_char____operator___28long_29($2 + 8 | 0, $1);
 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}

function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_float(emscripten__internal__TypeID_double_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 8);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__numpunct_char___numpunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_2_2($0, 8, 11310);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13376);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 12 | 0);
 return $0;
}

function std____2__enable_if__28is_same_std____2__remove_const_char_20const___type_2c_20char___value_29_20___20_28is_trivially_copy_assignable_char___value_29_2c_20char____type_20std____2____copy_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
 return $1 + $2 | 0;
}

function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 _embind_register_float(emscripten__internal__TypeID_float_2c_20void___get_28_29() | 0, SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0, 4);
 __stack_pointer = $1 + 16 | 0;
}

function memmove($0, $1, $2) {
 var $3 = 0;
 if ($0 >>> 0 < $1 >>> 0) {
  return memcpy($0, $1, $2);
 }
 if ($2) {
  $3 = $0 + $2 | 0;
  $1 = $1 + $2 | 0;
  while (1) {
   $3 = $3 - 1 | 0;
   $1 = $1 - 1 | 0;
   SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29_20const($0);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 0);
}

function std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____compressed_pair_elem_unsigned_20char___2c_20void__28unsigned_20char___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($1), 0));
 return $0;
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), 0, 0);
 return $1;
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___clear_28_29($0) {
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____destruct_at_end_28std____2__locale__facet___29($0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29($0, $1) {
 std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($1);
 return $0;
}

function void_20std____2__iter_swap_unsigned_20int__2c_20unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1);
}

function std____2__locale__classic_28_29() {
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26288) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26288)) {
   break label$1;
  }
  std____2__locale____imp__make_classic_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26284, 26280);
  __cxa_guard_release(26288);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26284);
}

function std____2__locale____global_28_29() {
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26300) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26300)) {
   break label$1;
  }
  std____2__locale____imp__make_global_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 26296, 26292);
  __cxa_guard_release(26300);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26296);
}

function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char_20const__2c_20void__28char_20const__2c_20char_20const__29($0, $2, $3);
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0, 18936);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0 + 4 | 0);
 return $0 | 0;
}

function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0, 18840);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0 + 8 | 0);
 return $0 | 0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____clear_28_29($0) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______destruct_at_end_28std____2__locale__facet___29($0, SAFE_HEAP_LOAD_i32_4_4($0, 4));
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}

function decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return std____2____wrap_iter_char_20const____base_28_29_20const($0) - std____2____wrap_iter_char____base_28_29_20const($1) | 0;
}

function vsscanf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 144 | 0;
 __stack_pointer = $3;
 $3 = memset($3, 0, 144);
 SAFE_HEAP_STORE_i32_4_4($3, 76, -1);
 SAFE_HEAP_STORE_i32_4_4($3, 44, $0);
 SAFE_HEAP_STORE_i32_4_4($3, 32, 37);
 SAFE_HEAP_STORE_i32_4_4($3, 84, $0);
 $0 = vfscanf($3, $1, $2);
 __stack_pointer = $3 + 144 | 0;
 return $0;
}

function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____compressed_pair_elem_unsigned_20int___2c_20void__28unsigned_20int___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($1), 0));
 return $0;
}

function char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = ($1 >>> 0) / 100 | 0;
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 100) | 0);
}

function char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = ($1 >>> 0) / 100 | 0;
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 100) | 0);
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), 0);
 SAFE_HEAP_STORE_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), 0, 0);
 return $1;
}

function std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($0, $1) {
 return std____2__iterator_traits_char_20const____difference_type_20std____2____distance_char_20const___28char_20const__2c_20char_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18696);
 std____2__locale__locale_28_29($0 + 4 | 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 24 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
 return $0;
}

function fmt_o($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = $1;
 if ($3 | $0) {
  while (1) {
   $2 = $2 - 1 | 0;
   $3 = $1;
   SAFE_HEAP_STORE_i32_1_1($2, 0, $0 & 7 | 48);
   $4 = !$3 & $0 >>> 0 > 7 | ($3 | 0) != 0;
   $0 = ($3 & 7) << 29 | $0 >>> 3;
   $3 = $3 >>> 3 | 0;
   $1 = $3;
   if ($4) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function GetFFTSizeForCheapTrick($0, $1) {
 var $2 = 0;
 $2 = log(+($0 | 0) * 3 / SAFE_HEAP_LOAD_f64_8_8($1, 8) + 1) / .6931471805599453;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $1 = ~~$2;
   break label$1;
  }
  $1 = -2147483648;
 }
 $2 = exp2(+($1 | 0) + 1);
 if (Math_abs($2) < 2147483648) {
  return ~~$2;
 }
 return -2147483648;
}

function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($0, $1) {
 return std____2____sso_allocator_std____2__locale__facet__2c_2030ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
 return char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0));
}

function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 16 | 0);
}

function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return (SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) == (SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0);
 }
 if (($0 | 0) == ($1 | 0)) {
  return 1;
 }
 return !strcmp(std__type_info__name_28_29_20const($0), std__type_info__name_28_29_20const($1));
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29($0);
}

function emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29();
}

function emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29();
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}

function sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
 $4 = $3;
 $3 = SAFE_HEAP_LOAD_i32_4_4($0, 16) - $3 | 0;
 $3 = $2 >>> 0 < $3 >>> 0 ? $2 : $3;
 memcpy($4, $1, $3);
 SAFE_HEAP_STORE_i32_4_4($0, 20, SAFE_HEAP_LOAD_i32_4_4($0, 20) + $3 | 0);
 return $2 | 0;
}

function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 12 | 0);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18632);
 std____2__locale__locale_28_29($0 + 4 | 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 24 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
 SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
 return $0;
}

function bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29_1($0, $1) ^ 1;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}

function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_put_wchar_t_____money_put_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 17304);
 return $0;
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_get_wchar_t_____money_get_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16976);
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0);
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0, 18888);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 4 | 0);
 return $0 | 0;
}

function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 18792);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 8 | 0);
 return $0 | 0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 std____2__ios_base__init_28void__29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 72, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 76, std____2__char_traits_wchar_t___eof_28_29());
}

function emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29();
}

function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 8, $1 + 1 | 0);
 return $0;
}

function strtold($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 strtox_1($3, $1, $2, 2);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($3, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $3 + 16 | 0;
}

function virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0) | 0;
}

function virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0) | 0;
}

function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____time_put____time_put_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16188);
 return $0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}

function std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($0, $1, $2) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, std____2____wrap_iter_wchar_t____base_28_29_20const($1));
 return $0;
}

function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
 return $0;
}

function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + 15 & -16;
 SAFE_HEAP_STORE_i32_4_4($1, 0, $2 + 16 | 0);
 SAFE_HEAP_STORE_f64_8_8($0, 0, __trunctfdf2(SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS));
}

function decltype_28std____2__forward_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29($0) {
 std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0);
}

function char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 if ($1 >>> 0 <= 9) {
  return char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
}

function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1($0));
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29($0));
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0) {
 return wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29_20const($0);
}

function __cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 return unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___first_28_29_20const($0 + 16 | 0);
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___second_28_29_20const($0 + 16 | 0);
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13328);
 SAFE_HEAP_STORE_i32_4_4($0, 8, std____2____cloc_28_29());
 return $0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13328);
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) != (std____2____cloc_28_29() | 0)) {
  freelocale(SAFE_HEAP_LOAD_i32_4_4($0, 8));
 }
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____first_28_29_20const($0 + 12 | 0);
}

function bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29_1($0, $1) {
 return (std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) | 0) == (std____2____wrap_iter_wchar_t____base_28_29_20const($1) | 0);
}

function InitializeDioOption($0) {
 SAFE_HEAP_STORE_i64_8_8($0, 8, 0, 1082720256);
 SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 1073741824);
 SAFE_HEAP_STORE_i64_8_8($0, 40, -1717986918, 1069128089);
 SAFE_HEAP_STORE_i32_4_4($0, 32, 1);
 SAFE_HEAP_STORE_i64_8_8($0, 24, 0, 1075052544);
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 1079099392);
}

function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_put_char_____money_put_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 17140);
 return $0;
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_get_char_____money_get_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16812);
 return $0;
}

function std____2__ios_base__init_28void__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 24, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
 SAFE_HEAP_STORE_i64_8_4($0, 4, 4098, 6);
 SAFE_HEAP_STORE_i32_4_4($0, 16, !$1);
 memset($0 + 32 | 0, 0, 40);
 std____2__locale__locale_28_29($0 + 28 | 0);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($0) + ($1 << 2) | 0;
}

function std____2____cloc_28_29() {
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 26276) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26276)) {
   break label$1;
  }
  SAFE_HEAP_STORE_i32_4_4(0, 26272, __newlocale(2147483647, 2067, 0));
  __cxa_guard_release(26276);
 }
 return SAFE_HEAP_LOAD_i32_4_4(0, 26272);
}

function virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
}

function virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
}

function strtold_l($0, $1, $2, $3) {
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 strtold($3, $1, $2);
 SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($3, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__to_string_28int_29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0, $1);
}

function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____time_put____time_put_28_29($0 + 8 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16032);
 return $0;
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_std____2__locale__facet___20___max_size_std____2__allocator_std____2__locale__facet___2c_20void__28std____2__allocator_std____2__locale__facet___20const__29($0) {
 return std____2__allocator_std____2__locale__facet____max_size_28_29_20const($0);
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 std____2__ios_base__init_28void__29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 72, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 76, std____2__char_traits_char___eof_28_29());
}

function WorldJS__WavRead_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 WorldNativeIO__WavRead_JS_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1);
}

function WorldJS__Wav2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 WorldJSWrapper__W2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1);
}

function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0) | 0;
}

function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0) | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0);
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____get_28_29_20const($0 + 16 | 0);
}

function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = $0 ? $0 : 1;
 label$1: {
  while (1) {
   $0 = dlmalloc($1);
   if ($0) {
    break label$1;
   }
   $0 = std__get_new_handler_28_29();
   if ($0) {
    FUNCTION_TABLE[$0 | 0]();
    continue;
   }
   break;
  }
  abort();
  abort();
 }
 return $0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____assign_external_28wchar_t_20const__29($0, $1);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + ($1 << 2) | 0;
}

function emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29();
}

function strtof($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 strtox_1($2, $0, $1, 0);
 $3 = __trunctfsf2(SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function std____2__ctype_char___20std____2___28anonymous_20namespace_29__make_std____2__ctype_char__2c_20std__nullptr_t_2c_20bool_2c_20unsigned_20int__28std__nullptr_t_2c_20bool_2c_20unsigned_20int_29() {
 std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29(27600, 0, 0, 1);
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0);
}

function bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return bool_20std____2__operator___wchar_t__2c_20wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) ^ 1;
}

function std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($0, $1, $2) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, std____2____wrap_iter_char____base_28_29_20const($1));
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29($0);
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____end_cap_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___first_28_29($0 + 16 | 0);
}

function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___construct_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
}

function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0));
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29($0));
}

function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___second_28_29($0 + 16 | 0);
}

function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
}

function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 12 | 0, 0) + $0 | 0);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0) {
 return std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___capacity_28_29_20const($0);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__29($0, $1);
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______end_cap_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____first_28_29($0 + 12 | 0);
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(27656, 1);
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(27648, 1);
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_______alloc_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____second_28_29($0 + 12 | 0);
}

function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____compressed_pair_elem_wchar_t___2c_20void__28wchar_t___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($1), 0));
 return $0;
}

function bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29_1($0, $1) {
 return (std____2____wrap_iter_char_20const____base_28_29_20const($0) | 0) == (std____2____wrap_iter_char____base_28_29_20const($1) | 0);
}

function std____2__numpunct_wchar_t____numpunct_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13416);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 16 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 if ($2 >>> 0 <= 127) {
  $3 = (SAFE_HEAP_LOAD_i32_2_U_2(std____2__ctype_char___classic_table_28_29() + ($2 << 1) | 0, 0) & $1) != 0;
 }
 return $3 | 0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(27632, 1);
}

function void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26348));
}

function void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26340));
}

function std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 return std____2__iterator_traits_wchar_t____difference_type_20std____2____distance_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29($0) {
 $0 = $0 | 0;
 std____2____time_get_c_storage_wchar_t______time_get_c_storage_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__numpunct_char____numpunct_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13376);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 12 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____get_28_29($0 + 16 | 0);
}

function void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26332));
}

function strtod($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 strtox_1($2, $0, $1, 1);
 $3 = __trunctfdf2(SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2, 8), i64toi32_i32$HIGH_BITS);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0) {
 return char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}

function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0) {
 void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0);
}

function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2____shared_count____release_shared_28_29($0) {
 var $1 = 0;
 $1 = long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0 + 4 | 0);
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 8) | 0]($0);
 }
 return ($1 | 0) == -1;
}

function std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($0, $1, $2) {
 SAFE_HEAP_STORE_i64_8_4($0, 4, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
 return $0;
}

function bool_20std____2__operator___wchar_t__2c_20wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return (std____2____wrap_iter_wchar_t____base_28_29_20const($0) | 0) == (std____2____wrap_iter_wchar_t____base_28_29_20const($1) | 0);
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy____proxy_28wchar_t_2c_20std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1, $2) {
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) + $1 | 0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0);
}

function void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26324));
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___data_28_29_20const($0) {
 return std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0) {
 return $0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(27624, 1);
}

function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
 label$1: {
  $0 = std____2__ios_base__flags_28_29_20const($0) & 74;
  if ($0) {
   if (($0 | 0) == 64) {
    return 8;
   }
   if (($0 | 0) != 8) {
    break label$1;
   }
   return 16;
  }
  return 0;
 }
 return 10;
}

function GetSuitableFFTSize($0) {
 var $1 = 0;
 $1 = log(+($0 | 0)) / .6931471805599453;
 label$1: {
  if (Math_abs($1) < 2147483648) {
   $0 = ~~$1;
   break label$1;
  }
  $0 = -2147483648;
 }
 $1 = exp2(+($0 | 0) + 1);
 if (Math_abs($1) < 2147483648) {
  return ~~$1;
 }
 return -2147483648;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__29($0, $1);
}

function bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return bool_20std____2__operator___char__2c_20char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) ^ 1;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1, 0);
}

function void_20std____2__iter_swap_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 std____2__enable_if__28is_move_constructible_wchar_t___value_29_20___20_28is_move_assignable_wchar_t___value_29_2c_20void___type_20std____2__swap_wchar_t__28wchar_t__2c_20wchar_t__29($0, $1);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29($0) {
 $0 = $0 | 0;
 std____2____time_get_c_storage_char______time_get_c_storage_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + $1 | 0;
}

function bool_20std____2__operator___wchar_t_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0, $1) {
 return std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) ^ 1;
}

function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______ConstructTransaction____ConstructTransaction_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
 return $0;
}

function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____sso_allocator_28_29($0);
 return $0;
}

function std____2____compressed_pair_elem_char__2c_200_2c_20false_____compressed_pair_elem_char___2c_20void__28char___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4(char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($1), 0));
 return $0;
}

function std____2__char_traits_wchar_t___not_eof_28unsigned_20int_29($0) {
 if (std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($0, std____2__char_traits_wchar_t___eof_28_29())) {
  $0 = std____2__char_traits_wchar_t___eof_28_29() ^ -1;
 }
 return $0;
}

function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 return dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
}

function __ofl_add($0) {
 var $1 = 0, $2 = 0;
 $1 = __ofl_lock();
 SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 if ($2) {
  SAFE_HEAP_STORE_i32_4_4($2, 52, $0);
 }
 SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 __ofl_unlock();
 return $0;
}

function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($0, $1) {
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1);
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
}

function __cxx_global_array_dtor_136($0) {
 $0 = $0 | 0;
 $0 = 27576;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 27552) {
   continue;
  }
  break;
 }
}

function __cxx_global_array_dtor_109($0) {
 $0 = $0 | 0;
 $0 = 27504;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 27216) {
   continue;
  }
  break;
 }
}

function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release____unique_ptr_28_29($0) {
 std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($0);
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20true___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
}

function std____2__ios_base__Init__Init_28_29($0) {
 label$1: {
  if (SAFE_HEAP_LOAD_i32_1_U_1(0, 31232) & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(31232)) {
   break label$1;
  }
  std____2__DoIOSInit__DoIOSInit_28_29(31228);
  __cxa_guard_release(31232);
 }
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1);
}

function __cxx_global_array_dtor_70($0) {
 $0 = $0 | 0;
 $0 = 26904;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 26736) {
   continue;
  }
  break;
 }
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20____ConstructTransaction____ConstructTransaction_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 4, SAFE_HEAP_LOAD_i32_4_4($0, 4));
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy____proxy_28char_2c_20std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1, $2) {
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
 SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
 return $0;
}

function bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0, $1) {
 return std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) ^ 1;
}

function bool_20std____2__operator___char__2c_20char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return (std____2____wrap_iter_char____base_28_29_20const($0) | 0) == (std____2____wrap_iter_char____base_28_29_20const($1) | 0);
}

function __getTypeName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
 $0 = __strdup(std__type_info__name_28_29_20const(SAFE_HEAP_LOAD_i32_4_4($1, 12)));
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function __fpclassifyl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $3 & 65535;
 $5 = $3 >>> 16 & 32767;
 label$1: {
  if (($5 | 0) != 32767) {
   $3 = 4;
   if ($5) {
    break label$1;
   }
   return $0 | $2 | ($1 | $4) ? 3 : 2;
  }
  $3 = !($0 | $2 | ($1 | $4));
 }
 return $3;
}

function std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($0, $1) {
 return std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($0) {
 return !std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
}

function SAFE_HEAP_STORE_i32_4_1($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 HEAP8[$0 | 0] = $2;
 HEAP8[$0 + 1 | 0] = $2 >>> 8;
 HEAP8[$0 + 2 | 0] = $2 >>> 16;
 HEAP8[$0 + 3 | 0] = $2 >>> 24;
}

function void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29($0) {
 $0 = $0 | 0;
 std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0);
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0) {
 return $0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}

function std____2____sso_allocator_std____2__locale__facet__2c_2030ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____type__29($0) {
 return $0;
}

function __cxx_global_array_dtor_133($0) {
 $0 = $0 | 0;
 $0 = 27544;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 27520) {
   continue;
  }
  break;
 }
}

function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26208));
}

function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1($0) {
 $0 = $0 | 0;
 std____2____time_put_____time_put_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 15332);
 return $0;
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14888);
 return $0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 return 3;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 return 3;
}

function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}

function __cxx_global_array_dtor_85($0) {
 $0 = $0 | 0;
 $0 = 27200;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 26912) {
   continue;
  }
  break;
 }
}

function __cxx_global_array_dtor_55($0) {
 $0 = $0 | 0;
 $0 = 26728;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 - 12 | 0);
  if (($0 | 0) != 26560) {
   continue;
  }
  break;
 }
}

function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26216));
}

function std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($0, $1, $2, $3) {
 std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0, $1, $2, $3);
}

function std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = Math_imul(32 - Math_clz32($0 | 1) | 0, 1233) >>> 12 | 0;
 return ($1 - (SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + 20128 | 0, 0) >>> 0 > $0 >>> 0) | 0) + 1 | 0;
}

function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, 13468);
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0);
}

function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___destroy_std____2__locale__facet__2c_20void_2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20std____2__locale__facet___29($0, $1) {}

function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, 13448);
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26332);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
 return 3;
}

function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, 1, 45);
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
 SAFE_HEAP_STORE_i32_4_4($0, 72, $1);
 return $2;
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0);
}

function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26192));
}

function std____2__moneypunct_char_2c_20true___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, 1, 45);
}

function std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29(27776, 1);
}

function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26200));
}

function memcpy($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function wmemcpy($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
   $3 = $3 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0) {
 $0 = $0 | 0;
 std____2____time_put_____time_put_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 15100);
 return $0;
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14644);
 return $0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14172);
 return $0;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14056);
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29(27784, 1);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26324);
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4) | 0;
}

function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0 | 0]($1, $2, $3);
}

function SAFE_HEAP_LOAD_i64_8_8($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 7) {
  alignfault();
 }
 i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
 return HEAP32[$0 >> 2];
}

function SAFE_HEAP_LOAD_i64_8_4($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
 return HEAP32[$0 >> 2];
}

function SAFE_HEAP_LOAD_i32_4_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
}

function void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1) {
 std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
}

function std__type_info__name_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
 SAFE_HEAP_STORE_i32_4_4($1, 12, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 8), 4));
 return SAFE_HEAP_LOAD_i32_4_4($1, 12);
}

function legalstub$dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0;
}

function SAFE_HEAP_LOAD_i64_4_4($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 $0 = HEAP32[$0 >> 2];
 i64toi32_i32$HIGH_BITS = $0 >> 31;
 return $0;
}

function SAFE_HEAP_LOAD_i64_2_2($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 $0 = HEAP16[$0 >> 1];
 i64toi32_i32$HIGH_BITS = $0 >> 31;
 return $0;
}

function std____2__messages_wchar_t___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -1;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13908);
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0));
}

function long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($0, $1) {
 return long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4) | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($0) {
 return !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {}

function std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29(27760, 1);
}

function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -1;
}

function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_upper_table_28_29() + (($1 & 255) << 2) | 0, 0);
 }
 return $1 << 24 >> 24;
}

function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_lower_table_28_29() + (($1 & 255) << 2) | 0, 0);
 }
 return $1 << 24 >> 24;
}

function std____2__ios_base__clear_28unsigned_20int_29($0, $1) {
 $1 = !SAFE_HEAP_LOAD_i32_4_4($0, 24) | $1;
 SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
 if (SAFE_HEAP_LOAD_i32_4_4($0, 20) & $1) {
  std____2____throw_failure_28char_20const__29(1377);
  abort();
 }
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
 SAFE_HEAP_STORE_i32_4_4($0, 72, $1);
 return $2;
}

function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, 1853);
}

function std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29(27768, 1);
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0));
}

function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0));
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0);
}

function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, 1835);
}

function __fseeko($0, $1, $2, $3) {
 var $4 = 0;
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) <= -1) {
  return __fseeko_unlocked($0, $1, $2, $3);
 }
 $4 = __lockfile($0);
 $3 = __fseeko_unlocked($0, $1, $2, $3);
 if ($4) {
  __unlockfile($0);
 }
 return $3;
}

function std____2__locale____imp__make_classic_28_29() {
 std____2__locale____imp__20std____2___28anonymous_20namespace_29__make_std____2__locale____imp_2c_20unsigned_20int__28unsigned_20int_29();
 SAFE_HEAP_STORE_i32_4_4(0, 26280, 27904);
 return 26280;
}

function std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_wchar_t___deallocate_28wchar_t__2c_20unsigned_20long_29($0, $1, $2);
}

function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0);
}

function SAFE_HEAP_STORE_i32_4_2($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 HEAP16[$0 >> 1] = $2;
 HEAP16[$0 + 2 >> 1] = $2 >>> 16;
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_wchar_t__20___max_size_std____2__allocator_wchar_t__2c_20void__28std____2__allocator_wchar_t__20const__29($0) {
 return std____2__allocator_wchar_t___max_size_28_29_20const($0);
}

function std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16580);
 return $0;
}

function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_upper_table_28_29() + ($1 << 2) | 0, 0);
 }
 return $1 | 0;
}

function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = SAFE_HEAP_LOAD_i32_4_4(std____2__ctype_char_____classic_lower_table_28_29() + ($1 << 2) | 0, 0);
 }
 return $1 | 0;
}

function SAFE_HEAP_STORE_i64_8_8($0, $1, $2, $3) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 7) {
  alignfault();
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $3;
}

function SAFE_HEAP_STORE_i64_8_4($0, $1, $2, $3) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $3;
}

function std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16696);
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20false___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0));
}

function int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) {
 return int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1);
}

function void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26364));
}

function void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26264));
}

function std____2__moneypunct_wchar_t_2c_20true___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}

function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2) {
 return wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2);
}

function SAFE_HEAP_LOAD_i64_2_U_2($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 i64toi32_i32$HIGH_BITS = 0;
 return HEAPU16[$0 >> 1];
}

function std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16316);
 return $0;
}

function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 return $0;
}

function SAFE_HEAP_LOAD_i64_4_U_4($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 i64toi32_i32$HIGH_BITS = 0;
 return HEAP32[$0 >> 2];
}

function void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26120));
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) {
 return (SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0), 0) | 0) != 0;
}

function std____2__moneypunct_wchar_t_2c_20true___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 16464);
 return $0;
}

function arg_n($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
 $0 = $1 >>> 0 > 1 ? (($1 << 2) + $0 | 0) - 4 | 0 : $0;
 SAFE_HEAP_STORE_i32_4_4($2, 8, $0 + 4 | 0);
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
 if (!$0) {
  return 1;
 }
 return std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0;
}

function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26208);
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) {
 return std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) {
 return std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 0)) << 24 >> 24;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0));
}

function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0));
}

function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
 return SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 0 < SAFE_HEAP_LOAD_i32_4_4($2, 0) >>> 0;
}

function void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26356));
}

function void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26256));
}

function void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26308));
}

function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26216);
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
 return $0;
}

function std____2__messages_wchar_t___messages_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__messages_base__messages_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 17588);
 return $0;
}

function std____2__char_traits_char___not_eof_28int_29($0) {
 if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, std____2__char_traits_char___eof_28_29())) {
  $0 = std____2__char_traits_char___eof_28_29() ^ -1;
 }
 return $0;
}

function void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26112));
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) {
 return (SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0), 0) | 0) != 0;
}

function std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 if (($2 | 0) >= 0) {
  $3 = (SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 8) + (($2 & 255) << 1) | 0, 0) & $1) != 0;
 }
 return $3;
}

function void_20std____2__reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 void_20std____2____reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29($0) {
 return std____2__allocator_char___max_size_28_29_20const($0);
}

function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26192);
}

function std____2__messages_char___messages_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__messages_base__messages_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 17468);
 return $0;
}

function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2);
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 return $0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29_20const($0), 0);
}

function std____2__moneypunct_char_2c_20false___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 48) | 0]($0, $1, $2) | 0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0));
}

function void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(26316));
}

function std____2__moneypunct_char_2c_20true___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26200);
}

function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__moneypunct_wchar_t_2c_20false___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20false___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__allocator_wchar_t__20std____2__allocator_traits_std____2__allocator_wchar_t__20___select_on_container_copy_construction_std____2__allocator_wchar_t__2c_20void_2c_20void__28std____2__allocator_wchar_t__20const__29($0) {}

function std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____get_28_29($0);
}

function std____2__moneypunct_wchar_t_2c_20true___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20true___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function std____2__allocator_std____2__locale__facet____deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2 << 2, 4);
}

function std____2__moneypunct_char_2c_20true___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}

function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29() {
 var $0 = 0;
 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 26304) + 1 | 0;
 SAFE_HEAP_STORE_i32_4_4(0, 26304, $0);
 return $0;
}

function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, -1);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0) + ($1 << 2) | 0;
}

function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
 return $0;
}

function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2 | 0);
 return $0 | 0;
}

function std____2__ctype_wchar_t___ctype_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__ctype_base__ctype_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13760);
 return $0;
}

function std____2__iterator_traits_wchar_t_20const____difference_type_20std____2____distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 >> 2;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18696);
 std____2__locale___locale_28_29($0 + 4 | 0);
 return $0 | 0;
}

function std____2__numpunct_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29(27696, 1);
}

function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__messages_wchar_t___messages_28unsigned_20long_29(27896, 1);
}

function std____2__locale__locale_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4(std____2__locale____global_28_29(), 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 std____2____shared_count____add_shared_28_29($1);
 return $0;
}

function SAFE_HEAP_LOAD_i64_1_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 $0 = HEAP8[$0 | 0];
 i64toi32_i32$HIGH_BITS = $0 >> 31;
 return $0;
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0));
}

function __uselocale($0) {
 var $1 = 0, $2 = 0;
 $1 = __pthread_self();
 $2 = SAFE_HEAP_LOAD_i32_4_4($1, 172);
 if ($0) {
  SAFE_HEAP_STORE_i32_4_4($1, 172, ($0 | 0) == -1 ? 26060 : $0);
 }
 return ($2 | 0) == 26060 ? -1 : $2;
}

function std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 48) | 0]($0, $1, $2, $3) | 0;
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0), 0);
}

function std____2__allocator_char__20std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0) {}

function SAFE_HEAP_STORE_i64_4_4($0, $1, $2, $3) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 HEAP32[$0 >> 2] = $2;
}

function SAFE_HEAP_STORE_i64_2_2($0, $1, $2, $3) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 HEAP16[$0 >> 1] = $2;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 4) - SAFE_HEAP_LOAD_i32_4_4($0, 0) >> 2;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0) + ($1 << 2) | 0;
}

function std____2__collate_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__collate_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__collate_wchar_t___collate_28unsigned_20long_29(27592, 1);
}

function void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 1);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18632);
 std____2__locale___locale_28_29($0 + 4 | 0);
 return $0 | 0;
}

function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, 0);
 return $0;
}

function std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_wchar_t___allocate_28unsigned_20long_29($0, $1);
}

function SAFE_HEAP_STORE_f64_8_8($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 7) {
  alignfault();
 }
 HEAPF64[$0 >> 3] = $2;
}

function SAFE_HEAP_STORE_f32_4_4($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 HEAPF32[$0 >> 2] = $2;
}

function SAFE_HEAP_STORE_i32_4_4($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 HEAP32[$0 >> 2] = $2;
}

function SAFE_HEAP_STORE_i32_2_2($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 HEAP16[$0 >> 1] = $2;
}

function SAFE_HEAP_LOAD_i32_2_U_2($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 if ($0 & 1) {
  alignfault();
 }
 return HEAPU16[$0 >> 1];
}

function wmemset($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
   $3 = $3 + 4 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26364);
}

function std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 32) | 0]($0, $1, $2, $3) | 0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, 0);
 return $0;
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4(std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0), 0);
}

function std____2__numpunct_char___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__numpunct_char___numpunct_28unsigned_20long_29(27664, 1);
}

function std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__messages_char___messages_28unsigned_20long_29(27888, 1);
}

function std____2____stdoutbuf_wchar_t______stdoutbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}

function snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
 $3 = vsnprintf($0, $1, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $3;
}

function memset($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   SAFE_HEAP_STORE_i32_1_1($3, 0, $1);
   $3 = $3 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function SAFE_HEAP_LOAD_f64_8_8($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 8 >>> 0) {
  segfault();
 }
 if ($0 & 7) {
  alignfault();
 }
 return HEAPF64[$0 >> 3];
}

function std____2____equal_to_wchar_t_2c_20wchar_t___operator_28_29_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 return (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
}

function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}

function legalstub$dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) | 0;
}

function SAFE_HEAP_LOAD_i32_4_4($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 4 >>> 0) {
  segfault();
 }
 if ($0 & 3) {
  alignfault();
 }
 return HEAP32[$0 >> 2];
}

function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}

function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_wchar_t___allocator_28_29($0);
 return $0;
}

function std____2__iterator_traits_char_20const____difference_type_20std____2____distance_char_20const___28char_20const__2c_20char_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 | 0;
}

function std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__ctype_wchar_t___ctype_28unsigned_20long_29(27616, 1);
}

function SAFE_HEAP_STORE_i32_2_1($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 HEAP8[$0 | 0] = $2;
 HEAP8[$0 + 1 | 0] = $2 >>> 8;
}

function std____2__collate_char___20std____2___28anonymous_20namespace_29__make_std____2__collate_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__collate_char___collate_28unsigned_20long_29(27584, 1);
}

function std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26356);
}

function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
 return std____2__locale____imp__use_facet_28long_29_20const(SAFE_HEAP_LOAD_i32_4_4($0, 0), std____2__locale__id____get_28_29($1));
}

function std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26308);
}

function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29_20const($0);
}

function SAFE_HEAP_LOAD_i64_1_U_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 i64toi32_i32$HIGH_BITS = 0;
 return HEAPU8[$0 | 0];
}

function std____2__locale____imp__20std____2___28anonymous_20namespace_29__make_std____2__locale____imp_2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__locale____imp____imp_28unsigned_20long_29(27904, 1);
}

function std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_char___allocate_28unsigned_20long_29($0, $1);
}

function randn_reseed() {
 SAFE_HEAP_STORE_i32_4_4(0, 25124, 362436069);
 SAFE_HEAP_STORE_i32_4_4(0, 25120, 123456789);
 SAFE_HEAP_STORE_i32_4_4(0, 25128, 521288629);
 SAFE_HEAP_STORE_i32_4_4(0, 25132, 88675123);
}

function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
 $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 std____2____shared_count____add_shared_28_29($1);
 return $0;
}

function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_char___allocator_28_29($0);
 return $0;
}

function SAFE_HEAP_LOAD_i32_2_U_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 2 >>> 0) {
  segfault();
 }
 return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
}

function std____2____stdoutbuf_char______stdoutbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $1, $2) {
 return std____2____num_get_char_____do_widen_p_28std____2__ios_base__2c_20char__29_20const($0, $1, $2);
}

function std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 return (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) == (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0);
}

function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}

function GetSamplesForHarvest($0, $1, $2) {
 $2 = +($1 | 0) * 1e3 / +($0 | 0) / $2;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0 + 1 | 0;
}

function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29($0) {
 SAFE_HEAP_STORE_i32_1_1($0, 0, 1);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pbackfail_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}

function WorldJS__GetInformation_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 WorldNativeIO__GetInformation_28int_2c_20int_2c_20int_29($0, $1, $2, $3);
}

function std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 26316);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___overflow_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}

function std____2____stdinbuf_char______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}

function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29();
}

function std____2__locale__id____init_28_29($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 4, int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29());
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0));
}

function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}

function sscanf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
 $2 = vsscanf($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}

function legalstub$dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 dynCall_viijii($0, $1, $2, $3, $4, $5, $6);
}

function __wasm_call_ctors() {
 emscripten_stack_init();
 __emscripten_environ_constructor();
 _GLOBAL__I_000101();
 _GLOBAL__sub_I_WorldJS_cpp();
 _GLOBAL__sub_I_bind_cpp();
 _GLOBAL__sub_I_iostream_cpp();
}

function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29();
}

function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29();
}

function GetSamplesForDIO($0, $1, $2) {
 $2 = +($1 | 0) * 1e3 / +($0 | 0) / $2;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0 + 1 | 0;
}

function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0);
}

function emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29() {
 return 4056;
}

function char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 SAFE_HEAP_STORE_i32_2_1($0, 0, SAFE_HEAP_LOAD_i32_2_U_2(($1 << 1) + 19920 | 0, 0));
 return $0 + 2 | 0;
}

function __DOUBLE_BITS_1($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29();
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function __DOUBLE_BITS($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function std__get_new_handler_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(31312);
}

function std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($0) {
 return $0;
}

function emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29();
}

function std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
 if ($1) {
  memset($0, std____2__char_traits_char___to_int_type_28char_29($2), $1);
 }
 return $0;
}

function std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($0, $1, $2) {
 return (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) < (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
}

function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2__allocator_wchar_t___deallocate_28wchar_t__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2 << 2, 4);
}

function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29_20const($0);
}

function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____get_28_29($0);
}

function void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, 0);
 return $0;
}

function std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0, $1, $2) | 0;
}

function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29($0);
}

function unsigned_20long_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____align_it_4ul__28unsigned_20long_29($0) {
 return $0 + 3 & -4;
}

function std____2__iterator_traits_wchar_t____difference_type_20std____2____distance_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 >> 2;
}

function std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 return (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) < (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
}

function std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1, $2) {
 return SAFE_HEAP_LOAD_f64_8_8($1, 0) < SAFE_HEAP_LOAD_f64_8_8($2, 0);
}

function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0, $1);
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
 SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16);
}

function WorldJS__DisplayInformation_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 WorldNativeIO__DisplayInformation_28int_2c_20int_2c_20int_29($0, $1, $2);
}

function std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($0, $1) {
 return std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0, $1);
}

function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29_20const($0);
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0) | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0) {
 std____2__ios_base__ios_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 19024);
 return $0;
}

function std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($0) {
 return $0;
}

function std____2____time_put_____time_put_28_29($0) {
 if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != (std____2____cloc_28_29() | 0)) {
  freelocale(SAFE_HEAP_LOAD_i32_4_4($0, 0));
 }
 return $0;
}

function std____2__locale__facet__facet_28unsigned_20long_29($0, $1) {
 std____2____shared_count____shared_count_28long_29($0, $1 - 1 | 0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 13704);
 return $0;
}

function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}

function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0) {
 return $0 + 15 & -16;
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____invalidate_iterators_past_28std____2__locale__facet___29($0, $1) {}

function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___gbump_28int_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 12, SAFE_HEAP_LOAD_i32_4_4($0, 12) + ($1 << 2) | 0);
}

function long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $1;
}

function long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0;
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $1;
}

function __cxx_global_array_dtor_44($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(26532);
}

function __cxx_global_array_dtor_40($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(26500);
}

function __cxx_global_array_dtor_36($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(26468);
}

function __cxx_global_array_dtor_32($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(26436);
}

function unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
}

function std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 52) | 0]($0, $1, $2) | 0;
}

function std____2__collate_wchar_t___collate_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14612);
 return $0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0) | 0;
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, 0);
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}

function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2, 1);
}

function SAFE_HEAP_STORE_i64_1_1($0, $1, $2, $3) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 HEAP8[$0 | 0] = $2;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}

function emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29();
}

function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__collate_char___collate_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 14580);
 return $0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___setbuf_28wchar_t__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0) {
 std____2__ios_base__ios_base_28_29($0);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18952);
 return $0;
}

function wcslen($0) {
 var $1 = 0, $2 = 0;
 $2 = $0;
 while (1) {
  $1 = $2;
  $2 = $1 + 4 | 0;
  if (SAFE_HEAP_LOAD_i32_4_4($1, 0)) {
   continue;
  }
  break;
 }
 return $1 - $0 >> 2;
}

function std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, __uselocale(SAFE_HEAP_LOAD_i32_4_4($1, 0)));
 return $0;
}

function emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29();
}

function emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29();
}

function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0) | 0;
}

function SAFE_HEAP_STORE_i32_1_1($0, $1, $2) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 HEAP8[$0 | 0] = $2;
}

function SAFE_HEAP_LOAD_i32_1_U_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 return HEAPU8[$0 | 0];
}

function std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 | 0;
}

function std____2__ctype_char___narrow_28char_2c_20char_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0, $1, $2) | 0;
}

function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29($0);
}

function emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29();
}

function emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29();
}

function emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29() {
 return 4328;
}

function emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29() {
 return 4236;
}

function __cxxabiv1____pointer_type_info_____pointer_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}

function InitializeHarvestOption($0) {
 SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 1075052544);
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 1079099392);
 SAFE_HEAP_STORE_i64_8_8($0, 8, 0, 1082720256);
}

function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_date_order_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}

function std____2__pointer_traits_wchar_t_20const____pointer_to_28wchar_t_20const__29($0) {
 return wchar_t_20const__20std____2__addressof_wchar_t_20const__28wchar_t_20const__29($0);
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
}

function std____2__allocator_wchar_t____20std____2__forward_std____2__allocator_wchar_t__20__28std____2__remove_reference_std____2__allocator_wchar_t__20___type__29($0) {
 return $0;
}

function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_201_2c_20false_____get_28_29($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29();
}

function bool_20std____2____ptr_in_range_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 return $0 >>> 0 < $2 >>> 0 & $0 >>> 0 >= $1 >>> 0;
}

function __cxx_global_array_dtor_42($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(26516);
}

function __cxx_global_array_dtor_38($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(26484);
}

function __cxx_global_array_dtor_34($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(26452);
}

function SAFE_HEAP_LOAD_i32_1_1($0, $1) {
 $0 = $0 + $1 | 0;
 if ($0 >>> 0 < 1024 | HEAPU32[emscripten_get_sbrk_ptr() >> 2] < $0 + 1 >>> 0) {
  segfault();
 }
 return HEAP8[$0 | 0];
}

function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
 void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}

function emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29() {
 return 4144;
}

function std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 : $2) << 24 >> 24;
}

function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 return void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0);
}

function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(26420);
}

function std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 12, SAFE_HEAP_LOAD_i32_4_4($0, 12) + $1 | 0);
}

function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29($0);
}

function WorldJS__GetInformationVal_28emscripten__val_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 WorldJSWrapper__GetInformationVal_28emscripten__val_20const__29($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
}

function std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 32) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}

function std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($0) {
 return $0;
}

function std____2__remove_reference_std____2__allocator_wchar_t_____type___20std____2__move_std____2__allocator_wchar_t____28std____2__allocator_wchar_t___29($0) {
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 32) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__setstate_28unsigned_20int_29($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_date_order_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}

function std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20false___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 44) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 36) | 0]($0) | 0;
}

function std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 32) | 0]($0, $1);
}

function std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($0) {
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20true___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 44) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 32) | 0]($0, $1);
}

function std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($0, $1) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0, $1) | 0;
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1) {}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0) {
 $0 = $0 | 0;
 std____2__ios_base___ios_base_28_29($0);
 return $0 | 0;
}

function std____2____wrap_iter_wchar_t_20const____operator___28long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + ($1 << 2) | 0);
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  $0 = wmemmove($0, $1, $2);
 }
 return $0;
}

function std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0) {
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
 if ($1) {
  __uselocale($1);
 }
 return $0;
}

function emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29() {
 return 3244;
}

function std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 44) | 0]($0, $1);
}

function std____2__locale____imp__make_global_28_29() {
 std____2__locale__locale_28std____2__locale_20const__29(26292, std____2__locale__classic_28_29());
 return 26292;
}

function std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  $0 = wmemcpy($0, $1, $2);
 }
 return $0;
}

function std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 44) | 0]($0, $1);
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__setstate_28unsigned_20int_29($0, $1);
}

function bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 return $0 >>> 0 < $2 >>> 0 & $0 >>> 0 >= $1 >>> 0;
}

function std____2__moneypunct_char_2c_20false___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function __cxxabiv1___28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
 return char_20const__20std____2__addressof_char_20const__28char_20const__29($0);
}

function std____2__moneypunct_wchar_t_2c_20false____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__moneypunct_char_2c_20true___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function std____2__ios_base__setf_28unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
 SAFE_HEAP_STORE_i32_4_4($0, 4, $2 | $1);
 return $2;
}

function std____2__ctype_wchar_t___widen_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 44) | 0]($0, $1) | 0;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}

function std____2____wrap_iter_wchar_t____operator__28long_29_20const($0, $1) {
 return std____2____wrap_iter_wchar_t____operator__28long_29_20const_1($0, 0 - $1 | 0);
}

function std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($0) {
 return $0;
}

function std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($0) {
 return $0;
}

function std____2__remove_reference_std____2__allocator_char_____type___20std____2__move_std____2__allocator_char____28std____2__allocator_char___29($0) {
 return $0;
}

function std____2__numpunct_wchar_t___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__numpunct_wchar_t___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__moneypunct_wchar_t_2c_20true____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__ctype_char___toupper_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0, $1) | 0;
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__operator_20bool_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0) {
 $0 = $0 | 0;
 std____2__ios_base___ios_base_28_29($0);
 return $0 | 0;
}

function legalfunc$_embind_register_bigint($0, $1, $2, $3, $4, $5, $6) {
 legalimport$_embind_register_bigint($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0);
}

function emscripten__internal__TypeID_unsigned_20long_20long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20long_20long___get_28_29();
}

function std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($0) {
 return $0;
}

function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2__fpos___mbstate_t___fpos_28long_20long_29($0, $1, $2) {
 SAFE_HEAP_STORE_i64_8_8($0, 8, $1, $2);
 SAFE_HEAP_STORE_i64_8_8($0, 0, 0, 0);
 return $0;
}

function char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 SAFE_HEAP_STORE_i32_1_1($0, 0, $1 + 48 | 0);
 return $0 + 1 | 0;
}

function void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($0) {
 return $0;
}

function std____2__moneypunct_char_2c_20false____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__ctype_char___widen_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0, $1) | 0;
}

function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (($1 | 0) > -1 ? $1 : $2) | 0;
}

function std____2____wrap_iter_wchar_t____operator___28long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + ($1 << 2) | 0);
 return $0;
}

function void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0, $1) {
 void_20std____2____libcpp_operator_delete_void___28void__29($0);
}

function std____2__numpunct_char___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 16) | 0]($0) | 0;
}

function std____2__numpunct_char___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0]($0) | 0;
}

function std____2__moneypunct_char_2c_20true____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 if ($1) {
  $0 = wmemset($0, $2, $1);
 }
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1) {}

function std____2__numeric_limits_unsigned_20long_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___min_28_29();
}

function std____2__numeric_limits_unsigned_20long_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___max_28_29();
}

function std____2____wrap_iter_char_20const____operator___28long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0);
 return $0;
}

function std____2___28anonymous_20namespace_29__release__operator_28_29_28std____2__locale__facet__29($0) {
 std____2____shared_count____release_shared_28_29($0);
}

function std____2__moneypunct_wchar_t_2c_20false___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}

function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}

function std____2____wrap_iter_char____operator__28long_29_20const($0, $1) {
 return std____2____wrap_iter_char____operator__28long_29_20const_1($0, 0 - $1 | 0);
}

function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29($0) {
 SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0, 1);
}

function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20_____invalidate_all_iterators_28_29($0) {}

function std____2__moneypunct_wchar_t_2c_20true___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}

function std____2__moneypunct_wchar_t_2c_20true___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
}

function std____2__numpunct_wchar_t___falsename_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__moneypunct_wchar_t_2c_20false___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__moneypunct_wchar_t_2c_20false___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__locale__facet____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 4) | 0]($0);
}

function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_1_1($0, 0);
}

function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
 return $1 - $0 >> 2;
}

function std____2__numpunct_wchar_t___truename_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__numpunct_wchar_t___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function std____2__numeric_limits_unsigned_20short___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() & 65535;
}

function std____2__numeric_limits_unsigned_20short___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() & 65535;
}

function std____2__moneypunct_wchar_t_2c_20true___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__moneypunct_wchar_t_2c_20true___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}

function std____2____shared_count____shared_count_28long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 SAFE_HEAP_STORE_i32_4_4($0, 0, 12952);
 return $0;
}

function std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
}

function std____2__numpunct_wchar_t____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__numpunct_wchar_t____numpunct_28_29($0));
}

function std____2__numpunct_char___falsename_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0]($0, $1);
}

function std____2__numeric_limits_signed_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}

function std____2__numeric_limits_signed_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() << 24 >> 24;
}

function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__moneypunct_char_2c_20false___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__ios_base__setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__clear_28unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 16) | $1);
}

function std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memmove($0, $1, $2);
 }
 return $0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($0) {
 return std____2__ios_base__rdbuf_28_29_20const($0);
}

function std____2____wrap_iter_wchar_t_20const____operator___28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 4 | 0);
 return $0;
}

function std____2____basic_string_common_true_____throw_out_of_range_28_29_20const($0) {
 std____2____throw_out_of_range_28char_20const__29(1686);
 abort();
}

function std____2____basic_string_common_true_____throw_length_error_28_29_20const($0) {
 std____2____throw_length_error_28char_20const__29(1686);
 abort();
}

function std____2__numpunct_char___truename_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 24) | 0]($0, $1);
}

function std____2__numpunct_char___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20) | 0]($0, $1);
}

function std____2__moneypunct_char_2c_20true___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__moneypunct_char_2c_20true___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE_i32_4_1($0, 0, 67109634);
}

function std____2__moneypunct_char_2c_20false___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}

function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}

function std____2__ios_base__width_28long_29($0, $1) {
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
 SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
 return $2;
}

function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memcpy($0, $1, $2);
 }
 return $0;
}

function std____2____vector_base_common_true_____throw_length_error_28_29_20const($0) {
 std____2____throw_length_error_28char_20const__29(1320);
 abort();
}

function std____2__numeric_limits_unsigned_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() & 255;
}

function std____2__numeric_limits_unsigned_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() & 255;
}

function std____2__moneypunct_char_2c_20true___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}

function std____2__moneypunct_char_2c_20true___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const($0) {
 return std____2__ios_base__good_28_29_20const($0);
}

function std____2____wrap_iter_char____operator___28long_29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0);
 return $0;
}

function emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20short___get_28_29();
}

function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0) {
 return $0;
}

function std____2____wrap_iter_char_20const____operator___28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
 return $0;
}

function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2030ul__2c_201_2c_20false_____get_28_29($0) {
 return $0;
}

function std____2__messages_wchar_t____messages_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__collate_wchar_t____collate_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__collate_wchar_t____collate_28_29($0));
}

function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0) {}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}

function emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20long___get_28_29();
}

function emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20char___get_28_29();
}

function emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__val___get_28_29();
}

function unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2__numpunct_char____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__numpunct_char____numpunct_28_29($0));
}

function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
 SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0) {
 return std____2__ios_base__rdbuf_28_29_20const($0);
}

function emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20int___get_28_29();
}

function std____2__messages_char____messages_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2____sso_allocator_std____2__locale__facet__2c_2030ul_____sso_allocator_28_29($0) {
 SAFE_HEAP_STORE_i32_1_1($0, 128, 0);
 return $0;
}

function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($0, $1) {
 return $1 - $0 | 0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($0) {
 return !SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2__numeric_limits_unsigned_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29();
}

function std____2__numeric_limits_unsigned_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29();
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($0) {
 return std____2__ios_base__good_28_29_20const($0);
}

function std____2____wrap_iter_wchar_t____operator___28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 4 | 0);
 return $0;
}

function emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_signed_20char___get_28_29();
}

function __syscall_ret($0) {
 if ($0 >>> 0 >= 4294963201) {
  SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, 0 - $0 | 0);
  $0 = -1;
 }
 return $0;
}

function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}

function std____2__numeric_limits_unsigned_20int___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29();
}

function std____2__numeric_limits_unsigned_20int___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29();
}

function std____2__ctype_wchar_t____ctype_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}

function std____2__collate_char____collate_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__collate_char____collate_28_29($0));
}

function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0) | 0;
}

function void_20emscripten__internal__raw_destructor_WorldJS__28WorldJS__29($0) {
 $0 = $0 | 0;
 if ($0) {
  operator_20delete_28void__29($0);
 }
}

function std____2____wrap_iter_char____operator___28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
 return $0;
}

function __strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return memcpy($2, $0, $1);
}

function emscripten__internal__TypeID_long_20long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_long_20long___get_28_29();
}

function emscripten__internal__Invoker_WorldJS____invoke_28WorldJS__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[$0 | 0]() | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0) {}

function std____2__pointer_traits_wchar_t____pointer_to_28wchar_t__29($0) {
 return wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($0);
}

function std____2__locale__facet___facet_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__locale__facet___facet_28_29($0));
}

function std____2__locale____imp_____imp_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__locale____imp_____imp_28_29($0));
}

function std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1) | 0;
}

function std____2____shared_count____add_shared_28_29($0) {
 long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0 + 4 | 0);
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() {
 return 3;
}

function void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0) {
 return operator_20new_28unsigned_20long_29($0);
}

function unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($0) {
 return $0;
}

function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 72);
}

function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() {
 return 5;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() {
 return 1;
}

function std____2__numeric_limits_short___min_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() << 16 >> 16;
}

function std____2__numeric_limits_short___max_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() << 16 >> 16;
}

function std____2__numeric_limits_long_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_long_20long_2c_20true___min_28_29();
}

function std____2__numeric_limits_long_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_long_20long_2c_20true___max_28_29();
}

function std____2__locale___locale_28_29($0) {
 std____2____shared_count____release_shared_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
 return $0;
}

function std____2____stdinbuf_char___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 0) | 0;
}

function double_20std____2____do_strtod_double__28char_20const__2c_20char___29($0, $1) {
 return strtod_l($0, $1, std____2____cloc_28_29());
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() {
 return 5;
}

function dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 return FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() {
 return 0;
}

function unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($0) {
 return $0;
}

function std____2__numeric_limits_char___min_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() << 24 >> 24;
}

function std____2__numeric_limits_char___max_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() << 24 >> 24;
}

function std____2__ios_base___ios_base_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__ios_base___ios_base_28_29($0));
}

function std____2__ctype_char____ctype_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__ctype_char____ctype_28_29($0));
}

function float_20std____2____do_strtod_float__28char_20const__2c_20char___29($0, $1) {
 return strtof_l($0, $1, std____2____cloc_28_29());
}

function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}

function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
 $0 = $0 | 0;
 std__type_info___type_info_28_29($0);
 return $0 | 0;
}

function std____2__locale__facet___facet_28_29($0) {
 $0 = $0 | 0;
 std____2____shared_count_____shared_count_28_29($0);
 return $0 | 0;
}

function std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2____stdinbuf_char___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 1) | 0;
}

function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 72);
}

function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
 return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}

function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}

function std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($0) {
 return $0;
}

function std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($0) {
 return $0;
}

function std____2__ios_base__getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
}

function std____2____time_get_c_storage_wchar_t_____time_get_c_storage_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18596);
 return $0;
}

function emscripten__internal__TypeID_double_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_double___get_28_29();
}

function std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0) {
 return $0;
}

function std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___max_28_29() {
 i64toi32_i32$HIGH_BITS = -1;
 return -1;
}

function std____2__numpunct_wchar_t___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0;
}

function std____2__numeric_limits_wchar_t___max_28_29() {
 return std____2____libcpp_numeric_limits_wchar_t_2c_20true___max_28_29();
}

function std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
 return ($0 | 0) == ($1 | 0);
}

function matlab_round($0) {
 $0 = ($0 > 0 ? .5 : -.5) + $0;
 if (Math_abs($0) < 2147483648) {
  return ~~$0;
 }
 return -2147483648;
}

function emscripten__internal__TypeID_short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_short___get_28_29();
}

function emscripten__internal__TypeID_float_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_float___get_28_29();
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() {
 return 7;
}

function std____2__numpunct_wchar_t___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0;
}

function std____2__collate_wchar_t____collate_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2____time_get_c_storage_char_____time_get_c_storage_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 18560);
 return $0;
}

function std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___min_28_29() {
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}

function fabsl($0, $1, $2, $3, $4) {
 SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4 & 2147483647);
 SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() {
 return 2;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() {
 return 6;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___showmanyc_28_29($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____libcpp_numeric_limits_long_20long_2c_20true___min_28_29() {
 i64toi32_i32$HIGH_BITS = -2147483648;
 return 0;
}

function std____2____libcpp_numeric_limits_long_20long_2c_20true___max_28_29() {
 i64toi32_i32$HIGH_BITS = 2147483647;
 return -1;
}

function emscripten__internal__TypeID_void_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_void___get_28_29();
}

function emscripten__internal__TypeID_long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_long___get_28_29();
}

function emscripten__internal__TypeID_char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_char___get_28_29();
}

function emscripten__internal__TypeID_bool_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_bool___get_28_29();
}

function dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 return FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() {
 return 4;
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() {
 return 0;
}

function _GLOBAL__sub_I_WorldJS_cpp() {
 EmscriptenBindingInitializer_WorldJS__EmscriptenBindingInitializer_WorldJS_28_29(25984);
}

function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() {
 return 4;
}

function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD_i32_1_1($0, 9) | 0;
}

function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD_i32_1_1($0, 8) | 0;
}

function std____2__collate_char____collate_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}

function std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29($0, $1) {
 return pthread_cond_wait($0, $1);
}

function emscripten__internal__TypeID_int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_int___get_28_29();
}

function std____2__pointer_traits_char____pointer_to_28char__29($0) {
 return char__20std____2__addressof_char__28char__29($0);
}

function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29_20const($0) {
 return $0;
}

function std____2__unitbuf_28std____2__ios_base__29($0) {
 std____2__ios_base__setf_28unsigned_20int_29($0, 8192);
 return $0;
}

function std____2__numeric_limits_long___min_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___min_28_29();
}

function std____2__numeric_limits_long___max_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___max_28_29();
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sync_28_29($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function __wasi_syscall_ret($0) {
 if (!$0) {
  return 0;
 }
 SAFE_HEAP_STORE_i32_4_4(__errno_location(), 0, $0);
 return -1;
}

function __ctype_get_mb_cur_max() {
 return SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(__pthread_self(), 172), 0) ? 4 : 1;
}

function WorldJS__20emscripten__internal__operator_new_WorldJS__28_29() {
 return operator_20new_28unsigned_20long_29(1) | 0;
}

function std____2__numeric_limits_int___min_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___min_28_29();
}

function std____2__numeric_limits_int___max_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___max_28_29();
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___showmanyc_28_29($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0, $1) {
 return $0;
}

function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0, $1) {
 return $0;
}

function std____2____time_put____time_put_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, std____2____cloc_28_29());
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0) {
 return $0;
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 4;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 4;
}

function strchr($0, $1) {
 $0 = __strchrnul($0, $1);
 return ($1 & 255) == (SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) ? $0 : 0;
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
 return $0;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}

function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($0) {
 return $0;
}

function std____2__ctype_char_____classic_upper_table_28_29() {
 return SAFE_HEAP_LOAD_i32_4_4(__ctype_toupper_loc(), 0);
}

function std____2__ctype_char_____classic_lower_table_28_29() {
 return SAFE_HEAP_LOAD_i32_4_4(__ctype_tolower_loc(), 0);
}

function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____num_get_char_____do_widen_p_28std____2__ios_base__2c_20char__29_20const($0, $1, $2) {
 return 13008;
}

function std____2____wrap_iter_char______wrap_iter_28char__29($0, $1) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 return $0;
}

function std____2____sso_allocator_std____2__locale__facet__2c_2030ul___max_size_28_29_20const($0) {
 return 1073741823;
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}

function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}

function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0, $1) {
 return $0;
}

function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, $1) {
 return $0;
}

function std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($0) {
 return $0;
}

function void_20const__20emscripten__internal__getActualType_WorldJS__28WorldJS__29($0) {
 $0 = $0 | 0;
 return 2984;
}

function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
 return SAFE_HEAP_LOAD_i32_4_4($0 + $1 | 0, 0);
}

function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}

function std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0) {
 return $0;
}

function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29() {
 return 4544;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
 return $0;
}

function std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29() {
 return 4704;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29() {
 return 4464;
}

function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(dummy_1(SAFE_HEAP_LOAD_i32_4_4($0, 60)) | 0) | 0;
}

function wchar_t__20std____2__end_wchar_t_2c_2010ul__28wchar_t_20_28__29_20_5b10ul_5d_29($0) {
 return $0 + 40 | 0;
}

function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($0) {
 return $0;
}

function std____2__ctype_wchar_t___do_widen_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}

function std____2____wrap_iter_char_20const____operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29() {
 return 4624;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29() {
 return 4424;
}

function std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function fputs($0, $1) {
 var $2 = 0;
 $2 = strlen($0);
 return ($2 | 0) != (fwrite($0, 1, $2, $1) | 0) ? -1 : 0;
}

function dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
 return FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6) | 0;
}

function std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($0) {
 return $0;
}

function std____2__ctype_char___do_widen_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}

function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = __stack_pointer - $0 & -16;
 __stack_pointer = $0;
 return $0 | 0;
}

function do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __string_read($0, $1, $2) | 0;
}

function unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($0) {
 return 0 - $0 | 0;
}

function std____2__moneypunct_wchar_t_2c_20false___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____wrap_iter_wchar_t____operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2____wrap_iter_char_20const____base_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function void_20std____2____libcpp_operator_delete_void___28void__29($0) {
 operator_20delete_28void__29($0);
}

function std____2__remove_reference_double____type___20std____2__move_double___28double__29($0) {
 return $0;
}

function std____2__moneypunct_wchar_t_2c_20true___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2____libcpp_condvar_broadcast_28pthread_cond_t__29($0) {
 return pthread_cond_broadcast($0);
}

function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($0) {
 return $0;
}

function wchar_t_20const__20std____2____to_address_wchar_t_20const__28wchar_t_20const__29($0) {
 return $0;
}

function std____2__moneypunct_char_2c_20false___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function std____2__ctype_char___classic_table_28_29() {
 return SAFE_HEAP_LOAD_i32_4_4(__ctype_b_loc(), 0);
}

function std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, $1) {
 return ($0 | 0) == ($1 | 0);
}

function std____2____wrap_iter_char____operator__28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29() {
 return 3516;
}

function std____2__moneypunct_char_2c_20true___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29() {
 return 4504;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29() {
 return 4744;
}

function char__20std____2__end_char_2c_2010ul__28char_20_28__29_20_5b10ul_5d_29($0) {
 return $0 + 10 | 0;
}

function std____2____wrap_iter_wchar_t____base_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}

function operator_20new_5b_5d_28unsigned_20long_29($0) {
 return operator_20new_28unsigned_20long_29($0);
}

function emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29() {
 return 4664;
}

function emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29() {
 return 4384;
}

function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 return $3;
}

function wchar_t_20const__20std____2__addressof_wchar_t_20const__28wchar_t_20const__29($0) {
 return $0;
}

function std____2__allocator_std____2__locale__facet____max_size_28_29_20const($0) {
 return 1073741823;
}

function std____2____libcpp_mutex_unlock_28pthread_mutex_t__29($0) {
 return __pthread_mutex_unlock($0);
}

function emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29() {
 return 4584;
}

function std____2__remove_reference_char____type___20std____2__move_char___28char__29($0) {
 return $0;
}

function std____2__messages_wchar_t___do_close_28long_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}

function std____2____wrap_iter_char____base_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function out($0, $1, $2) {
 if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 32)) {
  __fwritex($1, $2, $0);
 }
}

function dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
 FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6);
}

function std____2__make_unsigned_int___type_20std____2____to_unsigned_int__28int_29($0) {
 return $0;
}

function __cxx_global_array_dtor_1($0) {
 $0 = $0 | 0;
 std____2__DoIOSInit___DoIOSInit_28_29(31228);
}

function std____2__ios_base__ios_base_28_29($0) {
 SAFE_HEAP_STORE_i32_4_4($0, 0, 7672);
 return $0;
}

function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() {
 return 65535;
}

function std____2____libcpp_mutex_lock_28pthread_mutex_t__29($0) {
 return __pthread_mutex_lock($0);
}

function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function std____2__messages_char___do_close_28long_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}

function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
 return $0;
}

function std____2__ios_base__precision_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 8);
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() {
 return 255;
}

function std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}

function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 - 1 ^ $0) | 0;
 }
 return 32;
}
function std____2____libcpp_numeric_limits_wchar_t_2c_20true___max_28_29() {
 return 2147483647;
}

function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29() {
 return -1;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() {
 return -128;
}

function emscripten__internal__LightTypeID_unsigned_20long_20long___get_28_29() {
 return 20736;
}

function std____2__char_traits_wchar_t___length_28wchar_t_20const__29($0) {
 return wcslen($0);
}

function std____2____time_get_c_storage_wchar_t______time_get_c_storage_28_29($0) {
 return $0;
}

function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29() {
 return -1;
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() {
 return 127;
}

function char_20const__20std____2__addressof_char_20const__28char_20const__29($0) {
 return $0;
}

function std__uncaught_exception_28_29() {
 return (std__uncaught_exceptions_28_29() | 0) > 0;
}

function std____2__ios_base__width_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 12);
}

function std____2__ios_base__rdbuf_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 24);
}

function std____2__ios_base__good_28_29_20const($0) {
 return !SAFE_HEAP_LOAD_i32_4_4($0, 16);
}

function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_long_2c_20true___min_28_29() {
 return -2147483648;
}

function __loc_is_allocated($0) {
 return ($0 | 0) != 0 & ($0 | 0) != 8944 & ($0 | 0) != 8968;
}

function std____2__ios_base__flags_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 4);
}

function std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() {
 return 2147483647;
}

function std____2____libcpp_numeric_limits_int_2c_20true___min_28_29() {
 return -2147483648;
}

function std____2____time_get_c_storage_char______time_get_c_storage_28_29($0) {
 return $0;
}

function std____2____shared_count_____shared_count_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function std____2____libcpp_numeric_limits_int_2c_20true___max_28_29() {
 return 2147483647;
}

function std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($0) {
 return $0;
}

function std____2____vector_base_common_true_____vector_base_common_28_29($0) {
 return $0;
}

function Wav2World__GetTimeAxis_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 16);
}

function Wav2World__GetF0Length_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 20);
}

function std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() {
 return -32768;
}

function emscripten__internal__LightTypeID_unsigned_20short___get_28_29() {
 return 20664;
}

function Wav2World__GetFFTSize_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 32);
}

function InitializeD4COption($0) {
 SAFE_HEAP_STORE_i64_8_8($0, 0, 858993459, 1072378675);
}

function std____2__char_traits_char___to_char_type_28int_29($0) {
 return $0 << 24 >> 24;
}

function std____2__char_traits_char___length_28char_20const__29($0) {
 return strlen($0);
}

function std____2__allocator_std____2__locale__facet____allocator_28_29($0) {
 return $0;
}

function std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() {
 return 32767;
}

function mbsinit($0) {
 if (!$0) {
  return 1;
 }
 return !SAFE_HEAP_LOAD_i32_4_4($0, 0);
}

function emscripten__internal__LightTypeID_unsigned_20long___get_28_29() {
 return 20712;
}

function emscripten__internal__LightTypeID_unsigned_20char___get_28_29() {
 return 20628;
}

function std____2____shared_count_____shared_count_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}

function emscripten__internal__LightTypeID_unsigned_20int___get_28_29() {
 return 20688;
}

function emscripten__internal__LightTypeID_emscripten__val___get_28_29() {
 return 3124;
}

function std____2__allocator_wchar_t___max_size_28_29_20const($0) {
 return 1073741823;
}

function std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() {
 return -128;
}

function emscripten__internal__LightTypeID_signed_20char___get_28_29() {
 return 20640;
}

function std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() {
 return 127;
}

function wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($0) {
 return $0;
}

function std____2____throw_runtime_error_28char_20const__29($0) {
 abort();
 abort();
}

function emscripten__internal__LightTypeID_long_20long___get_28_29() {
 return 20724;
}

function Wav2World__GetSP_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 24);
}

function Wav2World__GetF0_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 12);
}

function Wav2World__GetAP_28_29_20const($0) {
 return SAFE_HEAP_LOAD_i32_4_4($0, 28);
}

function std____2____throw_out_of_range_28char_20const__29($0) {
 abort();
 abort();
}

function std____2____throw_length_error_28char_20const__29($0) {
 abort();
 abort();
}

function operator_20delete_5b_5d_28void__29($0) {
 operator_20delete_28void__29($0);
}

function wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($0) {
 return $0;
}

function std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($0) {
 return $0;
}

function std____2__char_traits_char___to_int_type_28char_29($0) {
 return $0 & 255;
}

function isxdigit($0) {
 return (isdigit($0) | 0) != 0 | ($0 | 32) - 97 >>> 0 < 6;
}

function __cxx_global_var_init_1() {
 std____2__ios_base__Init__Init_28_29(30872);
}

function emscripten_stack_init() {
 __stack_base = 5274704;
 __stack_end = 31824;
}

function emscripten_stack_get_free() {
 return __stack_pointer - __stack_end | 0;
}

function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1, 0);
}

function wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($0) {
 return $0;
}

function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 34, 35);
}

function std__uncaught_exceptions_28_29() {
 return __cxa_uncaught_exceptions();
}

function emscripten__internal__LightTypeID_double___get_28_29() {
 return 20760;
}

function std____2____throw_failure_28char_20const__29($0) {
 abort();
 abort();
}

function emscripten__internal__LightTypeID_short___get_28_29() {
 return 20652;
}

function emscripten__internal__LightTypeID_float___get_28_29() {
 return 20748;
}

function emscripten__internal__LightTypeID_void___get_28_29() {
 return 20580;
}

function emscripten__internal__LightTypeID_long___get_28_29() {
 return 20700;
}

function emscripten__internal__LightTypeID_char___get_28_29() {
 return 20616;
}

function emscripten__internal__LightTypeID_bool___get_28_29() {
 return 20604;
}

function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
 $0 = $0 | 0;
}

function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
 $0 = $0 | 0;
}

function emscripten__internal__LightTypeID_int___get_28_29() {
 return 20676;
}

function std____2__allocator_char___max_size_28_29_20const($0) {
 return -1;
}

function std____2____money_put_wchar_t_____money_put_28_29($0) {
 return $0;
}

function std____2____money_get_wchar_t_____money_get_28_29($0) {
 return $0;
}

function char__20std____2____unwrap_iter_char___28char__29($0) {
 return $0;
}

function strtoll($0, $1, $2) {
 return strtox($0, $1, $2, 0, -2147483648);
}

function mbrlen($0, $1, $2) {
 return mbrtowc(0, $0, $1, $2 ? $2 : 26108);
}

function char__20std____2____to_address_char__28char__29($0) {
 return $0;
}

function std____2____money_put_char_____money_put_28_29($0) {
 return $0;
}

function std____2____money_get_char_____money_get_28_29($0) {
 return $0;
}

function freelocale($0) {
 if (__loc_is_allocated($0)) {
  dlfree($0);
 }
}

function emscripten_get_heap_size() {
 return __wasm_memory_size() << 16;
}

function EM_TERM_28_29() {
 emscripten_asm_const_int(25812, 3484, 0) | 0;
}

function std____2__allocator_wchar_t___allocator_28_29($0) {
 return $0;
}

function std____2__messages_base__messages_base_28_29($0) {
 return $0;
}

function char__20std____2__addressof_char__28char__29($0) {
 return $0;
}

function std____2__codecvt_base__codecvt_base_28_29($0) {
 return $0;
}

function std____2__allocator_char___allocator_28_29($0) {
 return $0;
}

function fseek($0, $1, $2) {
 return __fseeko($0, $1, $1 >> 31, $2);
}

function strtoull_l($0, $1, $2, $3) {
 return strtoull($0, $1, $2);
}

function strtoull($0, $1, $2) {
 return strtox($0, $1, $2, -1, -1);
}

function std____2__char_traits_wchar_t___eof_28_29() {
 return -1;
}

function __cxx_global_var_init() {
 FUNCTION_TABLE[27](26004) | 0;
}

function __cxa_pure_virtual() {
 abort_message(2889, 0);
 abort();
}

function strtoll_l($0, $1, $2, $3) {
 return strtoll($0, $1, $2);
}

function std____2__money_base__money_base_28_29($0) {
 return $0;
}

function std____2__ctype_base__ctype_base_28_29($0) {
 return $0;
}

function std____2____throw_bad_cast_28_29() {
 abort();
 abort();
}

function isspace($0) {
 return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
}

function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}

function stackRestore($0) {
 $0 = $0 | 0;
 __stack_pointer = $0;
}

function emscripten_stack_get_base() {
 return __stack_base | 0;
}

function std____2__char_traits_char___eof_28_29() {
 return -1;
}

function std____2____do_nothing_28void__29($0) {
 $0 = $0 | 0;
}

function emscripten_stack_get_end() {
 return __stack_end | 0;
}

function _GLOBAL__sub_I_bind_cpp() {
 __cxx_global_var_init();
}

function std____throw_bad_alloc_28_29() {
 abort();
 abort();
}

function std__type_info___type_info_28_29($0) {
 return $0;
}

function _GLOBAL__I_000101() {
 __cxx_global_var_init_1();
}

function operator_20delete_28void__29($0) {
 dlfree($0);
}

function strtof_l($0, $1, $2) {
 return strtof($0, $1);
}

function strtod_l($0, $1, $2) {
 return strtod($0, $1);
}

function __ofl_lock() {
 __lock(26008);
 return 26016;
}

function __isxdigit_l($0, $1) {
 return isxdigit($0);
}

function stackSave() {
 return __stack_pointer | 0;
}

function emscripten_get_sbrk_ptr() {
 return 25808;
}

function __isdigit_l($0, $1) {
 return isdigit($0);
}

function isdigit($0) {
 return $0 - 48 >>> 0 < 10;
}

function __cxa_uncaught_exceptions() {
 return 0;
}

function pthread_cond_broadcast($0) {
 return 0;
}

function ldexp($0, $1) {
 return scalbn($0, $1);
}

function __pthread_mutex_unlock($0) {
 return 0;
}

function pthread_cond_wait($0, $1) {
 return 0;
}

function __ctype_tolower_loc() {
 return 11392;
}

function __pthread_mutex_lock($0) {
 return 0;
}

function __ctype_toupper_loc() {
 return 9840;
}

function floor($0) {
 return Math_floor($0);
}

function __errno_location() {
 return 26084;
}

function __ofl_unlock() {
 __unlock(26008);
}

function sqrt($0) {
 return Math_sqrt($0);
}

function abort_message($0, $1) {
 abort();
}

function __pthread_self() {
 return 25136;
}

function __fe_raise_inexact() {
 return 0;
}

function fabs($0) {
 return Math_abs($0);
}

function __ctype_b_loc() {
 return 9064;
}

function _GLOBAL__sub_I_iostream_cpp() {}

function __fe_getround() {
 return 0;
}

function __lockfile($0) {
 return 1;
}

function dummy_1($0) {
 return $0;
}

function __unlockfile($0) {}

function __unlock($0) {}

function __lock($0) {}

function dummy($0) {}


// EMSCRIPTEN_END_FUNCS

;
 bufferView = HEAPU8;
 var FUNCTION_TABLE = Table([null, void_20const__20emscripten__internal__getActualType_WorldJS__28WorldJS__29, void_20emscripten__internal__raw_destructor_WorldJS__28WorldJS__29, emscripten__internal__Invoker_WorldJS____invoke_28WorldJS__20_28__29_28_29_29, WorldJS__20emscripten__internal__operator_new_WorldJS__28_29, emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29, WorldJS__DisplayInformation_28int_2c_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29, WorldJS__WavRead_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, emscripten__internal__Invoker_emscripten__val_2c_20int_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29, WorldJS__GetInformation_28int_2c_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal___EM_VAL__2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29, WorldJS__WavWrite_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20int_2c_20double___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20int_2c_20double_29_2c_20emscripten__internal___EM_VAL__2c_20int_2c_20double_29, WorldJS__Dio_28emscripten__val_2c_20int_2c_20double_29, WorldJS__Harvest_28emscripten__val_2c_20int_2c_20double_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_29, WorldJS__CheapTrick_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_2c_20int_29, WorldJS__D4C_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29_2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20emscripten__internal___EM_VAL__2c_20int_2c_20int_2c_20emscripten__internal___EM_VAL__29, WorldJS__Synthesis_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29, emscripten__internal__Invoker_void_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_29_2c_20emscripten__internal___EM_VAL__29, WorldJS__DisplayInformationVal_28emscripten__val_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28emscripten__val_20const__29_2c_20emscripten__internal___EM_VAL__29, WorldJS__GetInformationVal_28emscripten__val_20const__29, WorldJS__Wav2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, std____2__ios_base___ios_base_28_29, std____2__ios_base___ios_base_28_29_1, fmt_fp, pop_arg_long_double, sn_write, do_read, std____2____shared_count_____shared_count_28_29, std____2____shared_count_____shared_count_28_29_1, __cxa_pure_virtual, dlfree, std____2____do_nothing_28void__29, std____2__locale__id____init_28_29, void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29, __cxx_global_array_dtor_55, __cxx_global_array_dtor_70, __cxx_global_array_dtor_85, __cxx_global_array_dtor_109, __cxx_global_array_dtor_133, __cxx_global_array_dtor_136, __cxx_global_array_dtor, __cxx_global_array_dtor_32, __cxx_global_array_dtor_34, __cxx_global_array_dtor_36, __cxx_global_array_dtor_38, __cxx_global_array_dtor_40, __cxx_global_array_dtor_42, __cxx_global_array_dtor_44, std____2__locale____imp_____imp_28_29, std____2__locale____imp_____imp_28_29_1, std____2__locale__facet____on_zero_shared_28_29, std____2__ctype_char____ctype_28_29, std____2__ctype_char____ctype_28_29_1, std____2__ctype_char___do_toupper_28char_29_20const, std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const, std____2__ctype_char___do_tolower_28char_29_20const, std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const, std____2__ctype_char___do_widen_28char_29_20const, std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const, std____2__ctype_char___do_narrow_28char_2c_20char_29_20const, std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__numpunct_char____numpunct_28_29, std____2__numpunct_char____numpunct_28_29_1, std____2__numpunct_char___do_decimal_point_28_29_20const, std____2__numpunct_char___do_thousands_sep_28_29_20const, std____2__numpunct_char___do_grouping_28_29_20const, std____2__numpunct_char___do_truename_28_29_20const, std____2__numpunct_char___do_falsename_28_29_20const, std____2__numpunct_wchar_t____numpunct_28_29, std____2__numpunct_wchar_t____numpunct_28_29_1, std____2__numpunct_wchar_t___do_decimal_point_28_29_20const, std____2__numpunct_wchar_t___do_thousands_sep_28_29_20const, std____2__numpunct_wchar_t___do_grouping_28_29_20const, std____2__numpunct_wchar_t___do_truename_28_29_20const, std____2__numpunct_wchar_t___do_falsename_28_29_20const, std____2__locale__facet___facet_28_29, std____2__locale__facet___facet_28_29_1, std____2__ctype_wchar_t____ctype_28_29, std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const, std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const, std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_widen_28char_29_20const, std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__collate_char____collate_28_29, std____2__collate_char____collate_28_29_1, std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const, std____2__collate_wchar_t____collate_28_29, std____2__collate_wchar_t____collate_28_29_1, std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_get_28_29, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_get_28_29, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_put_28_29, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_put_28_29, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29_1, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_date_order_28_29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_char_____weeks_28_29_20const, std____2____time_get_c_storage_char_____months_28_29_20const, std____2____time_get_c_storage_char_____am_pm_28_29_20const, std____2____time_get_c_storage_char_____c_28_29_20const, std____2____time_get_c_storage_char_____r_28_29_20const, std____2____time_get_c_storage_char_____x_28_29_20const, std____2____time_get_c_storage_char_____X_28_29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29_1, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_date_order_28_29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const, std____2____time_get_c_storage_wchar_t_____months_28_29_20const, std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const, std____2____time_get_c_storage_wchar_t_____c_28_29_20const, std____2____time_get_c_storage_wchar_t_____r_28_29_20const, std____2____time_get_c_storage_wchar_t_____x_28_29_20const, std____2____time_get_c_storage_wchar_t_____X_28_29_20const, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1, std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29, std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2__moneypunct_char_2c_20false____moneypunct_28_29, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_thousands_sep_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_curr_symbol_28_29_20const, std____2__moneypunct_char_2c_20false___do_positive_sign_28_29_20const, std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const, std____2__moneypunct_char_2c_20false___do_frac_digits_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_neg_format_28_29_20const, std____2__moneypunct_char_2c_20true____moneypunct_28_29, std____2__moneypunct_char_2c_20true___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20true___do_thousands_sep_28_29_20const, std____2__moneypunct_char_2c_20true___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20true___do_curr_symbol_28_29_20const, std____2__moneypunct_char_2c_20true___do_positive_sign_28_29_20const, std____2__moneypunct_char_2c_20true___do_negative_sign_28_29_20const, std____2__moneypunct_char_2c_20true___do_frac_digits_28_29_20const, std____2__moneypunct_char_2c_20true___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20true___do_neg_format_28_29_20const, std____2__moneypunct_wchar_t_2c_20false____moneypunct_28_29, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_thousands_sep_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_positive_sign_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_frac_digits_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_neg_format_28_29_20const, std____2__moneypunct_wchar_t_2c_20true____moneypunct_28_29, std____2__moneypunct_wchar_t_2c_20true___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_thousands_sep_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_curr_symbol_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_positive_sign_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_negative_sign_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_frac_digits_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_pos_format_28_29_20const, std____2__moneypunct_wchar_t_2c_20true___do_neg_format_28_29_20const, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_get_28_29, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_get_28_29, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_put_28_29, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_put_28_29, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const, std____2__messages_char____messages_28_29, std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const, std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const, std____2__messages_char___do_close_28long_29_20const, std____2__messages_wchar_t____messages_28_29, std____2__messages_wchar_t___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const, std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const, std____2__messages_wchar_t___do_close_28long_29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___showmanyc_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___imbue_28std____2__locale_20const__29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___setbuf_28wchar_t__2c_20long_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sync_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___showmanyc_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___underflow_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pbackfail_28unsigned_20int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___overflow_28unsigned_20int_29, std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1, std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1, std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1, std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2, virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1, std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1, std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1, std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1, std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2, virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1, std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1, std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29, std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29_1, __emscripten_stdout_close, __emscripten_stdout_seek, __cxx_global_array_dtor_1, std____2____stdinbuf_char______stdinbuf_28_29, std____2____stdinbuf_char___imbue_28std____2__locale_20const__29, std____2____stdinbuf_char___underflow_28_29, std____2____stdinbuf_char___uflow_28_29, std____2____stdinbuf_char___pbackfail_28int_29, std____2____stdinbuf_wchar_t______stdinbuf_28_29, std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdinbuf_wchar_t___underflow_28_29, std____2____stdinbuf_wchar_t___uflow_28_29, std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29, std____2____stdoutbuf_char______stdoutbuf_28_29, std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_char___sync_28_29, std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29, std____2____stdoutbuf_char___overflow_28int_29, std____2____stdoutbuf_wchar_t______stdoutbuf_28_29, std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_wchar_t___sync_28_29, std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29, std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____pointer_type_info_____pointer_type_info_28_29, __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "_ZN7WorldJS3DioEN10emscripten3valEid": WorldJS__Dio_28emscripten__val_2c_20int_2c_20double_29, 
  "_ZN7WorldJS7HarvestEN10emscripten3valEid": WorldJS__Harvest_28emscripten__val_2c_20int_2c_20double_29, 
  "_ZN7WorldJS10CheapTrickEN10emscripten3valES1_S1_i": WorldJS__CheapTrick_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, 
  "_ZN7WorldJS3D4CEN10emscripten3valES1_S1_ii": WorldJS__D4C_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29, 
  "_ZN7WorldJS9SynthesisEN10emscripten3valERKS1_S3_iiS3_": WorldJS__Synthesis_28emscripten__val_2c_20emscripten__val_20const__2c_20emscripten__val_20const__2c_20int_2c_20int_2c_20emscripten__val_20const__29, 
  "_ZN7WorldJS18DisplayInformationEiii": WorldJS__DisplayInformation_28int_2c_20int_2c_20int_29, 
  "_ZN13WorldNativeIO18DisplayInformationEiii": WorldNativeIO__DisplayInformation_28int_2c_20int_2c_20int_29, 
  "_ZN7WorldJS14GetInformationEiii": WorldJS__GetInformation_28int_2c_20int_2c_20int_29, 
  "_ZN13WorldNativeIO14GetInformationEiii": WorldNativeIO__GetInformation_28int_2c_20int_2c_20int_29, 
  "_ZN7WorldJS7WavReadERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE": WorldJS__WavRead_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "_ZN13WorldNativeIO10WavRead_JSERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE": WorldNativeIO__WavRead_JS_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "_ZN7WorldJS8WavWriteEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE": WorldJS__WavWrite_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "_ZN13WorldNativeIO11WavWrite_JSEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE": WorldNativeIO__WavWrite_JS_28emscripten__val_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "_ZN7WorldJS21DisplayInformationValEN10emscripten3valE": WorldJS__DisplayInformationVal_28emscripten__val_29, 
  "_ZN14WorldJSWrapper21DisplayInformationValEN10emscripten3valE": WorldJSWrapper__DisplayInformationVal_28emscripten__val_29, 
  "_ZN7WorldJS17GetInformationValERKN10emscripten3valE": WorldJS__GetInformationVal_28emscripten__val_20const__29, 
  "_ZN14WorldJSWrapper17GetInformationValERKN10emscripten3valE": WorldJSWrapper__GetInformationVal_28emscripten__val_20const__29, 
  "_ZN7WorldJS9Wav2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE": WorldJS__Wav2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "_ZN14WorldJSWrapper7W2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE": WorldJSWrapper__W2World_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "malloc": dlmalloc, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "free": dlfree, 
  "strlen": strlen, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "sbrk": sbrk, 
  "emscripten_get_sbrk_ptr": emscripten_get_sbrk_ptr, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iiiiij": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiijj": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj, 
  "dynCall_viijii": legalstub$dynCall_viijii
};
}

  return asmFunc(asmLibraryArg);
}
// EMSCRIPTEN_END_ASM




)(asmLibraryArg);
 },
 instantiate: function(binary, info) {
  return {
   then: function(ok) {
    var module = new WebAssembly.Module(binary);
    ok({
     "instance": new WebAssembly.Instance(module)
    });
    return {
     catch: function() {}
    };
   }
  };
 },
 RuntimeError: Error
};

wasmBinary = [];

if (typeof WebAssembly !== "object") {
 abort("no native wasm support detected");
}

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 if (noSafe) {
  switch (type) {
  case "i1":
   HEAP8[ptr >> 0] = value;
   break;

  case "i8":
   HEAP8[ptr >> 0] = value;
   break;

  case "i16":
   HEAP16[ptr >> 1] = value;
   break;

  case "i32":
   HEAP32[ptr >> 2] = value;
   break;

  case "i64":
   tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
   HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
   break;

  case "float":
   HEAPF32[ptr >> 2] = value;
   break;

  case "double":
   HEAPF64[ptr >> 3] = value;
   break;

  default:
   abort("invalid type for setValue: " + type);
  }
 } else {
  switch (type) {
  case "i1":
   SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
   break;

  case "i8":
   SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
   break;

  case "i16":
   SAFE_HEAP_STORE(ptr | 0, value | 0, 2);
   break;

  case "i32":
   SAFE_HEAP_STORE(ptr | 0, value | 0, 4);
   break;

  case "i64":
   tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
   SAFE_HEAP_STORE(ptr | 0, tempI64[0] | 0, 4), SAFE_HEAP_STORE(ptr + 4 | 0, tempI64[1] | 0, 4);
   break;

  case "float":
   SAFE_HEAP_STORE_D(ptr | 0, Math.fround(value), 4);
   break;

  case "double":
   SAFE_HEAP_STORE_D(ptr | 0, +value, 8);
   break;

  default:
   abort("invalid type for setValue: " + type);
  }
 }
}

function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 if (noSafe) {
  switch (type) {
  case "i1":
   return HEAP8[ptr >> 0];

  case "i8":
   return HEAP8[ptr >> 0];

  case "i16":
   return HEAP16[ptr >> 1];

  case "i32":
   return HEAP32[ptr >> 2];

  case "i64":
   return HEAP32[ptr >> 2];

  case "float":
   return HEAPF32[ptr >> 2];

  case "double":
   return HEAPF64[ptr >> 3];

  default:
   abort("invalid type for getValue: " + type);
  }
 } else {
  switch (type) {
  case "i1":
   return SAFE_HEAP_LOAD(ptr | 0, 1, 0) | 0;

  case "i8":
   return SAFE_HEAP_LOAD(ptr | 0, 1, 0) | 0;

  case "i16":
   return SAFE_HEAP_LOAD(ptr | 0, 2, 0) | 0;

  case "i32":
   return SAFE_HEAP_LOAD(ptr | 0, 4, 0) | 0;

  case "i64":
   return SAFE_HEAP_LOAD(ptr | 0, 8, 0) | 0;

  case "float":
   return Math.fround(SAFE_HEAP_LOAD_D(ptr | 0, 4, 0));

  case "double":
   return +SAFE_HEAP_LOAD_D(ptr | 0, 8, 0);

  default:
   abort("invalid type for getValue: " + type);
  }
 }
 return null;
}

function getSafeHeapType(bytes, isFloat) {
 switch (bytes) {
 case 1:
  return "i8";

 case 2:
  return "i16";

 case 4:
  return isFloat ? "float" : "i32";

 case 8:
  return "double";

 default:
  assert(0);
 }
}

function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
 if (dest <= 0) abort("segmentation fault storing " + bytes + " bytes to address " + dest);
 if (dest % bytes !== 0) abort("alignment error storing to address " + dest + ", which was expected to be aligned to a multiple of " + bytes);
 if (runtimeInitialized) {
  var brk = _sbrk() >>> 0;
  if (dest + bytes > brk) abort("segmentation fault, exceeded the top of the available dynamic heap when storing " + bytes + " bytes to address " + dest + ". DYNAMICTOP=" + brk);
  assert(brk >= _emscripten_stack_get_base());
  assert(brk <= HEAP8.length);
 }
 setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
 return value;
}

function SAFE_HEAP_STORE_D(dest, value, bytes) {
 return SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
 if (dest <= 0) abort("segmentation fault loading " + bytes + " bytes from address " + dest);
 if (dest % bytes !== 0) abort("alignment error loading from address " + dest + ", which was expected to be aligned to a multiple of " + bytes);
 if (runtimeInitialized) {
  var brk = _sbrk() >>> 0;
  if (dest + bytes > brk) abort("segmentation fault, exceeded the top of the available dynamic heap when loading " + bytes + " bytes from address " + dest + ". DYNAMICTOP=" + brk);
  assert(brk >= _emscripten_stack_get_base());
  assert(brk <= HEAP8.length);
 }
 var type = getSafeHeapType(bytes, isFloat);
 var ret = getValue(dest, type, 1);
 if (unsigned) ret = unSign(ret, parseInt(type.substr(1), 10));
 return ret;
}

function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
 return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
 var ret = value & mask;
 if (ret !== value) {
  abort("Function table mask error: function pointer is " + value + " which is masked by " + mask + ", the likely cause of this is that the function pointer is being called by the wrong type.");
 }
 return ret;
}

function segfault() {
 abort("segmentation fault");
}

function alignfault() {
 abort("alignment fault");
}

function ftfault() {
 abort("Function table mask error");
}

var wasmMemory;

var ABORT = false;

var EXITSTATUS;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

function getCFunc(ident) {
 var func = Module["_" + ident];
 assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
 return func;
}

function ccall(ident, returnType, argTypes, args, opts) {
 var toC = {
  "string": function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    var len = (str.length << 2) + 1;
    ret = stackAlloc(len);
    stringToUTF8(str, ret, len);
   }
   return ret;
  },
  "array": function(arr) {
   var ret = stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }
 };
 function convertReturnValue(ret) {
  if (returnType === "string") return UTF8ToString(ret);
  if (returnType === "boolean") return Boolean(ret);
  return ret;
 }
 var func = getCFunc(ident);
 var cArgs = [];
 var stack = 0;
 assert(returnType !== "array", 'Return type should not be "array".');
 if (args) {
  for (var i = 0; i < args.length; i++) {
   var converter = toC[argTypes[i]];
   if (converter) {
    if (stack === 0) stack = stackSave();
    cArgs[i] = converter(args[i]);
   } else {
    cArgs[i] = args[i];
   }
  }
 }
 var ret = func.apply(null, cArgs);
 ret = convertReturnValue(ret);
 if (stack !== 0) stackRestore(stack);
 return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
 return function() {
  return ccall(ident, returnType, argTypes, arguments, opts);
 };
}

var ALLOC_NORMAL = 0;

var ALLOC_STACK = 1;

function allocate(slab, allocator) {
 var ret;
 assert(typeof allocator === "number", "allocate no longer takes a type argument");
 assert(typeof slab !== "number", "allocate no longer takes a number as arg0");
 if (allocator == ALLOC_STACK) {
  ret = stackAlloc(slab.length);
 } else {
  ret = _malloc(slab.length);
 }
 if (slab.subarray || slab.slice) {
  HEAPU8.set(slab, ret);
 } else {
  HEAPU8.set(new Uint8Array(slab), ret);
 }
 return ret;
}

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(heap, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(heap.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = heap[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = heap[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = heap[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    if ((u0 & 248) != 240) warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   heap[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   heap[outIdx++] = 192 | u >> 6;
   heap[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   heap[outIdx++] = 224 | u >> 12;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   if (u >= 2097152) warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).");
   heap[outIdx++] = 240 | u >> 18;
   heap[outIdx++] = 128 | u >> 12 & 63;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  }
 }
 heap[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = SAFE_HEAP_LOAD(ptr++ | 0, 1, 1) >>> 0;
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}

function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}

var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
 assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
 var endPtr = ptr;
 var idx = endPtr >> 1;
 var maxIdx = idx + maxBytesToRead / 2;
 while (!(idx >= maxIdx) && SAFE_HEAP_LOAD(idx * 2, 2, 1)) ++idx;
 endPtr = idx << 1;
 if (endPtr - ptr > 32 && UTF16Decoder) {
  return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
 } else {
  var str = "";
  for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
   var codeUnit = SAFE_HEAP_LOAD(ptr + i * 2 | 0, 2, 0) | 0;
   if (codeUnit == 0) break;
   str += String.fromCharCode(codeUnit);
  }
  return str;
 }
}

function stringToUTF16(str, outPtr, maxBytesToWrite) {
 assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
 assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  SAFE_HEAP_STORE(outPtr | 0, codeUnit | 0, 2);
  outPtr += 2;
 }
 SAFE_HEAP_STORE(outPtr | 0, 0 | 0, 2);
 return outPtr - startPtr;
}

function lengthBytesUTF16(str) {
 return str.length * 2;
}

function UTF32ToString(ptr, maxBytesToRead) {
 assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
 var i = 0;
 var str = "";
 while (!(i >= maxBytesToRead / 4)) {
  var utf32 = SAFE_HEAP_LOAD(ptr + i * 4 | 0, 4, 0) | 0;
  if (utf32 == 0) break;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
 return str;
}

function stringToUTF32(str, outPtr, maxBytesToWrite) {
 assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
 assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  SAFE_HEAP_STORE(outPtr | 0, codeUnit | 0, 4);
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 SAFE_HEAP_STORE(outPtr | 0, 0 | 0, 4);
 return outPtr - startPtr;
}

function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}

function allocateUTF8(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = _malloc(size);
 if (ret) stringToUTF8Array(str, HEAP8, ret, size);
 return ret;
}

function allocateUTF8OnStack(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = stackAlloc(size);
 stringToUTF8Array(str, HEAP8, ret, size);
 return ret;
}

function writeStringToMemory(string, buffer, dontAddNull) {
 warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
 var lastChar, end;
 if (dontAddNull) {
  end = buffer + lengthBytesUTF8(string);
  lastChar = SAFE_HEAP_LOAD(end, 1, 0);
 }
 stringToUTF8(string, buffer, Infinity);
 if (dontAddNull) SAFE_HEAP_STORE(end, lastChar, 1);
}

function writeArrayToMemory(array, buffer) {
 assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
 HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  assert(str.charCodeAt(i) === str.charCodeAt(i) & 255);
  SAFE_HEAP_STORE(buffer++ | 0, str.charCodeAt(i) | 0, 1);
 }
 if (!dontAddNull) SAFE_HEAP_STORE(buffer | 0, 0 | 0, 1);
}

function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}

var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferAndViews(buf) {
 buffer = buf;
 Module["HEAP8"] = HEAP8 = new Int8Array(buf);
 Module["HEAP16"] = HEAP16 = new Int16Array(buf);
 Module["HEAP32"] = HEAP32 = new Int32Array(buf);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;

if (Module["TOTAL_STACK"]) assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");

var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;

if (!Object.getOwnPropertyDescriptor(Module, "INITIAL_MEMORY")) {
 Object.defineProperty(Module, "INITIAL_MEMORY", {
  configurable: true,
  get: function() {
   abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");

assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined, "JS engine does not provide full typed array support");

if (Module["wasmMemory"]) {
 wasmMemory = Module["wasmMemory"];
} else {
 wasmMemory = new WebAssembly.Memory({
  "initial": INITIAL_MEMORY / 65536,
  "maximum": 2147483648 / 65536
 });
}

if (wasmMemory) {
 buffer = wasmMemory.buffer;
}

INITIAL_MEMORY = buffer.byteLength;

assert(INITIAL_MEMORY % 65536 === 0);

updateGlobalBufferAndViews(buffer);

var wasmTable;

function writeStackCookie() {
 var max = _emscripten_stack_get_end();
 assert((max & 3) == 0);
 SAFE_HEAP_STORE(((max >> 2) + 1) * 4, 34821223, 4);
 SAFE_HEAP_STORE(((max >> 2) + 2) * 4, 2310721022, 4);
}

function checkStackCookie() {
 if (ABORT) return;
 var max = _emscripten_stack_get_end();
 var cookie1 = SAFE_HEAP_LOAD(((max >> 2) + 1) * 4, 4, 1);
 var cookie2 = SAFE_HEAP_LOAD(((max >> 2) + 2) * 4, 4, 1);
 if (cookie1 != 34821223 || cookie2 != 2310721022) {
  abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " " + cookie1.toString(16));
 }
}

(function() {
 var h16 = new Int16Array(1);
 var h8 = new Int8Array(h16.buffer);
 h16[0] = 25459;
 if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)";
})();

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
 return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 checkStackCookie();
 assert(!runtimeInitialized);
 runtimeInitialized = true;
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
 FS.ignorePermissions = false;
 TTY.init();
 callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
 checkStackCookie();
 runtimeExited = true;
}

function postRun() {
 checkStackCookie();
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

var runDependencyTracking = {};

function getUniqueRunDependency(id) {
 var orig = id;
 while (1) {
  if (!runDependencyTracking[id]) return id;
  id = orig + Math.random();
 }
}

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (id) {
  assert(!runDependencyTracking[id]);
  runDependencyTracking[id] = 1;
  if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
   runDependencyWatcher = setInterval(function() {
    if (ABORT) {
     clearInterval(runDependencyWatcher);
     runDependencyWatcher = null;
     return;
    }
    var shown = false;
    for (var dep in runDependencyTracking) {
     if (!shown) {
      shown = true;
      err("still waiting on run dependencies:");
     }
     err("dependency: " + dep);
    }
    if (shown) {
     err("(end of list)");
    }
   }, 1e4);
  }
 } else {
  err("warning: run dependency added without ID");
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (id) {
  assert(runDependencyTracking[id]);
  delete runDependencyTracking[id];
 } else {
  err("warning: run dependency removed without ID");
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 what += "";
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 var output = "abort(" + what + ") at " + stackTrace();
 what = output;
 var e = new WebAssembly.RuntimeError(what);
 throw e;
}

var memoryInitializer = "WorldJS.js.mem";

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return filename.startsWith(dataURIPrefix);
}

function isFileURI(filename) {
 return filename.startsWith("file://");
}

function createExportWrapper(name, fixedasm) {
 return function() {
  var displayName = name;
  var asm = fixedasm;
  if (!fixedasm) {
   asm = Module["asm"];
  }
  assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
  assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  if (!asm[name]) {
   assert(asm[name], "exported native function `" + displayName + "` not found");
  }
  return asm[name].apply(null, arguments);
 };
}

var wasmBinaryFile;

wasmBinaryFile = "WorldJS.wasm";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
 try {
  if (file == wasmBinaryFile && wasmBinary) {
   return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
   return readBinary(file);
  } else {
   throw "both async and sync fetching of the wasm failed";
  }
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise() {
 if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
  if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    if (!response["ok"]) {
     throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
    }
    return response["arrayBuffer"]();
   }).catch(function() {
    return getBinary(wasmBinaryFile);
   });
  } else {
   if (readAsync) {
    return new Promise(function(resolve, reject) {
     readAsync(wasmBinaryFile, function(response) {
      resolve(new Uint8Array(response));
     }, reject);
    });
   }
  }
 }
 return Promise.resolve().then(function() {
  return getBinary(wasmBinaryFile);
 });
}

function createWasm() {
 var info = {
  "env": asmLibraryArg,
  "wasi_snapshot_preview1": asmLibraryArg
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  Module["asm"] = exports;
  runMemoryInitializer();
  wasmTable = Module["asm"]["__indirect_function_table"];
  assert(wasmTable, "table not found in wasm exports");
  addOnInit(Module["asm"]["__wasm_call_ctors"]);
  removeRunDependency("wasm-instantiate");
 }
 addRunDependency("wasm-instantiate");
 var trueModule = Module;
 function receiveInstantiationResult(result) {
  assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
  trueModule = null;
  receiveInstance(result["instance"]);
 }
 function instantiateArrayBuffer(receiver) {
  return getBinaryPromise().then(function(binary) {
   var result = WebAssembly.instantiate(binary, info);
   return result;
  }).then(receiver, function(reason) {
   err("failed to asynchronously prepare wasm: " + reason);
   if (isFileURI(wasmBinaryFile)) {
    err("warning: Loading from a file URI (" + wasmBinaryFile + ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing");
   }
   abort(reason);
  });
 }
 function instantiateAsync() {
  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    var result = WebAssembly.instantiateStreaming(response, info);
    return result.then(receiveInstantiationResult, function(reason) {
     err("wasm streaming compile failed: " + reason);
     err("falling back to ArrayBuffer instantiation");
     return instantiateArrayBuffer(receiveInstantiationResult);
    });
   });
  } else {
   return instantiateArrayBuffer(receiveInstantiationResult);
  }
 }
 if (Module["instantiateWasm"]) {
  try {
   var exports = Module["instantiateWasm"](info, receiveInstance);
   return exports;
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   return false;
  }
 }
 instantiateAsync();
 return {};
}

var tempDouble;

var tempI64;

var ASM_CONSTS = {
 25812: function() {
  function WorldJSException(message) {
   this.message = message;
   this.name = "WorldJSException";
  }
  throw new WorldJSException("WorldJS Error is Detected. Terminated.");
 }
};

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback(Module);
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    wasmTable.get(func)();
   } else {
    wasmTable.get(func)(callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

function demangle(func) {
 warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 return func;
}

function demangleAll(text) {
 var regex = /\b_Z[\w\d_]+/g;
 return text.replace(regex, function(x) {
  var y = demangle(x);
  return x === y ? x : y + " [" + x + "]";
 });
}

function jsStackTrace() {
 var error = new Error();
 if (!error.stack) {
  try {
   throw new Error();
  } catch (e) {
   error = e;
  }
  if (!error.stack) {
   return "(no stack trace available)";
  }
 }
 return error.stack.toString();
}

function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}

function unSign(value, bits) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}

function _atexit(func, arg) {}

function ___cxa_atexit(a0, a1) {
 return _atexit(a0, a1);
}

function setErrNo(value) {
 SAFE_HEAP_STORE(___errno_location() | 0, value | 0, 4);
 return value;
}

var PATH = {
 splitPath: function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 },
 normalizeArray: function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (;up; up--) {
    parts.unshift("..");
   }
  }
  return parts;
 },
 normalize: function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 },
 dirname: function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 },
 basename: function(path) {
  if (path === "/") return "/";
  path = PATH.normalize(path);
  path = path.replace(/\/$/, "");
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 },
 extname: function(path) {
  return PATH.splitPath(path)[3];
 },
 join: function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 },
 join2: function(l, r) {
  return PATH.normalize(l + "/" + r);
 }
};

function getRandomDevice() {
 if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
  var randomBuffer = new Uint8Array(1);
  return function() {
   crypto.getRandomValues(randomBuffer);
   return randomBuffer[0];
  };
 } else if (ENVIRONMENT_IS_NODE) {
  try {
   var crypto_module = require("crypto");
   return function() {
    return crypto_module["randomBytes"](1)[0];
   };
  } catch (e) {}
 }
 return function() {
  abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
 };
}

var PATH_FS = {
 resolve: function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
   return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 },
 relative: function(from, to) {
  from = PATH_FS.resolve(from).substr(1);
  to = PATH_FS.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (;start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (;end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 }
};

var TTY = {
 ttys: [],
 init: function() {},
 shutdown: function() {},
 register: function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 },
 stream_ops: {
  open: function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(43);
   }
   stream.tty = tty;
   stream.seekable = false;
  },
  close: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  flush: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  read: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(60);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(29);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(6);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  },
  write: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(60);
   }
   try {
    for (var i = 0; i < length; i++) {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    }
   } catch (e) {
    throw new FS.ErrnoError(29);
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  }
 },
 default_tty_ops: {
  get_char: function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = Buffer.alloc(BUFSIZE);
     var bytesRead = 0;
     try {
      bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
     } catch (e) {
      if (e.toString().includes("EOF")) bytesRead = 0; else throw e;
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  },
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 },
 default_tty1_ops: {
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 }
};

function zeroMemory(address, size) {
 HEAPU8.fill(0, address, address + size);
}

function mmapAlloc(size) {
 abort("internal error: mmapAlloc called but `memalign` native symbol not exported");
}

var MEMFS = {
 ops_table: null,
 mount: function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 },
 createNode: function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(63);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
   parent.timestamp = node.timestamp;
  }
  return node;
 },
 getFileDataAsTypedArray: function(node) {
  if (!node.contents) return new Uint8Array(0);
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 },
 expandFileStorage: function(node, newCapacity) {
  var prevCapacity = node.contents ? node.contents.length : 0;
  if (prevCapacity >= newCapacity) return;
  var CAPACITY_DOUBLING_MAX = 1024 * 1024;
  newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
  if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
  var oldContents = node.contents;
  node.contents = new Uint8Array(newCapacity);
  if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
 },
 resizeFileStorage: function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
  } else {
   var oldContents = node.contents;
   node.contents = new Uint8Array(newSize);
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
  }
 },
 node_ops: {
  getattr: function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  },
  setattr: function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  },
  lookup: function(parent, name) {
   throw FS.genericErrors[44];
  },
  mknod: function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  },
  rename: function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(55);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.parent.timestamp = Date.now();
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   new_dir.timestamp = old_node.parent.timestamp;
   old_node.parent = new_dir;
  },
  unlink: function(parent, name) {
   delete parent.contents[name];
   parent.timestamp = Date.now();
  },
  rmdir: function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(55);
   }
   delete parent.contents[name];
   parent.timestamp = Date.now();
  },
  readdir: function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  },
  symlink: function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  },
  readlink: function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(28);
   }
   return node.link;
  }
 },
 stream_ops: {
  read: function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  },
  write: function(stream, buffer, offset, length, position, canOwn) {
   assert(!(buffer instanceof ArrayBuffer));
   if (buffer.buffer === HEAP8.buffer) {
    canOwn = false;
   }
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     assert(position === 0, "canOwn must imply no weird position inside the file");
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = buffer.slice(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) {
    node.contents.set(buffer.subarray(offset, offset + length), position);
   } else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  },
  llseek: function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(28);
   }
   return position;
  },
  allocate: function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  },
  mmap: function(stream, address, length, position, prot, flags) {
   if (address !== 0) {
    throw new FS.ErrnoError(28);
   }
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && contents.buffer === buffer) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < contents.length) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = mmapAlloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(48);
    }
    HEAP8.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  },
  msync: function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  }
 }
};

function asyncLoad(url, onload, onerror, noRunDep) {
 var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
 readAsync(url, function(arrayBuffer) {
  assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
  onload(new Uint8Array(arrayBuffer));
  if (dep) removeRunDependency(dep);
 }, function(event) {
  if (onerror) {
   onerror();
  } else {
   throw 'Loading data file "' + url + '" failed.';
  }
 });
 if (dep) addRunDependency(dep);
}

var ERRNO_MESSAGES = {
 0: "Success",
 1: "Arg list too long",
 2: "Permission denied",
 3: "Address already in use",
 4: "Address not available",
 5: "Address family not supported by protocol family",
 6: "No more processes",
 7: "Socket already connected",
 8: "Bad file number",
 9: "Trying to read unreadable message",
 10: "Mount device busy",
 11: "Operation canceled",
 12: "No children",
 13: "Connection aborted",
 14: "Connection refused",
 15: "Connection reset by peer",
 16: "File locking deadlock error",
 17: "Destination address required",
 18: "Math arg out of domain of func",
 19: "Quota exceeded",
 20: "File exists",
 21: "Bad address",
 22: "File too large",
 23: "Host is unreachable",
 24: "Identifier removed",
 25: "Illegal byte sequence",
 26: "Connection already in progress",
 27: "Interrupted system call",
 28: "Invalid argument",
 29: "I/O error",
 30: "Socket is already connected",
 31: "Is a directory",
 32: "Too many symbolic links",
 33: "Too many open files",
 34: "Too many links",
 35: "Message too long",
 36: "Multihop attempted",
 37: "File or path name too long",
 38: "Network interface is not configured",
 39: "Connection reset by network",
 40: "Network is unreachable",
 41: "Too many open files in system",
 42: "No buffer space available",
 43: "No such device",
 44: "No such file or directory",
 45: "Exec format error",
 46: "No record locks available",
 47: "The link has been severed",
 48: "Not enough core",
 49: "No message of desired type",
 50: "Protocol not available",
 51: "No space left on device",
 52: "Function not implemented",
 53: "Socket is not connected",
 54: "Not a directory",
 55: "Directory not empty",
 56: "State not recoverable",
 57: "Socket operation on non-socket",
 59: "Not a typewriter",
 60: "No such device or address",
 61: "Value too large for defined data type",
 62: "Previous owner died",
 63: "Not super-user",
 64: "Broken pipe",
 65: "Protocol error",
 66: "Unknown protocol",
 67: "Protocol wrong type for socket",
 68: "Math result not representable",
 69: "Read only file system",
 70: "Illegal seek",
 71: "No such process",
 72: "Stale file handle",
 73: "Connection timed out",
 74: "Text file busy",
 75: "Cross-device link",
 100: "Device not a stream",
 101: "Bad font file fmt",
 102: "Invalid slot",
 103: "Invalid request code",
 104: "No anode",
 105: "Block device required",
 106: "Channel number out of range",
 107: "Level 3 halted",
 108: "Level 3 reset",
 109: "Link number out of range",
 110: "Protocol driver not attached",
 111: "No CSI structure available",
 112: "Level 2 halted",
 113: "Invalid exchange",
 114: "Invalid request descriptor",
 115: "Exchange full",
 116: "No data (for no delay io)",
 117: "Timer expired",
 118: "Out of streams resources",
 119: "Machine is not on the network",
 120: "Package not installed",
 121: "The object is remote",
 122: "Advertise error",
 123: "Srmount error",
 124: "Communication error on send",
 125: "Cross mount point (not really error)",
 126: "Given log. name not unique",
 127: "f.d. invalid for this operation",
 128: "Remote address changed",
 129: "Can   access a needed shared lib",
 130: "Accessing a corrupted shared lib",
 131: ".lib section in a.out corrupted",
 132: "Attempting to link in too many libs",
 133: "Attempting to exec a shared library",
 135: "Streams pipe error",
 136: "Too many users",
 137: "Socket type not supported",
 138: "Not supported",
 139: "Protocol family not supported",
 140: "Can't send after socket shutdown",
 141: "Too many references",
 142: "Host is down",
 148: "No medium (in tape drive)",
 156: "Level 2 not synchronized"
};

var ERRNO_CODES = {
 EPERM: 63,
 ENOENT: 44,
 ESRCH: 71,
 EINTR: 27,
 EIO: 29,
 ENXIO: 60,
 E2BIG: 1,
 ENOEXEC: 45,
 EBADF: 8,
 ECHILD: 12,
 EAGAIN: 6,
 EWOULDBLOCK: 6,
 ENOMEM: 48,
 EACCES: 2,
 EFAULT: 21,
 ENOTBLK: 105,
 EBUSY: 10,
 EEXIST: 20,
 EXDEV: 75,
 ENODEV: 43,
 ENOTDIR: 54,
 EISDIR: 31,
 EINVAL: 28,
 ENFILE: 41,
 EMFILE: 33,
 ENOTTY: 59,
 ETXTBSY: 74,
 EFBIG: 22,
 ENOSPC: 51,
 ESPIPE: 70,
 EROFS: 69,
 EMLINK: 34,
 EPIPE: 64,
 EDOM: 18,
 ERANGE: 68,
 ENOMSG: 49,
 EIDRM: 24,
 ECHRNG: 106,
 EL2NSYNC: 156,
 EL3HLT: 107,
 EL3RST: 108,
 ELNRNG: 109,
 EUNATCH: 110,
 ENOCSI: 111,
 EL2HLT: 112,
 EDEADLK: 16,
 ENOLCK: 46,
 EBADE: 113,
 EBADR: 114,
 EXFULL: 115,
 ENOANO: 104,
 EBADRQC: 103,
 EBADSLT: 102,
 EDEADLOCK: 16,
 EBFONT: 101,
 ENOSTR: 100,
 ENODATA: 116,
 ETIME: 117,
 ENOSR: 118,
 ENONET: 119,
 ENOPKG: 120,
 EREMOTE: 121,
 ENOLINK: 47,
 EADV: 122,
 ESRMNT: 123,
 ECOMM: 124,
 EPROTO: 65,
 EMULTIHOP: 36,
 EDOTDOT: 125,
 EBADMSG: 9,
 ENOTUNIQ: 126,
 EBADFD: 127,
 EREMCHG: 128,
 ELIBACC: 129,
 ELIBBAD: 130,
 ELIBSCN: 131,
 ELIBMAX: 132,
 ELIBEXEC: 133,
 ENOSYS: 52,
 ENOTEMPTY: 55,
 ENAMETOOLONG: 37,
 ELOOP: 32,
 EOPNOTSUPP: 138,
 EPFNOSUPPORT: 139,
 ECONNRESET: 15,
 ENOBUFS: 42,
 EAFNOSUPPORT: 5,
 EPROTOTYPE: 67,
 ENOTSOCK: 57,
 ENOPROTOOPT: 50,
 ESHUTDOWN: 140,
 ECONNREFUSED: 14,
 EADDRINUSE: 3,
 ECONNABORTED: 13,
 ENETUNREACH: 40,
 ENETDOWN: 38,
 ETIMEDOUT: 73,
 EHOSTDOWN: 142,
 EHOSTUNREACH: 23,
 EINPROGRESS: 26,
 EALREADY: 7,
 EDESTADDRREQ: 17,
 EMSGSIZE: 35,
 EPROTONOSUPPORT: 66,
 ESOCKTNOSUPPORT: 137,
 EADDRNOTAVAIL: 4,
 ENETRESET: 39,
 EISCONN: 30,
 ENOTCONN: 53,
 ETOOMANYREFS: 141,
 EUSERS: 136,
 EDQUOT: 19,
 ESTALE: 72,
 ENOTSUP: 138,
 ENOMEDIUM: 148,
 EILSEQ: 25,
 EOVERFLOW: 61,
 ECANCELED: 11,
 ENOTRECOVERABLE: 56,
 EOWNERDEAD: 62,
 ESTRPIPE: 135
};

var FS = {
 root: null,
 mounts: [],
 devices: {},
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 syncFSRequests: 0,
 lookupPath: function(path, opts) {
  path = PATH_FS.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(32);
  }
  var parts = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(32);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 },
 getPath: function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 },
 hashName: function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 },
 hashAddNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 },
 hashRemoveNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 },
 lookupNode: function(parent, name) {
  var errCode = FS.mayLookup(parent);
  if (errCode) {
   throw new FS.ErrnoError(errCode, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 },
 createNode: function(parent, name, mode, rdev) {
  assert(typeof parent === "object");
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 },
 destroyNode: function(node) {
  FS.hashRemoveNode(node);
 },
 isRoot: function(node) {
  return node === node.parent;
 },
 isMountpoint: function(node) {
  return !!node.mounted;
 },
 isFile: function(mode) {
  return (mode & 61440) === 32768;
 },
 isDir: function(mode) {
  return (mode & 61440) === 16384;
 },
 isLink: function(mode) {
  return (mode & 61440) === 40960;
 },
 isChrdev: function(mode) {
  return (mode & 61440) === 8192;
 },
 isBlkdev: function(mode) {
  return (mode & 61440) === 24576;
 },
 isFIFO: function(mode) {
  return (mode & 61440) === 4096;
 },
 isSocket: function(mode) {
  return (mode & 49152) === 49152;
 },
 flagModes: {
  "r": 0,
  "r+": 2,
  "w": 577,
  "w+": 578,
  "a": 1089,
  "a+": 1090
 },
 modeStringToFlags: function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 },
 flagsToPermissionString: function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 },
 nodePermissions: function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.includes("r") && !(node.mode & 292)) {
   return 2;
  } else if (perms.includes("w") && !(node.mode & 146)) {
   return 2;
  } else if (perms.includes("x") && !(node.mode & 73)) {
   return 2;
  }
  return 0;
 },
 mayLookup: function(dir) {
  var errCode = FS.nodePermissions(dir, "x");
  if (errCode) return errCode;
  if (!dir.node_ops.lookup) return 2;
  return 0;
 },
 mayCreate: function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return 20;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 },
 mayDelete: function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var errCode = FS.nodePermissions(dir, "wx");
  if (errCode) {
   return errCode;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return 54;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return 10;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return 31;
   }
  }
  return 0;
 },
 mayOpen: function(node, flags) {
  if (!node) {
   return 44;
  }
  if (FS.isLink(node.mode)) {
   return 32;
  } else if (FS.isDir(node.mode)) {
   if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
    return 31;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 },
 MAX_OPEN_FDS: 4096,
 nextfd: function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(33);
 },
 getStream: function(fd) {
  return FS.streams[fd];
 },
 createStream: function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = function() {};
   FS.FSStream.prototype = {
    object: {
     get: function() {
      return this.node;
     },
     set: function(val) {
      this.node = val;
     }
    },
    isRead: {
     get: function() {
      return (this.flags & 2097155) !== 1;
     }
    },
    isWrite: {
     get: function() {
      return (this.flags & 2097155) !== 0;
     }
    },
    isAppend: {
     get: function() {
      return this.flags & 1024;
     }
    }
   };
  }
  var newStream = new FS.FSStream();
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 },
 closeStream: function(fd) {
  FS.streams[fd] = null;
 },
 chrdev_stream_ops: {
  open: function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  },
  llseek: function() {
   throw new FS.ErrnoError(70);
  }
 },
 major: function(dev) {
  return dev >> 8;
 },
 minor: function(dev) {
  return dev & 255;
 },
 makedev: function(ma, mi) {
  return ma << 8 | mi;
 },
 registerDevice: function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 },
 getDevice: function(dev) {
  return FS.devices[dev];
 },
 getMounts: function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 },
 syncfs: function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  FS.syncFSRequests++;
  if (FS.syncFSRequests > 1) {
   err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function doCallback(errCode) {
   assert(FS.syncFSRequests > 0);
   FS.syncFSRequests--;
   return callback(errCode);
  }
  function done(errCode) {
   if (errCode) {
    if (!done.errored) {
     done.errored = true;
     return doCallback(errCode);
    }
    return;
   }
   if (++completed >= mounts.length) {
    doCallback(null);
   }
  }
  mounts.forEach(function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  });
 },
 mount: function(type, opts, mountpoint) {
  if (typeof type === "string") {
   throw type;
  }
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(10);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(10);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(54);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 },
 unmount: function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(28);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach(function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.includes(current.mount)) {
     FS.destroyNode(current);
    }
    current = next;
   }
  });
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 },
 lookup: function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 },
 mknod: function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(28);
  }
  var errCode = FS.mayCreate(parent, name);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(63);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 },
 create: function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 },
 mkdir: function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 },
 mkdirTree: function(path, mode) {
  var dirs = path.split("/");
  var d = "";
  for (var i = 0; i < dirs.length; ++i) {
   if (!dirs[i]) continue;
   d += "/" + dirs[i];
   try {
    FS.mkdir(d, mode);
   } catch (e) {
    if (e.errno != 20) throw e;
   }
  }
 },
 mkdev: function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 },
 symlink: function(oldpath, newpath) {
  if (!PATH_FS.resolve(oldpath)) {
   throw new FS.ErrnoError(44);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(44);
  }
  var newname = PATH.basename(newpath);
  var errCode = FS.mayCreate(parent, newname);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(63);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 },
 rename: function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  lookup = FS.lookupPath(old_path, {
   parent: true
  });
  old_dir = lookup.node;
  lookup = FS.lookupPath(new_path, {
   parent: true
  });
  new_dir = lookup.node;
  if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(75);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH_FS.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(28);
  }
  relative = PATH_FS.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(55);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var errCode = FS.mayDelete(old_dir, old_name, isdir);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(10);
  }
  if (new_dir !== old_dir) {
   errCode = FS.nodePermissions(old_dir, "w");
   if (errCode) {
    throw new FS.ErrnoError(errCode);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 },
 rmdir: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var errCode = FS.mayDelete(parent, name, true);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 },
 readdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(54);
  }
  return node.node_ops.readdir(node);
 },
 unlink: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var errCode = FS.mayDelete(parent, name, false);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 },
 readlink: function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(44);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(28);
  }
  return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 },
 stat: function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(63);
  }
  return node.node_ops.getattr(node);
 },
 lstat: function(path) {
  return FS.stat(path, true);
 },
 chmod: function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 },
 lchmod: function(path, mode) {
  FS.chmod(path, mode, true);
 },
 fchmod: function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chmod(stream.node, mode);
 },
 chown: function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 },
 lchown: function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 },
 fchown: function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chown(stream.node, uid, gid);
 },
 truncate: function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(28);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(28);
  }
  var errCode = FS.nodePermissions(node, "w");
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 },
 ftruncate: function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(28);
  }
  FS.truncate(stream.node, len);
 },
 utime: function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 },
 open: function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(44);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(20);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(54);
  }
  if (!created) {
   var errCode = FS.mayOpen(node, flags);
   if (errCode) {
    throw new FS.ErrnoError(errCode);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512 | 131072);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    err("FS.trackingDelegate error on read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 },
 close: function(stream) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
  stream.fd = null;
 },
 isClosed: function(stream) {
  return stream.fd === null;
 },
 llseek: function(stream, offset, whence) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(70);
  }
  if (whence != 0 && whence != 1 && whence != 2) {
   throw new FS.ErrnoError(28);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 },
 read: function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(28);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 },
 write: function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(28);
  }
  if (stream.seekable && stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 },
 allocate: function(stream, offset, length) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(28);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(43);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(138);
  }
  stream.stream_ops.allocate(stream, offset, length);
 },
 mmap: function(stream, address, length, position, prot, flags) {
  if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
   throw new FS.ErrnoError(2);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(2);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(43);
  }
  return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
 },
 msync: function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 },
 munmap: function(stream) {
  return 0;
 },
 ioctl: function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(59);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 },
 readFile: function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || 0;
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 },
 writeFile: function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || 577;
  var stream = FS.open(path, opts.flags, opts.mode);
  if (typeof data === "string") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
  } else if (ArrayBuffer.isView(data)) {
   FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
  } else {
   throw new Error("Unsupported data type");
  }
  FS.close(stream);
 },
 cwd: function() {
  return FS.currentPath;
 },
 chdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (lookup.node === null) {
   throw new FS.ErrnoError(44);
  }
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(54);
  }
  var errCode = FS.nodePermissions(lookup.node, "x");
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  FS.currentPath = lookup.path;
 },
 createDefaultDirectories: function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 },
 createDefaultDevices: function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: function() {
    return 0;
   },
   write: function(stream, buffer, offset, length, pos) {
    return length;
   }
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device = getRandomDevice();
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 },
 createSpecialDirectories: function() {
  FS.mkdir("/proc");
  var proc_self = FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: function() {
    var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(8);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: function() {
         return stream.path;
        }
       }
      };
      ret.parent = ret;
      return ret;
     }
    };
    return node;
   }
  }, {}, "/proc/self/fd");
 },
 createStandardStreams: function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", 0);
  var stdout = FS.open("/dev/stdout", 1);
  var stderr = FS.open("/dev/stderr", 1);
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 },
 ensureErrnoError: function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   };
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
   if (this.stack) {
    Object.defineProperty(this, "stack", {
     value: new Error().stack,
     writable: true
    });
    this.stack = demangleAll(this.stack);
   }
  };
  FS.ErrnoError.prototype = new Error();
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ 44 ].forEach(function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  });
 },
 staticInit: function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS
  };
 },
 init: function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 },
 quit: function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 },
 getMode: function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 },
 findObject: function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   return null;
  }
 },
 analyzePath: function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 },
 createPath: function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 },
 createFile: function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 },
 createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, 577);
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 },
 createDevice: function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: function(stream) {
    stream.seekable = false;
   },
   close: function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   },
   read: function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(6);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   },
   write: function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   }
  });
  return FS.mkdev(path, mode, dev);
 },
 forceLoadFile: function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (read_) {
   try {
    obj.contents = intArrayFromString(read_(obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    throw new FS.ErrnoError(29);
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
 },
 createLazyFile: function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest();
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   };
   var lazyArray = this;
   lazyArray.setDataGetter(function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   });
   if (usesGzip || !datalength) {
    chunkSize = datalength = 1;
    datalength = this.getter(0).length;
    chunkSize = datalength;
    out("LazyFiles on gzip forces download of the whole file when length is accessed");
   }
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array();
   Object.defineProperties(lazyArray, {
    length: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._length;
     }
    },
    chunkSize: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._chunkSize;
     }
    }
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperties(node, {
   usedBytes: {
    get: function() {
     return this.contents.length;
    }
   }
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach(function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    FS.forceLoadFile(node);
    return fn.apply(null, arguments);
   };
  });
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   FS.forceLoadFile(node);
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 },
 createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach(function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     });
     handled = true;
    }
   });
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   asyncLoad(url, function(byteArray) {
    processData(byteArray);
   }, onerror);
  } else {
   processData(url);
  }
 },
 indexedDB: function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 },
 DB_NAME: function() {
  return "EM_FS_" + window.location.pathname;
 },
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   out("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 },
 loadFilesFromDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 },
 absolutePath: function() {
  abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
 },
 createFolder: function() {
  abort("FS.createFolder has been removed; use FS.mkdir instead");
 },
 createLink: function() {
  abort("FS.createLink has been removed; use FS.symlink instead");
 },
 joinPath: function() {
  abort("FS.joinPath has been removed; use PATH.join instead");
 },
 mmapAlloc: function() {
  abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
 },
 standardizePath: function() {
  abort("FS.standardizePath has been removed; use PATH.normalize instead");
 }
};

var SYSCALLS = {
 mappings: {},
 DEFAULT_POLLMASK: 5,
 umask: 511,
 calculateAt: function(dirfd, path, allowEmpty) {
  if (path[0] === "/") {
   return path;
  }
  var dir;
  if (dirfd === -100) {
   dir = FS.cwd();
  } else {
   var dirstream = FS.getStream(dirfd);
   if (!dirstream) throw new FS.ErrnoError(8);
   dir = dirstream.path;
  }
  if (path.length == 0) {
   if (!allowEmpty) {
    throw new FS.ErrnoError(44);
   }
   return dir;
  }
  return PATH.join2(dir, path);
 },
 doStat: function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -54;
   }
   throw e;
  }
  SAFE_HEAP_STORE(buf | 0, stat.dev | 0, 4);
  SAFE_HEAP_STORE(buf + 4 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 8 | 0, stat.ino | 0, 4);
  SAFE_HEAP_STORE(buf + 12 | 0, stat.mode | 0, 4);
  SAFE_HEAP_STORE(buf + 16 | 0, stat.nlink | 0, 4);
  SAFE_HEAP_STORE(buf + 20 | 0, stat.uid | 0, 4);
  SAFE_HEAP_STORE(buf + 24 | 0, stat.gid | 0, 4);
  SAFE_HEAP_STORE(buf + 28 | 0, stat.rdev | 0, 4);
  SAFE_HEAP_STORE(buf + 32 | 0, 0 | 0, 4);
  tempI64 = [ stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  SAFE_HEAP_STORE(buf + 40 | 0, tempI64[0] | 0, 4), SAFE_HEAP_STORE(buf + 44 | 0, tempI64[1] | 0, 4);
  SAFE_HEAP_STORE(buf + 48 | 0, 4096 | 0, 4);
  SAFE_HEAP_STORE(buf + 52 | 0, stat.blocks | 0, 4);
  SAFE_HEAP_STORE(buf + 56 | 0, stat.atime.getTime() / 1e3 | 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 60 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 64 | 0, stat.mtime.getTime() / 1e3 | 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 68 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 72 | 0, stat.ctime.getTime() / 1e3 | 0 | 0, 4);
  SAFE_HEAP_STORE(buf + 76 | 0, 0 | 0, 4);
  tempI64 = [ stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  SAFE_HEAP_STORE(buf + 80 | 0, tempI64[0] | 0, 4), SAFE_HEAP_STORE(buf + 84 | 0, tempI64[1] | 0, 4);
  return 0;
 },
 doMsync: function(addr, stream, len, flags, offset) {
  var buffer = HEAPU8.slice(addr, addr + len);
  FS.msync(stream, buffer, offset, len, flags);
 },
 doMkdir: function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 },
 doMknod: function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;

  default:
   return -28;
  }
  FS.mknod(path, mode, dev);
  return 0;
 },
 doReadlink: function(path, buf, bufsize) {
  if (bufsize <= 0) return -28;
  var ret = FS.readlink(path);
  var len = Math.min(bufsize, lengthBytesUTF8(ret));
  var endChar = SAFE_HEAP_LOAD(buf + len, 1, 0);
  stringToUTF8(ret, buf, bufsize + 1);
  SAFE_HEAP_STORE(buf + len, endChar, 1);
  return len;
 },
 doAccess: function(path, amode) {
  if (amode & ~7) {
   return -28;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  if (!node) {
   return -44;
  }
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -2;
  }
  return 0;
 },
 doDup: function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 },
 doReadv: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = SAFE_HEAP_LOAD(iov + i * 8 | 0, 4, 0) | 0;
   var len = SAFE_HEAP_LOAD(iov + (i * 8 + 4) | 0, 4, 0) | 0;
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 },
 doWritev: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = SAFE_HEAP_LOAD(iov + i * 8 | 0, 4, 0) | 0;
   var len = SAFE_HEAP_LOAD(iov + (i * 8 + 4) | 0, 4, 0) | 0;
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 },
 varargs: undefined,
 get: function() {
  assert(SYSCALLS.varargs != undefined);
  SYSCALLS.varargs += 4;
  var ret = SAFE_HEAP_LOAD(SYSCALLS.varargs - 4 | 0, 4, 0) | 0;
  return ret;
 },
 getStr: function(ptr) {
  var ret = UTF8ToString(ptr);
  return ret;
 },
 getStreamFromFD: function(fd) {
  var stream = FS.getStream(fd);
  if (!stream) throw new FS.ErrnoError(8);
  return stream;
 },
 get64: function(low, high) {
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }
};

function ___sys_fcntl64(fd, cmd, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  switch (cmd) {
  case 0:
   {
    var arg = SYSCALLS.get();
    if (arg < 0) {
     return -28;
    }
    var newStream;
    newStream = FS.open(stream.path, stream.flags, 0, arg);
    return newStream.fd;
   }

  case 1:
  case 2:
   return 0;

  case 3:
   return stream.flags;

  case 4:
   {
    var arg = SYSCALLS.get();
    stream.flags |= arg;
    return 0;
   }

  case 12:
   {
    var arg = SYSCALLS.get();
    var offset = 0;
    SAFE_HEAP_STORE(arg + offset | 0, 2 | 0, 2);
    return 0;
   }

  case 13:
  case 14:
   return 0;

  case 16:
  case 8:
   return -28;

  case 9:
   setErrNo(28);
   return -1;

  default:
   {
    return -28;
   }
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___sys_ioctl(fd, op, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  switch (op) {
  case 21509:
  case 21505:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21510:
  case 21511:
  case 21512:
  case 21506:
  case 21507:
  case 21508:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21519:
   {
    if (!stream.tty) return -59;
    var argp = SYSCALLS.get();
    SAFE_HEAP_STORE(argp | 0, 0 | 0, 4);
    return 0;
   }

  case 21520:
   {
    if (!stream.tty) return -59;
    return -28;
   }

  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }

  case 21523:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21524:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___sys_open(path, flags, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var pathname = SYSCALLS.getStr(path);
  var mode = varargs ? SYSCALLS.get() : 0;
  var stream = FS.open(pathname, flags, mode);
  return stream.fd;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

function getShiftFromSize(size) {
 switch (size) {
 case 1:
  return 0;

 case 2:
  return 1;

 case 4:
  return 2;

 case 8:
  return 3;

 default:
  throw new TypeError("Unknown type size: " + size);
 }
}

function embind_init_charCodes() {
 var codes = new Array(256);
 for (var i = 0; i < 256; ++i) {
  codes[i] = String.fromCharCode(i);
 }
 embind_charCodes = codes;
}

var embind_charCodes = undefined;

function readLatin1String(ptr) {
 var ret = "";
 var c = ptr;
 while (SAFE_HEAP_LOAD(c, 1, 1)) {
  ret += embind_charCodes[SAFE_HEAP_LOAD(c++, 1, 1)];
 }
 return ret;
}

var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};

var char_0 = 48;

var char_9 = 57;

function makeLegalFunctionName(name) {
 if (undefined === name) {
  return "_unknown";
 }
 name = name.replace(/[^a-zA-Z0-9_]/g, "$");
 var f = name.charCodeAt(0);
 if (f >= char_0 && f <= char_9) {
  return "_" + name;
 } else {
  return name;
 }
}

function createNamedFunction(name, body) {
 name = makeLegalFunctionName(name);
 return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body);
}

function extendError(baseErrorType, errorName) {
 var errorClass = createNamedFunction(errorName, function(message) {
  this.name = errorName;
  this.message = message;
  var stack = new Error(message).stack;
  if (stack !== undefined) {
   this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
  }
 });
 errorClass.prototype = Object.create(baseErrorType.prototype);
 errorClass.prototype.constructor = errorClass;
 errorClass.prototype.toString = function() {
  if (this.message === undefined) {
   return this.name;
  } else {
   return this.name + ": " + this.message;
  }
 };
 return errorClass;
}

var BindingError = undefined;

function throwBindingError(message) {
 throw new BindingError(message);
}

var InternalError = undefined;

function throwInternalError(message) {
 throw new InternalError(message);
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
 myTypes.forEach(function(type) {
  typeDependencies[type] = dependentTypes;
 });
 function onComplete(typeConverters) {
  var myTypeConverters = getTypeConverters(typeConverters);
  if (myTypeConverters.length !== myTypes.length) {
   throwInternalError("Mismatched type converter count");
  }
  for (var i = 0; i < myTypes.length; ++i) {
   registerType(myTypes[i], myTypeConverters[i]);
  }
 }
 var typeConverters = new Array(dependentTypes.length);
 var unregisteredTypes = [];
 var registered = 0;
 dependentTypes.forEach(function(dt, i) {
  if (registeredTypes.hasOwnProperty(dt)) {
   typeConverters[i] = registeredTypes[dt];
  } else {
   unregisteredTypes.push(dt);
   if (!awaitingDependencies.hasOwnProperty(dt)) {
    awaitingDependencies[dt] = [];
   }
   awaitingDependencies[dt].push(function() {
    typeConverters[i] = registeredTypes[dt];
    ++registered;
    if (registered === unregisteredTypes.length) {
     onComplete(typeConverters);
    }
   });
  }
 });
 if (0 === unregisteredTypes.length) {
  onComplete(typeConverters);
 }
}

function registerType(rawType, registeredInstance, options) {
 options = options || {};
 if (!("argPackAdvance" in registeredInstance)) {
  throw new TypeError("registerType registeredInstance requires argPackAdvance");
 }
 var name = registeredInstance.name;
 if (!rawType) {
  throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
 }
 if (registeredTypes.hasOwnProperty(rawType)) {
  if (options.ignoreDuplicateRegistrations) {
   return;
  } else {
   throwBindingError("Cannot register type '" + name + "' twice");
  }
 }
 registeredTypes[rawType] = registeredInstance;
 delete typeDependencies[rawType];
 if (awaitingDependencies.hasOwnProperty(rawType)) {
  var callbacks = awaitingDependencies[rawType];
  delete awaitingDependencies[rawType];
  callbacks.forEach(function(cb) {
   cb();
  });
 }
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(wt) {
   return !!wt;
  },
  "toWireType": function(destructors, o) {
   return o ? trueValue : falseValue;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": function(pointer) {
   var heap;
   if (size === 1) {
    heap = HEAP8;
   } else if (size === 2) {
    heap = HEAP16;
   } else if (size === 4) {
    heap = HEAP32;
   } else {
    throw new TypeError("Unknown boolean type size: " + name);
   }
   return this["fromWireType"](heap[pointer >> shift]);
  },
  destructorFunction: null
 });
}

function ClassHandle_isAliasOf(other) {
 if (!(this instanceof ClassHandle)) {
  return false;
 }
 if (!(other instanceof ClassHandle)) {
  return false;
 }
 var leftClass = this.$$.ptrType.registeredClass;
 var left = this.$$.ptr;
 var rightClass = other.$$.ptrType.registeredClass;
 var right = other.$$.ptr;
 while (leftClass.baseClass) {
  left = leftClass.upcast(left);
  leftClass = leftClass.baseClass;
 }
 while (rightClass.baseClass) {
  right = rightClass.upcast(right);
  rightClass = rightClass.baseClass;
 }
 return leftClass === rightClass && left === right;
}

function shallowCopyInternalPointer(o) {
 return {
  count: o.count,
  deleteScheduled: o.deleteScheduled,
  preservePointerOnDelete: o.preservePointerOnDelete,
  ptr: o.ptr,
  ptrType: o.ptrType,
  smartPtr: o.smartPtr,
  smartPtrType: o.smartPtrType
 };
}

function throwInstanceAlreadyDeleted(obj) {
 function getInstanceTypeName(handle) {
  return handle.$$.ptrType.registeredClass.name;
 }
 throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
}

var finalizationGroup = false;

function detachFinalizer(handle) {}

function runDestructor($$) {
 if ($$.smartPtr) {
  $$.smartPtrType.rawDestructor($$.smartPtr);
 } else {
  $$.ptrType.registeredClass.rawDestructor($$.ptr);
 }
}

function releaseClassHandle($$) {
 $$.count.value -= 1;
 var toDelete = 0 === $$.count.value;
 if (toDelete) {
  runDestructor($$);
 }
}

function attachFinalizer(handle) {
 if ("undefined" === typeof FinalizationGroup) {
  attachFinalizer = function(handle) {
   return handle;
  };
  return handle;
 }
 finalizationGroup = new FinalizationGroup(function(iter) {
  for (var result = iter.next(); !result.done; result = iter.next()) {
   var $$ = result.value;
   if (!$$.ptr) {
    console.warn("object already deleted: " + $$.ptr);
   } else {
    releaseClassHandle($$);
   }
  }
 });
 attachFinalizer = function(handle) {
  finalizationGroup.register(handle, handle.$$, handle.$$);
  return handle;
 };
 detachFinalizer = function(handle) {
  finalizationGroup.unregister(handle.$$);
 };
 return attachFinalizer(handle);
}

function ClassHandle_clone() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.preservePointerOnDelete) {
  this.$$.count.value += 1;
  return this;
 } else {
  var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
   $$: {
    value: shallowCopyInternalPointer(this.$$)
   }
  }));
  clone.$$.count.value += 1;
  clone.$$.deleteScheduled = false;
  return clone;
 }
}

function ClassHandle_delete() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 detachFinalizer(this);
 releaseClassHandle(this.$$);
 if (!this.$$.preservePointerOnDelete) {
  this.$$.smartPtr = undefined;
  this.$$.ptr = undefined;
 }
}

function ClassHandle_isDeleted() {
 return !this.$$.ptr;
}

var delayFunction = undefined;

var deletionQueue = [];

function flushPendingDeletes() {
 while (deletionQueue.length) {
  var obj = deletionQueue.pop();
  obj.$$.deleteScheduled = false;
  obj["delete"]();
 }
}

function ClassHandle_deleteLater() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 deletionQueue.push(this);
 if (deletionQueue.length === 1 && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
 this.$$.deleteScheduled = true;
 return this;
}

function init_ClassHandle() {
 ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
 ClassHandle.prototype["clone"] = ClassHandle_clone;
 ClassHandle.prototype["delete"] = ClassHandle_delete;
 ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
 ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
}

function ClassHandle() {}

var registeredPointers = {};

function ensureOverloadTable(proto, methodName, humanName) {
 if (undefined === proto[methodName].overloadTable) {
  var prevFunc = proto[methodName];
  proto[methodName] = function() {
   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
    throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
   }
   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
  };
  proto[methodName].overloadTable = [];
  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
 }
}

function exposePublicSymbol(name, value, numArguments) {
 if (Module.hasOwnProperty(name)) {
  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
   throwBindingError("Cannot register public name '" + name + "' twice");
  }
  ensureOverloadTable(Module, name, name);
  if (Module.hasOwnProperty(numArguments)) {
   throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
  }
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  if (undefined !== numArguments) {
   Module[name].numArguments = numArguments;
  }
 }
}

function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
 this.name = name;
 this.constructor = constructor;
 this.instancePrototype = instancePrototype;
 this.rawDestructor = rawDestructor;
 this.baseClass = baseClass;
 this.getActualType = getActualType;
 this.upcast = upcast;
 this.downcast = downcast;
 this.pureVirtualFunctions = [];
}

function upcastPointer(ptr, ptrClass, desiredClass) {
 while (ptrClass !== desiredClass) {
  if (!ptrClass.upcast) {
   throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
  }
  ptr = ptrClass.upcast(ptr);
  ptrClass = ptrClass.baseClass;
 }
 return ptr;
}

function constNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}

function genericPointerToWireType(destructors, handle) {
 var ptr;
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  if (this.isSmartPointer) {
   ptr = this.rawConstructor();
   if (destructors !== null) {
    destructors.push(this.rawDestructor, ptr);
   }
   return ptr;
  } else {
   return 0;
  }
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (!this.isConst && handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 if (this.isSmartPointer) {
  if (undefined === handle.$$.smartPtr) {
   throwBindingError("Passing raw pointer to smart pointer is illegal");
  }
  switch (this.sharingPolicy) {
  case 0:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
   }
   break;

  case 1:
   ptr = handle.$$.smartPtr;
   break;

  case 2:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    var clonedHandle = handle["clone"]();
    ptr = this.rawShare(ptr, __emval_register(function() {
     clonedHandle["delete"]();
    }));
    if (destructors !== null) {
     destructors.push(this.rawDestructor, ptr);
    }
   }
   break;

  default:
   throwBindingError("Unsupporting sharing policy");
  }
 }
 return ptr;
}

function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}

function simpleReadValueFromPointer(pointer) {
 return this["fromWireType"](SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 1));
}

function RegisteredPointer_getPointee(ptr) {
 if (this.rawGetPointee) {
  ptr = this.rawGetPointee(ptr);
 }
 return ptr;
}

function RegisteredPointer_destructor(ptr) {
 if (this.rawDestructor) {
  this.rawDestructor(ptr);
 }
}

function RegisteredPointer_deleteObject(handle) {
 if (handle !== null) {
  handle["delete"]();
 }
}

function downcastPointer(ptr, ptrClass, desiredClass) {
 if (ptrClass === desiredClass) {
  return ptr;
 }
 if (undefined === desiredClass.baseClass) {
  return null;
 }
 var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
 if (rv === null) {
  return null;
 }
 return desiredClass.downcast(rv);
}

function getInheritedInstanceCount() {
 return Object.keys(registeredInstances).length;
}

function getLiveInheritedInstances() {
 var rv = [];
 for (var k in registeredInstances) {
  if (registeredInstances.hasOwnProperty(k)) {
   rv.push(registeredInstances[k]);
  }
 }
 return rv;
}

function setDelayFunction(fn) {
 delayFunction = fn;
 if (deletionQueue.length && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
}

function init_embind() {
 Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
 Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
 Module["flushPendingDeletes"] = flushPendingDeletes;
 Module["setDelayFunction"] = setDelayFunction;
}

var registeredInstances = {};

function getBasestPointer(class_, ptr) {
 if (ptr === undefined) {
  throwBindingError("ptr should not be undefined");
 }
 while (class_.baseClass) {
  ptr = class_.upcast(ptr);
  class_ = class_.baseClass;
 }
 return ptr;
}

function getInheritedInstance(class_, ptr) {
 ptr = getBasestPointer(class_, ptr);
 return registeredInstances[ptr];
}

function makeClassHandle(prototype, record) {
 if (!record.ptrType || !record.ptr) {
  throwInternalError("makeClassHandle requires ptr and ptrType");
 }
 var hasSmartPtrType = !!record.smartPtrType;
 var hasSmartPtr = !!record.smartPtr;
 if (hasSmartPtrType !== hasSmartPtr) {
  throwInternalError("Both smartPtrType and smartPtr must be specified");
 }
 record.count = {
  value: 1
 };
 return attachFinalizer(Object.create(prototype, {
  $$: {
   value: record
  }
 }));
}

function RegisteredPointer_fromWireType(ptr) {
 var rawPointer = this.getPointee(ptr);
 if (!rawPointer) {
  this.destructor(ptr);
  return null;
 }
 var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
 if (undefined !== registeredInstance) {
  if (0 === registeredInstance.$$.count.value) {
   registeredInstance.$$.ptr = rawPointer;
   registeredInstance.$$.smartPtr = ptr;
   return registeredInstance["clone"]();
  } else {
   var rv = registeredInstance["clone"]();
   this.destructor(ptr);
   return rv;
  }
 }
 function makeDefaultHandle() {
  if (this.isSmartPointer) {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this.pointeeType,
    ptr: rawPointer,
    smartPtrType: this,
    smartPtr: ptr
   });
  } else {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this,
    ptr: ptr
   });
  }
 }
 var actualType = this.registeredClass.getActualType(rawPointer);
 var registeredPointerRecord = registeredPointers[actualType];
 if (!registeredPointerRecord) {
  return makeDefaultHandle.call(this);
 }
 var toType;
 if (this.isConst) {
  toType = registeredPointerRecord.constPointerType;
 } else {
  toType = registeredPointerRecord.pointerType;
 }
 var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
 if (dp === null) {
  return makeDefaultHandle.call(this);
 }
 if (this.isSmartPointer) {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp,
   smartPtrType: this,
   smartPtr: ptr
  });
 } else {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp
  });
 }
}

function init_RegisteredPointer() {
 RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
 RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
 RegisteredPointer.prototype["argPackAdvance"] = 8;
 RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
 RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
 RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
}

function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
 this.name = name;
 this.registeredClass = registeredClass;
 this.isReference = isReference;
 this.isConst = isConst;
 this.isSmartPointer = isSmartPointer;
 this.pointeeType = pointeeType;
 this.sharingPolicy = sharingPolicy;
 this.rawGetPointee = rawGetPointee;
 this.rawConstructor = rawConstructor;
 this.rawShare = rawShare;
 this.rawDestructor = rawDestructor;
 if (!isSmartPointer && registeredClass.baseClass === undefined) {
  if (isConst) {
   this["toWireType"] = constNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  } else {
   this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  }
 } else {
  this["toWireType"] = genericPointerToWireType;
 }
}

function replacePublicSymbol(name, value, numArguments) {
 if (!Module.hasOwnProperty(name)) {
  throwInternalError("Replacing nonexistant public symbol");
 }
 if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  Module[name].argCount = numArguments;
 }
}

function dynCallLegacy(sig, ptr, args) {
 assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
 if (args && args.length) {
  assert(args.length === sig.substring(1).replace(/j/g, "--").length);
 } else {
  assert(sig.length == 1);
 }
 var f = Module["dynCall_" + sig];
 return args && args.length ? f.apply(null, [ ptr ].concat(args)) : f.call(null, ptr);
}

function dynCall(sig, ptr, args) {
 if (sig.includes("j")) {
  return dynCallLegacy(sig, ptr, args);
 }
 assert(wasmTable.get(ptr), "missing table entry in dynCall: " + ptr);
 return wasmTable.get(ptr).apply(null, args);
}

function getDynCaller(sig, ptr) {
 assert(sig.includes("j"), "getDynCaller should only be called with i64 sigs");
 var argCache = [];
 return function() {
  argCache.length = arguments.length;
  for (var i = 0; i < arguments.length; i++) {
   argCache[i] = arguments[i];
  }
  return dynCall(sig, ptr, argCache);
 };
}

function embind__requireFunction(signature, rawFunction) {
 signature = readLatin1String(signature);
 function makeDynCaller() {
  if (signature.includes("j")) {
   return getDynCaller(signature, rawFunction);
  }
  return wasmTable.get(rawFunction);
 }
 var fp = makeDynCaller();
 if (typeof fp !== "function") {
  throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
 }
 return fp;
}

var UnboundTypeError = undefined;

function getTypeName(type) {
 var ptr = ___getTypeName(type);
 var rv = readLatin1String(ptr);
 _free(ptr);
 return rv;
}

function throwUnboundTypeError(message, types) {
 var unboundTypes = [];
 var seen = {};
 function visit(type) {
  if (seen[type]) {
   return;
  }
  if (registeredTypes[type]) {
   return;
  }
  if (typeDependencies[type]) {
   typeDependencies[type].forEach(visit);
   return;
  }
  unboundTypes.push(type);
  seen[type] = true;
 }
 types.forEach(visit);
 throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([ ", " ]));
}

function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
 name = readLatin1String(name);
 getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
 if (upcast) {
  upcast = embind__requireFunction(upcastSignature, upcast);
 }
 if (downcast) {
  downcast = embind__requireFunction(downcastSignature, downcast);
 }
 rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
 var legalFunctionName = makeLegalFunctionName(name);
 exposePublicSymbol(legalFunctionName, function() {
  throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [ baseClassRawType ]);
 });
 whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], function(base) {
  base = base[0];
  var baseClass;
  var basePrototype;
  if (baseClassRawType) {
   baseClass = base.registeredClass;
   basePrototype = baseClass.instancePrototype;
  } else {
   basePrototype = ClassHandle.prototype;
  }
  var constructor = createNamedFunction(legalFunctionName, function() {
   if (Object.getPrototypeOf(this) !== instancePrototype) {
    throw new BindingError("Use 'new' to construct " + name);
   }
   if (undefined === registeredClass.constructor_body) {
    throw new BindingError(name + " has no accessible constructor");
   }
   var body = registeredClass.constructor_body[arguments.length];
   if (undefined === body) {
    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
   }
   return body.apply(this, arguments);
  });
  var instancePrototype = Object.create(basePrototype, {
   constructor: {
    value: constructor
   }
  });
  constructor.prototype = instancePrototype;
  var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
  var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
  var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
  var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
  registeredPointers[rawType] = {
   pointerType: pointerConverter,
   constPointerType: constPointerConverter
  };
  replacePublicSymbol(legalFunctionName, constructor);
  return [ referenceConverter, pointerConverter, constPointerConverter ];
 });
}

function new_(constructor, argumentList) {
 if (!(constructor instanceof Function)) {
  throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
 }
 var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {});
 dummy.prototype = constructor.prototype;
 var obj = new dummy();
 var r = constructor.apply(obj, argumentList);
 return r instanceof Object ? r : obj;
}

function runDestructors(destructors) {
 while (destructors.length) {
  var ptr = destructors.pop();
  var del = destructors.pop();
  del(ptr);
 }
}

function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
 var argCount = argTypes.length;
 if (argCount < 2) {
  throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
 }
 var isClassMethodFunc = argTypes[1] !== null && classType !== null;
 var needsDestructorStack = false;
 for (var i = 1; i < argTypes.length; ++i) {
  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
   needsDestructorStack = true;
   break;
  }
 }
 var returns = argTypes[0].name !== "void";
 var argsList = "";
 var argsListWired = "";
 for (var i = 0; i < argCount - 2; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
 }
 var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";
 if (needsDestructorStack) {
  invokerFnBody += "var destructors = [];\n";
 }
 var dtorStack = needsDestructorStack ? "destructors" : "null";
 var args1 = [ "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam" ];
 var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];
 if (isClassMethodFunc) {
  invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
 }
 for (var i = 0; i < argCount - 2; ++i) {
  invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
  args1.push("argType" + i);
  args2.push(argTypes[i + 2]);
 }
 if (isClassMethodFunc) {
  argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
 }
 invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
 if (needsDestructorStack) {
  invokerFnBody += "runDestructors(destructors);\n";
 } else {
  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
   var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
   if (argTypes[i].destructorFunction !== null) {
    invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
    args1.push(paramName + "_dtor");
    args2.push(argTypes[i].destructorFunction);
   }
  }
 }
 if (returns) {
  invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
 } else {}
 invokerFnBody += "}\n";
 args1.push(invokerFnBody);
 var invokerFunction = new_(Function, args1).apply(null, args2);
 return invokerFunction;
}

function heap32VectorToArray(count, firstElement) {
 var array = [];
 for (var i = 0; i < count; i++) {
  array.push(SAFE_HEAP_LOAD(((firstElement >> 2) + i) * 4, 4, 0));
 }
 return array;
}

function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 methodName = readLatin1String(methodName);
 rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
 whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {
  classType = classType[0];
  var humanName = classType.name + "." + methodName;
  function unboundTypesHandler() {
   throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
  }
  if (methodName.startsWith("@@")) {
   methodName = Symbol[methodName.substring(2)];
  }
  var proto = classType.registeredClass.constructor;
  if (undefined === proto[methodName]) {
   unboundTypesHandler.argCount = argCount - 1;
   proto[methodName] = unboundTypesHandler;
  } else {
   ensureOverloadTable(proto, methodName, humanName);
   proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;
  }
  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
   var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));
   var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);
   if (undefined === proto[methodName].overloadTable) {
    func.argCount = argCount - 1;
    proto[methodName] = func;
   } else {
    proto[methodName].overloadTable[argCount - 1] = func;
   }
   return [];
  });
  return [];
 });
}

function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
 assert(argCount > 0);
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 invoker = embind__requireFunction(invokerSignature, invoker);
 var args = [ rawConstructor ];
 var destructors = [];
 whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {
  classType = classType[0];
  var humanName = "constructor " + classType.name;
  if (undefined === classType.registeredClass.constructor_body) {
   classType.registeredClass.constructor_body = [];
  }
  if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
   throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
  }
  classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
   throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
  };
  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
   classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
    if (arguments.length !== argCount - 1) {
     throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
    }
    destructors.length = 0;
    args.length = argCount;
    for (var i = 1; i < argCount; ++i) {
     args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
    }
    var ptr = invoker.apply(null, args);
    runDestructors(destructors);
    return argTypes[0]["fromWireType"](ptr);
   };
   return [];
  });
  return [];
 });
}

var emval_free_list = [];

var emval_handle_array = [ {}, {
 value: undefined
}, {
 value: null
}, {
 value: true
}, {
 value: false
} ];

function __emval_decref(handle) {
 if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
  emval_handle_array[handle] = undefined;
  emval_free_list.push(handle);
 }
}

function count_emval_handles() {
 var count = 0;
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   ++count;
  }
 }
 return count;
}

function get_first_emval() {
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   return emval_handle_array[i];
  }
 }
 return null;
}

function init_emval() {
 Module["count_emval_handles"] = count_emval_handles;
 Module["get_first_emval"] = get_first_emval;
}

function __emval_register(value) {
 switch (value) {
 case undefined:
  {
   return 1;
  }

 case null:
  {
   return 2;
  }

 case true:
  {
   return 3;
  }

 case false:
  {
   return 4;
  }

 default:
  {
   var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
   emval_handle_array[handle] = {
    refcount: 1,
    value: value
   };
   return handle;
  }
 }
}

function __embind_register_emval(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(handle) {
   var rv = emval_handle_array[handle].value;
   __emval_decref(handle);
   return rv;
  },
  "toWireType": function(destructors, value) {
   return __emval_register(value);
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: null
 });
}

function _embind_repr(v) {
 if (v === null) {
  return "null";
 }
 var t = typeof v;
 if (t === "object" || t === "array" || t === "function") {
  return v.toString();
 } else {
  return "" + v;
 }
}

function floatReadValueFromPointer(name, shift) {
 switch (shift) {
 case 2:
  return function(pointer) {
   return this["fromWireType"](SAFE_HEAP_LOAD_D((pointer >> 2) * 4, 4, 0));
  };

 case 3:
  return function(pointer) {
   return this["fromWireType"](SAFE_HEAP_LOAD_D((pointer >> 3) * 8, 8, 0));
  };

 default:
  throw new TypeError("Unknown float type: " + name);
 }
}

function __embind_register_float(rawType, name, size) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   return value;
  },
  "toWireType": function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   return value;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": floatReadValueFromPointer(name, shift),
  destructorFunction: null
 });
}

function integerReadValueFromPointer(name, shift, signed) {
 switch (shift) {
 case 0:
  return signed ? function readS8FromPointer(pointer) {
   return SAFE_HEAP_LOAD(pointer, 1, 0);
  } : function readU8FromPointer(pointer) {
   return SAFE_HEAP_LOAD(pointer, 1, 1);
  };

 case 1:
  return signed ? function readS16FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 1) * 2, 2, 0);
  } : function readU16FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 1) * 2, 2, 1);
  };

 case 2:
  return signed ? function readS32FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 0);
  } : function readU32FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 1);
  };

 default:
  throw new TypeError("Unknown integer type: " + name);
 }
}

function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
 name = readLatin1String(name);
 if (maxRange === -1) {
  maxRange = 4294967295;
 }
 var shift = getShiftFromSize(size);
 var fromWireType = function(value) {
  return value;
 };
 if (minRange === 0) {
  var bitshift = 32 - 8 * size;
  fromWireType = function(value) {
   return value << bitshift >>> bitshift;
  };
 }
 var isUnsignedType = name.includes("unsigned");
 registerType(primitiveType, {
  name: name,
  "fromWireType": fromWireType,
  "toWireType": function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   if (value < minRange || value > maxRange) {
    throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
   }
   return isUnsignedType ? value >>> 0 : value | 0;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
  destructorFunction: null
 });
}

function __embind_register_memory_view(rawType, dataTypeIndex, name) {
 var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
 var TA = typeMapping[dataTypeIndex];
 function decodeMemoryView(handle) {
  handle = handle >> 2;
  var heap = HEAPU32;
  var size = heap[handle];
  var data = heap[handle + 1];
  return new TA(buffer, data, size);
 }
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": decodeMemoryView,
  "argPackAdvance": 8,
  "readValueFromPointer": decodeMemoryView
 }, {
  ignoreDuplicateRegistrations: true
 });
}

function __embind_register_std_string(rawType, name) {
 name = readLatin1String(name);
 var stdStringIsUTF8 = name === "std::string";
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var length = SAFE_HEAP_LOAD((value >> 2) * 4, 4, 1);
   var str;
   if (stdStringIsUTF8) {
    var decodeStartPtr = value + 4;
    for (var i = 0; i <= length; ++i) {
     var currentBytePtr = value + 4 + i;
     if (i == length || SAFE_HEAP_LOAD(currentBytePtr, 1, 1) == 0) {
      var maxRead = currentBytePtr - decodeStartPtr;
      var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
      if (str === undefined) {
       str = stringSegment;
      } else {
       str += String.fromCharCode(0);
       str += stringSegment;
      }
      decodeStartPtr = currentBytePtr + 1;
     }
    }
   } else {
    var a = new Array(length);
    for (var i = 0; i < length; ++i) {
     a[i] = String.fromCharCode(SAFE_HEAP_LOAD(value + 4 + i, 1, 1));
    }
    str = a.join("");
   }
   _free(value);
   return str;
  },
  "toWireType": function(destructors, value) {
   if (value instanceof ArrayBuffer) {
    value = new Uint8Array(value);
   }
   var getLength;
   var valueIsOfTypeString = typeof value === "string";
   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
    throwBindingError("Cannot pass non-string to std::string");
   }
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    getLength = function() {
     return lengthBytesUTF8(value);
    };
   } else {
    getLength = function() {
     return value.length;
    };
   }
   var length = getLength();
   var ptr = _malloc(4 + length + 1);
   SAFE_HEAP_STORE((ptr >> 2) * 4, length, 4);
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    stringToUTF8(value, ptr + 4, length + 1);
   } else {
    if (valueIsOfTypeString) {
     for (var i = 0; i < length; ++i) {
      var charCode = value.charCodeAt(i);
      if (charCode > 255) {
       _free(ptr);
       throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
      }
      SAFE_HEAP_STORE(ptr + 4 + i, charCode, 1);
     }
    } else {
     for (var i = 0; i < length; ++i) {
      SAFE_HEAP_STORE(ptr + 4 + i, value[i], 1);
     }
    }
   }
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

function __embind_register_std_wstring(rawType, charSize, name) {
 name = readLatin1String(name);
 var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
 if (charSize === 2) {
  decodeString = UTF16ToString;
  encodeString = stringToUTF16;
  lengthBytesUTF = lengthBytesUTF16;
  getHeap = function() {
   return HEAPU16;
  };
  shift = 1;
 } else if (charSize === 4) {
  decodeString = UTF32ToString;
  encodeString = stringToUTF32;
  lengthBytesUTF = lengthBytesUTF32;
  getHeap = function() {
   return HEAPU32;
  };
  shift = 2;
 }
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var length = SAFE_HEAP_LOAD((value >> 2) * 4, 4, 1);
   var HEAP = getHeap();
   var str;
   var decodeStartPtr = value + 4;
   for (var i = 0; i <= length; ++i) {
    var currentBytePtr = value + 4 + i * charSize;
    if (i == length || HEAP[currentBytePtr >> shift] == 0) {
     var maxReadBytes = currentBytePtr - decodeStartPtr;
     var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
     if (str === undefined) {
      str = stringSegment;
     } else {
      str += String.fromCharCode(0);
      str += stringSegment;
     }
     decodeStartPtr = currentBytePtr + charSize;
    }
   }
   _free(value);
   return str;
  },
  "toWireType": function(destructors, value) {
   if (!(typeof value === "string")) {
    throwBindingError("Cannot pass non-string to C++ string type " + name);
   }
   var length = lengthBytesUTF(value);
   var ptr = _malloc(4 + length + charSize);
   SAFE_HEAP_STORE((ptr >> 2) * 4, length >> shift, 4);
   encodeString(value, ptr + 4, length + charSize);
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

function __embind_register_void(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  isVoid: true,
  name: name,
  "argPackAdvance": 0,
  "fromWireType": function() {
   return undefined;
  },
  "toWireType": function(destructors, o) {
   return undefined;
  }
 });
}

function requireHandle(handle) {
 if (!handle) {
  throwBindingError("Cannot use deleted val. handle = " + handle);
 }
 return emval_handle_array[handle].value;
}

function requireRegisteredType(rawType, humanName) {
 var impl = registeredTypes[rawType];
 if (undefined === impl) {
  throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
 }
 return impl;
}

function __emval_as(handle, returnType, destructorsRef) {
 handle = requireHandle(handle);
 returnType = requireRegisteredType(returnType, "emval::as");
 var destructors = [];
 var rd = __emval_register(destructors);
 SAFE_HEAP_STORE((destructorsRef >> 2) * 4, rd, 4);
 return returnType["toWireType"](destructors, handle);
}

function __emval_allocateDestructors(destructorsRef) {
 var destructors = [];
 SAFE_HEAP_STORE((destructorsRef >> 2) * 4, __emval_register(destructors), 4);
 return destructors;
}

var emval_symbols = {};

function getStringOrSymbol(address) {
 var symbol = emval_symbols[address];
 if (symbol === undefined) {
  return readLatin1String(address);
 } else {
  return symbol;
 }
}

var emval_methodCallers = [];

function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
 caller = emval_methodCallers[caller];
 handle = requireHandle(handle);
 methodName = getStringOrSymbol(methodName);
 return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
}

function emval_get_global() {
 if (typeof globalThis === "object") {
  return globalThis;
 }
 return function() {
  return Function;
 }()("return this")();
}

function __emval_get_global(name) {
 if (name === 0) {
  return __emval_register(emval_get_global());
 } else {
  name = getStringOrSymbol(name);
  return __emval_register(emval_get_global()[name]);
 }
}

function __emval_addMethodCaller(caller) {
 var id = emval_methodCallers.length;
 emval_methodCallers.push(caller);
 return id;
}

function __emval_lookupTypes(argCount, argTypes) {
 var a = new Array(argCount);
 for (var i = 0; i < argCount; ++i) {
  a[i] = requireRegisteredType(SAFE_HEAP_LOAD(((argTypes >> 2) + i) * 4, 4, 0), "parameter " + i);
 }
 return a;
}

function __emval_get_method_caller(argCount, argTypes) {
 var types = __emval_lookupTypes(argCount, argTypes);
 var retType = types[0];
 var signatureName = retType.name + "_$" + types.slice(1).map(function(t) {
  return t.name;
 }).join("_") + "$";
 var params = [ "retType" ];
 var args = [ retType ];
 var argsList = "";
 for (var i = 0; i < argCount - 1; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  params.push("argType" + i);
  args.push(types[1 + i]);
 }
 var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
 var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
 var offset = 0;
 for (var i = 0; i < argCount - 1; ++i) {
  functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
  offset += types[i + 1]["argPackAdvance"];
 }
 functionBody += "    var rv = handle[name](" + argsList + ");\n";
 for (var i = 0; i < argCount - 1; ++i) {
  if (types[i + 1]["deleteObject"]) {
   functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
  }
 }
 if (!retType.isVoid) {
  functionBody += "    return retType.toWireType(destructors, rv);\n";
 }
 functionBody += "};\n";
 params.push(functionBody);
 var invokerFunction = new_(Function, params).apply(null, args);
 return __emval_addMethodCaller(invokerFunction);
}

function __emval_get_property(handle, key) {
 handle = requireHandle(handle);
 key = requireHandle(key);
 return __emval_register(handle[key]);
}

function __emval_incref(handle) {
 if (handle > 4) {
  emval_handle_array[handle].refcount += 1;
 }
}

function __emval_new_array() {
 return __emval_register([]);
}

function __emval_new_cstring(v) {
 return __emval_register(getStringOrSymbol(v));
}

function __emval_new_object() {
 return __emval_register({});
}

function __emval_run_destructors(handle) {
 var destructors = emval_handle_array[handle].value;
 runDestructors(destructors);
 __emval_decref(handle);
}

function __emval_set_property(handle, key, value) {
 handle = requireHandle(handle);
 key = requireHandle(key);
 value = requireHandle(value);
 handle[key] = value;
}

function __emval_take_value(type, argv) {
 type = requireRegisteredType(type, "_emval_take_value");
 var v = type["readValueFromPointer"](argv);
 return __emval_register(v);
}

function _abort() {
 abort();
}

var readAsmConstArgsArray = [];

function readAsmConstArgs(sigPtr, buf) {
 assert(Array.isArray(readAsmConstArgsArray));
 assert(buf % 16 == 0);
 readAsmConstArgsArray.length = 0;
 var ch;
 buf >>= 2;
 while (ch = SAFE_HEAP_LOAD(sigPtr++, 1, 1)) {
  assert(ch === 100 || ch === 102 || ch === 105);
  var double = ch < 105;
  if (double && buf & 1) buf++;
  readAsmConstArgsArray.push(double ? SAFE_HEAP_LOAD_D((buf++ >> 1) * 8, 8, 0) : SAFE_HEAP_LOAD(buf * 4, 4, 0));
  ++buf;
 }
 return readAsmConstArgsArray;
}

function _emscripten_asm_const_int(code, sigPtr, argbuf) {
 var args = readAsmConstArgs(sigPtr, argbuf);
 if (!ASM_CONSTS.hasOwnProperty(code)) abort("No EM_ASM constant found at address " + code);
 return ASM_CONSTS[code].apply(null, args);
}

function reallyNegative(x) {
 return x < 0 || x === 0 && 1 / x === -Infinity;
}

function convertI32PairToI53(lo, hi) {
 assert(hi === (hi | 0));
 return (lo >>> 0) + hi * 4294967296;
}

function convertU32PairToI53(lo, hi) {
 return (lo >>> 0) + (hi >>> 0) * 4294967296;
}

function reSign(value, bits) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}

function formatString(format, varargs) {
 assert((varargs & 3) === 0);
 var textIndex = format;
 var argIndex = varargs;
 function prepVararg(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }
 function getNextArg(type) {
  var ret;
  argIndex = prepVararg(argIndex, type);
  if (type === "double") {
   ret = SAFE_HEAP_LOAD_D((argIndex >> 3) * 8, 8, 0);
   argIndex += 8;
  } else if (type == "i64") {
   ret = [ SAFE_HEAP_LOAD((argIndex >> 2) * 4, 4, 0), SAFE_HEAP_LOAD((argIndex + 4 >> 2) * 4, 4, 0) ];
   argIndex += 8;
  } else {
   assert((argIndex & 3) === 0);
   type = "i32";
   ret = SAFE_HEAP_LOAD((argIndex >> 2) * 4, 4, 0);
   argIndex += 4;
  }
  return ret;
 }
 var ret = [];
 var curr, next, currArg;
 while (1) {
  var startTextIndex = textIndex;
  curr = SAFE_HEAP_LOAD(textIndex | 0, 1, 0) | 0;
  if (curr === 0) break;
  next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
  if (curr == 37) {
   var flagAlwaysSigned = false;
   var flagLeftAlign = false;
   var flagAlternative = false;
   var flagZeroPad = false;
   var flagPadSign = false;
   flagsLoop: while (1) {
    switch (next) {
    case 43:
     flagAlwaysSigned = true;
     break;

    case 45:
     flagLeftAlign = true;
     break;

    case 35:
     flagAlternative = true;
     break;

    case 48:
     if (flagZeroPad) {
      break flagsLoop;
     } else {
      flagZeroPad = true;
      break;
     }

    case 32:
     flagPadSign = true;
     break;

    default:
     break flagsLoop;
    }
    textIndex++;
    next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
   }
   var width = 0;
   if (next == 42) {
    width = getNextArg("i32");
    textIndex++;
    next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
   } else {
    while (next >= 48 && next <= 57) {
     width = width * 10 + (next - 48);
     textIndex++;
     next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
    }
   }
   var precisionSet = false, precision = -1;
   if (next == 46) {
    precision = 0;
    precisionSet = true;
    textIndex++;
    next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
    if (next == 42) {
     precision = getNextArg("i32");
     textIndex++;
    } else {
     while (1) {
      var precisionChr = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
      if (precisionChr < 48 || precisionChr > 57) break;
      precision = precision * 10 + (precisionChr - 48);
      textIndex++;
     }
    }
    next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
   }
   if (precision < 0) {
    precision = 6;
    precisionSet = false;
   }
   var argSize;
   switch (String.fromCharCode(next)) {
   case "h":
    var nextNext = SAFE_HEAP_LOAD(textIndex + 2 | 0, 1, 0) | 0;
    if (nextNext == 104) {
     textIndex++;
     argSize = 1;
    } else {
     argSize = 2;
    }
    break;

   case "l":
    var nextNext = SAFE_HEAP_LOAD(textIndex + 2 | 0, 1, 0) | 0;
    if (nextNext == 108) {
     textIndex++;
     argSize = 8;
    } else {
     argSize = 4;
    }
    break;

   case "L":
   case "q":
   case "j":
    argSize = 8;
    break;

   case "z":
   case "t":
   case "I":
    argSize = 4;
    break;

   default:
    argSize = null;
   }
   if (argSize) textIndex++;
   next = SAFE_HEAP_LOAD(textIndex + 1 | 0, 1, 0) | 0;
   switch (String.fromCharCode(next)) {
   case "d":
   case "i":
   case "u":
   case "o":
   case "x":
   case "X":
   case "p":
    {
     var signed = next == 100 || next == 105;
     argSize = argSize || 4;
     currArg = getNextArg("i" + argSize * 8);
     var argText;
     if (argSize == 8) {
      currArg = next == 117 ? convertU32PairToI53(currArg[0], currArg[1]) : convertI32PairToI53(currArg[0], currArg[1]);
     }
     if (argSize <= 4) {
      var limit = Math.pow(256, argSize) - 1;
      currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
     }
     var currAbsArg = Math.abs(currArg);
     var prefix = "";
     if (next == 100 || next == 105) {
      argText = reSign(currArg, 8 * argSize, 1).toString(10);
     } else if (next == 117) {
      argText = unSign(currArg, 8 * argSize, 1).toString(10);
      currArg = Math.abs(currArg);
     } else if (next == 111) {
      argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
     } else if (next == 120 || next == 88) {
      prefix = flagAlternative && currArg != 0 ? "0x" : "";
      if (currArg < 0) {
       currArg = -currArg;
       argText = (currAbsArg - 1).toString(16);
       var buffer = [];
       for (var i = 0; i < argText.length; i++) {
        buffer.push((15 - parseInt(argText[i], 16)).toString(16));
       }
       argText = buffer.join("");
       while (argText.length < argSize * 2) argText = "f" + argText;
      } else {
       argText = currAbsArg.toString(16);
      }
      if (next == 88) {
       prefix = prefix.toUpperCase();
       argText = argText.toUpperCase();
      }
     } else if (next == 112) {
      if (currAbsArg === 0) {
       argText = "(nil)";
      } else {
       prefix = "0x";
       argText = currAbsArg.toString(16);
      }
     }
     if (precisionSet) {
      while (argText.length < precision) {
       argText = "0" + argText;
      }
     }
     if (currArg >= 0) {
      if (flagAlwaysSigned) {
       prefix = "+" + prefix;
      } else if (flagPadSign) {
       prefix = " " + prefix;
      }
     }
     if (argText.charAt(0) == "-") {
      prefix = "-" + prefix;
      argText = argText.substr(1);
     }
     while (prefix.length + argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad) {
        argText = "0" + argText;
       } else {
        prefix = " " + prefix;
       }
      }
     }
     argText = prefix + argText;
     argText.split("").forEach(function(chr) {
      ret.push(chr.charCodeAt(0));
     });
     break;
    }

   case "f":
   case "F":
   case "e":
   case "E":
   case "g":
   case "G":
    {
     currArg = getNextArg("double");
     var argText;
     if (isNaN(currArg)) {
      argText = "nan";
      flagZeroPad = false;
     } else if (!isFinite(currArg)) {
      argText = (currArg < 0 ? "-" : "") + "inf";
      flagZeroPad = false;
     } else {
      var isGeneral = false;
      var effectivePrecision = Math.min(precision, 20);
      if (next == 103 || next == 71) {
       isGeneral = true;
       precision = precision || 1;
       var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
       if (precision > exponent && exponent >= -4) {
        next = (next == 103 ? "f" : "F").charCodeAt(0);
        precision -= exponent + 1;
       } else {
        next = (next == 103 ? "e" : "E").charCodeAt(0);
        precision--;
       }
       effectivePrecision = Math.min(precision, 20);
      }
      if (next == 101 || next == 69) {
       argText = currArg.toExponential(effectivePrecision);
       if (/[eE][-+]\d$/.test(argText)) {
        argText = argText.slice(0, -1) + "0" + argText.slice(-1);
       }
      } else if (next == 102 || next == 70) {
       argText = currArg.toFixed(effectivePrecision);
       if (currArg === 0 && reallyNegative(currArg)) {
        argText = "-" + argText;
       }
      }
      var parts = argText.split("e");
      if (isGeneral && !flagAlternative) {
       while (parts[0].length > 1 && parts[0].includes(".") && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
        parts[0] = parts[0].slice(0, -1);
       }
      } else {
       if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
       while (precision > effectivePrecision++) parts[0] += "0";
      }
      argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
      if (next == 69) argText = argText.toUpperCase();
      if (currArg >= 0) {
       if (flagAlwaysSigned) {
        argText = "+" + argText;
       } else if (flagPadSign) {
        argText = " " + argText;
       }
      }
     }
     while (argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
        argText = argText[0] + "0" + argText.slice(1);
       } else {
        argText = (flagZeroPad ? "0" : " ") + argText;
       }
      }
     }
     if (next < 97) argText = argText.toUpperCase();
     argText.split("").forEach(function(chr) {
      ret.push(chr.charCodeAt(0));
     });
     break;
    }

   case "s":
    {
     var arg = getNextArg("i8*");
     var argLength = arg ? _strlen(arg) : "(null)".length;
     if (precisionSet) argLength = Math.min(argLength, precision);
     if (!flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     if (arg) {
      for (var i = 0; i < argLength; i++) {
       ret.push(SAFE_HEAP_LOAD(arg++ | 0, 1, 1) >>> 0);
      }
     } else {
      ret = ret.concat(intArrayFromString("(null)".substr(0, argLength), true));
     }
     if (flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     break;
    }

   case "c":
    {
     if (flagLeftAlign) ret.push(getNextArg("i8"));
     while (--width > 0) {
      ret.push(32);
     }
     if (!flagLeftAlign) ret.push(getNextArg("i8"));
     break;
    }

   case "n":
    {
     var ptr = getNextArg("i32*");
     SAFE_HEAP_STORE(ptr | 0, ret.length | 0, 4);
     break;
    }

   case "%":
    {
     ret.push(curr);
     break;
    }

   default:
    {
     for (var i = startTextIndex; i < textIndex + 2; i++) {
      ret.push(SAFE_HEAP_LOAD(i | 0, 1, 0) | 0);
     }
    }
   }
   textIndex += 2;
  } else {
   ret.push(curr);
   textIndex += 1;
  }
 }
 return ret;
}

function traverseStack(args) {
 if (!args || !args.callee || !args.callee.name) {
  return [ null, "", "" ];
 }
 var funstr = args.callee.toString();
 var funcname = args.callee.name;
 var str = "(";
 var first = true;
 for (var i in args) {
  var a = args[i];
  if (!first) {
   str += ", ";
  }
  first = false;
  if (typeof a === "number" || typeof a === "string") {
   str += a;
  } else {
   str += "(" + typeof a + ")";
  }
 }
 str += ")";
 var caller = args.callee.caller;
 args = caller ? caller.arguments : [];
 if (first) str = "";
 return [ args, funcname, str ];
}

function _emscripten_get_callstack_js(flags) {
 var callstack = jsStackTrace();
 var iThisFunc = callstack.lastIndexOf("_emscripten_log");
 var iThisFunc2 = callstack.lastIndexOf("_emscripten_get_callstack");
 var iNextLine = callstack.indexOf("\n", Math.max(iThisFunc, iThisFunc2)) + 1;
 callstack = callstack.slice(iNextLine);
 if (flags & 32) {
  warnOnce("EM_LOG_DEMANGLE is deprecated; ignoring");
 }
 if (flags & 8 && typeof emscripten_source_map === "undefined") {
  warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
  flags ^= 8;
  flags |= 16;
 }
 var stack_args = null;
 if (flags & 128) {
  stack_args = traverseStack(arguments);
  while (stack_args[1].includes("_emscripten_")) stack_args = traverseStack(stack_args[0]);
 }
 var lines = callstack.split("\n");
 callstack = "";
 var newFirefoxRe = new RegExp("\\s*(.*?)@(.*?):([0-9]+):([0-9]+)");
 var firefoxRe = new RegExp("\\s*(.*?)@(.*):(.*)(:(.*))?");
 var chromeRe = new RegExp("\\s*at (.*?) \\((.*):(.*):(.*)\\)");
 for (var l in lines) {
  var line = lines[l];
  var symbolName = "";
  var file = "";
  var lineno = 0;
  var column = 0;
  var parts = chromeRe.exec(line);
  if (parts && parts.length == 5) {
   symbolName = parts[1];
   file = parts[2];
   lineno = parts[3];
   column = parts[4];
  } else {
   parts = newFirefoxRe.exec(line);
   if (!parts) parts = firefoxRe.exec(line);
   if (parts && parts.length >= 4) {
    symbolName = parts[1];
    file = parts[2];
    lineno = parts[3];
    column = parts[4] | 0;
   } else {
    callstack += line + "\n";
    continue;
   }
  }
  var haveSourceMap = false;
  if (flags & 8) {
   var orig = emscripten_source_map.originalPositionFor({
    line: lineno,
    column: column
   });
   haveSourceMap = orig && orig.source;
   if (haveSourceMap) {
    if (flags & 64) {
     orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf("/") + 1);
    }
    callstack += "    at " + symbolName + " (" + orig.source + ":" + orig.line + ":" + orig.column + ")\n";
   }
  }
  if (flags & 16 || !haveSourceMap) {
   if (flags & 64) {
    file = file.substring(file.replace(/\\/g, "/").lastIndexOf("/") + 1);
   }
   callstack += (haveSourceMap ? "     = " + symbolName : "    at " + symbolName) + " (" + file + ":" + lineno + ":" + column + ")\n";
  }
  if (flags & 128 && stack_args[0]) {
   if (stack_args[1] == symbolName && stack_args[2].length > 0) {
    callstack = callstack.replace(/\s+$/, "");
    callstack += " with values: " + stack_args[1] + stack_args[2] + "\n";
   }
   stack_args = traverseStack(stack_args[0]);
  }
 }
 callstack = callstack.replace(/\s+$/, "");
 return callstack;
}

function _emscripten_log_js(flags, str) {
 if (flags & 24) {
  str = str.replace(/\s+$/, "");
  str += (str.length > 0 ? "\n" : "") + _emscripten_get_callstack_js(flags);
 }
 if (flags & 1) {
  if (flags & 4) {
   console.error(str);
  } else if (flags & 2) {
   console.warn(str);
  } else if (flags & 512) {
   console.info(str);
  } else if (flags & 256) {
   console.debug(str);
  } else {
   console.log(str);
  }
 } else if (flags & 6) {
  err(str);
 } else {
  out(str);
 }
}

function _emscripten_log(flags, format, varargs) {
 var result = formatString(format, varargs);
 var str = UTF8ArrayToString(result, 0);
 _emscripten_log_js(flags, str);
}

function emscripten_realloc_buffer(size) {
 try {
  wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
  updateGlobalBufferAndViews(wasmMemory.buffer);
  return 1;
 } catch (e) {
  console.error("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
 }
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = HEAPU8.length;
 requestedSize = requestedSize >>> 0;
 assert(requestedSize > oldSize);
 var maxHeapSize = 2147483648;
 if (requestedSize > maxHeapSize) {
  err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
  return false;
 }
 for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  var replacement = emscripten_realloc_buffer(newSize);
  if (replacement) {
   err("Warning: Enlarging memory arrays, this is not fast! " + [ oldSize, newSize ]);
   return true;
  }
 }
 err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
 return false;
}

var ENV = {};

function getExecutableName() {
 return thisProgram || "./this.program";
}

function getEnvStrings() {
 if (!getEnvStrings.strings) {
  var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
  var env = {
   "USER": "web_user",
   "LOGNAME": "web_user",
   "PATH": "/",
   "PWD": "/",
   "HOME": "/home/web_user",
   "LANG": lang,
   "_": getExecutableName()
  };
  for (var x in ENV) {
   if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];
  }
  var strings = [];
  for (var x in env) {
   strings.push(x + "=" + env[x]);
  }
  getEnvStrings.strings = strings;
 }
 return getEnvStrings.strings;
}

function _environ_get(__environ, environ_buf) {
 try {
  var bufSize = 0;
  getEnvStrings().forEach(function(string, i) {
   var ptr = environ_buf + bufSize;
   SAFE_HEAP_STORE(__environ + i * 4 | 0, ptr | 0, 4);
   writeAsciiToMemory(string, ptr);
   bufSize += string.length + 1;
  });
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _environ_sizes_get(penviron_count, penviron_buf_size) {
 try {
  var strings = getEnvStrings();
  SAFE_HEAP_STORE(penviron_count | 0, strings.length | 0, 4);
  var bufSize = 0;
  strings.forEach(function(string) {
   bufSize += string.length + 1;
  });
  SAFE_HEAP_STORE(penviron_buf_size | 0, bufSize | 0, 4);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_close(fd) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_read(fd, iov, iovcnt, pnum) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doReadv(stream, iov, iovcnt);
  SAFE_HEAP_STORE(pnum | 0, num | 0, 4);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var HIGH_OFFSET = 4294967296;
  var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  var DOUBLE_LIMIT = 9007199254740992;
  if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
   return -61;
  }
  FS.llseek(stream, offset, whence);
  tempI64 = [ stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  SAFE_HEAP_STORE(newOffset | 0, tempI64[0] | 0, 4), SAFE_HEAP_STORE(newOffset + 4 | 0, tempI64[1] | 0, 4);
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_write(fd, iov, iovcnt, pnum) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doWritev(stream, iov, iovcnt);
  SAFE_HEAP_STORE(pnum | 0, num | 0, 4);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _setTempRet0(val) {
 setTempRet0(val);
}

function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) {}
 return sum;
}

var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}

function _strftime(s, maxsize, format, tm) {
 var tm_zone = SAFE_HEAP_LOAD(tm + 40 | 0, 4, 0) | 0;
 var date = {
  tm_sec: SAFE_HEAP_LOAD(tm | 0, 4, 0) | 0,
  tm_min: SAFE_HEAP_LOAD(tm + 4 | 0, 4, 0) | 0,
  tm_hour: SAFE_HEAP_LOAD(tm + 8 | 0, 4, 0) | 0,
  tm_mday: SAFE_HEAP_LOAD(tm + 12 | 0, 4, 0) | 0,
  tm_mon: SAFE_HEAP_LOAD(tm + 16 | 0, 4, 0) | 0,
  tm_year: SAFE_HEAP_LOAD(tm + 20 | 0, 4, 0) | 0,
  tm_wday: SAFE_HEAP_LOAD(tm + 24 | 0, 4, 0) | 0,
  tm_yday: SAFE_HEAP_LOAD(tm + 28 | 0, 4, 0) | 0,
  tm_isdst: SAFE_HEAP_LOAD(tm + 32 | 0, 4, 0) | 0,
  tm_gmtoff: SAFE_HEAP_LOAD(tm + 36 | 0, 4, 0) | 0,
  tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
 };
 var pattern = UTF8ToString(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S",
  "%Ec": "%c",
  "%EC": "%C",
  "%Ex": "%m/%d/%y",
  "%EX": "%H:%M:%S",
  "%Ey": "%y",
  "%EY": "%Y",
  "%Od": "%d",
  "%Oe": "%e",
  "%OH": "%H",
  "%OI": "%I",
  "%Om": "%m",
  "%OM": "%M",
  "%OS": "%S",
  "%Ou": "%u",
  "%OU": "%U",
  "%OV": "%V",
  "%Ow": "%w",
  "%OW": "%W",
  "%Oy": "%y"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);

  case 1:
   return janFourth;

  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);

  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);

  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);

  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);

  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  },
  "%A": function(date) {
   return WEEKDAYS[date.tm_wday];
  },
  "%b": function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  },
  "%B": function(date) {
   return MONTHS[date.tm_mon];
  },
  "%C": function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  },
  "%d": function(date) {
   return leadingNulls(date.tm_mday, 2);
  },
  "%e": function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  },
  "%g": function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  },
  "%G": function(date) {
   return getWeekBasedYear(date);
  },
  "%H": function(date) {
   return leadingNulls(date.tm_hour, 2);
  },
  "%I": function(date) {
   var twelveHour = date.tm_hour;
   if (twelveHour == 0) twelveHour = 12; else if (twelveHour > 12) twelveHour -= 12;
   return leadingNulls(twelveHour, 2);
  },
  "%j": function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  },
  "%m": function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  },
  "%M": function(date) {
   return leadingNulls(date.tm_min, 2);
  },
  "%n": function() {
   return "\n";
  },
  "%p": function(date) {
   if (date.tm_hour >= 0 && date.tm_hour < 12) {
    return "AM";
   } else {
    return "PM";
   }
  },
  "%S": function(date) {
   return leadingNulls(date.tm_sec, 2);
  },
  "%t": function() {
   return "\t";
  },
  "%u": function(date) {
   return date.tm_wday || 7;
  },
  "%U": function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  },
  "%V": function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  },
  "%w": function(date) {
   return date.tm_wday;
  },
  "%W": function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  },
  "%y": function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  },
  "%Y": function(date) {
   return date.tm_year + 1900;
  },
  "%z": function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  },
  "%Z": function(date) {
   return date.tm_zone;
  },
  "%%": function() {
   return "%";
  }
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.includes(rule)) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}

function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}

var FSNode = function(parent, name, mode, rdev) {
 if (!parent) {
  parent = this;
 }
 this.parent = parent;
 this.mount = parent.mount;
 this.mounted = null;
 this.id = FS.nextInode++;
 this.name = name;
 this.mode = mode;
 this.node_ops = {};
 this.stream_ops = {};
 this.rdev = rdev;
};

var readMode = 292 | 73;

var writeMode = 146;

Object.defineProperties(FSNode.prototype, {
 read: {
  get: function() {
   return (this.mode & readMode) === readMode;
  },
  set: function(val) {
   val ? this.mode |= readMode : this.mode &= ~readMode;
  }
 },
 write: {
  get: function() {
   return (this.mode & writeMode) === writeMode;
  },
  set: function(val) {
   val ? this.mode |= writeMode : this.mode &= ~writeMode;
  }
 },
 isFolder: {
  get: function() {
   return FS.isDir(this.mode);
  }
 },
 isDevice: {
  get: function() {
   return FS.isChrdev(this.mode);
  }
 }
});

FS.FSNode = FSNode;

FS.staticInit();

Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_createLazyFile"] = FS.createLazyFile;

Module["FS_createDevice"] = FS.createDevice;

Module["FS_unlink"] = FS.unlink;

embind_init_charCodes();

BindingError = Module["BindingError"] = extendError(Error, "BindingError");

InternalError = Module["InternalError"] = extendError(Error, "InternalError");

init_ClassHandle();

init_RegisteredPointer();

init_embind();

UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");

init_emval();

var ASSERTIONS = true;

function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}

function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}

var decodeBase64 = typeof atob === "function" ? atob : function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
};

function intArrayFromBase64(s) {
 if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
  var buf = Buffer.from(s, "base64");
  return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
 }
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}

function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

var asmLibraryArg = {
 "__cxa_atexit": ___cxa_atexit,
 "__sys_fcntl64": ___sys_fcntl64,
 "__sys_ioctl": ___sys_ioctl,
 "__sys_open": ___sys_open,
 "_embind_register_bigint": __embind_register_bigint,
 "_embind_register_bool": __embind_register_bool,
 "_embind_register_class": __embind_register_class,
 "_embind_register_class_class_function": __embind_register_class_class_function,
 "_embind_register_class_constructor": __embind_register_class_constructor,
 "_embind_register_emval": __embind_register_emval,
 "_embind_register_float": __embind_register_float,
 "_embind_register_integer": __embind_register_integer,
 "_embind_register_memory_view": __embind_register_memory_view,
 "_embind_register_std_string": __embind_register_std_string,
 "_embind_register_std_wstring": __embind_register_std_wstring,
 "_embind_register_void": __embind_register_void,
 "_emval_as": __emval_as,
 "_emval_call_method": __emval_call_method,
 "_emval_decref": __emval_decref,
 "_emval_get_global": __emval_get_global,
 "_emval_get_method_caller": __emval_get_method_caller,
 "_emval_get_property": __emval_get_property,
 "_emval_incref": __emval_incref,
 "_emval_new_array": __emval_new_array,
 "_emval_new_cstring": __emval_new_cstring,
 "_emval_new_object": __emval_new_object,
 "_emval_run_destructors": __emval_run_destructors,
 "_emval_set_property": __emval_set_property,
 "_emval_take_value": __emval_take_value,
 "abort": _abort,
 "alignfault": alignfault,
 "emscripten_asm_const_int": _emscripten_asm_const_int,
 "emscripten_log": _emscripten_log,
 "emscripten_resize_heap": _emscripten_resize_heap,
 "environ_get": _environ_get,
 "environ_sizes_get": _environ_sizes_get,
 "fd_close": _fd_close,
 "fd_read": _fd_read,
 "fd_seek": _fd_seek,
 "fd_write": _fd_write,
 "getTempRet0": getTempRet0,
 "memory": wasmMemory,
 "segfault": segfault,
 "setTempRet0": setTempRet0,
 "strftime_l": _strftime_l
};

var asm = createWasm();

var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

var __ZN7WorldJS3DioEN10emscripten3valEid = Module["__ZN7WorldJS3DioEN10emscripten3valEid"] = createExportWrapper("_ZN7WorldJS3DioEN10emscripten3valEid");

var __ZN7WorldJS7HarvestEN10emscripten3valEid = Module["__ZN7WorldJS7HarvestEN10emscripten3valEid"] = createExportWrapper("_ZN7WorldJS7HarvestEN10emscripten3valEid");

var __ZN7WorldJS10CheapTrickEN10emscripten3valES1_S1_i = Module["__ZN7WorldJS10CheapTrickEN10emscripten3valES1_S1_i"] = createExportWrapper("_ZN7WorldJS10CheapTrickEN10emscripten3valES1_S1_i");

var __ZN7WorldJS3D4CEN10emscripten3valES1_S1_ii = Module["__ZN7WorldJS3D4CEN10emscripten3valES1_S1_ii"] = createExportWrapper("_ZN7WorldJS3D4CEN10emscripten3valES1_S1_ii");

var __ZN7WorldJS9SynthesisEN10emscripten3valERKS1_S3_iiS3_ = Module["__ZN7WorldJS9SynthesisEN10emscripten3valERKS1_S3_iiS3_"] = createExportWrapper("_ZN7WorldJS9SynthesisEN10emscripten3valERKS1_S3_iiS3_");

var __ZN7WorldJS18DisplayInformationEiii = Module["__ZN7WorldJS18DisplayInformationEiii"] = createExportWrapper("_ZN7WorldJS18DisplayInformationEiii");

var __ZN13WorldNativeIO18DisplayInformationEiii = Module["__ZN13WorldNativeIO18DisplayInformationEiii"] = createExportWrapper("_ZN13WorldNativeIO18DisplayInformationEiii");

var __ZN7WorldJS14GetInformationEiii = Module["__ZN7WorldJS14GetInformationEiii"] = createExportWrapper("_ZN7WorldJS14GetInformationEiii");

var __ZN13WorldNativeIO14GetInformationEiii = Module["__ZN13WorldNativeIO14GetInformationEiii"] = createExportWrapper("_ZN13WorldNativeIO14GetInformationEiii");

var __ZN7WorldJS7WavReadERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZN7WorldJS7WavReadERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = createExportWrapper("_ZN7WorldJS7WavReadERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE");

var __ZN13WorldNativeIO10WavRead_JSERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZN13WorldNativeIO10WavRead_JSERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = createExportWrapper("_ZN13WorldNativeIO10WavRead_JSERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE");

var __ZN7WorldJS8WavWriteEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE = Module["__ZN7WorldJS8WavWriteEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"] = createExportWrapper("_ZN7WorldJS8WavWriteEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE");

var __ZN13WorldNativeIO11WavWrite_JSEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE = Module["__ZN13WorldNativeIO11WavWrite_JSEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"] = createExportWrapper("_ZN13WorldNativeIO11WavWrite_JSEN10emscripten3valEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE");

var __ZN7WorldJS21DisplayInformationValEN10emscripten3valE = Module["__ZN7WorldJS21DisplayInformationValEN10emscripten3valE"] = createExportWrapper("_ZN7WorldJS21DisplayInformationValEN10emscripten3valE");

var __ZN14WorldJSWrapper21DisplayInformationValEN10emscripten3valE = Module["__ZN14WorldJSWrapper21DisplayInformationValEN10emscripten3valE"] = createExportWrapper("_ZN14WorldJSWrapper21DisplayInformationValEN10emscripten3valE");

var __ZN7WorldJS17GetInformationValERKN10emscripten3valE = Module["__ZN7WorldJS17GetInformationValERKN10emscripten3valE"] = createExportWrapper("_ZN7WorldJS17GetInformationValERKN10emscripten3valE");

var __ZN14WorldJSWrapper17GetInformationValERKN10emscripten3valE = Module["__ZN14WorldJSWrapper17GetInformationValERKN10emscripten3valE"] = createExportWrapper("_ZN14WorldJSWrapper17GetInformationValERKN10emscripten3valE");

var __ZN7WorldJS9Wav2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZN7WorldJS9Wav2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = createExportWrapper("_ZN7WorldJS9Wav2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE");

var __ZN14WorldJSWrapper7W2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZN14WorldJSWrapper7W2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = createExportWrapper("_ZN14WorldJSWrapper7W2WorldERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE");

var _malloc = Module["_malloc"] = createExportWrapper("malloc");

var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

var _fflush = Module["_fflush"] = createExportWrapper("fflush");

var _free = Module["_free"] = createExportWrapper("free");

var _strlen = Module["_strlen"] = createExportWrapper("strlen");

var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
 return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
 return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
 return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
 return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

var _sbrk = Module["_sbrk"] = createExportWrapper("sbrk");

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = createExportWrapper("emscripten_get_sbrk_ptr");

var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");

var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() {
 abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() {
 abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() {
 abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() {
 abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() {
 abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() {
 abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() {
 abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() {
 abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() {
 abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() {
 abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() {
 abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() {
 abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() {
 abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() {
 abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() {
 abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() {
 abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() {
 abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() {
 abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() {
 abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() {
 abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() {
 abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["addRunDependency"] = addRunDependency;

Module["removeRunDependency"] = removeRunDependency;

if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() {
 abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_createLazyFile"] = FS.createLazyFile;

if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() {
 abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["FS_createDevice"] = FS.createDevice;

Module["FS_unlink"] = FS.unlink;

if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() {
 abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() {
 abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() {
 abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() {
 abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() {
 abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() {
 abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() {
 abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() {
 abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() {
 abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() {
 abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() {
 abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() {
 abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() {
 abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() {
 abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() {
 abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() {
 abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() {
 abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() {
 abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() {
 abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() {
 abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() {
 abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() {
 abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() {
 abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() {
 abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() {
 abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() {
 abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() {
 abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() {
 abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() {
 abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() {
 abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() {
 abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() {
 abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() {
 abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() {
 abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() {
 abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() {
 abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() {
 abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() {
 abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() {
 abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() {
 abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() {
 abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() {
 abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() {
 abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() {
 abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() {
 abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() {
 abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() {
 abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() {
 abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() {
 abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() {
 abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() {
 abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() {
 abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() {
 abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() {
 abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() {
 abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() {
 abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() {
 abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() {
 abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() {
 abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() {
 abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() {
 abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() {
 abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() {
 abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() {
 abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() {
 abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() {
 abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() {
 abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() {
 abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() {
 abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() {
 abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() {
 abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() {
 abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() {
 abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() {
 abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() {
 abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() {
 abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() {
 abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() {
 abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() {
 abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() {
 abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() {
 abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() {
 abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() {
 abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() {
 abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() {
 abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() {
 abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() {
 abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() {
 abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() {
 abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() {
 abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() {
 abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() {
 abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() {
 abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() {
 abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() {
 abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() {
 abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() {
 abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() {
 abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() {
 abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() {
 abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() {
 abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() {
 abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() {
 abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() {
 abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() {
 abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() {
 abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() {
 abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() {
 abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() {
 abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() {
 abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() {
 abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() {
 abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() {
 abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() {
 abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() {
 abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() {
 abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() {
 abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() {
 abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() {
 abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() {
 abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() {
 abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() {
 abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() {
 abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() {
 abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() {
 abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() {
 abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() {
 abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() {
 abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() {
 abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() {
 abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() {
 abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() {
 abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() {
 abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() {
 abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() {
 abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() {
 abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() {
 abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() {
 abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() {
 abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() {
 abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() {
 abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() {
 abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() {
 abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() {
 abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() {
 abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() {
 abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() {
 abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() {
 abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() {
 abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() {
 abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() {
 abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() {
 abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() {
 abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() {
 abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() {
 abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() {
 abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() {
 abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() {
 abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() {
 abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() {
 abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() {
 abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() {
 abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() {
 abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() {
 abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() {
 abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() {
 abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() {
 abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() {
 abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() {
 abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() {
 abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() {
 abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() {
 abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() {
 abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() {
 abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() {
 abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() {
 abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() {
 abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() {
 abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() {
 abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() {
 abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() {
 abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() {
 abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() {
 abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() {
 abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() {
 abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() {
 abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() {
 abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() {
 abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() {
 abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() {
 abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() {
 abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() {
 abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() {
 abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() {
 abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() {
 abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() {
 abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() {
 abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() {
 abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() {
 abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() {
 abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() {
 abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() {
 abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() {
 abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() {
 abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() {
 abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() {
 abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() {
 abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() {
 abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() {
 abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() {
 abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() {
 abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() {
 abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() {
 abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() {
 abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() {
 abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() {
 abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() {
 abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() {
 abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() {
 abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() {
 abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() {
 abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() {
 abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() {
 abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() {
 abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() {
 abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() {
 abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() {
 abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() {
 abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() {
 abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() {
 abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() {
 abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() {
 abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() {
 abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() {
 abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() {
 abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() {
 abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() {
 abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() {
 abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() {
 abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() {
 abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() {
 abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() {
 abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() {
 abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() {
 abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() {
 abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() {
 abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() {
 abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() {
 abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() {
 abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() {
 abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() {
 abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() {
 abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() {
 abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() {
 abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() {
 abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() {
 abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() {
 abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() {
 abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() {
 abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["writeStackCookie"] = writeStackCookie;

Module["checkStackCookie"] = checkStackCookie;

if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", {
 configurable: true,
 get: function() {
  abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
 }
});

if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", {
 configurable: true,
 get: function() {
  abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
 }
});

function runMemoryInitializer() {
 if (!memoryInitializer) return;
 if (!isDataURI(memoryInitializer)) {
  memoryInitializer = locateFile(memoryInitializer);
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = readBinary(memoryInitializer);
  HEAPU8.set(data, 1024);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   for (var i = 0; i < data.length; i++) {
    assert(SAFE_HEAP_LOAD(1024 + i, 1, 1) === 0, "area for memory initializer should not have been touched before it's loaded");
   }
   HEAPU8.set(data, 1024);
   if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
   removeRunDependency("memory initializer");
  };
  var doBrowserLoad = function() {
   readAsync(memoryInitializer, applyMemoryInitializer, function() {
    var e = new Error("could not load memory initializer " + memoryInitializer);
    throw e;
   });
  };
  if (Module["memoryInitializerRequest"]) {
   var useRequest = function() {
    var request = Module["memoryInitializerRequest"];
    var response = request.response;
    if (request.status !== 200 && request.status !== 0) {
     console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
     doBrowserLoad();
     return;
    }
    applyMemoryInitializer(response);
   };
   if (Module["memoryInitializerRequest"].response) {
    setTimeout(useRequest, 0);
   } else {
    Module["memoryInitializerRequest"].addEventListener("load", useRequest);
   }
  } else {
   doBrowserLoad();
  }
 }
}

var calledRun;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function stackCheckInit() {
 _emscripten_stack_init();
 writeStackCookie();
}

function run(args) {
 args = args || arguments_;
 if (runDependencies > 0) {
  return;
 }
 stackCheckInit();
 preRun();
 if (runDependencies > 0) {
  return;
 }
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  Module["calledRun"] = true;
  if (ABORT) return;
  initRuntime();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
 checkStackCookie();
}

Module["run"] = run;

function checkUnflushedContent() {
 var oldOut = out;
 var oldErr = err;
 var has = false;
 out = err = function(x) {
  has = true;
 };
 try {
  var flush = Module["_fflush"];
  if (flush) flush(0);
  [ "stdout", "stderr" ].forEach(function(name) {
   var info = FS.analyzePath("/dev/" + name);
   if (!info) return;
   var stream = info.object;
   var rdev = stream.rdev;
   var tty = TTY.ttys[rdev];
   if (tty && tty.output && tty.output.length) {
    has = true;
   }
  });
 } catch (e) {}
 out = oldOut;
 err = oldErr;
 if (has) {
  warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
 }
}

function exit(status, implicit) {
 EXITSTATUS = status;
 checkUnflushedContent();
 if (keepRuntimeAlive()) {
  if (!implicit) {
   var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
   err(msg);
  }
 } else {
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
  ABORT = true;
 }
 quit_(status, new ExitStatus(status));
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

run();
